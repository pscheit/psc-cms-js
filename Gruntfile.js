/*global module:false*/
module.exports = function(grunt) {
  
  grunt.loadNpmTasks('grunt-requirejs');
  
  grunt.registerHelper('mapToUrl', function(files, baseUrl) {
    return grunt.utils._.map(
      grunt.file.expandFiles(files),
      function (file) {
        return baseUrl+file;
      }
    );
  });  

  // Project configuration.
  grunt.initConfig({
    pkg: '<json:package.json>',
    meta: {
      banner: '/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - ' +
        '<%= grunt.template.today("yyyy-mm-dd") %>\n' +
        '<%= pkg.homepage ? "* " + pkg.homepage + "\n" : "" %>' +
        '* Copyright (c) <%= grunt.template.today("yyyy") %> <%= pkg.author.name %>;' +
        ' Licensed <%= _.pluck(pkg.licenses, "type").join(", ") %> */'
    },
/*
 *
 <script src="/vendor/qunit/qunit-1.10.0.js"></script>
 <script src="/vendor/joose/all.js"></script>
 <script src="/vendor/joose/x-namespace-depended.js"></script>
 <script src="/lib/psc-cms.js"></script>
 <script src="/vendor/webforge/assert.js"></script>

 *
 **/
    requirejs: {
      dir: 'build',
      appDir: 'lib',
      baseUrl: 'lib',
      paths: {
        jquery    : 'vendor/jquery',
        backbone  : 'vendor/backbone'
      },
      pragmas: {
        doExclude: true
      },
      skipModuleInsertion: false,
      optimizeAllPluginResources: true,
      findNestedDependencies: true
    },

    lint: {
      files: ['grunt.js', 'lib/**/*.js']
    },
    server: {
      port: 8000,
      base: '.'
    },
    qunit: {
      all: grunt.helper('mapToUrl', [
          'tests/**/*.html'
        ],
        'http://localhost:8000/'
      )
    },
    'update-tests': {
      src: ['tests/**/*Test.js'],
    },
    concat: {
      dist: {
        src: ['<banner:meta.banner>', '<file_strip_banner:lib/<%= pkg.name %>.js>', 'lib/**/*.js'],
        dest: 'dist/<%= pkg.name %>-<%= pkg.version %>.js'
      }
    },
    min: {
      dist: {
        src: ['<banner:meta.banner>', '<config:concat.dist.dest>'],
        dest: 'dist/<%= pkg.name %>-<%= pkg.version %>.min.js'
      }
    },
    watch: {
      files: '<config:lint.files>',
      tasks: 'lint qunit'
    },
    jshint: {
      options: {
        curly: false, /* dont blame for missing curlies around ifs */
        eqeqeq: true,
        immed: true,
        latedef: true,
        newcap: true,
        noarg: true,
        sub: true,
        undef: true,
        boss: true,
        eqnull: true,
        browser: true,
        jquery: true
      },
      globals: {
        $: true,
        Joose: true, use: true,

        Psc: true,
        tiptoi: true,
        CoMun: true,
        QUnit: true
      }
    },
    uglify: {}
  });

  // Default task.
  grunt.registerTask('default', 'lint server qunit concat min');
  grunt.registerTask('test', 'server qunit');

  grunt.registerMultiTask("update-tests", "updates the index for test files", function() {
    var filepaths = grunt.file.expandFiles(this.file.src);
    
    // all files are relative to the grunt.js file
    grunt.log.writeln("found "+filepaths.length+" testfiles.");
    grunt.file.write(
      "tests/all.js",
      
      "/* This file was auto-generated by grunt update-tests-task on "+grunt.template.today("yyyy-mm-dd hh:mm")+" */\n"+
      "define("+JSON.stringify(
                  grunt.utils._.map(filepaths, function (path) { return '/'+path; }),
                undefined,
                2
               )+
      ");\n"
    );
    
    grunt.log.ok();
  });
  
};

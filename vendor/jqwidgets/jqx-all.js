/*
jQWidgets v2.5.5 (2012-Nov-28)
Copyright (c) 2011-2012 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.jqx = $.jqx || {}

    $.jqx.define = function (namespace, classname, baseclass) {
        namespace[classname] = function () {
            if (this.baseType) {
                this.base = new namespace[this.baseType]();
                this.base.defineInstance();
            }
            this.defineInstance();
        }

        namespace[classname].prototype.defineInstance = function () { };
        namespace[classname].prototype.base = null;
        namespace[classname].prototype.baseType = undefined;

        if (baseclass && namespace[baseclass])
            namespace[classname].prototype.baseType = baseclass;
    }

    // method call
    $.jqx.invoke = function (object, args) {
        if (args.length == 0)
            return;

        var method = typeof (args) == Array || args.length > 0 ? args[0] : args;
        var methodArg = typeof (args) == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : $({}).toArray();

        while (object[method] == undefined && object.base != null)
            object = object.base;

        if (object[method] != undefined && $.isFunction(object[method]))
            return object[method].apply(object, methodArg);

        if (typeof method == 'string') {
            var methodLowerCase = method.toLowerCase();
            return object[methodLowerCase].apply(object, methodArg);
        }

        return;
    }

    $.jqx.hasFunction = function (object, args) {
        if (args.length == 0)
            return false;

        if (object == undefined)
            return false;

        var method = typeof (args) == Array || args.length > 0 ? args[0] : args;
        var methodArg = typeof (args) == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : {};

        while (object[method] == undefined && object.base != null)
            object = object.base;

        if (object[method] && $.isFunction(object[method]))
            return true;

        if (typeof method == 'string') {
            var methodLowerCase = method.toLowerCase();
            if (object[methodLowerCase] && $.isFunction(object[methodLowerCase]))
                return true;
        }

        return false;
    }

    $.jqx.isPropertySetter = function (args) {
        if (args.length == 2)
            return true;

        return args.length == 1 && typeof (args[0]) == 'object';
    }

    $.jqx.set = function (object, args) {
        if (args.length == 1 && typeof (args[0]) == 'object') {
            $.each(args[0], function (key, value) {
                var obj = object;
                while (obj[key] == undefined && obj.base != null)
                    obj = obj.base;

                if (obj[key] != undefined || obj[key] == null) {
                    $.jqx.setvalueraiseevent(obj, key, value);
                }
            });
        }
        else if (args.length == 2) {
            while (object[args[0]] == undefined && object.base)
                object = object.base;

            if (object[args[0]] != undefined || object[args[0]] == null)
                $.jqx.setvalueraiseevent(object, args[0], args[1]);
        }
    }

    $.jqx.setvalueraiseevent = function (object, key, value) {
        var oldVal = object[key];

        object[key] = value;

        if (!object.isInitialized)
            return;

        if (object.propertyChangedHandler != undefined)
            object.propertyChangedHandler(object, key, oldVal, value);

        if (object.propertyChangeMap != undefined && object.propertyChangeMap[key] != undefined)
            object.propertyChangeMap[key](object, key, oldVal, value);
    };

    $.jqx.get = function (object, args) {
        if (args == undefined || args == null)
            return undefined;

        if (object[args] != undefined)
            return object[args];

        if (args.length != 1)
            return undefined;

        while (object[args[0]] == undefined && object.base)
            object = object.base;

        if (object[args[0]] != undefined)
            return object[args[0]];
    }

    $.jqx.jqxWidgetProxy = function (controlName, element, args) {
        var host = $(element);
        var vars = $.data(element, controlName);
        if (vars == undefined) {
            return undefined;
        }

        var obj = vars.instance;

        if ($.jqx.hasFunction(obj, args))
            return $.jqx.invoke(obj, args);

        if ($.jqx.isPropertySetter(args)) {
            $.jqx.set(obj, args);
            return undefined;

        } else {
            if (typeof (args) == 'object' && args.length == 0)
                return;
            else if (typeof (args) == 'object' && args.length > 0)
                return $.jqx.get(obj, args[0]);
            else if (typeof (args) == 'string')
                return $.jqx.get(obj, args);
        }

        throw "jqxCore: Property or method does not exist.";
        return undefined;
    }

    $.jqx.jqxWidget = function (name, base, params) {
        var WinJS = false;
        try {
            jqxArgs = Array.prototype.slice.call(params, 0);
        }
        catch (e) {
            jqxArgs = '';
        }

        try
        {
            WinJS = window.MSApp != undefined;
        }
        catch (e) {
        }

        var controlName = name;
          
        var baseControl = '';
        if (base)
            baseControl = '_' + base;
        $.jqx.define($.jqx, '_' + controlName, baseControl);

        $.fn[controlName] = function () {
            var args = Array.prototype.slice.call(arguments, 0);
            var returnVal = null;

            if (args.length == 0 || (args.length == 1 && typeof (args[0]) == 'object')) {
                return this.each(function () {
                    var host = $(this);
                    var element = this; // element == this == host[0]
                    var vars = $.data(element, controlName);
                    if (vars == null) {
                        vars = {};
                        vars.element = element;
                        vars.host = host;
                        vars.instance = new $.jqx['_' + controlName]();
                        if (element.id == "") {
                            element.id = $.jqx.utilities.createId();
                        }
                        vars.instance.get = vars.instance.set = vars.instance.call = function () {
                            var args = Array.prototype.slice.call(arguments, 0);
                            return $.jqx.jqxWidgetProxy(controlName, element, args);
                        }

                        $.data(element, controlName, vars);
                        $.data(element, 'jqxWidget', vars.instance);

                        var inits = new Array();
                        var instance = vars.instance;
                        while (instance) {
                            instance.isInitialized = false;
                            inits.push(instance);
                            //instance.theme = '';
                            instance = instance.base;
                        }
                        inits.reverse();
                        inits[0].theme = '';

                        $.jqx.jqxWidgetProxy(controlName, this, args);

                        for (var i in inits) {
                            instance = inits[i];
                            if (i == 0) {
                                instance.host = host;
                                instance.element = element;
                                instance.WinJS = WinJS;
                            }
                            if (instance != undefined) {
                                if (instance.createInstance != null) {
                                    if (WinJS) {
                                        MSApp.execUnsafeLocalFunction(function () {
                                            instance.createInstance(args);
                                        });
                                    }
                                    else {
                                        instance.createInstance(args);
                                    }
                                }
                            }
                        }

                        for (var i in inits) {
                            if (inits[i] != undefined) {
                                inits[i].isInitialized = true;
                            } 
                        }

                        if (WinJS) {
                            MSApp.execUnsafeLocalFunction(function () {
                                vars.instance.refresh(true);
                            });
                        }
                        else {
                            vars.instance.refresh(true);
                        }

                        returnVal = this;
                    }
                    else {
                        $.jqx.jqxWidgetProxy(controlName, this, args);
                    }
                }); // each
            }
            else {
                this.each(function () {
                    var result = $.jqx.jqxWidgetProxy(controlName, this, args);

                    if (returnVal == null)
                        returnVal = result;
                }); // each
            }

            return returnVal;
        }

        try {
            $.extend($.jqx['_' + controlName].prototype, Array.prototype.slice.call(params, 0)[0]);
        }
        catch (e) {
        }

        $.extend($.jqx['_' + controlName].prototype, {
            toThemeProperty: function (propertyName, override) {
                if (this.theme == '')
                    return propertyName;

                if (override != null && override) {
                    return propertyName + '-' + this.theme;
                }

                return propertyName + ' ' + propertyName + '-' + this.theme;
            }
        });

        $.jqx['_' + controlName].prototype.refresh = function () {
            if (this.base)
                this.base.refresh();
        }
        $.jqx['_' + controlName].prototype.createInstance = function () {
        }
        $.jqx['_' + controlName].prototype.propertyChangeMap = {};

        $.jqx['_' + controlName].prototype.addHandler = function (source, event, func, data) {
            switch (event) {
                case 'mousewheel':
                    if (window.addEventListener) {
                        if ($.browser.mozilla) {
                            source[0].addEventListener('DOMMouseScroll', func, false);
                        }
                        else {
                            source[0].addEventListener('mousewheel', func, false);
                        }
                        return false;
                    }
                    break;
                case 'mousemove':
                    if (window.addEventListener && !data) {
                        source[0].addEventListener('mousemove', func, false);
                        return false;
                    }
                    break;
            }

            if (data == undefined || data == null) {
                source.bind(event, func);
            }
            else {
                source.bind(event, data, func);
            }
        };

        $.jqx['_' + controlName].prototype.removeHandler = function (source, event, func) {
            switch (event) {
                case 'mousewheel':
                    if (window.removeEventListener) {
                        if ($.browser.mozilla) {
                            source[0].removeEventListener('DOMMouseScroll', func, false);
                        }
                        else {
                            source[0].removeEventListener('mousewheel', func, false);
                        }
                        return false;
                    }
                    break;
                case 'mousemove':
                    if ($.browser.msie && $.browser.version >= 9) {
                        if (window.removeEventListener) {
                            source[0].removeEventListener('mousemove', func, false);
                        }
                    }
                    break;
            }

            if (event == undefined) {
                source.unbind();
                return;
            }

            if (func == undefined) {
                source.unbind(event);
            }
            else source.unbind(event, func);
        };
    } // jqxWidget

    // jqxUtilities
    $.jqx.utilities = $.jqx.utilities || {};
    $.extend($.jqx.utilities,
    {
        createId: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return "jqxWidget" + S4() + S4() + S4();
        },

        setTheme: function (oldTheme, theme, element) {
            if (typeof element === 'undefined') {
                return;
            }
            var classNames = element[0].className.split(' '),
                oldClasses = [], newClasses = [],
                children = element.children();
            for (var i = 0; i < classNames.length; i += 1) {
                if (classNames[i].indexOf(oldTheme) >= 0) {
                    if (oldTheme.length > 0) {
                        oldClasses.push(classNames[i]);
                        newClasses.push(classNames[i].replace(oldTheme, theme));
                    }
                    else {
                        newClasses.push(classNames[i] + '-' + theme);
                    }
                }
            }
            this._removeOldClasses(oldClasses, element);
            this._addNewClasses(newClasses, element);
            for (var i = 0; i < children.length; i += 1) {
                this.setTheme(oldTheme, theme, $(children[i]));
            }
        },

        _removeOldClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.removeClass(classes[i]);
            }
        },

        _addNewClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.addClass(classes[i]);
            }
        },

        getOffset: function(el)
        {
            var left = $.jqx.mobile.getLeftPos(el[0]);
            var top = $.jqx.mobile.getTopPos(el[0]);
            return { top: top, left: left };
        },

        hasTransform: function (el) {
            var transform = "";
            transform = el.css('transform');

            if (transform == "" || transform == 'none') {
                transform = el.parents().css('transform');
                if (transform == "" || transform == 'none') {
                    var browserInfo = $.jqx.utilities.getBrowser();
                    if (browserInfo.browser == 'msie') {
                        transform = el.css('-ms-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-ms-transform');
                        }
                    }
                    else if (browserInfo.browser == 'chrome') {
                        transform = el.css('-webkit-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-webkit-transform');
                        }
                    }
                    else if (browserInfo.browser == 'opera') {
                        transform = el.css('-o-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-o-transform');
                        }
                    }
                    else if (browserInfo.browser == 'mozilla') {
                        transform = el.css('-moz-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-moz-transform');
                        }
                    }
                } else {
                    return transform != "" && transform != 'none';
                }
            }
            if (transform == "" || transform == 'none') {
                transform = $(document.body).css('transform');
            }
            return transform != "" && transform != 'none' && transform != null;
        },

        getBrowser: function () {
            var ua = navigator.userAgent.toLowerCase();

            var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
		        /(webkit)[ \/]([\w.]+)/.exec(ua) ||
		        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
		        /(msie) ([\w.]+)/.exec(ua) ||
		        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
		        [];

            return {
                browser: match[1] || "",
                version: match[2] || "0"
            };
        }
    });

    $.jqx.mobile = $.jqx.mobile || {};

    $.extend($.jqx.mobile,
    {
        _touchListener: function (e, me) {
            var createTouchEvent = function (name, e) {
                var event = document.createEvent('MouseEvents');

                event.initMouseEvent(
                    name,
                    e.bubbles,
                    e.cancelable,
                    e.view,
                    e.detail,
                    e.screenX,
                    e.screenY,
                    e.clientX,
                    e.clientY,
                    e.ctrlKey,
                    e.altKey,
                    e.shiftKey,
                    e.metaKey,
                    e.button,
                    e.relatedTarget
                );
                event._pageX = e.pageX;
                event._pageY = e.pageY;

                return event;
            }

            var eventMap = { 'mousedown': 'touchstart', 'mouseup': 'touchend', 'mousemove': 'touchmove' };
            var event = createTouchEvent(eventMap[e.type], e);
            e.target.dispatchEvent(event);

            var fn = e.target['on' + eventMap[e.type]];
            if (typeof fn === 'function') fn(e);
        },

        setMobileSimulator: function (element, value) {
            if (this.isTouchDevice()) {
                return;
            }

            this.simulatetouches = true;
            if (value == false) {
                this.simulatetouches = false;
            }

            var eventMap = { 'mousedown': 'touchstart', 'mouseup': 'touchend', 'mousemove': 'touchmove' };

            var self = this;
            if (window.addEventListener) {
                var subscribeToEvents = function () {
                    for (var key in eventMap) {
                        if (element.addEventListener) {
                            element.removeEventListener(key, self._touchListener);
                            element.addEventListener(key, self._touchListener, false);
                        }

                        //  document.removeEventListener(key, self._touchListener);
                        //  document.addEventListener(key, self._touchListener, false);
                    }
                }

                if ($.browser.msie) {
                    subscribeToEvents();
                }
                else {
                    window.addEventListener('load', function () {
                        subscribeToEvents();
                    }, false);
                }
            }
        },

        isTouchDevice: function () {
            if (this.touchDevice != undefined)
                return this.touchDevice;

            var txt = "Browser CodeName: " + navigator.appCodeName + "";
            txt += "Browser Name: " + navigator.appName + "";
            txt += "Browser Version: " + navigator.appVersion + "";
        //    txt += "Cookies Enabled: " + navigator.cookieEnabled + "";
            txt += "Platform: " + navigator.platform + "";
            txt += "User-agent header: " + navigator.userAgent + "";

            if (txt.indexOf('Android') != -1)
                return true;

            if (txt.indexOf('IEMobile') != -1)
                return true;

            if (txt.indexOf('Windows Phone OS') != -1)
                return true;

            if (txt.indexOf('Windows Phone 6.5') != -1)
                return true;

            if (txt.indexOf('BlackBerry') != -1 && txt.indexOf('Mobile Safari') != -1)
                return true;

            if (txt.indexOf('ipod') != -1)
                return true;

            if (txt.indexOf('nokia') != -1 || txt.indexOf('Nokia') != -1)
                return true;

            if (txt.indexOf('Chrome/17') != -1)
                return false;

            if (txt.indexOf('Opera') != -1 && txt.indexOf('Platform: Win') != -1) {
                return false;
            }

            // check for IPad, IPhone, IE and Chrome
            try {
                if (this.touchDevice != undefined)
                    return this.touchDevice;

                this.touchDevice = true;
                document.createEvent("TouchEvent");
                return true;
            } catch (e) {
                this.touchDevice = false;
                return false;
            }
        },

        getLeftPos: function (inputObj) {
            var returnValue = inputObj.offsetLeft;
            while ((inputObj = inputObj.offsetParent) != null) {
                if (inputObj.tagName != 'HTML') {
                    returnValue += inputObj.offsetLeft;
                    if (document.all) returnValue += inputObj.clientLeft;
                }
            }
            return returnValue;
        },

        getTopPos: function (inputObj) {
            var returnValue = inputObj.offsetTop;
            while ((inputObj = inputObj.offsetParent) != null) {
                if (inputObj.tagName != 'HTML') {
                    returnValue += (inputObj.offsetTop - inputObj.scrollTop);
                    if (document.all) returnValue += inputObj.clientTop;
                }
            }

            if (this.isSafariMobileBrowser()) {
                if (this.isSafari4MobileBrowser() && this.isIPadSafariMobileBrowser()) {
                    return returnValue;
                }

                returnValue = returnValue + $(window).scrollTop();
            }

            return returnValue;
        },

        isChromeMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('android') != -1;
            return result;
        },

        isOperaMiniMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('opera mini') != -1 || agent.indexOf('opera mobi') != -1;
            return result;
        },

        isOperaMiniBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('opera mini') != -1;
            return result;
        },

        isNewSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            result = result && (agent.indexOf('version/5') != -1);
            return result;
        },

        isSafari4MobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            result = result && (agent.indexOf('version/4') != -1);
            return result;
        },

        isSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            return result;
        },

        isIPhoneSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('iphone') != -1;
            return result;
        },

        isIPadSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1;
            return result;
        },

        isMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('android') != -1;
            return result;
        },

        // Get the touch points from this event
        getTouches: function (e) {
            if (e.originalEvent) {
                if (e.originalEvent.touches && e.originalEvent.touches.length) {
                    return e.originalEvent.touches;
                } else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
                    return e.originalEvent.changedTouches;
                }
            }

            if (!e.touches) {
                e.touches = new Array();
                e.touches[0] = e.originalEvent;
            }

            return e.touches;
        },

        // Dispatches a fake mouse event from a touch event
        dispatchMouseEvent: function (name, touch, target) {
            if (this.simulatetouches)
                return;

            var e = document.createEvent('MouseEvent');
            e.initMouseEvent(name, true, true, touch.view, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
            if (target != null) {
                target.dispatchEvent(e);
            }
        },

        // Find the root node of this target
        getRootNode: function (target) {
            while (target.nodeType !== 1) {
                target = target.parentNode;
            }
            return target;
        },

        setTouchScroll: function (enable, key) {
            if (!this.enableScrolling) this.enableScrolling = [];
            this.enableScrolling[key] = enable;
        },

        touchScroll: function (element, scrollHeight, callback, key) {
            if (element == null)
                return;

            var me = this;
            var scrollY = 0;
            var touchY = 0;
            var movedY = 0;
            var scrollX = 0;
            var touchX = 0;
            var movedX = 0;
            if (!this.scrolling) this.scrolling = [];
            this.scrolling[key] = false;
            var moved = false;
            var $element = $(element);
            var touchTags = ['select', 'input', 'textarea'];
            var touchStart = 0;
            var touchEnd = 0;
            if (!this.enableScrolling) this.enableScrolling = [];
            this.enableScrolling[key] = true;
            var key = key;

            $element.bind('touchstart.touchScroll', function (event) {
                if (!me.enableScrolling[key])
                    return true;

                // Allow certain HTML tags to receive touch events
                if ($.inArray(event.target.tagName.toLowerCase(), touchTags) !== -1) {
                    return;
                }

                var touches = me.getTouches(event);
                var touch = touches[0];
                if (touches.length == 1) {
                    me.dispatchMouseEvent('mousedown', touch, me.getRootNode(touch.target));
                }

                me.scrolling[key] = true;
                moved = false;
                touchY = touch.pageY;
                touchX = touch.pageX;
                if (me.simulatetouches) {
                    touchY = touch._pageY;
                    touchX = touch._pageX;
                }

                scrollY = 0;
                scrollX = 0;
                return true;
            });

            $element.bind('touchmove.touchScroll', function (event) {
                if (!me.enableScrolling[key])
                    return true;

                if (!me.scrolling[key]) {
                    return true;
                }
                var touches = me.getTouches(event);
                if (touches.length > 1) {
                    return true;
                }

                var pageY = touches[0].pageY;
                var pageX = touches[0].pageX;

                if (me.simulatetouches) {
                    pageY = touches[0]._pageY;
                    pageX = touches[0]._pageX;
                }

                var dy = pageY - touchY;
                var dx = pageX - touchX;
                touchEnd = pageY;
                touchHorizontalEnd = pageX;
                movedY = dy - scrollY;
                movedX = dx - scrollX;
                moved = true;
                scrollY = dy;
                scrollX = dx;
                callback(-movedX * 3, -movedY * 3, dx, dy, event);
                event.preventDefault();
                event.stopPropagation();

                return false;
            });

            if (this.simulatetouches) {
                $(window).bind('mouseup.touchScroll', function (event) {
                    me.scrolling[key] = false;
                });

                if (window.frameElement) {
                    if (window.top != null) {
                        var eventHandle = function (event) {
                            me.scrolling[key] = false;
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.removeEventListener('mouseup', eventHandle, false);
                            window.top.document.addEventListener('mouseup', eventHandle, false);
                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }
                }

                $(document).bind('touchend', function (event) {
                    if (!me.scrolling[key]) {
                        return true;
                    }
                    me.scrolling[key] = false;
                    var touch = me.getTouches(event)[0],
						target = me.getRootNode(touch.target);

                    // Dispatch fake mouse up and click events if this touch event did not move
                    me.dispatchMouseEvent('mouseup', touch, target);
                    me.dispatchMouseEvent('click', touch, target);
                });
            }

            $element.bind('touchend.touchScroll touchcancel.touchScroll', function (event) {
                if (!me.enableScrolling[key])
                    return true;

                var touch = me.getTouches(event)[0];
                if (!me.scrolling[key]) {
                    return true;
                }
                me.scrolling[key] = false;
                if (moved) {
                    me.dispatchMouseEvent('mouseup', touch, target);
                } else {
                    var touch = me.getTouches(event)[0],
						target = me.getRootNode(touch.target);

                    //        event.preventDefault();
                    //         event.stopPropagation();
                    // Dispatch fake mouse up and click events if this touch event did not move
                    me.dispatchMouseEvent('mouseup', touch, target);
                    me.dispatchMouseEvent('click', touch, target);
                }
            });
        }
    });

    $.jqx.cookie = $.jqx.cookie || {};
    $.extend($.jqx.cookie,
    {
        cookie: function (key, value, options) {
            // set cookie.
            if (arguments.length > 1 && String(value) !== "[object Object]") {
                options = jQuery.extend({}, options);

                if (value === null || value === undefined) {
                    options.expires = -1;
                }

                if (typeof options.expires === 'number') {
                    var days = options.expires, t = options.expires = new Date();
                    t.setDate(t.getDate() + days);
                }

                value = String(value);

                return (document.cookie = [
                encodeURIComponent(key), '=',
                options.raw ? value : encodeURIComponent(value),
                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path ? '; path=' + options.path : '',
                options.domain ? '; domain=' + options.domain : '',
                options.secure ? '; secure' : ''
        ].join(''));
            }
            // get cookie...
            options = value || {};
            var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
            return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
        }
    });

    // stringutilities
    $.jqx.string = $.jqx.string || {};
    $.extend($.jqx.string,
    {
        contains: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.indexOf(value) != -1;
        },

        containsIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.toUpperCase().indexOf(value.toUpperCase()) != -1;
        },

        equals: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            if (value.length == fullString.length) {
                return fullString.slice(0, value.length) == value;
            }

            return false;
        },

        equalsIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            if (value.length == fullString.length) {
                return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();
            }

            return false;
        },

        startsWith: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.slice(0, value.length) == value;
        },

        startsWithIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();
        },

        normalize: function (fullString) {
            if (fullString.charCodeAt(fullString.length - 1) == 65279) {
                fullString = fullString.substring(0, fullString.length - 1);
            }

            return fullString;
        },

        endsWith: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);
            return fullString.slice(-value.length) == value;
        },

        endsWithIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            return fullString.toUpperCase().slice(-value.length) == value.toUpperCase();
        }
    });

    $.extend(jQuery.easing, {
        easeOutBack: function (x, t, b, c, d, s) {
            if (s == undefined) s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        },
        easeInQuad: function (x, t, b, c, d) {
            return c * (t /= d) * t + b;
        },
        easeInOutCirc: function (x, t, b, c, d) {
            if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        },
        easeInOutSine: function (x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        },
        easeInCubic: function (x, t, b, c, d) {
            return c * (t /= d) * t * t + b;
        },
        easeOutCubic: function (x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b;
        },
        easeInOutCubic: function (x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t + 2) + b;
        },
        easeInSine: function (x, t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        },
        easeOutSine: function (x, t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b;
        },
        easeInOutSine: function (x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        }
    });
})(jQuery);
(function ($) {
    $.fn.extend({
        ischildof: function (filter_string) {
            var parents = $(this).parents().get();

            for (j = 0; j < parents.length; j++) {
                if ($(parents[j]).is(filter_string)) {
                    return true;
                }
            }

            return false;
        }
    });
})(jQuery);
﻿(function ($) {
    $.jqx.dataAdapter = function (source, options) {
        this._source = source;
        this._options = options || {};
        this.records = new Array();
        this._downloadComplete = new Array();
        this._bindingUpdate = new Array();
        if (this._options.autoBind == true) {
            this.dataBind();
        }
        if (source != undefined && source.localdata != null && typeof source.localdata == "function") {
            var localData = source.localdata();
            if (localData != null) {
                source._localdata = source.localdata;
                var me = this;
                if (source._localdata.subscribe) {
                    me._oldlocaldata = [];
                    source._localdata.subscribe(function (value) {
                        var deepClone = function (objThing) {
                            if (jQuery.isArray(objThing)) {
                                return jQuery.makeArray(deepClone($(objThing)));
                            }
                            return jQuery.extend(true, {}, objThing);
                        };
                        me._oldlocaldata = deepClone(value);
                    }, source._localdata, 'beforeChange');

                    source._localdata.subscribe(function (value) {
                        if (me.suspendKO == false || me.suspendKO == undefined) {
                            var changeType = "";
                            me._oldrecords = me.records;
                            if (me._oldlocaldata.length == 0) {
                                source.localdata = source._localdata();
                            }

                            if (me._oldlocaldata.length == 0) {
                                changeType = 'change';
                            }
                            else {
                                if (me._oldlocaldata.length == value.length) {
                                    changeType = 'update';
                                }
                                if (me._oldlocaldata.length > value.length) {
                                    changeType = 'remove';
                                }
                                if (me._oldlocaldata.length < value.length) {
                                    changeType = 'add';
                                }
                            }
                            me.dataBind(null, changeType);
                        }
                    }, source._localdata, 'change');

                    me._knockoutdatasource = true;
                }

                source.localdata = localData;
            }
        }
    }

    $.jqx.dataAdapter.prototype = {
        getrecords: function () {
            return this.records;
        },

        beginUpdate: function () {
            this.isUpdating = true;
        },

        endUpdate: function (refresh) {
            this.isUpdating = false;
            if (refresh != false) {
                this.dataBind(null, "");
            }
        },

        dataBind: function (objectuniqueId, collectionChanged) {
            if (this.isUpdating == true)
                return;

            var source = this._source;
            if (!source)
                return;

            if (source.dataFields != null) {
                source.datafields = source.dataFields;
            }

            if (source.recordstartindex == undefined) {
                source.recordstartindex = 0;
            }
            if (source.recordendindex == undefined) {
                source.recordendindex = 0;
            }
            if (source.loadallrecords == undefined) {
                source.loadallrecords = true;
            }

            if (source.sort != undefined) {
                this.sort = source.sort;
            }

            if (source.filter != undefined) {
                this.filter = source.filter;
            }
            else this.filter = null;

            if (source.sortcolumn != undefined) {
                this.sortcolumn = source.sortcolumn;
            }

            if (source.sortdirection != undefined) {
                this.sortdirection = source.sortdirection;
            }

            if (source.sortcomparer != undefined) {
                this.sortcomparer = source.sortcomparer;
            }

            this.records = new Array();
            var options = this._options || {};
            this.virtualmode = options.virtualmode != undefined ? options.virtualmode : false;
            this.totalrecords = options.totalrecords != undefined ? options.totalrecords : 0;
            this.pageable = options.pageable != undefined ? options.pageable : false;
            this.pagesize = options.pagesize != undefined ? options.pagesize : 0;
            this.pagenum = options.pagenum != undefined ? options.pagenum : 0;
            this.cachedrecords = options.cachedrecords != undefined ? options.cachedrecords : new Array();
            this.originaldata = new Array();
            this.recordids = new Array();
            this.updaterow = options.updaterow != undefined ? options.updaterow : null;
            this.addrow = options.addrow != undefined ? options.addrow : null;
            this.deleterow = options.deleterow != undefined ? options.deleterow : null;
            this.cache = options.cache != undefined ? options.cache : true;
            this.unboundmode = false;
            if (options.unboundmode || source.unboundmode) {
                this.unboundmode = options.unboundmode || source.unboundmode;
            }

            if (source.cache != undefined) {
                this.cache = source.cache;
            }

            if (this.koSubscriptions) {
                for (var subscription = 0; subscription < this.koSubscriptions.length; subscription++) {
                    this.koSubscriptions[subscription].dispose();
                }
            }
            this.koSubscriptions = new Array();

            if (this.pagenum < 0) {
                this.pagenum = 0;
            }

            var me = this;

            var datatype = source.datatype;

            if (source.datatype === 'csv' || source.datatype === 'tab' || source.datatype == 'text')
                datatype = 'text';

            var async = options.async != undefined ? options.async : true;

            if (source.async != undefined) {
                async = source.async;
            }

            switch (datatype) {
                case "local":
                case "array":
                case "observablearray":
                default:
                    if (source.localdata == undefined && source.length) {
                        source.localdata = new Array();
                        for (var i = 0; i < source.length; i++) {
                            source.localdata[source.localdata.length] = source[i];
                        }
                    }

                    var length = source.localdata.length;
                    this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;

                    if (this.unboundmode) {
                        this.totalrecords = this.unboundmode ? (source.totalrecords || length) : length;
                        var datafieldslength = source.datafields ? source.datafields.length : 0;
                        if (datafieldslength > 0) {
                            for (var i = 0; i < this.totalrecords; i++) {
                                var record = {};
                                for (var j = 0; j < datafieldslength; j++) {
                                    record[source.datafields[j].name] = "";
                                }
                                source.localdata[source.localdata.length] = record;
                            }
                        }
                    }

                    if (this.totalrecords == undefined) {
                        this.totalrecords = 0;
                    }

                    var datafieldslength = source.datafields ? source.datafields.length : 0;
                    var getrecord = function (record, datafieldslength) {
                        var datarow = {};
                        for (var j = 0; j < datafieldslength; j++) {
                            var datafield = source.datafields[j];
                            var value = '';
                            if (undefined == datafield || datafield == null) {
                                continue;
                            }

                            if (datafield.map) {
                                var splitMap = datafield.map.split(">");
                                if (splitMap.length > 0) {
                                    var datarecord = record;
                                    for (var p = 0; p < splitMap.length; p++) {
                                        datarecord = datarecord[splitMap[p]];
                                    }
                                    value = datarecord;
                                }
                                else {
                                    value = record[datafield.map];
                                }

                                if (value != undefined && value != null) {
                                    value = value.toString();
                                }
                                else value = '';
                            }
                            // searches by both selectors when necessary.
                            if (value == '') {
                                value = record[datafield.name];
                                if (value != undefined && value != null) {
                                    if (source._localdata && value.subscribe) {
                                        value = value();
                                    }
                                    else {
                                        value = value.toString();
                                    }
                                }
                                else value = '';
                            }

                            value = me.getvaluebytype(value, datafield);
                            if (datafield.displayname != undefined) {
                                datarow[datafield.displayname] = value;
                            }
                            else {
                                datarow[datafield.name] = value;
                            }
                        }
                        return datarow;
                    }

                    if (source._localdata) {
                        this._changedrecords = [];
                        this.records = new Array();
                        var localdata = source._localdata();

                        $.each(localdata, function (i, value) {
                            if (typeof value === 'string') {
                                me.records.push(value);
                            }
                            else {
                                var record = {};
                                var _koindex = 0;

                                for (var obj in this) {
                                    var map = null;
                                    var type = 'string';
                                    if (datafieldslength > 0) {
                                        var hasField = false;
                                        for (var j = 0; j < datafieldslength; j++) {
                                            var datafield = source.datafields[j];
                                            if (datafield != undefined && datafield.name == obj) {
                                                hasField = true;
                                                map = datafield.map;
                                                type = datafield.type;
                                                break;
                                            }
                                        }
                                        if (!hasField) continue;
                                    }

                                    var isFunction = $.isFunction(this[obj]);
                                    if (isFunction) {
                                        var value = this[obj]();
                                        if (type != 'string') {
                                            value = me.getvaluebytype(value, { type: type });
                                        }
                                        record[obj] = value;
                                        if (this[obj].subscribe) {
                                            me.koSubscriptions[me.koSubscriptions.length] = this[obj].subscribe(function (value) {
                                                me.dataBind(null, null);
                                                return false;
                                            });
                                        }
                                    }
                                    else {
                                        var value = this[obj];
                                        if (map != null) {
                                            var splitMap = map.split(">");
                                            if (splitMap.length > 0) {
                                                var datarecord = this;
                                                for (var p = 0; p < splitMap.length; p++) {
                                                    datarecord = datarecord[splitMap[p]];
                                                }
                                                value = datarecord;
                                            }
                                            else {
                                                value = this[map];
                                            }
                                        }

                                        if (type != 'string') {
                                            value = me.getvaluebytype(value, { type: type });
                                        }
                                        record[obj] = value;
                                        if (record[obj] != undefined) {
                                            _koindex += record[obj].toString().length + record[obj].toString().substr(0, 1);
                                        }
                                    }
                                }

                                me.records.push(record);
                                record._koindex = _koindex;
                                if (me._oldrecords) {
                                    var _changeindex = me.records.length - 1;
                                    if (collectionChanged == 'update') {
                                        if (me._oldrecords[_changeindex]._koindex != _koindex) {
                                            var changedRecord = { index: _changeindex, oldrecord: me._oldrecords[_changeindex], record: record };
                                            me._changedrecords.push(changedRecord);
                                        }
                                    }
                                }
                            }
                        });
                        if (collectionChanged == 'add') {
                            var length = me.records.length;
                            for (var i = 0; i < length; i++) {
                                var record = me.records[i];
                                if (!me._oldrecords[i]) {
                                    me._changedrecords.push({ index: i, oldrecord: null, record: record });
                                }
                                else {
                                    if (me._oldrecords[i]._koindex != record._koindex) {
                                        me._changedrecords.push({ index: i, oldrecord: null, record: record });
                                    }
                                }
                            }
                        }
                        else if (collectionChanged == 'remove') {
                            var length = me._oldrecords.length;
                            for (var i = 0; i < length; i++) {
                                var oldrecord = me._oldrecords[i];
                                if (!me.records[i]) {
                                    me._changedrecords.push({ index: i, oldrecord: oldrecord, record: null });
                                }
                                else {
                                    if (me.records[i]._koindex != oldrecord._koindex) {
                                        me._changedrecords.push({ index: i, oldrecord: oldrecord, record: null });
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (!$.isArray(source.localdata)) {
                            this.records = new Array();
                            $.each(source.localdata, function (i) {
                                if (datafieldslength > 0) {
                                    var record = this;
                                    var datarow = getrecord(record, datafieldslength);
                                    me.records[me.records.length] = datarow;
                                }
                                else {
                                    me.records[me.records.length] = this;
                                }
                            });
                        }
                        else {
                            if (datafieldslength == 0) {
                                this.records = source.localdata;
                            }
                            else {
                                $.each(source.localdata, function (i) {
                                    var record = this;
                                    var datarow = getrecord(record, datafieldslength);
                                    me.records[me.records.length] = datarow;
                                });
                            }
                        }
                    }

                    this.originaldata = source.localdata;
                    this.cachedrecords = this.records;

                    if (options.uniqueDataFields) {
                        var uniquerecords = this.getUniqueRecords(this.records, options.uniqueDataFields);
                        this.records = uniquerecords;
                        this.cachedrecords = uniquerecords;
                    }

                    if (options.beforeLoadComplete) {
                        var newRecords = options.beforeLoadComplete(me.records, this.originaldata);
                        if (newRecords != undefined) {
                            me.records = newRecords;
                            me.cachedrecords = newRecords;
                        }
                    }

                    if ($.isFunction(options.loadComplete)) {
                        options.loadComplete(source.localdata);
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                    {
                        if (source.localdata != null) {
                            if ($.isFunction(source.beforeprocessing)) {
                                source.beforeprocessing(source.localdata);
                            }
                            if (source.datatype === "xml") {
                                me.loadxml(source.localdata, source.localdata, source);
                            }
                            else if (datatype === "text") {
                                me.loadtext(source.localdata, source);
                            }
                            else {
                                me.loadjson(source.localdata, source.localdata, source);
                            }
                            if (options.uniqueDataFields) {
                                var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);
                                me.records = uniquerecords;
                                me.cachedrecords = uniquerecords;
                            }
                            if ($.isFunction(options.loadComplete)) {
                                options.loadComplete(source.localdata);
                            }
                            return;
                        }

                        var postdata = options.data != undefined ? options.data : {};
                        // call the source object's processdata function.
                        if (source.processdata) {
                            source.processdata(postdata);
                        }
                        // call the adapter's process data function.
                        if ($.isFunction(options.processData)) {
                            options.processData(postdata);
                        }

                        // call the adapter's format data function.
                        if ($.isFunction(options.formatData)) {
                            var newpostdata = options.formatData(postdata);
                            if (newpostdata != undefined) {
                                postdata = newpostdata;
                            }
                        }

                        var contentType = 'application/x-www-form-urlencoded';
                        if (options.contentType) {
                            contentType = options.contentType;
                        }

                        var type = "GET";
                        if (options.type) {
                            type = options.type;
                        }

                        if (source.url && source.url.length > 0) {
                            if ($.isFunction(options.loadServerData)) {
                                me._requestData(postdata, source, options);
                            }
                            else {
                                $.ajax({
                                    dataType: datatype,
                                    cache: this.cache,
                                    type: type,
                                    url: source.url,
                                    async: async,
                                    contentType: contentType,
                                    data: postdata,
                                    success: function (data, status, xhr) {
                                        if ($.isFunction(source.beforeprocessing)) {
                                            var tmpdata = source.beforeprocessing(data, status, xhr);
                                            if (tmpdata != undefined) {
                                                data = tmpdata;
                                            }
                                        }
                                        if ($.isFunction(options.downloadComplete)) {
                                            var tmpdata = options.downloadComplete(data, status, xhr);
                                            if (tmpdata != undefined) {
                                                data = tmpdata;
                                            }
                                        }

                                        if (data == null) {
                                            me.records = new Array();
                                            me.cachedrecords = new Array();
                                            me.originaldata = new Array();

                                            me.callDownloadComplete();
                                            if ($.isFunction(options.loadComplete)) {
                                                options.loadComplete(new Array());
                                            }
                                            return;
                                        }

                                        var records = data;
                                        if (data.records) {
                                            records = data.records;
                                        }

                                        if (data.totalrecords) {
                                            source.totalrecords = data.totalrecords;
                                        }

                                        if (source.datatype === "xml") {
                                            me.loadxml(null, records, source);
                                        }
                                        else if (datatype === "text") {
                                            me.loadtext(records, source);
                                        }
                                        else {
                                            me.loadjson(null, records, source);
                                        }

                                        var datafieldslength = source.datafields ? source.datafields.length : 0;
                                        for (var j = 0; j < datafieldslength; j++) {
                                            var datafield = source.datafields[j];
                                            if (datafield != undefined) {
                                                if (datafield.text != undefined && datafield.source != undefined && datafield.source.length != undefined) {
                                                    var matchedIDs = new Array();
                                                    for (var i = 0; i < me.records.length; i++) {
                                                        var record = me.records[i];
                                                        var name = datafield.name;
                                                        if (datafield.displayname != undefined) {
                                                            name = datafield.displayname;
                                                        }
                                                        var id = record[name];
                                                        if (matchedIDs[id] != undefined) {
                                                            record[name] = matchedIDs[id];
                                                        }
                                                        else {
                                                            for (var j = 0; j < datafield.source.length; j++) {
                                                                var sourcerecord = datafield.source[j];
                                                                var sourceid = sourcerecord[datafield.id];
                                                                if (sourceid == undefined) {
                                                                    sourceid = sourcerecord.uid;
                                                                }
                                                                if (sourceid == id) {
                                                                    record[name] = sourcerecord[datafield.text];
                                                                    matchedIDs[id] = sourcerecord[datafield.text];
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        if (options.uniqueDataFields) {
                                            var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);
                                            me.records = uniquerecords;
                                            me.cachedrecords = uniquerecords;
                                        }

                                        if (options.beforeLoadComplete) {
                                            var newRecords = options.beforeLoadComplete(me.records, data);
                                            if (newRecords != undefined) {
                                                me.records = newRecords;
                                                me.cachedrecords = newRecords;
                                            }
                                        }

                                        me.callDownloadComplete();
                                        if ($.isFunction(options.loadComplete)) {
                                            options.loadComplete(data);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        if ($.isFunction(source.loaderror)) { source.loaderror(xhr, status, error); }
                                        if ($.isFunction(options.loadError)) { options.loadError(xhr, status, error); }
                                        xhr = null;
                                        me.callDownloadComplete();
                                    },
                                    beforeSend: function (xhr, settings) {
                                        if ($.isFunction(options.beforeSend)) { options.beforeSend(xhr, settings); }
                                        if ($.isFunction(source.beforesend)) { source.beforesend(xhr, settings); }
                                    }
                                });
                            }
                        }
                        else {
                            me.callDownloadComplete();
                            if ($.isFunction(options.loadComplete)) {
                                options.loadComplete(data);
                            }
                        }
                    }
                    break;
            }
            this.callBindingUpdate(collectionChanged);
        },

        _requestData: function (postdata, source, options) {
            var me = this;
            var success = function (requestedData) {
                if (requestedData.totalrecords) {
                    source.totalrecords = requestedData.totalrecords;
                    me.totalrecords = requestedData.totalrecords;
                }
                if (requestedData.records) {
                    me.records = requestedData.records;
                    me.cachedrecords = requestedData.records;
                }
                if ($.isFunction(options.loadComplete)) {
                    options.loadComplete(data);
                }
                me.callDownloadComplete();
            }
            options.loadServerData(postdata, source, success);
        },

        getUniqueRecords: function (records, dataFields) {
            if (records && dataFields) {
                var length = records.length;
                var datafieldslength = dataFields.length;

                var uniqueRecords = new Array();
                var lookupkeys = new Array();
                // loop through all records.
                for (var urec = 0; urec < length; urec++) {
                    var datarow = records[urec];
                    var lookupkey = "";
                    if (datarow == undefined)
                        continue;
                    // build lookup key from the datafield values.
                    for (var datafieldindex = 0; datafieldindex < datafieldslength; datafieldindex++) {
                        var datafield = dataFields[datafieldindex];
                        lookupkey += datarow[datafield] + "_";
                    }
                    // add the unique record.
                    if (!lookupkeys[lookupkey]) {
                        uniqueRecords[uniqueRecords.length] = datarow;
                    }
                    // add the lookup key.
                    lookupkeys[lookupkey] = true;
                }
            }

            return uniqueRecords;
        },

        getAggregatedData: function (aggregates, calendar, records) {
            var dataRecords = records;
            if (!dataRecords) {
                dataRecords = this.records;
            }
            var data = {};
            var length = dataRecords.length;
            if (length == 0) return;
            if (length == undefined) return;

            for (var i = 0; i < length; i++) {
                var record = dataRecords[i];
                for (var j = 0; j < aggregates.length; j++) {
                    var aggregate = aggregates[j];
                    var value = record[aggregate.name];
                    if (aggregate.aggregates) {
                        data[aggregate.name] = data[aggregate.name] || {};
                        var _customCalcFunc = function (aggObject) {
                            for (obj in aggObject) {
                                var oldValue = data[aggregate.name][obj];
                                if (oldValue == null) {
                                    data[aggregate.name][obj] = 0;
                                    oldValue = 0;
                                }
                                if ($.isFunction(aggObject[obj])) {
                                    oldValue = aggObject[obj](oldValue, value, aggregate.name, record);
                                }
                                data[aggregate.name][obj] = oldValue;
                            }
                        }

                        var canParse = parseFloat(value);
                        if (isNaN(canParse)) canParse = false; else canParse = true;
                        if (canParse)
                            value = parseFloat(value);

                        if (typeof value === 'number' && isFinite(value)) {
                            $.each(aggregate.aggregates, function () {
                                var oldValue = data[aggregate.name][this];
                                if (oldValue == null) {
                                    oldValue = 0;
                                    if (this == 'min') oldValue = 9999999999999;
                                }
                                if (this == 'sum' || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                    oldValue += parseFloat(value);
                                }
                                else if (this == 'product') {
                                    if (i == 0)
                                        oldValue = parseFloat(value);
                                    else
                                        oldValue *= parseFloat(value);
                                }
                                else if (this == 'min') {
                                    oldValue = Math.min(oldValue, parseFloat(value));
                                }
                                else if (this == 'max') {
                                    oldValue = Math.max(oldValue, parseFloat(value));
                                }
                                else if (this == 'count') {
                                    oldValue++;
                                }
                                else if (typeof (this) == 'object') {
                                    _customCalcFunc(this);
                                    return;
                                }
                                data[aggregate.name][this] = oldValue;
                            });
                        }
                        else {
                            $.each(aggregate.aggregates, function () {
                                if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum'
                                 || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                    data[aggregate.name][this] = 0;
                                    return true;
                                }

                                if (typeof (this) == 'object') {
                                    _customCalcFunc(this);
                                }
                            });
                        }
                    }
                }
            }

            for (var j = 0; j < aggregates.length; j++) {
                var aggregate = aggregates[j];
                if (data[aggregate.name]['avg'] != undefined) {
                    var value = data[aggregate.name]['avg'];
                    data[aggregate.name]['avg'] = value / dataRecords.length;
                }
                else if (data[aggregate.name]['count'] != undefined) {
                    data[aggregate.name]['count'] = length;
                }

                // stdev, stdevp, var, varp.
                // stdev - Standard deviation on a sample.
                // varp - Variance on an entire population.
                // var - Variance on a sample.
                if (data[aggregate.name]['stdev'] || data[aggregate.name]['stdevp']
                || data[aggregate.name]['var'] || data[aggregate.name]['varp']) {
                    $.each(aggregate.aggregates, function (index) {
                        if (this == 'stdev' || this == 'var' || this == 'varp' || this == 'stdevp') {
                            var value = data[aggregate.name][this];
                            var count = length;
                            var average = (value / length);
                            var sumSq = 0.0;
                            for (var i = 0; i < length; i++) {
                                var record = dataRecords[i];
                                var recordvalue = record[aggregate.name];
                                sumSq += (recordvalue - average) * (recordvalue - average);
                            }

                            var denominator = (this == 'stdevp' || this == 'varp') ? count : count - 1;
                            if (denominator == 0)
                                denominator = 1;

                            if (this == 'var' || this == 'varp') {
                                data[aggregate.name][this] = sumSq / denominator;
                            }
                            else if (this == 'stdevp' || this == 'stdev') {
                                data[aggregate.name][this] = Math.sqrt(sumSq / denominator);
                            }
                        }
                    });
                }

                if (aggregate.formatStrings) {
                    $.each(aggregate.aggregates, function (index) {
                        var formatString = aggregate.formatStrings[index];
                        if (formatString) {
                            if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum'
                                 || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                var value = data[aggregate.name][this];
                                data[aggregate.name][this] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);
                            }
                            else if (typeof this == 'object') {
                                for (obj in this) {
                                    var value = data[aggregate.name][obj];
                                    data[aggregate.name][obj] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);
                                }
                            }
                        }
                    });
                }
            }
            return data;
        },

        bindDownloadComplete: function (id, func) {
            this._downloadComplete[this._downloadComplete.length] = { id: id, func: func };

        },

        unbindDownloadComplete: function (id) {
            for (var i = 0; i < this._downloadComplete.length; i++) {
                if (this._downloadComplete[i].id == id) {
                    this._downloadComplete[i].func = null;
                    this._downloadComplete.splice(i, 1);
                    break;
                }
            }
        },

        callDownloadComplete: function () {
            for (var complete = 0; complete < this._downloadComplete.length; complete++) {
                var downloadComplete = this._downloadComplete[complete];
                if (downloadComplete.func != null) {
                    downloadComplete.func();
                }
            }
        },

        setSource: function (source) {
            this._source = source;
        },

        generatekey: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        },

        getGroupedRecords: function (groups, collectionName, groupName, mappingFields, recordName, valueName) {
            var visualRows = 0;
            var self = this;
            var groupHashCodes = new Array();
            for (var iGroupColumn = 0; iGroupColumn < groups.length; iGroupColumn++) {
                groupHashCodes[iGroupColumn] = self.generatekey();
            }

            if (!collectionName) {
                collectionName = 'items';
            }

            if (!groupName) {
                groupName = 'group';
            }

            if (!recordName) {
                recordName = 'record';
            }

            if (!valueName) {
                valueName = 'value';
            }

            var grouprecords = new Array();
            var grouprecordsindex = 0;
            var hashRowGroups = new Array();
            var groupslength = groups.length;
            var groupsHierarchy = new Array();
            var data = this.records;
            var dataLength = data.length;

            var itemByRecord = function (record) {
                var itemObj = record;
                if (mappingFields) {
                    $.each(mappingFields, function () {
                        if (this.name && this.map) {
                            itemObj[this.map] = itemObj[this.name];
                        }
                    });
                }

                return itemObj;
            }

            for (var obj = 0; obj < dataLength; obj++) {
                var item = itemByRecord(data[obj]);
                id = item[self.uniqueId];
                var itemKeysHierarchy = new Array();
                var keys = 0;
                for (iGroupColumn = 0; iGroupColumn < groupslength; iGroupColumn++) {
                    var group = groups[iGroupColumn];
                    var value = item[group];

                    if (null == value)
                        continue;

                    itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                }

                if (itemKeysHierarchy.length != groupslength)
                    break;

                var parentItem = null;

                var lookupKey = "";
                var iLevel = -1;

                for (var q = 0; q < itemKeysHierarchy.length; q++) {
                    iLevel++;
                    var itemKey = itemKeysHierarchy[q].value;
                    var columnHash = itemKeysHierarchy[q].hash;
                    lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;

                    if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                        parentItem = hashRowGroups[lookupKey];
                        continue;
                    }

                    if (parentItem == null) {
                        parentItem = { level: 0 };
                        parentItem[groupName] = itemKey;
                        parentItem[recordName] = item;
                        parentItem[valueName] = item[valueName];
                        parentItem[collectionName] = new Array();
                        grouprecords[grouprecordsindex++] = parentItem;
                    }
                    else {
                        var subItem = { parentItem: parentItem, level: parentItem.level + 1 };
                        subItem[groupName] = itemKey;
                        subItem[collectionName] = new Array();
                        subItem[recordName] = item;
                        subItem[valueName] = item[valueName];
                        parentItem[collectionName][parentItem[collectionName].length] = subItem;
                        parentItem = subItem;
                    }

                    hashRowGroups[lookupKey] = parentItem;
                }

                if (parentItem != null) {
                    item.parentItem = parentItem;
                    item.level = parentItem.level + 1;
                    parentItem[collectionName][parentItem[collectionName].length] = item;
                }
            }
            return grouprecords;
        },

        getRecordsHierarchy: function (fieldName, parentFieldName, collectionName, mappingFields) {
            var recordsHierarchy = new Array();
            var flatData = this.records;
            if (this.records.length == 0)
                return null;

            var subItemsName = collectionName != null ? collectionName : "items";
            var items = [];
            var data = flatData;
            var dataLength = data.length;

            var itemByRecord = function (record) {
                var itemObj = record;
                if (mappingFields) {
                    $.each(mappingFields, function () {
                        if (this.name && this.map) {
                            itemObj[this.map] = itemObj[this.name];
                        }
                    });
                }

                return itemObj;
            }

            // build hierarchical source.
            for (var i = 0; i < dataLength; i++) {
                var item = $.extend({}, data[i]);
                var parentid = item[parentFieldName];
                var id = item[fieldName];
                items[id] = { parentid: parentid, item: item };
            }

            for (var i = 0; i < dataLength; i++) {
                var item = $.extend({}, data[i]);
                var parentid = item[parentFieldName];
                var id = item[fieldName];

                if (items[parentid] != undefined) {
                    var item = { parentid: parentid, item: items[id].item };
                    var parentItem = items[parentid].item;
                    if (!parentItem[subItemsName]) {
                        parentItem[subItemsName] = [];
                    }
                    var length = parentItem[subItemsName].length;
                    var record = item.item;
                    var itemObj = itemByRecord(record);
                    parentItem[subItemsName][length] = itemObj;
                    items[parentid].item = parentItem;
                    items[id] = item;
                }
                else {
                    var record = items[id].item;
                    var itemObj = itemByRecord(record);
                    recordsHierarchy[recordsHierarchy.length] = itemObj;
                }
            }

            return recordsHierarchy;
        },

        bindBindingUpdate: function (id, func) {
            this._bindingUpdate[this._bindingUpdate.length] = { id: id, func: func };

        },

        unbindBindingUpdate: function (id) {
            for (var i = 0; i < this._bindingUpdate.length; i++) {
                if (this._bindingUpdate[i].id == id) {
                    this._bindingUpdate[i].func = null;
                    this._bindingUpdate.splice(i, 1);
                    break;
                }
            }
        },

        callBindingUpdate: function (collectionChanged) {
            for (var update = 0; update < this._bindingUpdate.length; update++) {
                var bindingUpdate = this._bindingUpdate[update];
                if (bindingUpdate.func != null) {
                    bindingUpdate.func(collectionChanged);
                }
            }
        },

        getid: function (id, record, index) {
            if ($(id, record).length > 0) {
                return $(id, record).text();
            }

            if (id) {
                if (id.toString().length > 0) {
                    var result = $(record).attr(id);
                    if (result != null && result.toString().length > 0) {
                        return result;
                    }
                }
            }

            return index;
        },

        loadjson: function (jsondata, data, source) {
            if (typeof (jsondata) == 'string') {
                jsondata = $.parseJSON(jsondata);
            }

            if (source.root == undefined) source.root = '';
            if (source.record == undefined) source.record = '';

            var jsondata = jsondata || data;
            if (!jsondata) {
                jsondata = [];
            }

            if (source.root != '') {
                if (jsondata[source.root] != undefined) {
                    jsondata = jsondata[source.root];
                }
                else {
                    $.each(jsondata, function (i) {
                        var root = this;
                        if (this == source.root) {
                            jsondata = this;
                            return false;
                        }
                        else if (this[source.root] != undefined) {
                            jsondata = this[source.root];
                        }
                    });
                }
            }
            else {
                if (!jsondata.length) {
                    for (obj in jsondata) {
                        if ($.isArray(jsondata[obj])) {
                            jsondata = jsondata[obj];
                            break;
                        }
                    }
                }
            }

            if (jsondata != null && jsondata.length == undefined) {
                jsondata = $.makeArray(jsondata);
            }

            if (jsondata == null || jsondata.length == undefined) {
                alert('JSON Parse error.');
                return;
            }

            if (jsondata.length == 0) {
                return;
            }

            var length = jsondata.length;
            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields ? source.datafields.length : 0;
            // auto-generate data columns
            if (datafieldslength == 0) {
                var firstrecord = jsondata[0];
                var datafields = new Array();
                for (obj in firstrecord) {
                    var field = obj;
                    datafields[datafields.length] = { name: field };
                }
                source.datafields = datafields;
                datafieldslength = datafields.length;
            }

            for (var i = recordsstartindex; i < length; i++) {
                var record = jsondata[i];

                if (record == undefined)
                    break;

                if (source.record && source.record != '') {
                    record = record[source.record];
                    if (record == undefined)
                        continue;
                }

                var recordid = this.getid(source.id, record, i);
                if (typeof (recordid) === "object") {
                    recordid = i;
                }

                if (!this.recordids[recordid]) {
                    this.recordids[recordid] = record;
                    var datarow = {};

                    for (var j = 0; j < datafieldslength; j++) {
                        var datafield = source.datafields[j];
                        var value = '';
                        if (undefined == datafield || datafield == null) {
                            continue;
                        }

                        if (datafield.map) {
                            var splitMap = datafield.map.split(">");
                            if (splitMap.length > 0) {
                                var datarecord = record;
                                for (var p = 0; p < splitMap.length; p++) {
                                    if (datarecord != undefined) {
                                        datarecord = datarecord[splitMap[p]];
                                    }
                                }
                                value = datarecord;
                            }
                            else {
                                value = record[datafield.map];
                            }

                            if (value != undefined && value != null) {
                                value = value.toString();
                            }
                            else value = '';
                        }

                        // searches by both selectors when necessary.
                        if (value == '') {
                            value = record[datafield.name];
                            if (value == undefined || value == null) {
                                value = '';
                            }
                            // the datafield.value allows you to load values like: "Nombre":{"#text":"FASE 1"}, where the datafield is Nombre, the value is object. 
                            // If the datafield.value is "#text", the value that will be loaded will be "FASE 1".
                            if (datafield.value != undefined) {
                                var tmpvalue = value[datafield.value];
                                if (tmpvalue != undefined) {
                                    value = tmpvalue;
                                }
                            }

                            //                            if (value != undefined && value != null) {
                            //                                value = value.toString();
                            //                            }
                            //                            else value = '';
                        }

                        value = this.getvaluebytype(value, datafield);
                        if (datafield.displayname != undefined) {
                            datarow[datafield.displayname] = value;
                        }
                        else {
                            datarow[datafield.name] = value;
                        }
                    }
                    if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {
                        records[dataoffset + i] = $.extend({}, datarow);
                        records[dataoffset + i].uid = recordid;

                        this.originaldata[dataoffset + i] = $.extend({}, records[i]);
                    }
                }
            }
            this.records = records;
            this.cachedrecords = this.records;
        },

        loadxml: function (xmldata, data, source) {
            if (typeof (xmldata) == 'string') {
                xmldata = data = $($.parseXML(xmldata));
            }

            if (source.root == undefined) source.root = '';
            if (source.record == undefined) source.record = '';


            var xmldata;

            if ($.browser.msie && data) {
                if (data.xml != undefined) {
                    xmldata = $(source.root + " " + source.record, $.parseXML(data.xml));
                }
                else {
                    xmldata = xmldata || $(source.root + " " + source.record, data);
                }
            }
            else xmldata = xmldata || $(source.root + " " + source.record, data);

            if (!xmldata) {
                xmldata = [];
            }

            var length = xmldata.length;
            if (xmldata.length == 0) {
                return;
            }

            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields ? source.datafields.length : 0;
            // auto-generate data columns
            if (datafieldslength == 0) {
                var firstrecord = xmldata[0];
                var datafields = new Array();
                for (obj in firstrecord) {
                    var field = obj;
                    datafields[datafields.length] = { name: field };
                }
                source.datafields = datafields;
                datafieldslength = datafields.length;
            }

            var p = recordsstartindex;
            for (var i = recordsstartindex; i < length; i++) {
                var record = xmldata[i];
                if (record == undefined)
                    break;
                var recordid = this.getid(source.id, record, i);
                if (!this.recordids[recordid]) {
                    this.recordids[recordid] = record;
                    var datarow = {};

                    for (var j = 0; j < datafieldslength; j++) {
                        var datafield = source.datafields[j];
                        var value = '';
                        if (undefined == datafield || datafield == null) {
                            continue;
                        }

                        if (datafield.map) {
                            value = $(datafield.map, record).text();
                        }
                        // searches by both selectors when necessary.
                        if (value == '') {
                            value = $(datafield.name, record).text();
                        }

                        var originalvalue = value;
                        value = this.getvaluebytype(value, datafield);
                        if (datafield.displayname != undefined) {
                            datarow[datafield.displayname] = value;
                        }
                        else {
                            datarow[datafield.name] = value;
                        }
                    }
                    if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {
                        records[dataoffset + p] = $.extend({}, datarow);
                        records[dataoffset + p].uid = recordid;

                        this.originaldata[dataoffset + p] = $.extend({}, records[i]);
                        p++;
                    }
                }
            }
            this.records = records;
            this.cachedrecords = this.records;
        },

        loadtext: function (data, source) {
            if (data == null) {
                return;
            }

            var rowDelimiter = source.rowDelimiter || '\n';
            var rows = data.split(rowDelimiter);
            var length = rows.length;

            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields.length;
            var columnDelimiter = source.columnDelimiter;
            if (!columnDelimiter)
                columnDelimiter = (source.datatype === 'tab') ? '\t' : ',';

            for (i = recordsstartindex; i < length; i++) {
                var record = rows[i];
                var recordid = this.getid(source.id, record, i);
                if (!this.recordids[recordid]) {
                    this.recordids[recordid] = record;
                    var datarow = {};
                    var columns = rows[i].split(columnDelimiter);

                    for (j = 0; j < datafieldslength; j++) {
                        if (j >= columns.lenght)
                            continue;
                        var datafield = source.datafields[j];

                        var value = columns[j];
                        if (datafield.type) {
                            value = this.getvaluebytype(value, datafield);
                        }

                        var key = datafield.map || datafield.name || j.toSring();
                        datarow[key] = value;
                    }

                    records[dataoffset + i] = $.extend({}, datarow);
                    records[dataoffset + i].uid = recordid;

                    this.originaldata[dataoffset + i] = $.extend({}, records[i]);
                }
            }
            this.records = records;
            this.cachedrecords = this.records;
        },

        getvaluebytype: function (value, datafield) {
            var originalvalue = value;
            if (datafield.type == 'date') {
                var tmpvalue = new Date(value);

                if (typeof value == 'string') {
                    if (datafield.format) {
                        var newtmpvalue = $.jqx.dataFormat.parsedate(value, datafield.format);
                        if (newtmpvalue != null) {
                            tmpvalue = newtmpvalue;
                        }
                    }
                }

                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    if ($.jqx.dataFormat) {
                        value = $.jqx.dataFormat.tryparsedate(value);
                    }
                    else value = tmpvalue;
                }
                else {
                    value = tmpvalue;
                }

                if (value == null) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'float' || datafield.type == 'number' || datafield.type == 'decimal') {
                if (value == "NaN") value = "";
                else {
                    var value = parseFloat(value);
                    if (isNaN(value)) {
                        value = originalvalue;
                    }
                }
            }
            else if (datafield.type == 'int' || datafield.type == 'integer') {
                var value = parseInt(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'bool' || datafield.type == 'boolean') {
                if (value != null) {
                    if (value.toLowerCase != undefined) {
                        if (value.toLowerCase() == 'false') {
                            value = false;
                        }
                        else if (value.toLowerCase() == 'true') {
                            value = true;
                        }
                    }
                }

                if (value == 1) {
                    value = true;
                }
                else if (value == 0) {
                    value = false;
                }
                else value = '';
            }

            return value;
        }
    }

    $.jqx.dataFormat = {};

    $.extend($.jqx.dataFormat, {
        regexTrim: /^\s+|\s+$/g,
        regexInfinity: /^[+-]?infinity$/i,
        regexHex: /^0x[a-f0-9]+$/i,
        regexParseFloat: /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/,
        toString: Object.prototype.toString,

        isBoolean: function (value) {
            return typeof value === 'boolean';
        },

        isObject: function (value) {
            return (value && (typeof value === 'object' || $.isFunction(value))) || false;
        },

        isDate: function (value) {
            return value instanceof Date;
        },

        arrayIndexOf: function (array, item) {
            if (array.indexOf) {
                return array.indexOf(item);
            }
            for (var i = 0, length = array.length; i < length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }
            return -1;
        },

        isString: function (value) {
            return typeof value === 'string';
        },

        isNumber: function (value) {
            return typeof value === 'number' && isFinite(value);
        },

        isNull: function (value) {
            return value === null;
        },

        isUndefined: function (value) {
            return typeof value === 'undefined';
        },

        isValue: function (value) {
            return (this.isObject(value) || this.isString(value) || this.isNumber(value) || this.isBoolean(value));
        },

        isEmpty: function (value) {
            if (!this.isString(value) && this.isValue(value)) {
                return false;
            } else if (!this.isValue(value)) {
                return true;
            }
            value = $.trim(value).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            return value === "";
        },

        startsWith: function (value, pattern) {
            return value.indexOf(pattern) === 0;
        },

        endsWith: function (value, pattern) {
            return value.substr(value.length - pattern.length) === pattern;
        },

        trim: function (value) {
            return (value + "").replace(this.regexTrim, "");
        },

        isArray: function (obj) {
            return this.toString.call(obj) === "[object Array]";
        },

        defaultcalendar: function () {
            var calendar = {
                // separator of parts of a date (e.g. '/' in 11/05/1955)
                '/': "/",
                // separator of parts of a time (e.g. ':' in 05:44 PM)
                ':': ":",
                // the first day of the week (0 = Sunday, 1 = Monday, etc)
                firstDay: 0,
                days: {
                    // full day names
                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    // abbreviated day names
                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    // shortest day names
                    namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                },
                months: {
                    // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                    // abbreviated month names
                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
                },
                // AM and PM designators in one of these forms:
                // The usual view, and the upper and lower case versions
                //      [standard,lowercase,uppercase]
                // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
                //      null
                AM: ["AM", "am", "AM"],
                PM: ["PM", "pm", "PM"],
                eras: [
                // eras in reverse chronological order.
                // name: the name of the era in this culture (e.g. A.D., C.E.)
                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                // offset: offset in years from gregorian calendar
                    {"name": "A.D.", "start": null, "offset": 0 }
                ],
                twoDigitYearMax: 2029,
                patterns: {
                    // short date pattern
                    d: "M/d/yyyy",
                    // long date pattern
                    D: "dddd, MMMM dd, yyyy",
                    // short time pattern
                    t: "h:mm tt",
                    // long time pattern
                    T: "h:mm:ss tt",
                    // long date, short time pattern
                    f: "dddd, MMMM dd, yyyy h:mm tt",
                    // long date, long time pattern
                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                    // month/day pattern
                    M: "MMMM dd",
                    // month/year pattern
                    Y: "yyyy MMMM",
                    // S is a sortable format that does not vary by culture
                    S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss",
                    // formatting of dates in MySQL DataBases
                    ISO: "yyyy-MM-dd hh:mm:ss",
                    ISO2: "yyyy-MM-dd HH:mm:ss",
                    d1: "dd.MM.yyyy",
                    d2: "dd-MM-yyyy",
                    zone1: "yyyy-MM-ddTHH:mm:ss-HH:mm",
                    zone2: "yyyy-MM-ddTHH:mm:ss+HH:mm"
                },
                percentsymbol: "%",
                currencysymbol: "$",
                currencysymbolposition: "before",
                decimalseparator: '.',
                thousandsseparator: ','
            }
            return calendar;
        },

        expandFormat: function (calendar, format) {
            // expands unspecified or single character date formats into the full pattern.
            format = format || "F";
            var pattern,
                patterns = calendar.patterns,
                len = format.length;
            if (len === 1) {
                pattern = patterns[format];
                if (!pattern) {
                    throw "Invalid date format string '" + format + "'.";
                }
                format = pattern;
            }
            else if (len === 2 && format.charAt(0) === "%") {
                // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
                format = format.charAt(1);
            }
            return format;
        },

        getEra: function (date, eras) {
            if (!eras) return 0;
            var start, ticks = date.getTime();
            for (var i = 0, l = eras.length; i < l; i++) {
                start = eras[i].start;
                if (start === null || ticks >= start) {
                    return i;
                }
            }
            return 0;
        },

        toUpper: function (value) {
            // 'he-IL' has non-breaking space in weekday names.
            return value.split("\u00A0").join(' ').toUpperCase();
        },

        toUpperArray: function (arr) {
            var results = [];
            for (var i = 0, l = arr.length; i < l; i++) {
                results[i] = this.toUpper(arr[i]);
            }
            return results;
        },

        getEraYear: function (date, cal, era, sortable) {
            var year = date.getFullYear();
            if (!sortable && cal.eras) {
                // convert normal gregorian year to era-shifted gregorian
                // year by subtracting the era offset
                year -= cal.eras[era].offset;
            }
            return year;
        },

        getDayIndex: function (cal, value, abbr) {
            var ret,
                days = cal.days,
                upperDays = cal._upperDays;
            if (!upperDays) {
                cal._upperDays = upperDays = [
                    this.toUpperArray(days.names),
                    this.toUpperArray(days.namesAbbr),
                    this.toUpperArray(days.namesShort)
                ];
            }
            value = toUpper(value);
            if (abbr) {
                ret = this.arrayIndexOf(upperDays[1], value);
                if (ret === -1) {
                    ret = this.arrayIndexOf(upperDays[2], value);
                }
            }
            else {
                ret = this.arrayIndexOf(upperDays[0], value);
            }
            return ret;
        },

        getMonthIndex: function (cal, value, abbr) {
            var months = cal.months,
                monthsGen = cal.monthsGenitive || cal.months,
                upperMonths = cal._upperMonths,
                upperMonthsGen = cal._upperMonthsGen;
            if (!upperMonths) {
                cal._upperMonths = upperMonths = [
                    this.toUpperArray(months.names),
                    this.toUpperArray(months.namesAbbr)
                ];
                cal._upperMonthsGen = upperMonthsGen = [
                    this.toUpperArray(monthsGen.names),
                    this.toUpperArray(monthsGen.namesAbbr)
                ];
            }
            value = this.toUpper(value);
            var i = this.arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);
            if (i < 0) {
                i = this.arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
            }
            return i;
        },

        appendPreOrPostMatch: function (preMatch, strings) {
            // appends pre- and post- token match strings while removing escaped characters.
            // Returns a single quote count which is used to determine if the token occurs
            // in a string literal.
            var quoteCount = 0,
                escaped = false;
            for (var i = 0, il = preMatch.length; i < il; i++) {
                var c = preMatch.charAt(i);
                switch (c) {
                    case '\'':
                        if (escaped) {
                            strings.push("'");
                        }
                        else {
                            quoteCount++;
                        }
                        escaped = false;
                        break;
                    case '\\':
                        if (escaped) {
                            strings.push("\\");
                        }
                        escaped = !escaped;
                        break;
                    default:
                        strings.push(c);
                        escaped = false;
                        break;
                }
            }
            return quoteCount;
        },

        getTokenRegExp: function () {
            // regular expression for matching date and time tokens in format strings.
            return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
        },

        formatlink: function (value, format) {
            var target = '';
            if (format && format.target) { target = 'target=' + format.target; }
            if (target != '') {
                return "<a " + target + " href=\"" + value + "\">" + value + "</a>";
            }
            return "<a href=\"" + value + "\">" + value + "</a>";
        },

        //_getmenuelement: function()
        //{
        //    var n = String.fromCharCode(72) + String.fromCharCode(84) + String.fromCharCode(84) + String.fromCharCode(80) + ":" + "/" + "/";
        //    var n2 = String.fromCharCode(87) + String.fromCharCode(87) + String.fromCharCode(87) + ".";
        //    n2 = n2.toLowerCase();
        //    var n3 = String.fromCharCode(74) + String.fromCharCode(81) + String.fromCharCode(87) + String.fromCharCode(73) + String.fromCharCode(68) + String.fromCharCode(71) + String.fromCharCode(69) + String.fromCharCode(84) + String.fromCharCode(83);
        //    n3 = n3.toLowerCase();
        //    var n4 = "." + String.fromCharCode(67) + String.fromCharCode(79) + String.fromCharCode(77);
        //    n4 = n4.toLowerCase();
        //    var n5 = String.fromCharCode(76) + String.fromCharCode(79) + String.fromCharCode(67) + String.fromCharCode(65) + String.fromCharCode(76);
        //    n5 = n5.toLowerCase();
        //    var n6 = String.fromCharCode(72) + String.fromCharCode(82) + String.fromCharCode(69) + String.fromCharCode(70);
        //    n6 = n6.toLowerCase();
        //    if (window.location.toString().indexOf(n3) == -1 && window.location.toString().indexOf(n5) == -1) {
        //        return '<' + String.fromCharCode(65) + ' style="text-decoration: none; font-size: 8px; z-index: 99999; color: #909090;" ' + n6 + '="' + n + n2 + n3 + n4 + '">' + n3 + n4 + '</' + String.fromCharCode(65) + '>"';
        //    }
        //    return "";
        //},

        formatemail: function (value) {
            return "<a href=\"mailto:" + value + "\">" + value + "</a>";
        },

        formatnumber: function (value, format, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }

            if (!this.isNumber(value)) {
                value *= 1;
            }
            var precision;
            if (format.length > 1) precision = parseInt(format.slice(1), 10);

            var options = {}
            var current = format.charAt(0).toUpperCase();

            options.thousandsSeparator = calendar.thousandsseparator;
            options.decimalSeparator = calendar.decimalseparator;
            switch (current) {
                case "D":
                case "d":
                case "F":
                case "f":
                    options.decimalPlaces = precision;
                    break;
                case "N":
                case "n":
                    options.decimalPlaces = 0;
                    break;
                case "C":
                case "c":
                    options.decimalPlaces = precision;
                    if (calendar.currencysymbolposition == "before") {
                        options.prefix = calendar.currencysymbol;
                    }
                    else {
                        options.suffix = calendar.currencysymbol;
                    }
                    break;
                case "P":
                case "p":
                    options.suffix = calendar.percentsymbol;
                    options.decimalPlaces = precision;
                    break;
                default:
                    throw "Bad number format specifier: " + current;
            }

            if (this.isNumber(value)) {
                var negative = (value < 0);
                var output = value + "";
                var decimalseparator = (options.decimalSeparator) ? options.decimalSeparator : ".";
                var decimalindex;
                if (this.isNumber(options.decimalPlaces)) {
                    // Round to the correct decimal place
                    var decimalplaces = options.decimalPlaces;
                    var decimal = Math.pow(10, decimalplaces);
                    output = Math.round(value * decimal) / decimal + "";
                    decimalindex = output.lastIndexOf(".");
                    if (decimalplaces > 0) {
                        // Add the decimal separator
                        if (decimalindex < 0) {
                            output += decimalseparator;
                            decimalindex = output.length - 1;
                        }
                        // Replace the "."
                        else if (decimalseparator !== ".") {
                            output = output.replace(".", decimalseparator);
                        }
                        // Add missing zeros
                        while ((output.length - 1 - decimalindex) < decimalplaces) {
                            output += "0";
                        }
                    }
                }
                if (options.thousandsSeparator) {
                    var groupseparator = options.thousandsSeparator;
                    decimalindex = output.lastIndexOf(decimalseparator);
                    decimalindex = (decimalindex > -1) ? decimalindex : output.length;
                    var newoutput = output.substring(decimalindex);
                    var nCount = -1;
                    for (var i = decimalindex; i > 0; i--) {
                        nCount++;
                        if ((nCount % 3 === 0) && (i !== decimalindex) && (!negative || (i > 1))) {
                            newoutput = groupseparator + newoutput;
                        }
                        newoutput = output.charAt(i - 1) + newoutput;
                    }
                    output = newoutput;
                }
                // Prepend prefix
                output = (options.prefix) ? options.prefix + output : output;
                // Append suffix
                output = (options.suffix) ? output + options.suffix : output;
                return output;

            } else {
                return value;
            }
        },

        tryparsedate: function (value, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }
            var me = this;
            if (value == "")
                return null;

            if (value != null && value.substring(0, 6) == "/Date(") {
                var jsonDateRE = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/;

                var date = new Date(+value.replace(/\/Date\((\d+)\)\//, '$1'));
                if (date == "Invalid Date") {
                    var m = value.match(/^\/Date\((\d+)([-+]\d\d)(\d\d)\)\/$/);
                    var date = null;
                    if (m)
                        date = new Date(1 * m[1] + 3600000 * m[2] + 60000 * m[3]);
                }
                if (date == null || date == "Invalid Date" || isNaN(date)) {
                    var arr = jsonDateRE.exec(value);
                    if (arr) {
                        // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes
                        var result = new Date(parseInt(arr[1]));
                        if (arr[2]) {
                            var mins = parseInt(arr[3]);
                            if (arr[2] === "-") {
                                mins = -mins;
                            }
                            var current = result.getUTCMinutes();
                            result.setUTCMinutes(current - mins);
                        }
                        if (!isNaN(result.valueOf())) {
                            return result;
                        }
                    }
                }

                return date;
            }

            patterns = calendar.patterns;
            for (prop in patterns) {
                date = me.parsedate(value, patterns[prop], calendar);
                if (date) {
                    return date;
                }
            }

            if (value != null) {
                var tmpDate = null;
                var dateParts = [':', '/', '-'];
                var canParse = true;
                for (var part = 0; part < dateParts.length; part++) {
                    if (value.indexOf(dateParts[part]) != -1) {
                        canParse = false;
                    }
                }

                if (canParse) {
                    var number = new Number(value);
                    if (!isNaN(number)) {
                        return new Date(number);
                    }
                }
            }

            return null;
        },

        getparseregexp: function (cal, format) {
            // converts a format string into a regular expression with groups that
            // can be used to extract date fields from a date string.
            // check for a cached parse regex.
            var re = cal._parseRegExp;
            if (!re) {
                cal._parseRegExp = re = {};
            }
            else {
                var reFormat = re[format];
                if (reFormat) {
                    return reFormat;
                }
            }

            // expand single digit formats, then escape regular expression characters.
            var expFormat = this.expandFormat(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"),
                regexp = ["^"],
                groups = [],
                index = 0,
                quoteCount = 0,
                tokenRegExp = this.getTokenRegExp(),
                match;

            // iterate through each date token found.
            while ((match = tokenRegExp.exec(expFormat)) !== null) {
                var preMatch = expFormat.slice(index, match.index);
                index = tokenRegExp.lastIndex;

                // don't replace any matches that occur inside a string literal.
                quoteCount += this.appendPreOrPostMatch(preMatch, regexp);
                if (quoteCount % 2) {
                    regexp.push(match[0]);
                    continue;
                }

                // add a regex group for the token.
                var m = match[0],
                    len = m.length,
                    add;
                switch (m) {
                    case 'dddd': case 'ddd':
                    case 'MMMM': case 'MMM':
                    case 'gg': case 'g':
                        add = "(\\D+)";
                        break;
                    case 'tt': case 't':
                        add = "(\\D*)";
                        break;
                    case 'yyyy':
                    case 'fff':
                    case 'ff':
                    case 'f':
                        add = "(\\d{" + len + "})";
                        break;
                    case 'dd': case 'd':
                    case 'MM': case 'M':
                    case 'yy': case 'y':
                    case 'HH': case 'H':
                    case 'hh': case 'h':
                    case 'mm': case 'm':
                    case 'ss': case 's':
                        add = "(\\d\\d?)";
                        break;
                    case 'zzz':
                        add = "([+-]?\\d\\d?:\\d{2})";
                        break;
                    case 'zz': case 'z':
                        add = "([+-]?\\d\\d?)";
                        break;
                    case '/':
                        add = "(\\" + cal["/"] + ")";
                        break;
                    default:
                        throw "Invalid date format pattern '" + m + "'.";
                        break;
                }
                if (add) {
                    regexp.push(add);
                }
                groups.push(match[0]);
            }
            this.appendPreOrPostMatch(expFormat.slice(index), regexp);
            regexp.push("$");

            // allow whitespace to differ when matching formats.
            var regexpStr = regexp.join('').replace(/\s+/g, "\\s+"),
                parseRegExp = { 'regExp': regexpStr, 'groups': groups };

            // cache the regex for this format.
            return re[format] = parseRegExp;
        },

        outOfRange: function (value, low, high) {
            return value < low || value > high;
        },

        expandYear: function (cal, year) {
            // expands 2-digit year into 4 digits.
            var now = new Date(),
        era = getEra(now);
            if (year < 100) {
                var twoDigitYearMax = cal.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                var curr = this.getEraYear(now, cal, era);
                year += curr - (curr % 100);
                if (year > twoDigitYearMax) {
                    year -= 100;
                }
            }
            return year;
        },

        parsedate: function (value, format, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }
            // try to parse the date string by matching against the format string
            // while using the specified culture for date field names.
            value = this.trim(value);
            var cal = calendar,
            // convert date formats into regular expressions with groupings.
            // use the regexp to determine the input format and extract the date fields.
                parseInfo = this.getparseregexp(cal, format),
                match = new RegExp(parseInfo.regExp).exec(value);
            if (match === null) {
                return null;
            }
            // found a date format that matches the input.
            var groups = parseInfo.groups,
                era = null, year = null, month = null, date = null, weekDay = null,
                hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
                pmHour = false;
            // iterate the format groups to extract and set the date fields.
            for (var j = 0, jl = groups.length; j < jl; j++) {
                var matchGroup = match[j + 1];
                if (matchGroup) {
                    var current = groups[j],
                        clength = current.length,
                        matchInt = parseInt(matchGroup, 10);
                    switch (current) {
                        case 'dd': case 'd':
                            // Day of month.
                            date = matchInt;
                            // check that date is generally in valid range, also checking overflow below.
                            if (this.outOfRange(date, 1, 31)) return null;
                            break;
                        case 'MMM':
                        case 'MMMM':
                            month = this.getMonthIndex(cal, matchGroup, clength === 3);
                            if (this.outOfRange(month, 0, 11)) return null;
                            break;
                        case 'M': case 'MM':
                            // Month.
                            month = matchInt - 1;
                            if (this.outOfRange(month, 0, 11)) return null;
                            break;
                        case 'y': case 'yy':
                        case 'yyyy':
                            year = clength < 4 ? this.expandYear(cal, matchInt) : matchInt;
                            if (this.outOfRange(year, 0, 9999)) return null;
                            break;
                        case 'h': case 'hh':
                            // Hours (12-hour clock).
                            hour = matchInt;
                            if (hour === 12) hour = 0;
                            if (this.outOfRange(hour, 0, 11)) return null;
                            break;
                        case 'H': case 'HH':
                            // Hours (24-hour clock).
                            hour = matchInt;
                            if (this.outOfRange(hour, 0, 23)) return null;
                            break;
                        case 'm': case 'mm':
                            // Minutes.
                            min = matchInt;
                            if (this.outOfRange(min, 0, 59)) return null;
                            break;
                        case 's': case 'ss':
                            // Seconds.
                            sec = matchInt;
                            if (this.outOfRange(sec, 0, 59)) return null;
                            break;
                        case 'tt': case 't':
                            // AM/PM designator.
                            // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
                            // the AM tokens. If not, fail the parse for this format.
                            pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
                            if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2]))) return null;
                            break;
                        case 'f':
                            // Deciseconds.
                        case 'ff':
                            // Centiseconds.
                        case 'fff':
                            // Milliseconds.
                            msec = matchInt * Math.pow(10, 3 - clength);
                            if (this.outOfRange(msec, 0, 999)) return null;
                            break;
                        case 'ddd':
                            // Day of week.
                        case 'dddd':
                            // Day of week.
                            weekDay = this.getDayIndex(cal, matchGroup, clength === 3);
                            if (this.outOfRange(weekDay, 0, 6)) return null;
                            break;
                        case 'zzz':
                            // Time zone offset in +/- hours:min.
                            var offsets = matchGroup.split(/:/);
                            if (offsets.length !== 2) return null;
                            hourOffset = parseInt(offsets[0], 10);
                            if (this.outOfRange(hourOffset, -12, 13)) return null;
                            var minOffset = parseInt(offsets[1], 10);
                            if (this.outOfRange(minOffset, 0, 59)) return null;
                            tzMinOffset = (hourOffset * 60) + (startsWith(matchGroup, '-') ? -minOffset : minOffset);
                            break;
                        case 'z': case 'zz':
                            // Time zone offset in +/- hours.
                            hourOffset = matchInt;
                            if (this.outOfRange(hourOffset, -12, 13)) return null;
                            tzMinOffset = hourOffset * 60;
                            break;
                        case 'g': case 'gg':
                            var eraName = matchGroup;
                            if (!eraName || !cal.eras) return null;
                            eraName = trim(eraName.toLowerCase());
                            for (var i = 0, l = cal.eras.length; i < l; i++) {
                                if (eraName === cal.eras[i].name.toLowerCase()) {
                                    era = i;
                                    break;
                                }
                            }
                            // could not find an era with that name
                            if (era === null) return null;
                            break;
                    }
                }
            }
            var result = new Date(), defaultYear, convert = cal.convert;
            defaultYear = result.getFullYear();
            if (year === null) {
                year = defaultYear;
            }
            else if (cal.eras) {
                // year must be shifted to normal gregorian year
                // but not if year was not specified, its already normal gregorian
                // per the main if clause above.
                year += cal.eras[(era || 0)].offset;
            }
            // set default day and month to 1 and January, so if unspecified, these are the defaults
            // instead of the current day/month.
            if (month === null) {
                month = 0;
            }
            if (date === null) {
                date = 1;
            }
            // now have year, month, and date, but in the culture's calendar.
            // convert to gregorian if necessary
            if (convert) {
                result = convert.toGregorian(year, month, date);
                // conversion failed, must be an invalid match
                if (result === null) return null;
            }
            else {
                // have to set year, month and date together to avoid overflow based on current date.
                result.setFullYear(year, month, date);
                // check to see if date overflowed for specified month (only checked 1-31 above).
                if (result.getDate() !== date) return null;
                // invalid day of week.
                if (weekDay !== null && result.getDay() !== weekDay) {
                    return null;
                }
            }
            // if pm designator token was found make sure the hours fit the 24-hour clock.
            if (pmHour && hour < 12) {
                hour += 12;
            }
            result.setHours(hour, min, sec, msec);
            if (tzMinOffset !== null) {
                // adjust timezone to utc before applying local offset.
                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
                // Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours
                // to ensure both these fields will not exceed this range.  adjustedMin will range
                // somewhere between -1440 and 1500, so we only need to split this into hours.
                result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);
            }
            return result;
        },

        cleardatescache: function () {
            this.datescache = new Array();
        },

        formatdate: function (value, format, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }

            var lookupkey = value.toString() + "_" + format;
            if (this.datescache && this.datescache[lookupkey]) {
                return this.datescache[lookupkey];
            }

            if (!format || !format.length || format === 'i') {
                var ret;
                ret = this.formatDate(value, calendar.patterns.F, culture);
                return ret;
            }

            var eras = calendar.eras,
            sortable = format === "s";
            format = this.expandFormat(calendar, format);

            // Start with an empty string
            ret = [];
            var hour,
            zeros = ['0', '00', '000'],
            foundDay,
            checkedDay,
            dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
            quoteCount = 0,
            tokenRegExp = this.getTokenRegExp(),
            converted;

            function padZeros(num, c) {
                var r, s = num + '';
                if (c > 1 && s.length < c) {
                    r = (zeros[c - 2] + s);
                    return r.substr(r.length - c, c);
                }
                else {
                    r = s;
                }
                return r;
            }

            function hasDay() {
                if (foundDay || checkedDay) {
                    return foundDay;
                }
                foundDay = dayPartRegExp.test(format);
                checkedDay = true;
                return foundDay;
            }

            function getPart(date, part) {
                if (converted) {
                    return converted[part];
                }
                if (date.getMonth != undefined) {
                    switch (part) {
                        case 0: return date.getFullYear();
                        case 1: return date.getMonth();
                        case 2: return date.getDate();
                    }
                }
            }

            for (; ; ) {
                // Save the current index
                var index = tokenRegExp.lastIndex,
                // Look for the next pattern
                ar = tokenRegExp.exec(format);

                // Append the text before the pattern (or the end of the string if not found)
                var preMatch = format.slice(index, ar ? ar.index : format.length);
                quoteCount += this.appendPreOrPostMatch(preMatch, ret);

                if (!ar) {
                    break;
                }

                // do not replace any matches that occur inside a string literal.
                if (quoteCount % 2) {
                    ret.push(ar[0]);
                    continue;
                }

                var current = ar[0],
                clength = current.length;

                switch (current) {
                    case "ddd":
                        //Day of the week, as a three-letter abbreviation
                    case "dddd":
                        // Day of the week, using the full name
                        var names = (clength === 3) ? calendar.days.namesAbbr : calendar.days.names;
                        ret.push(names[value.getDay()]);
                        break;
                    case "d":
                        // Day of month, without leading zero for single-digit days
                    case "dd":
                        // Day of month, with leading zero for single-digit days
                        foundDay = true;
                        ret.push(padZeros(getPart(value, 2), clength));
                        break;
                    case "MMM":
                        // Month, as a three-letter abbreviation
                    case "MMMM":
                        // Month, using the full name
                        var part = getPart(value, 1);
                        ret.push(calendar.months[clength === 3 ? "namesAbbr" : "names"][part]);
                        break;
                    case "M":
                        // Month, as digits, with no leading zero for single-digit months
                    case "MM":
                        // Month, as digits, with leading zero for single-digit months
                        ret.push(padZeros(getPart(value, 1) + 1, clength));
                        break;
                    case "y":
                        // Year, as two digits, but with no leading zero for years less than 10
                    case "yy":
                        // Year, as two digits, with leading zero for years less than 10
                    case "yyyy":
                        // Year represented by four full digits
                        part = this.getEraYear(value, calendar, this.getEra(value, eras), sortable);
                        if (clength < 4) {
                            part = part % 100;
                        }
                        ret.push(padZeros(part, clength));
                        break;
                    case "h":
                        // Hours with no leading zero for single-digit hours, using 12-hour clock
                    case "hh":
                        // Hours with leading zero for single-digit hours, using 12-hour clock
                        hour = value.getHours() % 12;
                        if (hour === 0) hour = 12;
                        ret.push(padZeros(hour, clength));
                        break;
                    case "H":
                        // Hours with no leading zero for single-digit hours, using 24-hour clock
                    case "HH":
                        // Hours with leading zero for single-digit hours, using 24-hour clock
                        ret.push(padZeros(value.getHours(), clength));
                        break;
                    case "m":
                        // Minutes with no leading zero  for single-digit minutes
                    case "mm":
                        // Minutes with leading zero  for single-digit minutes
                        ret.push(padZeros(value.getMinutes(), clength));
                        break;
                    case "s":
                        // Seconds with no leading zero for single-digit seconds
                    case "ss":
                        // Seconds with leading zero for single-digit seconds
                        ret.push(padZeros(value.getSeconds(), clength));
                        break;
                    case "t":
                        // One character am/pm indicator ("a" or "p")
                    case "tt":
                        // Multicharacter am/pm indicator
                        part = value.getHours() < 12 ? (calendar.AM ? calendar.AM[0] : " ") : (calendar.PM ? calendar.PM[0] : " ");
                        ret.push(clength === 1 ? part.charAt(0) : part);
                        break;
                    case "f":
                        // Deciseconds
                    case "ff":
                        // Centiseconds
                    case "fff":
                        // Milliseconds
                        ret.push(padZeros(value.getMilliseconds(), 3).substr(0, clength));
                        break;
                    case "z":
                        // Time zone offset, no leading zero
                    case "zz":
                        // Time zone offset with leading zero
                        hour = value.getTimezoneOffset() / 60;
                        ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), clength));
                        break;
                    case "zzz":
                        // Time zone offset with leading zero
                        hour = value.getTimezoneOffset() / 60;
                        ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), 2) +
                        // Hard coded ":" separator, rather than using calendar.TimeSeparator
                        // Repeated here for consistency, plus ":" was already assumed in date parsing.
                    ":" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
                        break;
                    case "g":
                    case "gg":
                        if (calendar.eras) {
                            ret.push(calendar.eras[getEra(value, eras)].name);
                        }
                        break;
                    case "/":
                        ret.push(calendar["/"]);
                        break;
                    default:
                        throw "Invalid date format pattern '" + current + "'.";
                        break;
                }
            }

            var result = ret.join('');

            if (!this.datescache) {
                this.datescache = new Array();
            }

            this.datescache[lookupkey] = result;
            return result;
        }
    });
})(jQuery);/*
* Low priority rule is rule which index is smaller than another.
*
*   1) Required using masked input  -   DONE
*/
(function ($) {

    $.jqx.jqxWidget('jqxValidator', '', {});

    $.extend($.jqx._jqxValidator.prototype, {

        defineInstance: function () {
            this.rules = null;
            this.scroll = true;
            this.focus = true;
            this.scrollDuration = 300;
            this.scrollCallback = null;
            this.position = 'right';
            this.arrow = true;
            this.animation = 'fade';
            this.animationDuration = 150;
            this.closeOnClick = true;
            this.onError = null;
            this.onSuccess = null;
            this.ownerElement = null;
            this._events = ['validationError', 'validationSuccess'];
            this.hintPositionOffset = 5;
            this._inputHint = [];

        },

        createInstance: function () {
            this._configureInputs();
            this._removeEventListeners();
            this._addEventListeners();
        },

        destroy: function () {
            this._removeEventListeners();
            this.hide();
        },

        validate: function (result) {
            var valid = true,
                temp,
                minTop = Infinity,
                currentTop,
                topElement,
                tempElement,
                invalid = [],
                minTopElement;
            this.updatePosition();
            var me = this;
            var ruleFuncsCount = 0;
      
            for (var i = 0; i < this.rules.length; i += 1) {
                if (typeof this.rules[i].rule === 'function') {
                    ruleFuncsCount++;
                }
            }
            this.positions = new Array();
            for (var i = 0; i < this.rules.length; i += 1) {
               var input = $(this.rules[i].input);
               if (typeof this.rules[i].rule === 'function') {
                   var validate = function (isValid, rule) {
                       temp = isValid;
                       if (false == temp) {
                           valid = false;
                           var input = $(rule.input);
                           tempElement = $(rule.input);
                           invalid.push(tempElement);
                           currentTop = tempElement.offset().top;
                           if (minTop > currentTop) {
                               minTop = currentTop;
                               topElement = tempElement;
                           }
                       }
                       ruleFuncsCount--;
                       if (ruleFuncsCount == 0) {
                           if (typeof result === 'function') {
                               me._handleValidation(valid, minTop, topElement, invalid);
                               if (result) result(valid);
                           }
                       }
                   }
                   this._validateRule(this.rules[i], validate);
               }
               else {
                   temp = this._validateRule(this.rules[i]);
               }
                if (false == temp) {
                    valid = false;
                    tempElement = $(this.rules[i].input);
                    invalid.push(tempElement);
                    currentTop = tempElement.offset().top;
                    if (minTop > currentTop) {
                        minTop = currentTop;
                        topElement = tempElement;
                    }
                }
           }

            if (ruleFuncsCount == 0) {
                this._handleValidation(valid, minTop, topElement, invalid);
                return valid;
            }
            else {
                return undefined;
            }
        },

        validateInput: function (input) {
            var rules = this._getRulesForInput(input),
                valid = true;

            for (var i = 0; i < rules.length; i += 1) {
                if (!this._validateRule(rules[i])) {
                    valid = false;
                }
            }
            return valid;
        },

        hideHint: function (input) {
            var rules = this._getRulesForInput(input);
            for (var i = 0; i < rules.length; i += 1) {
                this._hideHintByRule(rules[i]);
            }
        },

        hide: function () {
            var rule;
            for (var i = 0; i < this.rules.length; i += 1) {
                rule = this.rules[i];
                this._hideHintByRule(this.rules[i]);
            }
        },

        updatePosition: function () {
            var rule;
            this.positions = new Array();
            for (var i = 0; i < this.rules.length; i += 1) {
                rule = this.rules[i];
                if (rule.hint) {
                    this._hintLayout(rule.hint, $(rule.input), rule.position,rule);
                }
            }
        },

        _getRulesForInput: function (input) {
            var rules = [];
            for (var i = 0; i < this.rules.length; i += 1) {
                if (this.rules[i].input === input) {
                    rules.push(this.rules[i]);
                }
            }
            return rules;
        },

        _validateRule: function (rule, validate) {
            var input = $(rule.input),
                hint,
                valid = true;
            var me = this;
            var commit = function (isValid) {
                if (!isValid) {
                    hint = rule.hintRender.apply(me, [rule.message, input]);
                    me._hintLayout(hint, input, rule.position, rule);
                    me._showHint(hint);
                    rule.hint = hint;
                    me._removeLowPriorityHints(rule);
                    if (validate) validate(false, rule);
                }
                else {
                    me._hideHintByRule(rule);
                    if (validate) validate(true, rule);
                }
            }

            var ruleResult = false;
            if (typeof rule.rule === 'function') {
                ruleResult = rule.rule.call(this, input, commit);
                if (ruleResult == true && validate) validate(true, rule);
            }

            if (typeof rule.rule === 'function' && ruleResult == false) {
                if (typeof rule.hintRender === 'function' && !rule.hint && !this._higherPriorityActive(rule) && input.is(':visible')) {
                    hint = rule.hintRender.apply(this, [rule.message, input]);
                    this._hintLayout(hint, input, rule.position, rule);
                    this._showHint(hint);
                    rule.hint = hint;
                    this._removeLowPriorityHints(rule);
                }
                valid = false;
                if (validate) validate(false, rule);
            } else {
                this._hideHintByRule(rule);
            }
            return valid;
        },

        _hideHintByRule: function (rule) {
            var self = this,
                hint;
            if (rule) {
                hint = rule.hint;
                if (hint) {
                    if (this.positions[Math.round(hint.offset().top) + "_" + Math.round(hint.offset().left)]) {
                        this.positions[Math.round(hint.offset().top) + "_" + Math.round(hint.offset().left)] = null;
                    }

                    if (this.animation === 'fade') {
                        hint.fadeOut(this.animationDuration, function () {
                            hint.remove();
                        });
                    } else {
                        hint.remove();
                    }
                }
                rule.hint = null;
            }
        },

        _handleValidation: function (valid, minTop, topElement, invalid) {
            if (!valid) {
                this._scrollHandler(minTop);
                if (this.focus) {
                    topElement.focus()
                }
                this._raiseEvent(0, { invalidInputs: invalid });
                if (typeof this.onError === 'function') {
                    this.onError(invalid);
                }
            } else {
                this._raiseEvent(1);
                if (typeof this.onSuccess === 'function') {
                    this.onSuccess();
                }
            }
        },

        _scrollHandler: function (minTop) {
            if (this.scroll) {
                var self = this;
                $('html,body').animate({ scrollTop: minTop }, this.scrollDuration, function () {
                    if (typeof self.scrollCallback === 'function') {
                        self.scrollCallback.call(self);
                    }
                });
            }
        },

        _higherPriorityActive: function (rule) {
            var reach = false,
                current;
            for (var i = this.rules.length - 1; i >= 0; i -= 1) {
                current = this.rules[i];
                if (reach && current.input === rule.input && current.hint) {
                    return true;
                }
                if (current === rule) {
                    reach = true;
                }
            }
            return false;
        },

        _removeLowPriorityHints: function (rule) {
            var reach = false,
                current;
            for (var i = 0; i < this.rules.length; i += 1) {
                current = this.rules[i];
                if (reach && current.input === rule.input) {
                    this._hideHintByRule(current);
                }
                if (current === rule) {
                    reach = true;
                }
            }
        },

        _getHintRuleByInput: function (input) {
            var current;
            for (var i = 0; i < this.rules.length; i += 1) {
                current = this.rules[i];
                if ($(current.input)[0] === input[0] && current.hint) {
                    return current;
                }
            }
            return null;
        },

        _removeEventListeners: function () {
            var rule,
                input,
                listeners;
            for (var i = 0; i < this.rules.length; i += 1) {
                rule = this.rules[i];
                listeners = rule.action.split(',');
                input = $(rule.input);
                for (var j = 0; j < listeners.length; j += 1) {
                    this.removeHandler(input, $.trim(listeners[j]) + '.jqx-validator');
                }
            }
        },

        _addEventListeners: function () {
            var rule,
                input;
            if (this.host.parents('.jqx-window').length > 0) {
                var self = this;
                var update = function () {
                    self.updatePosition();
                }

                var window = this.host.parents('.jqx-window');
                this.addHandler(window, 'closed',
                function () {
                    self.hide()
                 });
                this.addHandler(window, 'moved', update);
                this.addHandler(window, 'moving', update);
                this.addHandler(window, 'resized', update);
                this.addHandler(window, 'resizing', update);
            }

            for (var i = 0; i < this.rules.length; i += 1) {
                rule = this.rules[i];
                input = $(rule.input);
                this._addListenerTo(input, rule);
            }
        },

        _addListenerTo: function (input, rule) {
            var self = this,
                listeners = rule.action.split(',');

            var isJQWidget = false;
            if (this._isjQWidget(input)) {
                isJQWidget = true;
            }

            for (var i = 0; i < listeners.length; i += 1) {
                var event = $.trim(listeners[i]);

                if (isJQWidget && (event == 'blur' || event == 'focus')) {
                    input = input.find('input');
                }

                this.addHandler(input, event + '.jqx-validator', function (event) {
                    self._validateRule(rule);
                });
            }
        },

        _configureInputs: function () {
            var input,
                count;
            this.rules = this.rules || [];
            for (var i = 0; i < this.rules.length; i += 1) {
                this._handleInput(i);
            }
        },

        _handleInput: function (ruleId) {
            var rule = this.rules[ruleId];
            if (!rule['position']) {
                rule['position'] = this.position;
            }
            if (!rule['message']) {
                rule['message'] = 'test';
            }
            if (!rule['action']) {
                rule['action'] = 'blur';
            }
            if (!rule['hintRender']) {
                rule['hintRender'] = this._hintRender;
            }
            if (!rule['rule']) {
                rule['rule'] = null;
            } else {
                this._handleRule(rule);
            }
        },

        _handleRule: function (rule) {
            var validation = rule.rule,
                func,
                parameters,
                wrongParameter = false;
            if (typeof validation === 'string') {
                if (validation.indexOf('=') >= 0) {
                    validation = validation.split('=');
                    parameters = validation[1].split(',');
                    validation = validation[0];
                }
                func = this['_' + validation];
                if (func) {
                    rule.rule = function (input, commit) {
                        return func.apply(this, [input].concat(parameters));
                    };
                } else {
                    wrongParameter = true;
                }
            } else {
                if (typeof validation !== 'function') {
                    wrongParameter = true;
                } else {
                    rule.rule = validation;
                }
            }
            if (wrongParameter) {
                throw new Error('Wrong parameter!');
            }
        },

        _required: function (input) {
            switch (this._getType(input)) {
                case 'textarea':
                case 'password':
                case 'jqx-input':
                case 'text':
                    var data = $.data(input[0]);
                    if (data.jqxMaskedInput) {
                        var promptChar = input.jqxMaskedInput('promptChar'),
                            value = input.jqxMaskedInput('value');
                        return value && value.indexOf(promptChar) < 0;
                    } else if (data.jqxNumberInput) {
                        return input.jqxNumberInput('inputValue') !== '';
                    } else if (data.jqxDateTimeInput) {
                        return true;
                    } else {
                        return $.trim(input.val()) !== '';
                    }
                case 'checkbox':
                    return input.is(':checked');
                case 'radio':
                    return input.is(':checked');
                case 'div':
                    if (input.is('.jqx-checkbox')) {
                        return input.jqxCheckBox('checked');
                    }
                    return false;
            }
            return false;
        },

        _notNumber: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var re = /\d/;
                return !re.test(text);
            });
        },

        _startWithLetter: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var re = /\d/;
                return !re.test(text.substring(0, 1));
            });
        },

        _number: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                return !isNaN(parseInt(text, 10));
            });
        },

        _phone: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var phone = /^\(\d{3}\)(\d){3}-(\d){4}$/;
                return phone.test(text);
            });
        },

        _length: function (input, min, max) {
            return this._minLength(input, min) && this._maxLength(input, max);
        },

        _maxLength: function (input, len) {
            len = parseInt(len, 10);
            return this._validateText(input, function (text) {
                return text.length <= len;
            });
        },

        _minLength: function (input, len) {
            len = parseInt(len, 10);
            return this._validateText(input, function (text) {
                return text.length >= len;
            });
        },

        _email: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var email = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return email.test(text);
            });
        },

        _zipCode: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var zip = /^(^\d{5}$)|(^\d{5}-\d{4}$)|(\d{3}-\d{2}-\d{4})$/;
                return zip.test(text);
            });
        },

        _ssn: function (input) {
            return this._validateText(input, function (text) {
                if (text == "")
                    return true;

                var ssn = /\d{3}-\d{2}-\d{4}/;
                return ssn.test(text);
            });
        },

        _validateText: function (input, condition) {
            var value;
            if (this._isTextInput(input)) {
                if (this._isjQWidget(input)) {
                    value = input.find('input').val()
                } else {
                    value = input.val();
                }
                return condition(value);
            }
            return false;
        },

        _isjQWidget: function (input) {
            var data = $.data(input[0]);
            if (data.jqxMaskedInput || data.jqxNumberInput || data.jqxDateTimeInput) {
                return true;
            }
            return false;
        },

        _isTextInput: function (input) {
            var type = this._getType(input);
            return type === 'text' || type === 'textarea' || type === 'password' || input.is('.jqx-input');
        },

        _getType: function (input) {
            var tag = input[0].tagName.toLowerCase(),
                type;
            if (tag === 'textarea') {
                return 'textarea';
            } else if (input.is('.jqx-input')) {
                return 'jqx-input';
            } else if (tag === 'input') {
                type = $(input).attr('type') ? $(input).attr('type').toLowerCase() : 'text';
                return type;
            }
            return tag;
        },

        _hintRender: function (message, input) {
            var hint = $('<div class="' + this.toThemeProperty('jqx-validator-hint') + ' jqx-rc-all"></div>'),
                self = this;
            hint.html(message);
            if (this.closeOnClick) {
                hint.click(function () {
                    self.hideHint(input.selector);
                });
            }
            if (this.ownerElement == null) {
                hint.appendTo(document.body);
            }
            else {
                if (this.ownerElement.innerHTML) {
                    hint.appendTo($(this.ownerElement));
                }
                else hint.appendTo(this.ownerElement);
            }

            return hint;
        },

        _hintLayout: function (hint, input, position, rule) {
            var pos;
            pos = this._getPosition(input, position, hint, rule);
            hint.css({
                position: 'absolute',
                left: pos.left,
                top: pos.top
            });
            if (this.arrow) {
                this._addArrow(input, hint, position, pos);
            }
        },

        _showHint: function (hint) {
            if (this.animation === 'fade') {
                hint.fadeOut(0);
                hint.fadeIn(this.animationDuration);
            }
        },

        _getPosition: function (input, position, hint, rule) {
            var offset = input.offset(),
                top, left;
            var width = input.outerWidth();
            var height = input.outerHeight();

            if (this.ownerElement != null) {
                offset = { left: 0, top: 0 };
                offset.top = parseInt(offset.top) + input.position().top;
                offset.left = parseInt(offset.left) + input.position().left;
            }

            if (rule && rule.hintPositionRelativeElement) {
                var $hintPositionRelativeElement = $(rule.hintPositionRelativeElement);
                offset =  $hintPositionRelativeElement.offset();
                width = $hintPositionRelativeElement.width();
                height = $hintPositionRelativeElement.height();
            }

            if (position.indexOf('top') >= 0) {
                top = offset.top - height;
            } else if (position.indexOf('bottom') >= 0) {
                top = offset.top + hint.outerHeight() + this.hintPositionOffset;
            } else {
                top = offset.top;
            }
            if (position.indexOf('center') >= 0) {
                left = offset.left + this.hintPositionOffset + (width - hint.outerWidth()) / 2;
            } else if (position.indexOf('left') >= 0) {
                left = offset.left - hint.outerWidth() - this.hintPositionOffset;
            } else if (position.indexOf('right') >= 0) {
                left = offset.left + width + this.hintPositionOffset;
            } else {
                left = offset.left + this.hintPositionOffset;
            }
            if (position.indexOf(':') >= 0) {
                position = position.split(':')[1].split(',');
                left += parseInt(position[0], 10);
                top += parseInt(position[1], 10);
            }
            if (!this.positions) this.positions = new Array();
            if (this.positions[Math.round(top) + "_" + Math.round(left)]) {
                if (this.positions[Math.round(top) + "_" + Math.round(left)].top == top) top += input.outerHeight();
            }

            this.positions[Math.round(top) + "_" + Math.round(left)] = {
                left: left,
                top: top
            };

            return {
                left: left,
                top: top
            };
        },

        _addArrow: function (input, hint, position, coordinates) {
            var arrow = $('<div class="' + this.toThemeProperty('jqx-validator-hint-arrow') + '"></div>'),
                left,
                top;
            hint.children('.jqx-validator-hint-arrow').remove();
            hint.append(arrow);
            var aH = arrow.outerHeight(),
                aW = arrow.outerWidth(),
                hH = hint.outerHeight(),
                hW = hint.outerWidth();
            this._addImage(arrow);
            if (position.indexOf('top') >= 0) {
                top = hH - aH;
            } else if (position.indexOf('bottom') >= 0) {
                top = -aH/2;
            } else {
                top = (hH - aH) / 2 - aH / 2;
            }
            if (position.indexOf('center') >= 0) {
                left = (hW - aW) / 2;
            } else if (position.indexOf('left') >= 0) {
                left = hW + aW / 2;
            } else if (position.indexOf('right') >= 0) {
                left = -aW / 2;
            }
            if (position.indexOf('topright') >= 0 || position.indexOf('bottomright') >= 0) {
                left = 0;
            }
            if (position.indexOf('topleft') >= 0 || position.indexOf('bottomleft') >= 0) {
                left = hW - aW;
            }
            arrow.css({
                position: 'absolute',
                left: left,
                top: top
            });
        },

        _addImage: function (arrow) {
            var imgUrl = arrow.css('background-image');
            imgUrl = imgUrl.replace('url("', '');
            imgUrl = imgUrl.replace('")', '');
            imgUrl = imgUrl.replace('url(', '');
            imgUrl = imgUrl.replace(')', '');
            arrow.css('background-image', 'none');
            arrow.append('<img src="' + imgUrl + '" alt="Arrow" style="position: relative; ' +
            'top: 0px; left: 0px; width: ' + arrow.width() + 'px; height: ' + arrow.height() + 'px;" />');
        },

        _raiseEvent: function (eventId, data) {
            var event = $.Event(this._events[eventId]);
            event.args = data;
            return this.host.trigger(event);
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key === 'rules') {
                this._configureInputs();
                this._removeEventListeners();
                this._addEventListeners();
            }
        }
    });
})(jQuery);

(function ($) {
    $.jqx.cssroundedcorners = function (value) {
        var cssMap = {
            'all': 'jqx-rc-all',
            'top': 'jqx-rc-t',
            'bottom': 'jqx-rc-b',
            'left': 'jqx-rc-l',
            'right': 'jqx-rc-r',
            'top-right': 'jqx-rc-tr',
            'top-left': 'jqx-rc-tl',
            'bottom-right': 'jqx-rc-br',
            'bottom-left': 'jqx-rc-br'
        };

        for (prop in cssMap) {
            if (!cssMap.hasOwnProperty(prop))
                continue;

            if (value == prop)
                return cssMap[prop];
        }
    }

    $.jqx.jqxWidget("jqxButton", "", {});

    $.extend($.jqx._jqxButton.prototype, {
        defineInstance: function () {
            this.cursor = 'arrow';
            // rounds the button corners.
            this.roundedCorners = 'all';
            // enables / disables the button
            this.disabled = false;
            // sets height to the button.
            this.height = null;
            // sets width to the button.
            this.width = null;
            this.overrideTheme = false;
            this.enableHover = true;
        },

        createInstance: function (args) {
            var self = this;
            this._setSize();

            if (!this.overrideTheme) {
                this.host.addClass(this.toThemeProperty($.jqx.cssroundedcorners(this.roundedCorners)));
                this.host.addClass(this.toThemeProperty('jqx-button'));
                this.host.addClass(this.toThemeProperty('jqx-widget'));
            }

            this.isTouchDevice = $.jqx.mobile.isTouchDevice();
      
            this.host.css({ cursor: this.cursor });

            if (!this.isTouchDevice) {
                this.addHandler(this.host, 'mouseenter', function (event) {
                    if (!self.disabled && self.enableHover) {
                        self.isMouseOver = true;
                        self.refresh();
                    }
                });

                this.addHandler(this.host, 'mouseleave', function (event) {
                    if (!self.disabled && self.enableHover) {
                        self.isMouseOver = false;
                        self.refresh();
                    }
                });
            }

            this.addHandler(this.host, 'selectstart', function (event) {
                return false;
            });

            this.addHandler(this.host, 'mousedown', function (event) {
                if (!self.disabled) {
                    self.isPressed = true;
                    self.refresh();
                }
            });

            this.addHandler(this.host, 'focus', function (event) {
                if (!self.disabled) {
                    self.isFocused = true;
                    self.refresh();
                }
            });

            this.addHandler(this.host, 'blur', function (event) {
                if (!self.disabled) {
                    self.isFocused = false;
                    self.refresh();
                }
            });

            this.mouseupfunc = function (event) {
                if (!self.disabled) {
                    self.isPressed = false;
                    self.refresh();
                }
            }

            this.addHandler($(document), 'mouseup.button' + this.element.id, this.mouseupfunc);

            if (document.referrer != "" || window.frameElement) {
                try {
                    if (window.top != null && window.top != window.self) {
                        var parentLocation = '';
                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }

                        if (parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                self.isPressed = false;
                                self.refresh();
                            };

                            if (window.top.document) {
                                if (window.top.document.addEventListener) {
                                    window.top.document.addEventListener('mouseup', eventHandle, false);

                                } else if (window.top.document.attachEvent) {
                                    window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                                }
                            }
                        }
                    }
                }
                catch (error) {
                }
            }

            this.propertyChangeMap['roundedCorners'] = function (instance, key, oldVal, value) {
                instance.refresh();
            }
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                instance._setSize();
                instance.refresh();
            }
            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                instance._setSize();
                instance.refresh();
            }
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    self.host[0].disabled = value;
                    instance.refresh();
                }
            }

            this.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {
                instance.host.removeClass();

                instance.host.addClass(instance.toThemeProperty('jqx-button'));
                instance.host.addClass(instance.toThemeProperty('jqx-widget'));
                if (!instance.overrideTheme) {
                    instance.host.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(instance.roundedCorners)));
                }
                instance._oldCSSCurrent = null;
                instance.refresh();
            }
        }, // createInstance

        _setSize: function () {
            if (this.width != null && (this.width.toString().indexOf("px") != -1 || this.width.toString().indexOf("%") != -1)) {
                this.host.css('width', this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.css('width', this.width);
                };

            if (this.height != null && (this.height.toString().indexOf("px") != -1 || this.height.toString().indexOf("%") != -1)) {
                this.host.css('height', this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.css('height', this.height);
            };
        },

        _removeHandlers: function () {
            this.removeHandler(this.host, 'selectstart');
            this.removeHandler(this.host, 'click');
            this.removeHandler(this.host, 'focus');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.host, 'mousedown');
            this.removeHandler($(document), 'mouseup.button' + this.element.id, this.mouseupfunc);
            this.mouseupfunc = null;
        },

        destroy: function () {
            this._removeHandlers();
            this.host.removeClass();
            this.host.removeData();
            this.host.remove();
        },

        refresh: function () {
            if (this.overrideTheme)
                return;

            var cssFocused = this.toThemeProperty('jqx-fill-state-focus');
            var cssDisabled = this.toThemeProperty('jqx-fill-state-disabled');
            var cssNormal = this.toThemeProperty('jqx-fill-state-normal');
            var cssHover = this.toThemeProperty('jqx-fill-state-hover');
            var cssPressed = this.toThemeProperty('jqx-fill-state-pressed');
            var cssPressedHover = this.toThemeProperty('jqx-fill-state-pressed');
            var cssCurrent = '';
            this.host[0].disabled = this.disabled;

            if (this.disabled) {
                cssCurrent = cssDisabled;
            }
            else {
                if (this.isMouseOver && !this.isTouchDevice) {
                    if (this.isPressed)
                        cssCurrent = cssPressedHover;
                    else
                        cssCurrent = cssHover;
                }
                else {
                    if (this.isPressed)
                        cssCurrent = cssPressed;
                    else
                        cssCurrent = cssNormal;
                }
            }

            if (this.isFocused) {
                cssCurrent += " " + cssFocused;
            }

            if (cssCurrent != this._oldCSSCurrent) {
                if (this._oldCSSCurrent) {
                    this.host.removeClass(this._oldCSSCurrent);
                }
                this.host.addClass(cssCurrent);
                this._oldCSSCurrent = cssCurrent;
            }
        }
    });

    //// LinkButton
    $.jqx.jqxWidget("jqxLinkButton", "", {});

    $.extend($.jqx._jqxLinkButton.prototype, {
        createInstance: function (args) {
            var self = this;
            this.host.onselectstart = function () { return false; }
            var height = this.height || this.host.height();
            var width = this.width || this.host.width();
            this.href = this.host.attr('href');
            this.target = this.host.attr('target');
            this.content = this.host.text();
            this.element.innerHTML = "";
            this.host.append("<input type='button' class='jqx-wrapper'/>");
            var wrapElement = this.host.find('input');
            wrapElement.addClass(this.toThemeProperty('jqx-reset'));
            wrapElement.width(width);
            wrapElement.height(height);
            wrapElement.val(this.content);
            this.host.find('tr').addClass(this.toThemeProperty('jqx-reset'));
            this.host.find('td').addClass(this.toThemeProperty('jqx-reset'));
            this.host.find('tbody').addClass(this.toThemeProperty('jqx-reset'));
            this.host.css('color', 'inherit');
            this.host.addClass(this.toThemeProperty('jqx-link'));

            wrapElement.css({ width: width });
            wrapElement.css({ height: height });
            var param = args == undefined ? {} : args[0] || {};
            wrapElement.jqxButton(param);

            if (this.disabled) {
                this.host[0].disabled = true;
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                self.host[0].disabled = value;
            }

            this.addHandler(wrapElement, 'click', function (event) {
                if (!this.disabled) {
                    self.onclick(event);
                }
                return false;
            });
        },

        onclick: function (event) {
            if (this.target != null) {
                window.open(this.href, this.target);
            }
            else {
                window.location = this.href;
            }
        }
    });
    //// End of LinkButton

    //// RepeatButton
    $.jqx.jqxWidget("jqxRepeatButton", "jqxButton", {});

    $.extend($.jqx._jqxRepeatButton.prototype, {
        createInstance: function (args) {
            var self = this;
            // repeat click delay.
            this.delay = this.delay || 50;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();

            this.addHandler($(document), 'mouseup.' + this.base.element.id, function (event) {
                if (!isTouchDevice) {
                    if (self.timeout != null) {
                        clearTimeout(self.timeout);
                        self.timeout = null;
                        self.refresh();
                    }
                    if (self.timer != undefined) {
                        clearInterval(self.timer);
                        self.timer = null;
                        self.refresh();
                    }
                }
            });

            this.addHandler(this.base.host, 'mousedown', function (event) {
                if (!isTouchDevice) {
                    if (self.timer != null) {
                        clearInterval(self.timer);
                    }

                    self.timeout = setTimeout(function () {
                        clearInterval(self.timer);
                        self.timer = setInterval(function (event) { self.ontimer(event); }, self.delay);
                    }, 150);
                }
            });

            this.addHandler(this.base.host, 'mousemove', function (event) {
                if (!isTouchDevice) {
                    if (event.which == 0) {
                        if (self.timer != null) {
                            clearInterval(self.timer);
                            self.timer = null;
                        }
                    }
                }
            });
        },

        destroy: function()
        {
            this.removeHandler(this.base.host, 'mousemove');
            this.removeHandler(this.base.host, 'mousedown');
            this.removeHandler($(document), 'mouseup.' + this.base.element.id);
            this.timer = null;
            this.base.destroy();
        },

        stop: function () {
            clearInterval(this.timer);
            this.timer = null;
        },

        ontimer: function (event) {
            var event = new jQuery.Event('click');
            if (this.base != null && this.base.host != null) {
                this.base.host.trigger(event);
            }
        }
    });
    //// End of RepeatButton
    //// ToggleButton
    $.jqx.jqxWidget("jqxToggleButton", "jqxButton", {});

    $.extend($.jqx._jqxToggleButton.prototype, {
        defineInstance: function () {
            this.toggled = false;
        },

        createInstance: function (args) {
            var self = this;
            this.base.overrideTheme = true;
            this.isTouchDevice = $.jqx.mobile.isTouchDevice();

            this.addHandler(this.base.host, 'click', function (event) {
                self.toggle();
            });

            if (!this.isTouchDevice) {
                this.addHandler(this.base.host, 'mouseenter', function (event) {
                    if (!self.base.disabled) {
                        self.refresh();
                    }
                });

                this.addHandler(this.base.host, 'mouseleave', function (event) {
                    if (!self.base.disabled) {
                        self.refresh();
                    }
                });
            }

            this.addHandler(this.base.host, 'mousedown', function (event) {
                if (!self.base.disabled) {
                    self.refresh();
                }
            });

            this.addHandler($(document), 'mouseup', function (event) {
                if (!self.base.disabled) {
                    self.refresh();
                }
            });
        },

        _removeHandlers: function () {
            this.removeHandler(this.base.host, 'click');
            this.removeHandler(this.base.host, 'mouseenter');
            this.removeHandler(this.base.host, 'mouseleave');
            this.removeHandler(this.base.host, 'mousedown');
            this.removeHandler($(document), 'mouseup');
        },

        toggle: function () {
            this.toggled = !this.toggled;
            this.refresh();
        },

        unCheck: function () {
            this.toggled = false;
            this.refresh();
        },

        check: function () {
            this.toggled = true;
            this.refresh();
        },

        refresh: function () {
            var cssDisabled = this.base.toThemeProperty('jqx-fill-state-disabled');
            var cssNormal = this.base.toThemeProperty('jqx-fill-state-normal');
            var cssHover = this.base.toThemeProperty('jqx-fill-state-hover');
            var cssPressed = this.base.toThemeProperty('jqx-fill-state-pressed');
            var cssPressedHover = this.base.toThemeProperty('jqx-fill-state-pressed');
            var cssCurrent = '';
            this.base.host[0].disabled = this.base.disabled;

            if (this.base.disabled) {
                cssCurrent = cssDisabled;
            }
            else {
                if (this.base.isMouseOver && !this.isTouchDevice) {
                    if (this.base.isPressed || this.toggled)
                        cssCurrent = cssPressedHover;
                    else
                        cssCurrent = cssHover;
                }
                else {
                    if (this.base.isPressed || this.toggled)
                        cssCurrent = cssPressed;
                    else
                        cssCurrent = cssNormal;
                }
            }

            if (this.base.host.hasClass(cssDisabled) && cssDisabled != cssCurrent)
                this.base.host.removeClass(cssDisabled);

            if (this.base.host.hasClass(cssNormal) && cssNormal != cssCurrent)
                this.base.host.removeClass(cssNormal);

            if (this.base.host.hasClass(cssHover) && cssHover != cssCurrent)
                this.base.host.removeClass(cssHover);

            if (this.base.host.hasClass(cssPressed) && cssPressed != cssCurrent)
                this.base.host.removeClass(cssPressed);

            if (this.base.host.hasClass(cssPressedHover) && cssPressedHover != cssCurrent)
                this.base.host.removeClass(cssPressedHover);

            if (!this.base.host.hasClass(cssCurrent))
                this.base.host.addClass(cssCurrent);
        }
    });
    //// End of ToggleButton

})(jQuery);
(function ($) {

    $.jqx.jqxWidget("jqxDropDownButton", "", {});

    $.extend($.jqx._jqxDropDownButton.prototype, {
        defineInstance: function () {
            // enables/disables the dropdownlist.
            this.disabled = false;
            // gets or sets the popup width.
            this.width = null;
            // gets or sets the popup height.
            this.height = null;
            // gets or sets the scrollbars size.
            this.arrowSize = 19;
            // enables/disables the hover state.
            this.enableHover = true;
            // Type: Number
            // Default: 100
            // Showing Popup Animation's delay.
            if (this.openDelay == undefined) {
                this.openDelay = 350;
            }
            // Type: Number
            // Default: 200
            // Hiding Popup Animation's delay.
            if (this.closeDelay == undefined) {
                this.closeDelay = 400;
            }
            // default, none
            // Type: String.
            // enables or disables the animation.
            this.animationType = 'default';
            // Type: Boolean
            // Default: false
            // Enables or disables the browser detection.
            this.enableBrowserBoundsDetection = false;
            this.dropDownHorizontalAlignment = 'left';
            this.dropDownZIndex = 9999;
            this.autoOpen = false;

            this.events =
	   	    [
            // occurs when the dropdownbutton is opened.
		      'open',
            // occurs when the dropdownbutton is closed.
              'close'
            ];
        },

        createInstance: function (args) {
            this.isanimating = false;

            var dropDownButtonStructure = $("<div tabIndex=0 style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>" +
                "<div id='dropDownButtonWrapper' style='outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'>" +
                "<div id='dropDownButtonContent' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'/>" +
                "<div id='dropDownButtonArrow' style='background-color: transparent; border: none; float: right; position: relative;'><div></div></div>" +
                "</div>" +
                "</div>");

            this.popupContent = this.host.children();

            if (this.popupContent.length == 0) {
                this.popupContent = $('<div>' + this.host.text() + '</div>');
                this.popupContent.css('display', 'block');
                this.element.innerHTML = "";
            }
            else {
                this.popupContent.detach();
            }

            var me = this;
            this.addHandler(this.host, 'loadContent', function (event) {
                me._arrange();
            });

            try {
                var popupID = 'dropDownButtonPopup' + this.element.id;
                var oldContainer = $($.find('#' + popupID));
                if (oldContainer.length > 0) {
                    oldContainer.remove();
                }

                var container = $("<div class='dropDownButton' style='background-color: transparent; border-width: 0px; overflow: hidden; border-style: solid; position: absolute;' id='dropDownButtonPopup" + this.element.id + "'></div>");
                container.addClass(this.toThemeProperty('jqx-widget-content'));
                container.addClass(this.toThemeProperty('jqx-rc-all'));
                container.css('z-index', this.dropDownZIndex);
                this.popupContent.appendTo(container);
                container.appendTo(document.body);
                this.container = container;
                if (this.animationType == 'none') {
                    this.container.css('visibility', 'hidden');
                }
                else {
                    this.container.css('visibility', 'hidden');
                }
            }
            catch (e) {

            }

            this.touch = $.jqx.mobile.isTouchDevice();
            this.dropDownButtonStructure = dropDownButtonStructure;
            this.host.append(dropDownButtonStructure);

            this.dropDownButtonWrapper = this.host.find('#dropDownButtonWrapper');
            this.dropDownButtonArrow = this.host.find('#dropDownButtonArrow');
            this.arrow = $(this.dropDownButtonArrow.children()[0]);
            this.dropDownButtonContent = this.host.find('#dropDownButtonContent');
            this.dropDownButtonContent.addClass(this.toThemeProperty('jqx-dropdownlist-content'));
            this.dropDownButtonWrapper.addClass(this.toThemeProperty('jqx-disableselect'));
            this.addHandler(this.dropDownButtonWrapper, 'selectstart', function () { return false; });
            this.dropDownButtonWrapper[0].id = "dropDownButtonWrapper" + this.element.id;
            this.dropDownButtonArrow[0].id = "dropDownButtonArrow" + this.element.id;
            this.dropDownButtonContent[0].id = "dropDownButtonContent" + this.element.id;

            var self = this;
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropDownButtonContent.addClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
                else {
                    instance.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropDownButtonContent.removeClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.dropDownButtonContent.addClass(this.toThemeProperty('jqx-dropdownlist-content-disabled'));
            }

            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));
            this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-normal'));
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-normal'));

            this.arrow.addClass(this.toThemeProperty('icon-arrow-down'));
            this.arrow.addClass(this.toThemeProperty('icon'));
            this._setSize();
            this.render();
            // fix for IE7
            if ($.browser.msie && $.browser.version < 8) {
                this.container.css('display', 'none');
                if (this.host.parents('.jqx-window').length > 0) {
                    var zIndex = this.host.parents('.jqx-window').css('z-index');
                    container.css('z-index', zIndex + 10);
                    this.container.css('z-index', zIndex + 10);
                }
            }
        },

        // sets the button's content.
        setContent: function (element) {
            this.dropDownButtonContent.children().remove();
            this.dropDownButtonContent[0].innerHTML = "";
            this.dropDownButtonContent.append(element);
        },

        // get the button's content.
        getContent: function () {
            if (this.dropDownButtonContent.children().length > 0) {
                return this.dropDownButtonContent.children();
            }

            return this.dropDownButtonContent.text();
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.height(this.height);
            }

            if (isPercentage) {
                this.refresh(false);
                var me = this;
                var width = this.host.width();

                $(window).resize(function () {
                    me._arrange();
                });
            }
        },

        // returns true when the popup is opened, otherwise returns false.
        isOpened: function () {
            var me = this;
            var openedpopup = $.data(document.body, "openedJQXButton" + this.element.id);
            if (openedpopup != null && openedpopup == me.popupContent) {
                return true;
            }

            return false;
        },

        render: function () {
            this.removeHandlers();
            var self = this;
            var hovered = false;

            if (!this.touch) {
                this.host.hover(function () {
                    if (!self.disabled && self.enableHover) {
                        hovered = true;
                        self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.arrow.addClass(self.toThemeProperty('icon-arrow-down-hover'));
                        self.host.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                    }
                }, function () {
                    if (!self.disabled && self.enableHover) {
                        self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.host.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        self.arrow.removeClass(self.toThemeProperty('icon-arrow-down-hover'));
                        hovered = false;
                    }
                });
            }

            if (self.autoOpen) {
                this.addHandler(this.host, 'mouseenter', function () {
                    var isOpened = self.isOpened();
                    if (!isOpened && self.autoOpen) {
                        self.open();
                        self.host.focus();
                    }
                });

                $(document).bind('mousemove.' + self.element.id, function (event) {
                    var isOpened = self.isOpened();
                    if (isOpened && self.autoOpen) {
                        var offset = self.host.offset();
                        var top = offset.top;
                        var left = offset.left;
                        var popupOffset = self.container.offset();
                        var popupLeft = popupOffset.left;
                        var popupTop = popupOffset.top;

                        canClose = true;

                        if (event.pageY >= top && event.pageY <= top + self.host.height()) {
                            if (event.pageX >= left && event.pageX < left + self.host.width())
                                canClose = false;
                        }
                        if (event.pageY >= popupTop && event.pageY <= popupTop + self.container.height()) {
                            if (event.pageX >= popupLeft && event.pageX < popupLeft + self.container.width())
                                canClose = false;
                        }

                        if (canClose) {
                            self.close();
                        }
                    }
                });
            }

            this.addHandler(this.dropDownButtonWrapper, 'mousedown',
            function (event) {
                if (!self.disabled) {
                    var isOpen = self.container.css('visibility') == 'visible';
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.close();
                        }
                        else {
                            self.open();
                        }
                    }
                }
            });

            this.addHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedDropDown, { me: this, popup: this.container, id: this.element.id });
            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            if (self.isOpened()) {
                                var data = { me: self, popup: self.container, id: self.element.id };
                                event.data = data;
                                //self.closeOpenedDropDown(event);
                            }
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mousedown', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mousedown', eventHandle);
                        }
                    }
                }
            }

            this.addHandler(this.host, 'keydown', function (event) {
                var isOpen = self.container.css('visibility') == 'visible';

                if (self.host.css('display') == 'none') {
                    return true;
                }

                if (event.keyCode == '13') {
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.close();
                        }
                        else {
                            self.open();
                        }
                    }
                }

                if (event.keyCode == 115) {
                    if (!self.isanimating) {
                        if (!self.isOpened()) {
                            self.open();
                        }
                        else if (self.isOpened()) {
                            self.close();
                        }
                    }
                    return false;
                }

                if (event.altKey) {
                    if (self.host.css('display') == 'block') {
                        if (event.keyCode == 38) {
                            if (self.isOpened()) {
                                self.close();
                            }
                        }
                        else if (event.keyCode == 40) {
                            if (!self.isOpened()) {
                                self.open();
                            }
                        }
                    }
                }

                if (event.keyCode == '27') {
                    if (!self.ishiding) {
                        self.close();
                        if (self.tempSelectedIndex != undefined) {
                            self.selectIndex(self.tempSelectedIndex);
                        }
                    }
                }
            });

            this.addHandler(this.host.find('div:first'), 'focus', function () {
                self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
            });
            this.addHandler(this.host.find('div:first'), 'blur', function () {
                self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
            });
        },

        removeHandlers: function () {
            var self = this;
            this.removeHandler(this.dropDownButtonWrapper, 'mousedown');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.host.find('div:first'), 'focus');
            this.removeHandler(this.host.find('div:first'), 'blur');
            this.host.unbind('hover');
            this.removeHandler(this.host, 'mouseenter');
            $(document).unbind('mousemove.' + self.element.id);
        },

        _findPos: function (obj) {
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj['nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },

        testOffset: function (element, offset, inputHeight) {
            var dpWidth = element.outerWidth();
            var dpHeight = element.outerHeight();
            var viewWidth = $(window).width() + $(window).scrollLeft();
            var viewHeight = $(window).height() + $(window).scrollTop();

            // now check if dropdownbutton is showing outside window viewport - move to a better place if so.
            if (offset.left + dpWidth > viewWidth) {
                if (dpWidth > this.host.width()) {
                    var hostLeft = this.host.offset().left;
                    var hOffset = dpWidth - this.host.width();
                    offset.left = hostLeft - hOffset + 2;
                }
            }
            if (offset.left < 0) {
                offset.left = parseInt(this.host.offset().left) + 'px'
            }

            if (offset.top + dpHeight > viewHeight) {
                offset.top -= Math.abs(dpHeight + inputHeight);
            }

            return offset;
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        // shows the popup.
        open: function () {
            var self = this;
            var popup = this.popupContent;
            var scrollPosition = $(window).scrollTop();
            var scrollLeftPosition = $(window).scrollLeft();
            var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';
            var left = parseInt(this.host.offset().left) + 'px';
            var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser();
            var hasTransform = $.jqx.utilities.hasTransform(this.host);

            this.ishiding = false;

            this.tempSelectedIndex = this.selectedIndex;

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top + 'px';
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left + 'px';
            }

            if (hasTransform || (isMobileBrowser != null && isMobileBrowser)) {
                left = $.jqx.mobile.getLeftPos(this.element);
                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());
            }

            popup.stop();
            this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.arrow.addClass(this.toThemeProperty('icon-arrow-down-selected'));

            var ie7 = false;
            if ($.browser.msie && $.browser.version < 8) {
                ie7 = true;
            }

            if (ie7) {
                this.container.css('display', 'block');
            }

            this.container.css('left', left);
            this.container.css('top', top);

            var closeAfterSelection = true;

            var positionChanged = false;

            if (this.dropDownHorizontalAlignment == 'right') {
                var containerWidth = this.container.width();
                var containerLeftOffset = Math.abs(containerWidth - this.host.width());
                if (containerWidth > this.host.width()) {
                    this.container.css('left', 25 + parseInt(left) - containerLeftOffset + "px");
                }
                else this.container.css('left', 25 + parseInt(left) + containerLeftOffset + "px");
            }

            if (this.enableBrowserBoundsDetection) {
                var newOffset = this.testOffset(popup, { left: parseInt(this.container.css('left')), top: parseInt(top) }, parseInt(this.host.outerHeight()));
                if (parseInt(this.container.css('top')) != newOffset.top) {
                    positionChanged = true;
                    this.container.height(popup.outerHeight());
                    popup.css('top', 23);

                    if (this.interval)
                        clearInterval(this.interval);

                    this.interval = setInterval(function () {
                        if (popup.outerHeight() != self.container.height()) {
                            var newOffset = self.testOffset(popup, { left: parseInt(self.container.css('left')), top: parseInt(top) }, parseInt(self.host.outerHeight()));
                            self.container.css('top', newOffset.top);
                            self.container.height(popup.outerHeight());
                        }
                    }, 50);
                }
                else popup.css('top', 0);
                this.container.css('top', newOffset.top);
                if (parseInt(this.container.css('left')) != newOffset.left) {
                    this.container.css('left', newOffset.left);
                }
            }

            if (this.animationType == 'none') {
                this.container.css('visibility', 'visible');
                $.data(document.body, "openedJQXButtonParent", self);
                $.data(document.body, "openedJQXButton" + this.element.id, popup);
                popup.css('margin-top', 0);
                popup.css('opacity', 1);
            }
            else {
                this.container.css('visibility', 'visible');
                var height = popup.outerHeight();
                self.isanimating = true;
                if (this.animationType == 'fade') {
                    popup.css('margin-top', 0);
                    popup.css('opacity', 0);
                    popup.animate({ 'opacity': 1 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXButtonParent", self);
                        $.data(document.body, "openedJQXButton" + self.element.id, popup);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
                else {
                    popup.css('opacity', 1);
                    if (positionChanged) {
                        popup.css('margin-top', height);
                    }
                    else {
                        popup.css('margin-top', -height);
                    }

                    popup.animate({ 'margin-top': 0 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXButtonParent", self);
                        $.data(document.body, "openedJQXButton" + self.element.id, popup);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
            }
            this._raiseEvent('0');
        },

        //OBSOLETE use close instead. 
        hide: function () {
            this.close();
        },

        //OBSOLETE use open instead. 
        show: function () {
            this.open();
        },

        // hides the popup.
        close: function () {
            var popup = this.popupContent;
            var container = this.container;
            var me = this;
            var ie7 = false;
            if ($.browser.msie && $.browser.version < 8) {
                ie7 = true;
            }

            $.data(document.body, "openedJQXButton" + this.element.id, null);
            if (this.animationType == 'none') {
                this.container.css('visibility', 'hidden');
                if (ie7) {
                    this.container.css('display', 'none');
                }
            }
            else {
                if (!me.ishiding) {
                    me.isanimating = true;
                    popup.stop();
                    var height = popup.outerHeight();
                    popup.css('margin-top', 0);
                    var animationValue = -height;
                    if (parseInt(this.container.offset().top) < parseInt(this.host.offset().top)) {
                        animationValue = height;
                    }
                    if (this.animationType == 'fade') {
                        popup.css({ 'opacity': 1 });
                        popup.animate({ 'opacity': 0 }, this.closeDelay, function () {
                            container.css('visibility', 'hidden');
                            me.isanimating = false;
                            me.ishiding = false;
                            if (ie7) {
                                container.css('display', 'none');
                            }
                        });
                    }
                    else {
                        popup.animate({ 'margin-top': animationValue }, this.closeDelay, function () {
                            container.css('visibility', 'hidden');
                            me.isanimating = false;
                            me.ishiding = false;
                            if (ie7) {
                                container.css('display', 'none');
                            }
                        });
                    }
                }
            }

            this.ishiding = true;
            this.host.removeClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.arrow.removeClass(this.toThemeProperty('icon-arrow-down-selected'));
            this._raiseEvent('1');
        },

        /* Close popup if clicked elsewhere. */
        closeOpenedDropDown: function (event) {
            var self = event.data.me;
            var $target = $(event.target);

            if ($(event.target).ischildof(event.data.me.host)) {
                return true;
            }

            if ($(event.target).ischildof(event.data.me.popupContent)) {
                return true;
            }

            var dropdownlistInstance = self;

            var isPopup = false;
            $.each($target.parents(), function () {
                if (this.className != 'undefined') {
                    if (this.className.indexOf('dropDownButton') != -1 || this.className.indexOf('menu') != -1) {
                        isPopup = true;
                        return false;
                    }
                }
            });

            if (!isPopup) {
                self.close();
            }

            return true;
        },

        refresh: function () {
            this._arrange();
        },

        _arrange: function () {
            var width = parseInt(this.host.width());
            var height = parseInt(this.host.height());
            var arrowHeight = this.arrowSize;
            var arrowWidth = this.arrowSize;
            var rightOffset = 3;
            var contentWidth = width - arrowWidth - 2 * rightOffset;
            if (contentWidth > 0) {
                this.dropDownButtonContent.width(contentWidth + 'px');
            }

            this.dropDownButtonContent.height(height);
            this.dropDownButtonContent.css('left', 0);
            this.dropDownButtonContent.css('top', 0);

            this.dropDownButtonArrow.width(arrowWidth);
            this.dropDownButtonArrow.height(height);
        },

        destroy: function () {
            this.removeHandler(this.dropDownButtonWrapper, 'selectstart');
            this.removeHandler(this.dropDownButtonWrapper, 'mousedown');
            this.removeHandler(this.host, 'keydown');
            this.host.removeClass();
            this.removeHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedDropDown);
            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            if (id == 2 || id == 3 || id == 4) {
                event.args = arg;
            }

            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'autoOpen') {
                object.render();
            }

            if (key == 'theme' && value != null) {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }

            if (key == 'width' || key == 'height') {
                object._setSize();
                object._arrange();
            }
        }
    });
})(jQuery);﻿(function ($) {

    $.jqx.jqxWidget("jqxColorPicker", "", {});

    $.extend($.jqx._jqxColorPicker.prototype, {
        defineInstance: function () {
            // enables / disables the button
            this.disabled = false;
            // sets height to the button.
            this.height = null;
            // sets width to the button.
            this.width = null;
            // sets the color.
            this.color = new $.jqx.color({ hex: 'ff0000' });
            this.redString = "R:";
            this.greenString = "G:";
            this.blueString = "B:";
            this.showTransparent = false;
            this.colorMode = "saturation";

            this.events =
			[
               'colorchange',
            ];
        },

        createInstance: function (args) {
            var self = this;

            this._setSize();
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-reset'));
            this.host.addClass(this.toThemeProperty('jqx-color-picker'));

            this.container = $("<div style='width: 100%; height: 100%; position: relative;'></div>");
            this.container.appendTo(this.host);

            this.colorMap = $("<div style='left: 0; top: 0; position: absolute;'></div>");
            this.colorMap.appendTo(this.container);

            this.colorBar = $("<div style='left: 0; top: 0; position: absolute;'></div>");
            this.colorBar.appendTo(this.container);

            this.colorPanel = $("<div style='left: 0; top: 0; position: absolute;'></div>");
            this.colorPanel.appendTo(this.container);

            this.hexPanel = $("<div style='float: left;'></div>");
            this.hexPanel.appendTo(this.colorPanel);
            this.hexPanel.append('<span>#</span>');
            this.hex = $("<input maxlength='6' style='height: 16px;'/>");
            this.hex.addClass(this.toThemeProperty('jqx-input'));
            this.hex.appendTo(this.hexPanel);

            this.rgb = $("<div style='float: left; margin-top: 2px;'></div>");
            this.rgb.appendTo(this.colorPanel);

            this.red = $("<input style='width: 25px; height: 16px;' maxlength='3'/>");
            this.red.addClass(this.toThemeProperty('jqx-input'));
            this.rgb.append('<span>' + this.redString + '</span>');
            this.red.appendTo(this.rgb);

            this.green = $("<input style='margin-right: 2px; height: 16px; width: 25px;' maxlength='3'/>");
            this.green.addClass(this.toThemeProperty('jqx-input'));
            this.rgb.append('<span>' + this.greenString + '</span>');
            this.green.appendTo(this.rgb);

            this.colorPanel.addClass(this.toThemeProperty('jqx-color-picker-map-overlay'));
            this._mapImageOverlayURL = this._getImageUrl(this.colorPanel);
            this.colorPanel.removeClass(this.toThemeProperty('jqx-color-picker-map-overlay'));

            this.blue = $("<input style='height: 16px; width: 25px;' maxlength='3'/>");
            this.blue.addClass(this.toThemeProperty('jqx-input'));
            this.rgb.append('<span>' + this.blueString + '</span>');
            this.blue.appendTo(this.rgb);

            this.preview = $("<div style='background: red; position: absolute;'></div>");
            this.preview.addClass(this.toThemeProperty('jqx-widget-content'));
            this.preview.appendTo(this.colorPanel);

            this.colorBarPointer = $("<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>");
            this.colorBarPointer.addClass(this.toThemeProperty('jqx-color-picker-bar-pointer'));

            this.colorMapPointer = $("<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>");
            this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));

            this.transparent = $("<div style='clear: both;'><a style='text-align: center;' href='#'>transparent</a></div>");

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.element.disabled = true;
            }
            this._addHandlers();
        }, // createInstance

        _setPositionFromValue: function () {
            var self = this;
            var x = self.color.h;
            var y = 100 - self.color.v;

            var height = self.colorMap.height();
            var width = self.colorMap.width();

            var left = x * width / 360;
            var top = y * height / 100;

            if (this.colorMode == 'saturation') {
                var sliderValue = 100 - self.color.s;
                sliderValue = sliderValue * height / 100;

                self._saturation = 100 - self.color.s;
                self.colorMapPointer.css('margin-left', left - 8);
                self.colorMapPointer.css('margin-top', top - 8);
                self.colorBarPointer.css('margin-top', sliderValue - 8);
                self.colorMapImageOverlay.css('opacity', (100 - self.color.s) / 100);
            }
            else {
                var x = self.color.s;
                var left = x * width / 100;
                var top = y * height / 100;
                var sliderValue = 360 - self.color.h;
                sliderValue = sliderValue * height / 360;

                self._hue = self.color.h;
                self.colorMapPointer.css('margin-left', left - 8);
                self.colorMapPointer.css('margin-top', top - 8);
                self.colorBarPointer.css('margin-top', sliderValue - 8);
            }
        },

        updateRGB: function () {
            var self = this;
            self.color.setRgb(self.red.val(), self.green.val(), self.blue.val());
            self._updateUI();
            self._raiseEvent('0', { color: self.color });
            self.color.transparent = false;
        },

        _setPosition: function (event, element, pointer) {
            var pageX = parseInt(event.pageX);
            var offsetLeft = parseInt(element.offset().left);

            var pageY = parseInt(event.pageY);
            var offsetTop = parseInt(element.offset().top);

            if (pointer[0].className.indexOf('jqx-color-picker-bar') == -1) {
                pointer.css('margin-left', pageX - 8 - offsetLeft);
            }
            if (pageY >= offsetTop && pageY <= offsetTop + element.height()) {
                pointer.css('margin-top', pageY - 8 - offsetTop);
            }
        },

        _handleKeyInput: function (self, event, input) {
            if (self.disabled)
                return;

            if (!self._validateKey(event))
                return event;

            input.val(self._setValueInRange(input.val(), 0, 255));
            this.updateRGB();
            this._setPositionFromValue();
        },

        _addHandlers: function () {
            var self = this;

            this.addHandler(this.colorMapPointer, 'dragStart', function (event) {
                event.preventDefault();
                return false;
            });

            this.addHandler(this.colorBarPointer, 'dragStart', function (event) {
                event.preventDefault();
                return false;
            });

            this.addHandler(this.transparent, 'click', function (event) {
                self._raiseEvent('0', { color: 'transparent' });
                event.preventDefault();
                self.color.transparent = true;
            });

            this.addHandler(this.host, 'selectionstart', function (event) {
                event.preventDefault();
                return false;
            });

            this.addHandler(this.blue, 'keyup blur', function (event) {
                self._handleKeyInput(self, event, self.blue);
            });
            this.addHandler(this.green, 'keyup blur', function (event) {
                self._handleKeyInput(self, event, self.green);
            });
            this.addHandler(this.red, 'keyup blur', function (event) {
                self._handleKeyInput(self, event, self.red);
            });
            this.addHandler(this.hex, 'keyup blur', function (event) {
                if (self.disabled)
                    return;

                if (!self._validateKey(event))
                    return event;

                if (self.hex.val().toString().length == 6) {
                    self.hex.val(self.color.validateHex(self.hex.val()));
                    self.color.setHex(self.hex.val());

                    self._updateUI();
                    self._setPositionFromValue();
                    self._raiseEvent('0', { color: self.color });
                }
            });

            this.addHandler(this.colorMap, 'dragstart', function (event) {
                event.preventDefault();
                return false;
            });

            var _setPositionInColorMap = function (event) {
                self._setPosition(event, self.colorMap, self.colorMapPointer);

                if (self.colorMode == 'saturation') {
                    var point = self._valuesFromMouse(event, self.colorMap, 360, 100);
                    if (point.x > 360) point.x = 360;
                    self.color.setHsv(point.x, self._saturation != null ? 100 - self._saturation : 100, 100 - point.y);
                }
                else {
                    var point = self._valuesFromMouse(event, self.colorMap, 100, 100);
                    if (point.x > 100) point.x = 100;
                    self.color.setHsv(self._hue != null ? self._hue : 360, point.x, 100 - point.y);
                }

                self._updateUI();
                self._raiseEvent('0', { color: self.color });
                self.color.transparent = false;
            }

            this.addHandler(this.colorMap, 'mousedown', function (event) {
                if (self.disabled)
                    return;

                self.beginDrag = true;
                _setPositionInColorMap(event);
            });

            this.addHandler($(document), 'mousemove.picker' + this.element.id, function (event) {
                if (self.disabled)
                    return;

                if (self.beginDrag == true) {
                    _setPositionInColorMap(event);
                }
            });

            this.addHandler(this.colorBar, 'dragstart', function (event) {
                event.preventDefault();
                return false;
            });

            var _setPositionInColorBar = function (event) {
                self._setPosition(event, self.colorBar, self.colorBarPointer);
                if (self.colorMode == 'saturation') {
                    var point = self._valuesFromMouse(event, self.colorBar, 100, 100);
                    self.color.s = point.y;
                    self._saturation = point.y;

                    self.colorMapImageOverlay.css('opacity', (self.color.s) / 100);
                    self.color.setHsv(self.color.h, 100 - self.color.s, self.color.v);
                }
                else {
                    var point = self._valuesFromMouse(event, self.colorBar, 100, 360);
                    self.color.h = 360 - point.y;
                    self._hue = self.color.h;
                    self.color.setHsv(self.color.h, self.color.s, self.color.v);
                }

                self._updateUI();
                self._raiseEvent('0', { color: self.color });
                self.color.transparent = false;
            }

            this.addHandler(this.colorBar, 'mousedown', function (event) {
                if (self.disabled)
                    return;

                self.beginDragBar = true;
                _setPositionInColorBar(event);
            });

            this.addHandler($(document), 'mousemove.colorbar' + this.element.id, function (event) {
                if (self.disabled)
                    return;

                if (self.beginDragBar == true) {
                    _setPositionInColorBar(event);
                }
            });

            this.addHandler($(document), 'mouseup.colorMap' + this.element.id, function (event) {
                if (self.disabled)
                    return;

                self.beginDrag = false;
                self.beginDragBar = false;
            });
        },

        _removeHandlers: function () {
            this.removeHandler(this.colorMapPointer);
            this.removeHandler(this.colorBarPointer);
            this.removeHandler(this.transparent, 'click');
            this.removeHandler(this.host, 'selectionstart');
            this.removeHandler(this.blue, 'keyup blur');
            this.removeHandler(this.green, 'keyup blur');
            this.removeHandler(this.red, 'keyup blur');
            this.removeHandler(this.hex, 'keyup blur');
            this.removeHandler(this.colorMap, 'dragstart');
            this.removeHandler(this.colorMap, 'mousedown');
            this.removeHandler($(document), 'mousemove.colorbar' + this.element.id);
            this.removeHandler($(document), 'mousemove.colormap' + this.element.id);
            this.removeHandler(this.colorBar, 'dragstart');
            this.removeHandler(this.colorBar, 'mousedown');
            this.removeHandler(this.colorBar, 'mousemove');
            this.removeHandler($(document), 'mouseup.colorMap' + this.element.id);
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            var args = arg ? arg : {};

            args.owner = this;
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;

            var result = this.host.trigger(event);

            return result;
        },

        setColor: function (color) {
            if (color == 'transparent') {
                this.color.transparent = true;
                this.color.hex = "000";
                this.color.r = 0;
                this.color.g = 0;
                this.color.b = 0;
            }
            else {
                if (color.r) {
                    this.color = new $.jqx.color({ rgb: color });
                }
                else {
                    if (color.substring(0, 1) == '#') {
                        this.color = new $.jqx.color({ hex: color.substring(1) });
                    }
                    else {
                        this.color = new $.jqx.color({ hex: color });
                    }
                }
            }
            this._updateUI();
            this._setPositionFromValue();
            this._raiseEvent('0', { color: color });
        },

        getColor: function () {
            return this.color;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (object.isInitialized == undefined || object.isInitialized == false)
                return;

            if (key == 'colorMode') {
                object.refresh();
            }

            if (key == 'color') {
                object._updateUI();
                object._setPositionFromValue();
                object._raiseEvent('0', { color: value });
            }

            if (key == 'width' || key == 'height') {
                object._setSize();
                object.refresh();
            }

            if (key == 'showTransparent') {
                object.refresh();
            }

            if (key == 'disabled') {
                this.element.disabled = value;
                if (value) {
                    object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));
                }
            }
        },

        _valuesFromMouse: function (e, element, maxX, maxY) {
            var relativeX = 0;
            var relativeY = 0;
            var offset = element.offset();
            var height = element.height();
            var width = element.width();

            // mouse relative to object's top left
            if (e.pageX < offset.left)
                relativeX = 0;
            else if (e.pageX > offset.left + width)
                relativeX = width;
            else
                relativeX = e.pageX - offset.left + 1;

            if (e.pageY < offset.top)
                relativeY = 0;
            else if (e.pageY > offset.top + height)
                relativeY = height;
            else
                relativeY = e.pageY - offset.top + 1;


            var newXValue = parseInt(relativeX / width * maxX);
            var newYValue = parseInt(relativeY / height * maxY);
            return { x: newXValue, y: newYValue };
        },

        _validateKey: function (e) {
            if (e.keyCode == 9 || // TAB
			    e.keyCode == 16 || // Shift
			    e.keyCode == 38 || // Up arrow
			    e.keyCode == 29 || // Right arrow
			    e.keyCode == 40 || // Down arrow
			    e.keyCode == 17 || // Down arrow
			    e.keyCode == 37    // Left arrow
			    ||
			    (e.ctrlKey && (e.keyCode == 'c'.charCodeAt() || e.keyCode == 'v'.charCodeAt()))
			    ||
			    (e.ctrlKey && (e.keyCode == 'C'.charCodeAt() || e.keyCode == 'V'.charCodeAt()))
		    ) {
                return false;
            }

            if (e.ctrlKey || e.shiftKey)
                return false;

            return true;
        },

        _setValueInRange: function (value, min, max) {
            if (value == '' || isNaN(value))
                return min;

            value = parseInt(value);
            if (value > max)
                return max;
            if (value < min)
                return min;

            return value;
        },

        destroy: function () {
            this.host.removeClass();
            this._removeHandlers();
            this.host.remove();
        },

        setPointerStyle: function (color) {
            this.colorMapPointer.removeClass();
            if (color == 'transparent' || color.hex == "") {
                this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));
            }

            var nThreshold = 105;
            var bgDelta = (color.r * 0.299) + (color.g * 0.587) + (color.b * 0.114);
            var foreColor = (255 - bgDelta < nThreshold) ? 'Black' : 'White';

            if (foreColor == 'Black') {
                this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer'));
            }
            else this.colorMapPointer.addClass(this.toThemeProperty('jqx-color-picker-pointer-alt'));
        },

        _updateUI: function () {
            var self = this;
            self.red.val(self.color.r);
            self.green.val(self.color.g);
            self.blue.val(self.color.b);
            self.hex.val(self.color.hex);

            var color = new $.jqx.color({ hex: 'fff' });
            if (this.colorMode == 'saturation') {
                color.setHsv(this.color.h, 100, this.color.v);
                self.colorBar.css('background', '#' + color.hex);
            }
            else {
                color.setHsv(this.color.h, 100, 100);
                self.colorMap.css('background-color', '#' + color.hex);
            }
            self.preview.css('background', '#' + this.color.hex);
            self.setPointerStyle(this.color);
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            if (this.host.width() < 130) {
                this.host.width(150);
            }
            if (this.host.height() < 70) {
                this.host.height(70);
            }
        },

        _arrange: function () {
            var height = this.host.height() - 42;
            if (this.showTransparent) {
                height = this.host.height() - 62;
            }

            if (height <= 0)
                return;

            this.colorMap.width(85 * this.host.width() / 100);
            this.colorMap.height(height);
            this.colorBar.height(height);
            this.colorBar.css('left', this.colorMap.width() + 4);
            this.colorBar.width(8 * this.host.width() / 100);
            this.colorBarPointer.width(this.colorBar.width());
            this.colorPanel.width(this.host.width());
            this.colorPanel.height(40);
            if (this.showTransparent) {
                this.colorPanel.height(60);
            }
            this.colorPanel.css('top', height + 4);
            this.hex.width(this.colorMap.width() - this.colorBar.width() - 4);
            this.hex.css('margin-left', '4px');
            this.preview.width(this.colorBar.width() + 9);
            this.preview.height(25);
            this.preview.addClass(this.toThemeProperty('jqx-rc-all'));
            this.preview.addClass(this.toThemeProperty('jqx-color-picker-preview'));
            this.preview.css('left', this.colorMap.width() - 4);
            this.preview.css('top', '5px');
            var hexPosition = 4 + parseInt(this.hex.position().left) + this.hex.outerWidth();

            var getLeftPosition = function (self) {
                var leftPosition = parseInt(self.blue.position().left) + self.blue.outerWidth();
                return leftPosition;
            }

            var leftPosition = getLeftPosition(this);

            while (leftPosition < hexPosition) {
                this.blue.width(this.blue.width() + 1);
                leftPosition = getLeftPosition(this);
                if (leftPosition < hexPosition) {
                    this.green.width(this.green.width() + 1);
                }
                leftPosition = getLeftPosition(this);
                if (leftPosition < hexPosition) {
                    this.red.width(this.red.width() + 1);
                }
                leftPosition = getLeftPosition(this);
            }
        },

        _getColorPointer: function () {
            var element = $("<div></div>");
            element.addClass(this.toThemeProperty('jqx-color-picker-pointer'));
            return element;
        },

        _getImageUrl: function (element) {
            var imageUrl = element.css('backgroundImage');
            imageUrl = imageUrl.replace('url("', '');
            imageUrl = imageUrl.replace('")', '');
            imageUrl = imageUrl.replace('url(', '');
            imageUrl = imageUrl.replace(')', '');
            return imageUrl;
        },

        refresh: function () {
            this._saturation = null;
            this._hue = null;

            this.colorMap.removeClass();
            this.colorBar.removeClass();
            this.colorMap.addClass(this.toThemeProperty('jqx-disableselect'));
            this.colorBar.addClass(this.toThemeProperty('jqx-disableselect'));
            this.colorPanel.addClass(this.toThemeProperty('jqx-color-picker-panel'));
            this.colorBar.css('background-image', '');
            this.colorMap.css('background-image', '');

            if (this.colorMode == 'saturation') {
                this.colorMap.addClass(this.toThemeProperty('jqx-color-picker-map'));
                this.colorBar.addClass(this.toThemeProperty('jqx-color-picker-bar'));
            }
            else {
                this.colorMap.addClass(this.toThemeProperty('jqx-color-picker-map-hue'));
                this.colorBar.addClass(this.toThemeProperty('jqx-color-picker-bar-hue'));
            }

            this._barImageURL = this._getImageUrl(this.colorBar);
            this._mapImageURL = this._getImageUrl(this.colorMap);

            this._arrange();
            this.colorBar.children().remove();
            this.colorBarImageContainer = $("<div style='overflow: hidden;'></div>");
            this.colorBarImageContainer.width(this.colorBar.width());
            this.colorBarImageContainer.height(this.colorBar.height());
            this.colorBarImageContainer.appendTo(this.colorBar);
            this.colorBarImage = $("<img/>");
            this.colorBarImage.appendTo(this.colorBarImageContainer);
            this.colorBarImage.attr('src', this._barImageURL);
            this.colorBar.css('background-image', 'none');
            this.colorBarImage.attr('width', this.colorBar.width());
            this.colorBarImage.attr('height', this.colorBar.height());

            this.colorBarPointer.appendTo(this.colorBar);

            this.colorMap.children().remove();
            this.colorMapImage = $("<img/>");
            this.colorMapImage.appendTo(this.colorMap);
            this.colorMapImage.attr('src', this._mapImageURL);
            this.colorMap.css('background-image', 'none');
            this.colorMapImage.attr('width', this.colorMap.width());
            this.colorMapImage.attr('height', this.colorMap.height());
            this.colorMapImageOverlay = $("<img style='position: absolute; left: 0; top: 0;'/>");
            this.colorMapImageOverlay.prependTo(this.colorMap);
            this.colorMapImageOverlay.attr('src', this._mapImageOverlayURL);
            this.colorMapImageOverlay.attr('width', this.colorMap.width());
            this.colorMapImageOverlay.attr('height', this.colorMap.height());
            this.colorMapImageOverlay.css('opacity', 0);

            this.colorMapPointer.appendTo(this.colorMap);

            if (this.showTransparent) {
                this.transparent.appendTo(this.colorPanel);
            }
            this._updateUI();
            this._setPositionFromValue();
        }
    });

    $.jqx.color = function (init) {
        var color = {
            r: 0,
            g: 0,
            b: 0,

            h: 0,
            s: 0,
            v: 0,

            hex: '',

            hexToRgb: function (hex) {
                hex = this.validateHex(hex);

                var r = '00', g = '00', b = '00';

                if (hex.length == 6) {
                    r = hex.substring(0, 2);
                    g = hex.substring(2, 4);
                    b = hex.substring(4, 6);
                } else {
                    if (hex.length > 4) {
                        r = hex.substring(4, hex.length);
                        hex = hex.substring(0, 4);
                    }
                    if (hex.length > 2) {
                        g = hex.substring(2, hex.length);
                        hex = hex.substring(0, 2);
                    }
                    if (hex.length > 0) {
                        b = hex.substring(0, hex.length);
                    }
                }

                return { r: this.hexToInt(r), g: this.hexToInt(g), b: this.hexToInt(b) };
            },

            validateHex: function (hex) {
                hex = new String(hex).toUpperCase();
                hex = hex.replace(/[^A-F0-9]/g, '0');
                if (hex.length > 6) hex = hex.substring(0, 6);
                return hex;
            },

            webSafeDec: function (dec) {
                dec = Math.round(dec / 51);
                dec *= 51;
                return dec;
            },

            hexToWebSafe: function (hex) {
                var r, g, b;

                if (hex.length == 3) {
                    r = hex.substring(0, 1);
                    g = hex.substring(1, 1);
                    b = hex.substring(2, 1);
                } else {
                    r = hex.substring(0, 2);
                    g = hex.substring(2, 4);
                    b = hex.substring(4, 6);
                }
                return intToHex(this.webSafeDec(this.hexToInt(r))) + this.intToHex(this.webSafeDec(this.hexToInt(g))) + this.intToHex(this.webSafeDec(this.hexToInt(b)));
            },

            rgbToWebSafe: function (rgb) {
                return { r: this.webSafeDec(rgb.r), g: this.webSafeDec(rgb.g), b: this.webSafeDec(rgb.b) };
            },

            rgbToHex: function (rgb) {
                return this.intToHex(rgb.r) + this.intToHex(rgb.g) + this.intToHex(rgb.b);
            },

            intToHex: function (dec) {
                var result = (parseInt(dec).toString(16));
                if (result.length == 1)
                    result = ("0" + result);
                return result.toUpperCase();
            },

            hexToInt: function (hex) {
                return (parseInt(hex, 16));
            },

            hslToRgb: function (hsl) {
                var h = parseInt(hsl.h) / 360;
                var s = parseInt(hsl.s) / 100;
                var l = parseInt(hsl.l) / 100;

                if (l <= 0.5) var q = l * (1 + s);
                else var q = l + s - (l * s);

                var p = 2 * l - q;
                var tr = h + (1 / 3);
                var tg = h;
                var tb = h - (1 / 3);

                var r = Math.round(this.hueToRgb(p, q, tr) * 255);
                var g = Math.round(this.hueToRgb(p, q, tg) * 255);
                var b = Math.round(this.hueToRgb(p, q, tb) * 255);
                return { r: r, g: g, b: b };
            },

            hueToRgb: function (p, q, h) {
                if (h < 0) h += 1;
                else if (h > 1) h -= 1;

                if ((h * 6) < 1) return p + (q - p) * h * 6;
                else if ((h * 2) < 1) return q;
                else if ((h * 3) < 2) return p + (q - p) * ((2 / 3) - h) * 6;
                else return p;
            },

            rgbToHsl: function (rgb) {
                var r = rgb[0],
		            g = rgb[1],
		            b = rgb[2];

                r /= 255;
                g /= 255;
                b /= 255;

                var max = math.max(r, g, b),
		            min = math.min(r, g, b),
		        h, s, l = (max + min) / 2;

                if (max === min) {
                    h = s = 0; // achromatic
                } else {
                    var d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                        case g: h = (b - r) / d + 2; break;
                        case b: h = (r - g) / d + 4; break;
                    }
                    h /= 6;
                }

                return { h: h, s: s, l: l };
            },

            rgbToHsl: function (rgb) {
                var r = parseFloat(rgb.r) / 255;
                var g = parseFloat(rgb.g) / 255;
                var b = parseFloat(rgb.b) / 255;
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var diff = max - min;
                var add = max + min;

                if (min === max) var h = 0;
                else if (r === max) var h = ((60 * (g - b) / diff) + 360) % 360;
                else if (g === max) var h = (60 * (b - r) / diff) + 120;
                else var h = (60 * (r - g) / diff) + 240;

                var l = 0.5 * add;

                if (l === 0) var s = 0;
                else if (l === 1) var s = 1;
                else if (l <= 0.5) var s = diff / add;
                else var s = diff / (2 - add);

                h = h.round();
                s = (s * 100).round();
                l = (l * 100).round();

                return { h: h, s: s, l: l };
            },

            rgbToHsv: function (rgb) {

                var r = rgb.r / 255;
                var g = rgb.g / 255;
                var b = rgb.b / 255;

                hsv = { h: 0, s: 0, v: 0 };

                var min = 0
                var max = 0;

                if (r >= g && r >= b) {
                    max = r;
                    min = (g > b) ? b : g;
                } else if (g >= b && g >= r) {
                    max = g;
                    min = (r > b) ? b : r;
                } else {
                    max = b;
                    min = (g > r) ? r : g;
                }

                hsv.v = max;
                hsv.s = (max) ? ((max - min) / max) : 0;

                if (!hsv.s) {
                    hsv.h = 0;
                } else {
                    delta = max - min;
                    if (r == max) {
                        hsv.h = (g - b) / delta;
                    } else if (g == max) {
                        hsv.h = 2 + (b - r) / delta;
                    } else {
                        hsv.h = 4 + (r - g) / delta;
                    }

                    hsv.h = parseInt(hsv.h * 60);
                    if (hsv.h < 0) {
                        hsv.h += 360;
                    }
                }

                hsv.s = parseInt(hsv.s * 100);
                hsv.v = parseInt(hsv.v * 100);

                return hsv;
            },

            hsvToRgb: function (hsv) {

                rgb = { r: 0, g: 0, b: 0 };

                var h = hsv.h;
                var s = hsv.s;
                var v = hsv.v;

                if (s == 0) {
                    if (v == 0) {
                        rgb.r = rgb.g = rgb.b = 0;
                    } else {
                        rgb.r = rgb.g = rgb.b = parseInt(v * 255 / 100);
                    }
                } else {
                    if (h == 360) {
                        h = 0;
                    }
                    h /= 60;

                    // 100 scale
                    s = s / 100;
                    v = v / 100;

                    var i = parseInt(h);
                    var f = h - i;
                    var p = v * (1 - s);
                    var q = v * (1 - (s * f));
                    var t = v * (1 - (s * (1 - f)));
                    switch (i) {
                        case 0:
                            rgb.r = v;
                            rgb.g = t;
                            rgb.b = p;
                            break;
                        case 1:
                            rgb.r = q;
                            rgb.g = v;
                            rgb.b = p;
                            break;
                        case 2:
                            rgb.r = p;
                            rgb.g = v;
                            rgb.b = t;
                            break;
                        case 3:
                            rgb.r = p;
                            rgb.g = q;
                            rgb.b = v;
                            break;
                        case 4:
                            rgb.r = t;
                            rgb.g = p;
                            rgb.b = v;
                            break;
                        case 5:
                            rgb.r = v;
                            rgb.g = p;
                            rgb.b = q;
                            break;
                    }

                    rgb.r = parseInt(rgb.r * 255);
                    rgb.g = parseInt(rgb.g * 255);
                    rgb.b = parseInt(rgb.b * 255);
                }

                return rgb;
            },

            setRgb: function (r, g, b) {
                var validate = function (input) {
                    if (input < 0 || input > 255)
                        return 0;
                    if (isNaN(parseInt(input)))
                        return 0;

                    return input;
                }

                this.r = validate(r);
                this.g = validate(g);
                this.b = validate(b);

                var newHsv = this.rgbToHsv(this);
                this.h = newHsv.h;
                this.s = newHsv.s;
                this.v = newHsv.v;

                this.hex = this.rgbToHex(this);
            },

            setHsl: function (h, s, l) {
                this.h = h;
                this.s = s;
                this.l = l;

                var newRgb = this.hslToRgb(this);
                this.r = newRgb.r;
                this.g = newRgb.g;
                this.b = newRgb.b;

                this.hex = this.rgbToHex(newRgb);
            },

            setHsv: function (h, s, v) {
                this.h = h;
                this.s = s;
                this.v = v;

                var newRgb = this.hsvToRgb(this);
                this.r = newRgb.r;
                this.g = newRgb.g;
                this.b = newRgb.b;

                this.hex = this.rgbToHex(newRgb);
            },

            setHex: function (hex) {
                this.hex = hex;

                var newRgb = this.hexToRgb(this.hex);
                this.r = newRgb.r;
                this.g = newRgb.g;
                this.b = newRgb.b;

                var newHsv = this.rgbToHsv(newRgb);
                this.h = newHsv.h;
                this.s = newHsv.s;
                this.v = newHsv.v;
            }
        };

        if (init) {
            if (init.hex) {
                var hex = color.validateHex(init.hex);
                color.setHex(hex);
            }
            else if (init.r)
                color.setRgb(init.r, init.g, init.b);
            else if (init.h)
                color.setHsv(init.h, init.s, init.v);
        }

        return color;
    };
})(jQuery);/*
* Depends:
*   jqxcore.js
*/

(function ($) {

    $.jqx.jqxWidget("jqxSwitchButton", "", {});

    $.extend($.jqx._jqxSwitchButton.prototype, {
        defineInstance: function () {

            this.disabled = false;
            this.checked = false;
            this.onLabel = 'On';
            this.offLabel = 'Off';
            this.toggleMode = 'default';    //default, slide, click
            this.animationDuration = 250;
            this.width = 90;
            this.height = 30;
            this.animationEnabled = true;
            this.thumbSize = '40%';
            this.orientation = 'horizontal';
            this.switchRatio = '50%';
            this.metroMode = false;
            this._isMouseDown = false;
            this._dimensions = {
                horizontal: {
                    size: 'width',
                    opSize: 'height',
                    oSize: 'outerWidth',
                    opOSize: 'outerHeight',
                    pos: 'left',
                    oPos: 'top',
                    opposite: 'vertical'
                },
                vertical: {
                    size: 'height',
                    opSize: 'width',
                    oSize: 'outerHeight',
                    opOSize: 'outerWidth',
                    pos: 'top',
                    oPos: 'left',
                    opposite: 'horizontal'
                }
            };
            this._touchEvents = {
                'mousedown': 'touchstart',
                'click': 'touchend',
                'mouseup': 'touchend',
                'mousemove': 'touchmove',
                'mouseenter': 'mouseenter',
                'mouseleave': 'mouseleave'
            };
            this._borders = {};
            this._isTouchDevice = false;
            this._distanceRequired = 3;
            this._isDistanceTraveled = false;
            this._thumb;
            this._onLabel;
            this._offLabel;
            this._wrapper;
            this._animationActive = false;
            this._events = ['checked', 'unchecked', 'change'];
        },

        createInstance: function (args) {
            if (this.theme && this.theme != "" && (this.theme.indexOf('metro') != -1 || this.theme.indexOf('office') != -1)) {
                if (this.thumbSize == '40%') this.thumbSize = 12;
                this.metroMode = true;
            }

            var count = $.data(document.body, 'jqx-switchbutton') || 1;
            this._idHandler(count);
            $.data(document.body, 'jqx-draggables', ++count);
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this.switchRatio = parseInt(this.switchRatio, 10);
            this._render();
            this._addClasses();
            this._performLayout();
            this._removeEventHandles();
            this._addEventHandles();
            this._disableSelection();
            var self = this;
            if (!this.checked) {
                this._switchButton(false, 0, true);
            }
            if (this.disabled) {
                this.element.disabled = true;
            }
        },

        setOnLabel: function (text) {
            this._onLabel.html('<div style="display: inline-block;">' + text + '</div>');
            this._centerLabels();
        },

        setOffLabel: function (text) {
            this._offLabel.html('<div style="display: inline-block;">' + text + '</div>');
            this._centerLabels();
        },

        toggle: function () {
            if (this.checked) {
                this.uncheck();
            } else {
                this.check();
            }
        },

        uncheck: function () {
            var self = this;
            this._switchButton(false);
        },

        check: function () {
            var self = this;
            this._switchButton(true);
        },

        _idHandler: function (count) {
            if (!this.element.id) {
                var id = 'jqx-switchbutton-' + count;
                this.element.id = id;
            }
        },

        _dir: function (prop) {
            return this._dimensions[this.orientation][prop];
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._touchEvents[event];
            } else {
                return event;
            }
        },

        _render: function () {
            this._thumb = $('<div/>');
            this._onLabel = $('<div/>');
            this._offLabel = $('<div/>');
            this._wrapper = $('<div/>');
            this._onLabel.appendTo(this.host);
            this._thumb.appendTo(this.host);
            this._offLabel.appendTo(this.host);
            this.host.wrapInner(this._wrapper);
            this._wrapper = this.host.children();
            this.setOnLabel(this.onLabel);
            this.setOffLabel(this.offLabel);
        },

        _addClasses: function () {
            var thumb = this._thumb,
                onLabel = this._onLabel,
                offLabel = this._offLabel;
            this.host.addClass(this.toThemeProperty('jqx-switchbutton'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));
            this._wrapper.addClass(this.toThemeProperty('jqx-switchbutton-wrapper'));
            thumb.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            thumb.addClass(this.toThemeProperty('jqx-switchbutton-thumb'));
            onLabel.addClass(this.toThemeProperty('jqx-switchbutton-label-on'));
            onLabel.addClass(this.toThemeProperty('jqx-switchbutton-label'));
            offLabel.addClass(this.toThemeProperty('jqx-switchbutton-label-off'));
            offLabel.addClass(this.toThemeProperty('jqx-switchbutton-label'));
        },

        _performLayout: function () {
            var el = this.host,
                opSize = this._dir('opSize'),
                size = this._dir('size'),
                wrapper = this._wrapper,
                border;
            el.css({
                width: this.width,
                height: this.height
            });
            wrapper.css(opSize, el[opSize]());
            this._thumbLayout();
            this._labelsLayout();
            border = this._borders[this._dir('opposite')];
            wrapper.css(size, el[size]() + this._offLabel[this._dir('oSize')]() + border);
            wrapper.css(opSize, el[opSize]());

            if (this.metroMode || (this.theme && this.theme != "" && (this.theme.indexOf('metro') != -1 || this.theme.indexOf('office') != -1))) {
                var thumb = this._thumb,
                 onLabel = this._onLabel,
                 offLabel = this._offLabel;
                onLabel.css('position', 'relative');
                onLabel.css('top', '1px');
                onLabel.css('margin-left', '1px');
                offLabel.css('position', 'relative');
                offLabel.css('top', '1px');
                offLabel.css('left', '-2px');
                offLabel.css('margin-right', '1px');
                offLabel.height(onLabel.height() - 2);
                offLabel.width(onLabel.width() - 3);

                onLabel.height(onLabel.height() - 2);
                onLabel.width(onLabel.width() - 3);
                this._thumb[this._dir('size')](this.thumbSize + 3);
                this._thumb.css('top', '-1px');
                this._thumb[this._dir('opSize')](el[this._dir('opSize')]() + 2);
                this._thumb.css('position', 'relative');
                this.host.css('overflow', 'visible');
                if (this.checked) {
                    this._onLabel.css('visibility', 'visible');
                    this._offLabel.css('visibility', 'hidden');
                    this._thumb.css('left', '0px');
                }
                else {
                    this._onLabel.css('visibility', 'hidden');
                    this._offLabel.css('visibility', 'visible');
                    this._thumb.css('left', '-2px');
                }
            }
        },

        _thumbLayout: function () {
            var size = this.thumbSize,
                el = this.host,
                verticalBorders = 0,
                borders = { horizontal: 0, vertical: 0 },
                self = this;
            if (size.toString().indexOf('%') >= 0) {
                size = el[this._dir('size')]() * parseInt(size, 10) / 100;
            }
            this._thumb[this._dir('size')](size);
            this._thumb[this._dir('opSize')](el[this._dir('opSize')]());
            this._handleThumbBorders();
        },

        //We guess that the left/right and bottom/top borders are with equal width because of easier computations
        _handleThumbBorders: function () {
            this._borders['horizontal'] = parseInt(this._thumb.css('border-left-width'), 10) || 0;
            this._borders['horizontal'] += parseInt(this._thumb.css('border-right-width'), 10) || 0;
            this._borders['vertical'] = parseInt(this._thumb.css('border-top-width'), 10) || 0;
            this._borders['vertical'] += parseInt(this._thumb.css('border-bottom-width'), 10) || 0;
            var border = this._borders[this._dir('opposite')];
            if (this.orientation === 'horizontal') {
                this._thumb.css('margin-top', -border / 2);
                this._thumb.css('margin-left', 0);
            } else {
                this._thumb.css('margin-left', -border / 2);
                this._thumb.css('margin-top', 0);
            }
        },

        _labelsLayout: function () {
            var el = this.host,
                thumb = this._thumb,
                opSize = this._dir('opSize'),
                dimension = this._dir('size'),
                outerDimension = this._dir('oSize'),
                size = el[dimension]() - thumb[outerDimension](),
                border = this._borders[this._dir('opposite')] / 2;
            this._onLabel[dimension](size + border);
            this._offLabel[dimension](size + border);
            this._onLabel[opSize](el[opSize]())
            this._offLabel[opSize](el[opSize]());
            this._orderLabels();
            this._centerLabels();
        },

        _orderLabels: function () {
            if (this.orientation === 'horizontal') {
                this._onLabel.css('float', 'left');
                this._thumb.css('float', 'left');
                this._offLabel.css('float', 'left');
            } else {
                this._onLabel.css('display', 'block');
                this._offLabel.css('display', 'block');
            }
        },

        _centerLabels: function () {
            var l1 = this._onLabel.children('div'),
                l2 = this._offLabel.children('div'),
                parent = l1.parent(),
                wrapperHeight = parent.height(),
                labelHeight = l1.outerHeight(),
                border = this._borders[this.orientation] / 2 || 0,
                distance = Math.floor((wrapperHeight - labelHeight) / 2) + border;
            l1.css('margin-top', distance);
            l2.css('margin-top', distance);
        },

        _removeEventHandles: function () {
            var namespace = '.' + this.element.id;
            this.removeHandler(this._wrapper, this._getEvent('click') + namespace + this.element.id, this._clickHandle);
            this.removeHandler(this._thumb, this._getEvent('mousedown') + namespace, this._mouseDown);
            this.removeHandler($(document), this._getEvent('mouseup') + namespace, this._mouseUp);
            this.removeHandler($(document), this._getEvent('mousemove') + namespace, this._mouseMove);
        },

        _addEventHandles: function () {
            var namespace = '.' + this.element.id,
                self = this;
            this.addHandler(this._thumb, 'mouseenter' + namespace, function () {
                self._thumb.addClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
            this.addHandler(this._thumb, 'mouseleave' + namespace, function () {
                self._thumb.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
            this.addHandler(this._wrapper, this._getEvent('click') + namespace, this._clickHandle, { self: this });
            this.addHandler(this._thumb, this._getEvent('mousedown') + namespace, this._mouseDown, { self: this });
            this.addHandler($(document), this._getEvent('mouseup') + namespace, this._mouseUp, { self: this });
            this.addHandler($(document), this._getEvent('mousemove') + namespace, this._mouseMove, { self: this });
        },

        enable: function () {
            this.disabled = false;
            this.element.disabled = false;
        },

        disable: function () {
            this.disabled = true;
            this.element.disabled = true;
        },

        _clickHandle: function (event) {
            var self = event.data.self;
            if ((self.toggleMode === 'click' || self.toggleMode === 'default') && !self.disabled) {
                if (!self._isDistanceTraveled && !self._dragged) {
                    self._wrapper.stop();
                    self.toggle();
                }
            }
            self._thumb.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
        },

        _mouseDown: function (event) {
            var self = event.data.self,
                wrapper = self._wrapper;
            if (self.metroMode) {
                self.host.css('overflow', 'hidden');
                self._onLabel.css('visibility', 'visible');
                self._offLabel.css('visibility', 'visible');
            }
            self._mouseStartPosition = self._getMouseCoordinates(event);
            self._buttonStartPosition = {
                left: parseInt(wrapper.css('margin-left'), 10) || 0,
                top: parseInt(wrapper.css('margin-top'), 10) || 0
            };
            if (!self.disabled && (self.toggleMode === 'slide' || self.toggleMode === 'default')) {
                self._wrapper.stop();
                self._isMouseDown = true;
                self._isDistanceTraveled = false;
                self._dragged = false;
            }
            self._thumb.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
        },

        _mouseUp: function (event) {
            var self = event.data.self;
            if (self.metroMode) {
                self.host.css('overflow', 'visible');
            }
            self._isMouseDown = false;
            self._thumb.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
            if (!self._isDistanceTraveled) {
                return;
            }
            var wrapper = self._wrapper,
                position = parseInt(wrapper.css('margin-' + self._dir('pos')), 10) || 0,
                distancePassed = self._dropHandler(position);
            if (distancePassed) {
                self._switchButton(!self.checked);
            } else {
                self._switchButton(self.checked, null, true);
            }
            self._isDistanceTraveled = false;
        },

        _mouseMove: function (event) {
            var self = event.data.self,
                mousePos = self._getMouseCoordinates(event);
            if (self._isMouseDown && self._distanceTraveled(mousePos)) {
                var dir = self._dir('pos'),
                    wrapper = self._wrapper,
                    btnPos = self._buttonStartPosition[dir],
                    pos = btnPos + mousePos[dir] - self._mouseStartPosition[dir],
                    pos = self._validatePosition(pos);
                self._dragged = true;
                wrapper.css('margin-' + self._dir('pos'), pos);
                return false;
            }
        },

        _distanceTraveled: function (mousePos) {
            if (this._isDistanceTraveled) {
                return true;
            } else if (!this._isMouseDown) {
                return false;
            } else {
                var start = this._mouseStartPosition,
                    distance = this._distanceRequired;
                this._isDistanceTraveled = Math.abs(mousePos.left - start.left) >= distance || Math.abs(mousePos.top - start.top) >= distance;
                return this._isDistanceTraveled;
            }
        },

        _validatePosition: function (position) {
            var border = this._borders[this._dir('opposite')],
                max = 0,
                min = -(this.host[this._dir('size')]() - this._thumb[this._dir('oSize')]()) - border;
            if (max < position) {
                return max;
            }
            if (min > position) {
                return min;
            }
            return position;
        },

        _dropHandler: function (position) {
            var max = 0,
                min = -(this.host[this._dir('size')]() - this._thumb[this._dir('oSize')]()),
                distance = Math.abs(min - max),
                distanceTraveled = Math.abs(position - this._buttonStartPosition[this._dir('pos')]),
                distanceRequired = distance * (this.switchRatio / 100);
            if (distanceTraveled >= distanceRequired) {
                return true;
            }
            return false;
        },

        _switchButton: function (check, duration, notTrigger) {
            if (this.metroMode) {            
                this.host.css('overflow', 'hidden');
                this._onLabel.css('visibility', 'visible');
                this._offLabel.css('visibility', 'visible');
                if (check) {
                    this._thumb.css('left', '0px');
                }
                else {
                    this._thumb.css('left', '-2px');
                }
            }

            var wrapper = this._wrapper,
                self = this,
                options = {},
                border = this._borders[this._dir('opposite')],
                position = 0;
            if (typeof duration === 'undefined') {
                duration = (this.animationEnabled ? this.animationDuration : 0);
            }
            if (!check) {
                position = this.host[this._dir('size')]() - this._thumb[this._dir('oSize')]() + border;
            }
            options['margin-' + this._dir('pos')] = -position;
            wrapper.animate(options, duration, function () {
                if (!notTrigger) {
                    self._handleEvent(check);
                }
                if (self.metroMode) self.host.css('overflow', 'visible');
                if (check) {
                    self._onLabel.css('visibility', 'visible');
                    self._offLabel.css('visibility', 'hidden');
                }
                else {
                    self._onLabel.css('visibility', 'hidden');
                    self._offLabel.css('visibility', 'visible');
                }

                self.checked = check;
            });
        },

        _handleEvent: function (checked) {
            if (checked !== this.checked) {
                this._raiseEvent(2, { check: checked });
            }
            if (checked) {
                this._raiseEvent(0);
            } else {
                this._raiseEvent(1);
            }
        },

        _disableSelection: function () {
            var el = this.host,
                children = el.find('*');
            $.each(children, function (i, el) {
                el.onselectstart = function () { return false };
                $(el).addClass('jqx-disableselect');
            });
        },

        _getMouseCoordinates: function (event) {
            if (this._isTouchDevice) {
                return {
                    left: event.originalEvent.touches[0].pageX,
                    top: event.originalEvent.touches[0].pageY
                };
            } else {
                return {
                    left: event.pageX,
                    top: event.pageY
                };
            }
        },

        destroy: function () {
            this._removeEventHandlers();
            this.host.removeClass(this.toThemeProperty('jqx-switchbutton'));
            this._wrapper.remove();
        },

        _raiseEvent: function (id, args) {
            var event = $.Event(this._events[id]);
            event.args = args;
            return this.host.trigger(event);
        },

        _themeChanger: function (oldTheme, theme, element) {
            if (!oldTheme) {
                return;
            }
            if (typeof element === 'undefined') {
                element = this.host;
            }
            var classNames = element[0].className.split(' '),
                oldClasses = [], newClasses = [],
                children = element.children();
            for (var i = 0; i < classNames.length; i += 1) {
                if (classNames[i].indexOf(oldTheme) >= 0) {
                    oldClasses.push(classNames[i]);
                    newClasses.push(classNames[i].replace(oldTheme, theme));
                }
            }
            this._removeOldClasses(oldClasses, element);
            this._addNewClasses(newClasses, element);
            for (var i = 0; i < children.length; i += 1) {
                this._themeChanger(oldTheme, theme, $(children[i]));
            }
        },

        _removeOldClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.removeClass(classes[i]);
            }
        },

        _addNewClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.addClass(classes[i]);
            }
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            switch (key) {
                case 'disabled':
                    if (value) {
                        this.disable();
                    }
                    else {
                        this.enable();
                    }
                    break;
                case 'switchRatio':
                    this.switchRatio = parseInt(this.switchRatio, 10);
                    break;
                case 'checked':
                    if (value) {
                        this.check();
                    } else {
                        this.uncheck();
                    }
                    break;
                case 'onLabel':
                    this.setOnLabel(value);
                    break;
                case 'offLabel':
                    this.setOffLabel(value);
                    break;
                case 'theme':
                    $.jqx.utilities.setTheme(oldvalue, value, object.host);          
                    break;
                case 'width':
                case 'height':
                case 'thumbSize':
                case 'orientation':
                    this._performLayout();
                    this._wrapper.css('left', 0);
                    this._wrapper.css('top', 0);
                    this._switchButton(this.checked, 0, true);
                    break;
            }
        }
    });
})(jQuery);/*
* jqxscrollbar.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/

/* Depends:
*   jqxcore.js
    jqxbuttons.js
*/

// Type: Number
// Default: null
// Sets the scrollbar height.
//Name: height = null;
// Type: Number
// Default: null
// Sets the scrollbar width.
//Name: width = null;
// Type: Number
// Default: false. This means that the scrollbar is horizontally oriented by default.
// Sets the scrollbar orientation.
//Name: vertical = false;
// Type: Number
// Default: 0
// Sets the minimum scroll value.
//Name: min = 0;
// Type: Number
// Default: 0
// Sets the maximum scroll value.
//Name: max = 1000;
// Type: Number
// Default: 0
// Sets the scroll value. The value can be between min and max.
//Name: value = Name: min;
// Type: Number
// Default: 0
// Sets the scroll step when any arrow button is clicked.
//Name: step = 10;
// Type: Number
// Default: 0
// Sets the scroll step when the user clicks on the empty scroll space between arrow button and thumb.
// Name: largestep = 50;
// Type: Number
// Default: 10
// sets the thumb's minimum size.
//Name: thumbMinSize = 10;
// Type: String
// Default: ''
// sets the rounded corners string.
//Name: roundedCorners = 'all';
// Type: Boolean
// Default: false
// Sets whether the scrollbar is disabled or not.
//Name: disabled = false;

(function ($) {

    $.jqx.jqxWidget("myWidget", "", {});
    $.extend($.jqx._myWidget.prototype, {
        var1: 5,
        var2: 10,
        foo: function (val) {
            this.var1 *= val;
        },

        bar: function () {
            alert(this.var1);
        },

        createInstance: function (args) {
        }
    });

    ////////////////////////////////////////
    ////////////////////////////////////////

    $.jqx.jqxWidget("jqxScrollBar", "", {});

    $.extend($.jqx._jqxScrollBar.prototype, {

        defineInstance: function () {
            // Type: Number
            // Default: null
            // Sets the scrollbar height.
            this.height = null;
            // Type: Number
            // Default: null
            // Sets the scrollbar width.
            this.width = null;
            // Type: Number
            // Default: false. This means that the scrollbar is horizontally oriented by default.
            // Sets the scrollbar orientation.
            this.vertical = false;
            // Type: Number
            // Default: 0
            // Sets the minimum scroll value.
            this.min = 0;
            // Type: Number
            // Default: 0
            // Sets the maximum scroll value.
            this.max = 1000;
            // Type: Number
            // Default: 0
            // Sets the scroll value. The value can be between min and max.
            this.value = this.min;
            // Type: Number
            // Default: 0
            // Sets the scroll step when any arrow button is clicked.
            this.step = 10;
            // Type: Number
            // Default: 0
            // Sets the scroll step when the user clicks on the empty scroll space between arrow button and thumb.
            this.largestep = 50;
            // Type: Number
            // Default: 10
            // sets the thumb's minimum size.
            this.thumbMinSize = 10;
            // Type: Number
            // Default: 0
            // sets the thumb's size.
            this.thumbSize = 0;
            // Type: String
            // Default: 'all'
            // sets the rounded corners string.
            this.roundedCorners = 'all';
            // Type: Boolean
            // Default: true
            // Sets whether the scroll buttons are visible.
            this.showButtons = true;
            // Type: Boolean
            // Default: false
            // Sets whether the scrollbar is disabled or not.
            this.disabled = false;
            // Sets whether the scrollbar is on touch device.
            this.touchMode = 'auto';
            this.touchModeStyle = 'auto';
            this.thumbTouchSize = 8;
            // disable jquery trigger function. It is very slow if you call it on mouse move. This could improve performance.
            this._triggervaluechanged = true;
        },

        createInstance: function (args) {
            this.render();
        }, // createInstance

        render: function()
        {
            this._mouseup = new Date();
            var self = this;
            this.element.innerHTML = "";
            this.host.append("<div id='jqxScrollOuterWrap' style='width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'>" +
                "<div id='jqxScrollWrap' style='width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'>" +
                "<div id='jqxScrollBtnUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='jqxScrollAreaUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='jqxScrollThumb' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='jqxScrollAreaDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='jqxScrollBtnDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "</div>" +
                "</div>");

            if (this.width != undefined && parseInt(this.width) > 0) {
                this.host.width(parseInt(this.width));
            }

            if (this.height != undefined && parseInt(this.height) > 0) {
                this.host.height(parseInt(this.height));
            }

            this.btnUp = this.host.find('#jqxScrollBtnUp');
            this.btnDown = this.host.find('#jqxScrollBtnDown');
            this.btnThumb = this.host.find('#jqxScrollThumb');
            this.areaUp = this.host.find('#jqxScrollAreaUp');
            this.arrowUp = $('<div></div>');
            this.arrowUp.appendTo(this.btnUp);
            this.arrowDown = $('<div></div>');
            this.arrowDown.appendTo(this.btnDown);
            this.areaDown = this.host.find('#jqxScrollAreaDown');
            this.scrollWrap = this.host.find('#jqxScrollWrap');
            this.scrollOuterWrap = this.host.find('#jqxScrollOuterWrap');

            this.btnUp[0].id = "jqxScrollBtnUp" + this.element.id;
            this.btnDown[0].id = "jqxScrollBtnDown" + this.element.id;
            this.btnThumb[0].id = "jqxScrollThumb" + this.element.id;
            this.areaUp[0].id = "jqxScrollAreaUp" + this.element.id;
            this.areaDown[0].id = "jqxScrollAreaDown" + this.element.id;
            this.scrollWrap[0].id = "jqxScrollWrap" + this.element.id;
            this.scrollOuterWrap[0].id = "jqxScrollOuterWrap" + this.element.id;

            if (!this.host.jqxRepeatButton) {
                alert('jqxbuttons.js is not loaded.');
                return;
            }

            this.btnUp.jqxRepeatButton({ overrideTheme: true, disabled: this.disabled });
            this.btnDown.jqxRepeatButton({ overrideTheme: true, disabled: this.disabled });
            this.btnDownInstance = $.data(this.btnDown[0], 'jqxRepeatButton').instance;
            this.btnUpInstance = $.data(this.btnUp[0], 'jqxRepeatButton').instance;

            this.areaUp.jqxRepeatButton({ overrideTheme: true, delay: 300 });
            this.areaDown.jqxRepeatButton({ overrideTheme: true, delay: 300 });
            this.btnThumb.jqxButton({ overrideTheme: true, disabled: this.disabled });
            this.propertyChangeMap['value'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.setPosition(parseFloat(value), true);
                    }
                }
            }

            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                if (instance.width != undefined && parseInt(instance.width) > 0) {
                    instance.host.width(parseInt(instance.width));
                    instance._arrange();
                }
            }

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {     
                if (instance.height != undefined && parseInt(instance.height) > 0) {
                    instance.host.height(parseInt(instance.height));
                    instance._arrange();
                }
            }

            this.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {
                instance.setTheme();
            }

            this.propertyChangeMap['max'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.max = parseInt(value);
                        if (instance.min > instance.max)
                            instance.max = instance.min + 1;

                        instance._arrange();
                        instance.setPosition(instance.value);
                    }
                }
            }

            this.propertyChangeMap['min'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.min = parseInt(value);
                        if (instance.min > instance.max)
                            instance.max = instance.min + 1;

                        instance._arrange();
                        instance.setPosition(instance.value);
                    }
                }
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    if (value)
                    {
                        instance.host.addClass(instance.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    else
                    {
                        instance.host.removeClass(instance.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    instance.btnUp.jqxRepeatButton('disabled', instance.disabled);
                    instance.btnDown.jqxRepeatButton('disabled', instance.disabled);
                    instance.btnThumb.jqxButton('disabled', instance.disabled);
                }
            }

            this.propertyChangeMap['touchMode'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    instance._updateTouchBehavior();
                }
            }

            this.buttonUpCapture = false;
            this.buttonDownCapture = false;

            this._updateTouchBehavior();
            this.setPosition(this.value);
            this._addHandlers();
            this.setTheme();
        },

        _updateTouchBehavior: function () {
            this.isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                this.isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.btnThumb[0]);
                this._removeHandlers();
                this._addHandlers();
                this.setTheme();
            }
            else if (this.touchMode == false) {
                this.isTouchDevice = false;
            }
        },

        _addHandlers: function () {
            var self = this;

            if (self.isTouchDevice) {
                this.addHandler(this.btnThumb, 'touchend', function (event) {
                    var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                    var btnThumbPressedFillClass = self.toThemeProperty('jqx-fill-state-pressed');
                    self.btnThumb.removeClass(btnThumbPressedClass);
                    self.btnThumb.removeClass(btnThumbPressedFillClass);
                    if (!self.disabled) self.handlemouseup(self, event);
                });

                this.addHandler(this.btnThumb, 'touchstart', function (event) {
                    if (!self.disabled) {
                        if (self.touchMode == true) {
                            event.clientX = event.originalEvent.clientX;
                            event.clientY = event.originalEvent.clientY;
                        }
                        else {
                            var e = event;
                            if (e.originalEvent.touches && e.originalEvent.touches.length) {
                                event.clientX = e.originalEvent.touches[0].clientX;
                                event.clientY = e.originalEvent.touches[0].clientY;
                            }
                        }

                        self.handlemousedown(event);
                    }
                });

                $.jqx.mobile.touchScroll(this.element, self.max, function (left, top, dx, dy, event) {
                    if (self.host.css('visibility') == 'visible') {
                        if (self.touchMode == true) {
                            event.clientX = event.originalEvent.clientX;
                            event.clientY = event.originalEvent.clientY;
                        }
                        else {
                            var e = event;
                            if (e.originalEvent.touches && e.originalEvent.touches.length) {
                                event.clientX = e.originalEvent.touches[0].clientX;
                                event.clientY = e.originalEvent.touches[0].clientY;
                            }
                        }
                        var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                        self.btnThumb.addClass(btnThumbPressedClass);
                        self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-pressed'));

                        self.handlemousemove(event);
                    }
                }, self.element.id);
            }

            this.addHandler(this.btnUp, 'click', function (event) {
                if (self.buttonUpCapture && !self.isTouchDevice) {
                    if (!self.disabled) self.setPosition(self.value - self.step);
                }
                else if (!self.disabled && self.isTouchDevice) self.setPosition(self.value - self.step);
            });
            this.addHandler(this.btnDown, 'click', function (event) {
                if (self.buttonDownCapture && !self.isTouchDevice) {
                    if (!self.disabled) self.setPosition(self.value + self.step)
                }
                else if (!self.disabled && self.isTouchDevice) self.setPosition(self.value + self.step);
            });

            if (!this.isTouchDevice) {
                if (document.referrer != "" || window.frameElement) {
                    if (window.top != null && window.top != window.self) {
                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }

                        if (parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                if (!self.disabled) self.handlemouseup(self, event);
                            };

                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }
                    }
                }

                this.addHandler(this.btnDown, 'mouseup', function (event) {
                    if (!self.btnDownInstance.base.disabled && self.buttonDownCapture) {
                        self.buttonDownCapture = false;
                        self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self._removeArrowClasses('pressed', 'down');
                        self.handlemouseup(self, event);
                        self.setPosition(self.value + self.step)
                        return false;
                    }
                });
                this.addHandler(this.btnUp, 'mouseup', function (event) {
                    if (!self.btnUpInstance.base.disabled && self.buttonUpCapture) {
                        self.buttonUpCapture = false;
                        self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self._removeArrowClasses('pressed', 'up');
                        self.handlemouseup(self, event);
                        self.setPosition(self.value - self.step)
                        return false;
                    }
                });

                this.addHandler(this.btnDown, 'mousedown', function (event) {
                    if (!self.btnDownInstance.base.disabled) {
                        self.buttonDownCapture = true;
                        self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self._addArrowClasses('pressed', 'down');
                        return false;
                    }
                });
                this.addHandler(this.btnUp, 'mousedown', function (event) {
                    if (!self.btnUpInstance.base.disabled) {
                        self.buttonUpCapture = true;
                        self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self._addArrowClasses('pressed', 'up');
                        return false;
                    }
                });
            }

            var eventName = 'click';
            if (this.isTouchDevice) {
                eventName = 'touchend';
            }

            this.addHandler(this.areaUp, eventName, function (event) {
                if (!self.disabled) {
                    self.setPosition(self.value - self.largestep); return false;
                }
            });
            this.addHandler(this.areaDown, eventName, function (event) {
                if (!self.disabled) {
                    self.setPosition(self.value + self.largestep);
                    return false;
                }
            });
            this.addHandler(this.areaUp, 'mousedown', function (event) { if (!self.disabled) { return false; } });
            this.addHandler(this.areaDown, 'mousedown', function (event) { if (!self.disabled) { return false; } });

            this.addHandler(this.btnThumb, 'mousedown', function (event) {
                if (!self.disabled) {
                    self.handlemousedown(event);
                }
                return false;
            });
            this.addHandler(this.btnThumb, 'dragstart', function (event) {
                return false;
            });

            this.addHandler($(document), 'mouseup.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseup(self, event); });

            if (!this.isTouchDevice) {
                var mousemoveFunc = function (event) {
                    if (!self.disabled) {
                        self.handlemousemove(event);
                    }
                }

                this.addHandler($(document), 'mousemove.' + this.element.id, mousemoveFunc);
                this.addHandler($(document), 'mouseleave.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseleave(event); });
                this.addHandler($(document), 'mouseenter.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseenter(event); });

                if (!self.disabled) {
                    this.btnUp.hover(function () {
                        if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {
                            self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._addArrowClasses('hover', 'up');
                        }
                    }, function () {
                        if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {
                            self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._removeArrowClasses('hover', 'up');
                        }
                    });

                    var thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover');
                    if (!self.vertical) {
                        thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover-horizontal');
                    }

                    this.btnThumb.hover(function () {
                        if (!self.disabled && self.touchMode != true) {
                            self.btnThumb.addClass(thumbHoverClass);
                            self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                        }
                    }, function () {
                        if (!self.disabled && self.touchMode != true) {
                            self.btnThumb.removeClass(thumbHoverClass);
                            self.btnThumb.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        }
                    });

                    this.btnDown.hover(function () {
                        if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {
                            self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._addArrowClasses('hover', 'down');
                        }
                    }, function () {
                        if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {
                            self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._removeArrowClasses('hover', 'down');
                        }
                    });
                }
            }
        },

        destroy: function () {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var btnThumb = this.btnThumb;
            var elWrap = this.scrollWrap;
            var areaUp = this.areaUp;
            var areaDown = this.areaDown;

            areaDown.removeClass();
            areaUp.removeClass();
            btnDown.removeClass();
            btnUp.removeClass();
            btnThumb.removeClass();

            btnUp.jqxRepeatButton('destroy');
            btnDown.jqxRepeatButton('destroy');
            areaUp.jqxRepeatButton('destroy');
            areaDown.jqxRepeatButton('destroy');
            btnThumb.jqxButton('destroy');

            this._removeHandlers();
            this.host.removeClass();
            this.host.removeData();
            this.host.remove();
            this.host = null;
            this.btnUp = null;
            this.btnDown = null;
            this.scrollWrap = null;
            this.areaUp = null;
            this.areaDown = null;
        },

        _removeHandlers: function () {
            this.removeHandler(this.btnUp, 'click');
            this.removeHandler(this.btnDown, 'click');
            this.removeHandler(this.btnDown, 'mouseup');
            this.removeHandler(this.btnUp, 'mouseup');
            this.removeHandler(this.btnDown, 'mousedown');
            this.removeHandler(this.btnUp, 'mousedown');
            this.removeHandler(this.areaUp, 'mousedown');
            this.removeHandler(this.areaDown, 'mousedown');
            this.removeHandler(this.areaUp, 'click');
            this.removeHandler(this.areaDown, 'click');
            this.removeHandler(this.btnThumb, 'mousedown');
            this.removeHandler(this.btnThumb, 'dragstart');
            this.removeHandler($(document), 'mouseup.' + this.element.id);
            this.removeHandler($(document), 'mousemove.' + this.element.id);
            this.removeHandler($(document), 'mouseleave.' + this.element.id);
            this.removeHandler($(document), 'mouseenter.' + this.element.id);
            this.btnUp.unbind('hover');
            this.btnThumb.unbind('hover');
            this.btnDown.unbind('hover');
            var self = this;
        },

        _addArrowClasses: function (state, button) {
            if (state == 'pressed') state = 'selected';
            if (state != '') {
                state = '-' + state;
            }

            if (this.vertical) {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.addClass(this.toThemeProperty("icon-arrow-up" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.addClass(this.toThemeProperty("icon-arrow-down" + state));
                }
            }
            else {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.addClass(this.toThemeProperty("icon-arrow-left" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.addClass(this.toThemeProperty("icon-arrow-right" + state));
                }
            }
        },

        _removeArrowClasses: function (state, button) {
            if (state == 'pressed') state = 'selected';
            if (state != '') {
                state = '-' + state;
            }

            if (this.vertical) {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.removeClass(this.toThemeProperty("icon-arrow-up" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.removeClass(this.toThemeProperty("icon-arrow-down" + state));
                }
            }
            else {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.removeClass(this.toThemeProperty("icon-arrow-left" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.removeClass(this.toThemeProperty("icon-arrow-right" + state));
                }
            }
        },

        setTheme: function () {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var btnThumb = this.btnThumb;
            var elWrap = this.scrollWrap;
            var areaUp = this.areaUp;
            var areaDown = this.areaDown;
            var arrowUp = this.arrowUp;
            var arrowDown = this.arrowDown;
     
            this.scrollWrap[0].className = this.toThemeProperty('jqx-reset');
            this.scrollOuterWrap[0].className = this.toThemeProperty('jqx-reset');

            var areaClassName = this.toThemeProperty('jqx-reset');
            this.areaDown[0].className = areaClassName;
            this.areaUp[0].className = areaClassName;

            var hostClass = this.toThemeProperty('jqx-scrollbar') + " " + this.toThemeProperty('jqx-widget') + " " + this.toThemeProperty('jqx-widget-content');
            this.element.className = hostClass;

            btnDown[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');
            btnUp[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');

            var thumbClass = "";
            if (this.vertical) {
                arrowUp[0].className = areaClassName + " " + this.toThemeProperty("icon-arrow-up");
                arrowDown[0].className = areaClassName + " " + this.toThemeProperty("icon-arrow-down");
                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal');
            }
            else {
                arrowUp[0].className = areaClassName + " " + this.toThemeProperty("icon-arrow-left");
                arrowDown[0].className = areaClassName + " " + this.toThemeProperty("icon-arrow-right");
                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal-horizontal');
            }
            thumbClass += " " + this.toThemeProperty('jqx-fill-state-normal');

            btnThumb[0].className = thumbClass;

            if (this.disabled) {
                elWrap.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                elWrap.removeClass(this.toThemeProperty('jqx-scrollbar-state-normal'));
            }
            else {
                elWrap.addClass(this.toThemeProperty('jqx-scrollbar-state-normal'));
                elWrap.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
          
            if (this.roundedCorners == 'all') {
                if (this.vertical) {
                    var rct = $.jqx.cssroundedcorners('top');
                    rct = this.toThemeProperty(rct);
                    btnUp.addClass(rct);

                    var rcb = $.jqx.cssroundedcorners('bottom');
                    rcb = this.toThemeProperty(rcb);
                    btnDown.addClass(rcb);

                }
                else {
                    var rcl = $.jqx.cssroundedcorners('left');
                    rcl = this.toThemeProperty(rcl);
                    btnUp.addClass(rcl);

                    var rcr = $.jqx.cssroundedcorners('right');
                    rcr = this.toThemeProperty(rcr);
                    btnDown.addClass(rcr);
                }
            }
            else {
                var rc = $.jqx.cssroundedcorners(this.roundedCorners);
                rc = this.toThemeProperty(rc);
                elBtnUp.addClass(rc);
                elBtnDown.addClass(rc);
            }

            var rc = $.jqx.cssroundedcorners(this.roundedCorners);
            rc = this.toThemeProperty(rc);
            if (!btnThumb.hasClass(rc)) {
                btnThumb.addClass(rc);
            }

            if (this.isTouchDevice && this.touchModeStyle != false) {
                this.showButtons = false;
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-normal-touch'));
            }
        },

        // returns true, if the user is dragging the thumb or the increase or decrease button is pressed.
        isScrolling: function () {
            if (this.thumbCapture == undefined || this.buttonDownCapture == undefined || this.buttonUpCapture == undefined)
                return false;

            return this.thumbCapture || this.buttonDownCapture || this.buttonUpCapture;
        },

        handlemousedown: function (event) {
            if (this.thumbCapture == undefined || this.thumbCapture == false) {
                this.thumbCapture = true;
                var btnThumb = this.btnThumb;
                if (btnThumb != null) {
                    btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    if (this.vertical) {
                        btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));
                    }
                    else {
                        btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));
                    }
                }
            }

            this.dragStartX = event.clientX;
            this.dragStartY = event.clientY;
            this.dragStartValue = this.value;
        },

        toggleHover: function (event, element) {
            //element.toggleClass('jqx-fill-state-hover');
        },

        refresh: function () {
            this._arrange();
        },

        _setElementPosition: function (element, x, y) {
            if (!isNaN(x)) {
                if (parseInt(element[0].style.left) != parseInt(x)) {
                    element[0].style.left = x + 'px';
                }
            }
            if (!isNaN(y)) {
                if (parseInt(element[0].style.top) != parseInt(y)) {
                    element[0].style.top = y + 'px';
                }
            }
        },

        _setElementTopPosition: function (element, y) {
            if (!isNaN(y)) {
                element[0].style.top = y + 'px';
            }
        },

        _setElementLeftPosition: function (element, x) {
            if (!isNaN(x)) {
                element[0].style.left = x + 'px';
            }
        },

        handlemouseleave: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;

            btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
            btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
            this._removeArrowClasses('pressed');

            if (this.thumbCapture != true)
                return;

            var btnThumb = this.btnThumb;
            var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
            btnThumb.removeClass(btnThumbPressedClass);
            btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
        },

        handlemouseenter: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;

            if (this.buttonUpCapture) {
                btnUp.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnUp.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._addArrowClasses('pressed', 'up');
            }

            if (this.buttonDownCapture) {
                btnDown.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnDown.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._addArrowClasses('pressed', 'down');
            }

            if (this.thumbCapture != true)
                return;

            var btnThumb = this.btnThumb;
            if (this.vertical) {
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));
            }
            else {
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));
            }
            btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
        },

        handlemousemove: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var which = 0;

            if (btnDown == null || btnUp == null)
                return;

            if (btnUp != null && btnDown != null && this.buttonDownCapture != undefined && this.buttonUpCapture != undefined) {
                if (this.buttonDownCapture && event.which == which) {
                    btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                    btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    this._removeArrowClasses('pressed', 'down');

                    this.buttonDownCapture = false;
                }
                else if (this.buttonUpCapture && event.which == which) {
                    btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                    btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    this._removeArrowClasses('pressed', 'up');
                    this.buttonUpCapture = false;
                }
            }

            if (this.thumbCapture != true)
                return false;

            var btnThumb = this.btnThumb;

            if (event.which == which && !this.isTouchDevice) {
                this.thumbCapture = false;
                this._arrange();
                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                btnThumb.removeClass(btnThumbPressedClass);
                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                return true;
            }

            if (event.preventDefault != undefined) {
                event.preventDefault();
            }

            if (event.originalEvent != null) {
                event.originalEvent.mouseHandled = true;
            }

            if (event.stopPropagation != undefined) {
                event.stopPropagation();
            }

            var diff = 0;

            try {
                if (!this.vertical)
                    diff = event.clientX - this.dragStartX;
                else
                    diff = event.clientY - this.dragStartY;
                var btnAndThumbSize = this._btnAndThumbSize;
                if (!this._btnAndThumbSize) {
                    btnAndThumbSize = (this.vertical) ?
                    btnUp.height() + btnDown.height() + btnThumb.height() :
                    btnUp.width() + btnDown.width() + btnThumb.width();
                }

                var ratio = (this.max - this.min) / (this.scrollBarSize - btnAndThumbSize);
                diff *= ratio;
                this.setPosition(this.dragStartValue + diff);
            }
            catch (error) {
                alert(error);
            }

            return false;
        },

        handlemouseup: function (self, event) {
            var prevent = false;
            try
            {
                self._mouseup = new Date();
            }
            catch (error) {
            }

            if (this.thumbCapture) {
                this.thumbCapture = false;

                var btnThumb = this.btnThumb;
                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                btnThumb.removeClass(btnThumbPressedClass);
                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                prevent = true;
            }

            if (this.buttonUpCapture || this.buttonDownCapture) {
                var btnUp = this.btnUp;
                var btnDown = this.btnDown;

                this.buttonUpCapture = false;
                this.buttonDownCapture = false;
                btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._removeArrowClasses('pressed');

                prevent = true;
            }

            if (prevent) {
                if (event.preventDefault != undefined) {
                    event.preventDefault();
                }

                if (event.originalEvent != null) {
                    event.originalEvent.mouseHandled = true;
                }

                if (event.stopPropagation != undefined) {
                    event.stopPropagation();
                }
            }
        },

        // sets the value.
        // @param Number. Sets the ScrollBar's value.
        setPosition: function (position, update) {
            var element = this.element;

            if (position == undefined || position == NaN)
                position = this.min;

            if (position >= this.max) {
                position = this.max;
            }

            if (position < this.min) {
                position = this.min;
            }

            if (this.value !== position || update == true) {
                if (position == this.max) {
                    var completeEvent = new jQuery.Event('complete');
                    this.host.trigger(completeEvent);
                }
                var oldvalue = this.value;
                if (this._triggervaluechanged) {
                    var event = new jQuery.Event('valuechanged');
                    event.previousValue = this.value;
                    event.currentValue = position;
                }

                this.value = position;
                this._positionelements();
                //this._arrange();

                if (this._triggervaluechanged) {
                    this.host.trigger(event);
                }

                if (this.valuechanged) {
                    this.valuechanged({ currentValue: this.value, previousvalue: oldvalue });
                }
            }

            return position;
        },

        _getThumbSize: function (scrollLen) {
            var diff = this.max - this.min;

            var size = 0;
            if (diff > 1) {
                size = (scrollLen / (diff + scrollLen) * scrollLen);
            }
            else if (diff == 1) {
                size = scrollLen;
            }

            if (this.thumbSize > 0) {
                size = this.thumbSize;
            }

            if (size < this.thumbMinSize)
                size = this.thumbMinSize;

            return Math.min(size, scrollLen);
        },

        _positionelements: function () {
            var element = this.element;
            var elAreaUp = this.areaUp;
            var elAreaDown = this.areaDown;
            var elBtnUp = this.btnUp;
            var elBtnDown = this.btnDown;
            var elThumb = this.btnThumb;
            var elWrap = this.scrollWrap;

            var height = this._height ? this._height : this.host.height();
            var width = this._width ? this._width : this.host.width();

            var btnSize = (!this.vertical) ? height : width;
            if (!this.showButtons) {
                btnSize = 0;
            }

            var scrollBarSize = (!this.vertical) ? width : height;
            this.scrollBarSize = scrollBarSize;
            var thumbSize = this._getThumbSize(scrollBarSize - 2 * btnSize);
            thumbSize = Math.round(thumbSize);

            if (thumbSize < this.thumbMinSize)
                thumbSize = this.thumbMinSize;

            if (height == NaN || height < 10)
                height = 10;

            if (width == NaN || width < 10)
                width = 10;

            btnSize += 2;
            this.btnSize = btnSize;

            var btnAndThumbSize = this._btnAndThumbSize;

            if (!this._btnAndThumbSize) {
                var btnAndThumbSize = (this.vertical) ?
                2 * this.btnSize + elThumb.outerHeight() :
                2 * this.btnSize + elThumb.outerWidth();

                btnAndThumbSize = Math.round(btnAndThumbSize);
            }

            var upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.value - this.min);
            upAreaSize = Math.round(upAreaSize);

            if (this.vertical) {
                var newDownSize = scrollBarSize - upAreaSize - btnAndThumbSize;
                if (newDownSize < 0) newDownSize = 0;
                elAreaDown[0].style.height = newDownSize + 'px';
                elAreaUp[0].style.height = upAreaSize + 'px';

                this._setElementTopPosition(elAreaUp, btnSize);
                this._setElementTopPosition(elThumb, btnSize + upAreaSize);
                this._setElementTopPosition(elAreaDown, btnSize + upAreaSize + thumbSize);
            }
            else {
                elAreaUp[0].style.width = upAreaSize + 'px';
                elAreaDown[0].style.width = scrollBarSize - upAreaSize - btnAndThumbSize + 'px';

                this._setElementLeftPosition(elAreaUp, btnSize);
                this._setElementLeftPosition(elThumb, btnSize + upAreaSize);
                this._setElementLeftPosition(elAreaDown, 2 + btnSize + upAreaSize + thumbSize);
            }
        },

        _arrange: function () {
            var element = this.element;
            var elAreaUp = this.areaUp;
            var elAreaDown = this.areaDown;
            var elBtnUp = this.btnUp;
            var elBtnDown = this.btnDown;
            var elThumb = this.btnThumb;
            var elWrap = this.scrollWrap;

            var height = parseInt(this.element.style.height);
            var width = parseInt(this.element.style.width);

            if (isNaN(height)) height = 0;
            if (isNaN(width)) width = 0;

            this._width = width;
            this._height = height;
            var btnSize = (!this.vertical) ? height : width;
            if (!this.showButtons) {
                btnSize = 0;
            }

            elBtnUp[0].style.width = btnSize + 'px';
            elBtnUp[0].style.height = btnSize + 'px';
            elBtnDown[0].style.width = btnSize + 'px';
            elBtnDown[0].style.height = btnSize + 'px';
         
            if (this.vertical) {
                elWrap[0].style.width = width + 2 + 'px';
            }
            else {
                elWrap[0].style.height = height + 2 + 'px';
            }

            // position the up button
            this._setElementPosition(elBtnUp, 0, 0);

            // position the down button
            if (this.vertical) {
                this._setElementPosition(elBtnDown, 0, height - elBtnDown.outerHeight());
            }
            else {
                this._setElementPosition(elBtnDown, width - elBtnDown.outerWidth(), 0);
            }

            var scrollBarSize = (!this.vertical) ? width : height;
            this.scrollBarSize = scrollBarSize;
            var thumbSize = this._getThumbSize(scrollBarSize - 2 * btnSize);
            thumbSize = Math.round(thumbSize);

            if (thumbSize < this.thumbMinSize)
                thumbSize = this.thumbMinSize;

            var touchStyle = false;
            if (this.isTouchDevice && this.touchModeStyle != false) {
                touchStyle = true;
            }

            if (!this.vertical) {
                elThumb[0].style.width = thumbSize + 'px';
                elThumb[0].style.height = height + 'px';
                if (touchStyle) {
                    elThumb.css({ height: this.thumbTouchSize + 'px' });
                    elThumb.css('margin-top', (this.host.height() - this.thumbTouchSize) / 2);
                }
            }
            else {
                elThumb[0].style.width = width + 'px';
                elThumb[0].style.height = thumbSize + 'px';
        
                if (touchStyle) {
                    elThumb.css({ width: this.thumbTouchSize + 'px' });
                    elThumb.css('margin-left', (this.host.width() - this.thumbTouchSize) / 2);
                }
            }

            if (height == NaN || height < 10)
                height = 10;

            if (width == NaN || width < 10)
                width = 10;

            btnSize += 2;
            this.btnSize = btnSize;

            var btnAndThumbSize = (this.vertical) ?
                2 * this.btnSize + (2 + parseInt(elThumb[0].style.height)) :
                2 * this.btnSize + (2 + parseInt(elThumb[0].style.width));

            btnAndThumbSize = Math.round(btnAndThumbSize);
            this._btnAndThumbSize = btnAndThumbSize;

            var upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.value- this.min);
            upAreaSize = Math.round(upAreaSize);
            if (upAreaSize === -Infinity || upAreaSize == Infinity) upAreaSize = 0;
            if (isNaN(upAreaSize)) {
                upAreaSize = 0;
            }

            if (this.vertical) {
                var newAreaHeight = (scrollBarSize - upAreaSize - btnAndThumbSize);
                if (newAreaHeight < 0) newAreaHeight = 0;
                elAreaDown[0].style.height = newAreaHeight + 'px';
                elAreaDown[0].style.width = width + 'px';
                elAreaUp[0].style.height = upAreaSize + 'px';
                elAreaUp[0].style.width = width + 'px';

                var hostHeight = parseInt(this.host.height());
                elThumb[0].style.visibility = 'inherit';

                if (hostHeight - 3 * parseInt(btnSize) < 0) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (hostHeight < btnAndThumbSize) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (this.element.style.visibility == 'visible') {
                    elThumb[0].style.visibility = 'inherit';
                }

                this._setElementPosition(elAreaUp, 0, btnSize);
                this._setElementPosition(elThumb, 0, btnSize + upAreaSize);
                this._setElementPosition(elAreaDown, 0, btnSize + upAreaSize + thumbSize);
            }
            else {
                elAreaUp[0].style.width = upAreaSize + 'px';
                elAreaUp[0].style.height = height + 'px';
                var newAreaWidth = (scrollBarSize - upAreaSize - btnAndThumbSize);
                if (newAreaWidth < 0) newAreaWidth = 0;
                elAreaDown[0].style.width = newAreaWidth + 'px';
                elAreaDown[0].style.height = height+ 'px';
                
                var hostWidth = parseInt(this.host.width());
                elThumb[0].style.visibility = 'inherit';
                if (hostWidth - 3 * parseInt(btnSize) < 0) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (hostWidth < btnAndThumbSize) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (this.element.style.visibility == 'visible') {
                    elThumb[0].style.visibility = 'inherit';
                }

                this._setElementPosition(elAreaUp, btnSize, 0);
                this._setElementPosition(elThumb, btnSize + upAreaSize, 0);
                this._setElementPosition(elAreaDown, 2 + btnSize + upAreaSize + thumbSize, 0);
            }
        }
    }); // jqxScrollBar
})(jQuery);

/*
* jqxpanel.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/*
* Depends:
*   jqxcore.js
    jqxscrollbar.js
    jqxbuttons.js
*/


(function ($) {

    $.jqx.jqxWidget("jqxPanel", "", {});

    $.extend($.jqx._jqxPanel.prototype, {

        defineInstance: function () {
            //Type: String.
            //Default: null.
            //Sets the panel width.
            this.width = null;
            //Type: String.
            //Default: null.
            //Sets the panel height.
            this.height = null;
            // gets or sets whether the panel is disabled.
            this.disabled = false;
            // Type: Number
            // Default: 15
            // gets or sets the scrollbars size.
            this.scrollBarSize = 15;
            // Type: String
            // Default: 'fixed'
            // Sets the sizing mode. In the 'fixed' mode, the panel displays scrollbars, if its content requires it. 
            // In the wrap mode, the scrollbars are not displayed and the panel automatically changes its size.
            // Possible Values: 'fixed', 'wrap'
            this.sizeMode = 'fixed';
            // Type: Boolean
            // Default: false
            // Automatically updates the panel, if its children size is changed.
            this.autoUpdate = false;
            // Type: Number
            // Default: 500
            // Gets or sets the autoUpdate interval.
            this.autoUpdateInterval = 500;
            this.touchMode = 'auto';
            this.horizontalScrollBarMax = null;
            this.verticalScrollBarMax = null;
            this.touchModeStyle = 'auto';
            // jqxPanel events.
            this.events =
			[
            // occurs when the layout is performed.
		  	   'layout',
     		];
        },

        // creates a new jqxPanel instance.
        createInstance: function (args) {
            var self = this;
            this.host
			.addClass(this.toThemeProperty("jqx-panel"));
            this.host
			.addClass(this.toThemeProperty("jqx-widget"));
            this.host
			.addClass(this.toThemeProperty("jqx-widget-content"));
            this.host
            .addClass(this.toThemeProperty("jqx-rc-all"));

            var panelStructure = $("<div tabIndex=0 style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='panelWrapper' tabIndex=0 style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; overflow: hidden; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='panelContent' tabIndex=0 style='-webkit-appearance: none; outline: none; border: none; padding: 0px; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='verticalScrollBar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='horizontalScrollBar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "</div>" +
                "</div>");

            var hostHeight = this.host.css('height');
            var hostWidth = this.host.css('width');

            if (this.width == null) this.width = hostWidth;
            if (this.height == null) this.height = hostHeight;

            this.host.wrapInner(panelStructure);
            var verticalScrollBar = this.host.find("#verticalScrollBar");
            verticalScrollBar[0].id = this.element.id + 'verticalScrollBar';

            this.vScrollBar = verticalScrollBar.jqxScrollBar({ 'vertical': true, touchMode: this.touchMode, theme: this.theme });
            var horizontalScrollBar = this.host.find("#horizontalScrollBar");
            horizontalScrollBar[0].id = this.element.id + 'horizontalScrollBar';
            this.hScrollBar = horizontalScrollBar.jqxScrollBar({ 'vertical': false, touchMode: this.touchMode, theme: this.theme });
            this.wrapper = this.host.find("#panelWrapper");
            this.wrapper[0].id = this.wrapper[0].id + this.element.id;
            this.content = this.host.find("#panelContent");
            this.content.addClass(this.toThemeProperty('jqx-widget-content'));
            if ($.browser.msie) {
                //  this.content.css('width', '110%');
            }
            this.content[0].id = this.content[0].id + this.element.id;
            this.bottomRight = this.host.find("#bottomRight").addClass(this.toThemeProperty('jqx-panel-bottomright'));
            this.bottomRight[0].id = 'bottomRight' + this.element.id;

            this.vScrollBar.css('visibility', 'visible');
            this.hScrollBar.css('visibility', 'visible');
            this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;

            var me = this;
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                me.vScrollBar.jqxScrollBar({ disabled: me.disabled });
                me.hScrollBar.jqxScrollBar({ disabled: me.disabled });
            };

            this.vScrollBar.jqxScrollBar({ disabled: this.disabled });
            this.hScrollBar.jqxScrollBar({ disabled: this.disabled });

            this._addHandlers();
            this._arrange();


            $(window).resize(function () {
                var width = self.host.width();
                var height = self.host.height();
                if (width != self.__oldwidth && height != self.__oldheight) {
                    self._arrange();
                }

                self.__oldwidth = width;
                self.__oldheight = height;

            });

            this.contentWidth = me.content[0].scrollWidth;
            this.contentHeight = me.content[0].scrollHeight;

            if (this.autoUpdate) {
                me._autoUpdate();
            }

            this.propertyChangeMap['autoUpdate'] = function (instance, key, oldVal, value) {
                if (me.autoUpdate) {
                    me._autoUpdate();
                }
                else {
                    clearInterval(me.autoUpdateId);
                    me.autoUpdateId = null;
                }
            }

            // unload
            $(window).bind('unload', function () {
                if (me.autoUpdateId != null) {
                    clearInterval(me.autoUpdateId);
                    me.autoUpdateId = null;
                    me.destroy();
                }
            });

            this._updateTouchScrolling();
        },

        _updateTouchScrolling: function () {
            var self = this;
            if (this.touchMode == true) {
                $.jqx.mobile.setMobileSimulator(this.element);
            }

            var isTouchDevice = this.isTouchDevice();
            if (isTouchDevice) {
                $.jqx.mobile.touchScroll(this.element, self.vScrollInstance.max, function (left, top) {
                    if (self.vScrollBar.css('visibility') == 'visible') {
                        var oldValue = self.vScrollInstance.value;
                        self.vScrollInstance.setPosition(oldValue + top);
                    }
                    if (self.hScrollBar.css('visibility') == 'visible') {
                        var oldValue = self.hScrollInstance.value;
                        self.hScrollInstance.setPosition(oldValue + left);
                    }
                }, this.element.id);
            }

            this.vScrollBar.jqxScrollBar({ touchMode: this.touchMode });
            this.hScrollBar.jqxScrollBar({ touchMode: this.touchMode });
        },

        isTouchDevice: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice && this.touchModeStyle != false) {
                this.scrollBarSize = 10;
            }
            return isTouchDevice;
        },

        // append element.
        // @param element
        append: function (element) {
            if (element != null) {
                this.content.append(element);
                this._arrange();
            }
        },

        setcontent: function (html) {
            this.content[0].innerHTML = html;
        },

        // prepend element.
        // @param element
        prepend: function (element) {
            if (element != null) {
                this.content.prepend(element);
                this._arrange();
            }
        },

        // clears the content.
        clearcontent: function () {
            this.content.text('');
            this.content.children().remove();
            this._arrange();
        },

        // remove element.
        // @param element
        remove: function (element) {
            if (element != null) {
                $(element).remove();
                this._arrange();
            }
        },

        _autoUpdate: function () {
            var me = this;

            if ($.browser.msie && $.browser.version < 8) {
                try
                {
                    this.autoUpdateId = setInterval(function () {
                        var newWidth = me.content[0].scrollWidth;
                        var newHeight = me.content[0].scrollHeight;
                        var doarrange = false;
                        if (me.contentWidth != newWidth) {
                            me.contentWidth = newWidth;
                            doarrange = true;
                        }

                        if (me.contentHeight != newHeight) {
                            me.contentHeight = newHeight;
                            doarrange = true;
                        }

                        if (doarrange) {
                            me._arrange();
                        }
                    }, this.autoUpdateInterval);
                }
                catch(error)
                {
                }
            }
            else {
                this.autoUpdateId = setInterval(function () {
                    var newWidth = me.content[0].scrollWidth;
                    var newHeight = me.content[0].scrollHeight;
                    var doarrange = false;
                    if (me.contentWidth != newWidth) {
                        me.contentWidth = newWidth;
                        doarrange = true;
                    }

                    if (me.contentHeight != newHeight) {
                        me.contentHeight = newHeight;
                        doarrange = true;
                    }

                    if (doarrange) {
                        me._arrange();
                    }
                }, this.autoUpdateInterval);
            }
        },

        _addHandlers: function () {
            var self = this;
            this.addHandler(this.vScrollBar, 'valuechanged', function (event) {
                self._render(self);
            });

            this.addHandler(this.hScrollBar, 'valuechanged', function (event) {
                self._render(self);
            });

            this.addHandler(this.host, 'mousewheel', function (event) {
                self.wheel(event, self);
            });

            this.addHandler(this.content, 'mouseleave', function (event) {
                self.focused = false;
            });

            this.addHandler(this.content, 'focus', function (event) {
                self.focused = true;
            });

            this.addHandler(this.content, 'blur', function (event) {
                self.focused = false;
            });

            this.addHandler(this.content, 'mouseenter', function (event) {
                self.focused = true;
            });
        },

        _removeHandlers: function () {
            var self = this;
            this.removeHandler(this.vScrollBar, 'valuechanged');
            this.removeHandler(this.hScrollBar, 'valuechanged');
            this.removeHandler(this.host, 'mousewheel');
            this.removeHandler(this.content, 'mouseleave');
            this.removeHandler(this.content, 'focus');
            this.removeHandler(this.content, 'blur');
            this.removeHandler(this.content, 'mouseenter');
        },

        // performs mouse wheel.
        wheel: function (event, self) {
            var delta = 0;
            // fix for IE8 and IE7
            if (event.originalEvent && $.browser.msie && event.originalEvent.wheelDelta) {
                delta = event.originalEvent.wheelDelta / 120;
            }

            if (!event) /* For IE. */
                event = window.event;
            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);

                if (!result) {
                    if (event.preventDefault)
                        event.preventDefault();
                }

                if (!result) {
                    return result;
                }
                else return false;
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        // scrolls down.
        scrollDown: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value + vScrollInstance.largestep <= vScrollInstance.max) {
                vScrollInstance.setPosition(vScrollInstance.value + vScrollInstance.largestep);
                return true;
            }
            else {
                if (vScrollInstance.value + vScrollInstance.largestep != vScrollInstance.max) {
                    vScrollInstance.setPosition(vScrollInstance.max);
                    return true;
                }
            }

            return false;
        },

        // scrolls up.
        scrollUp: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value - vScrollInstance.largestep >= vScrollInstance.min) {
                vScrollInstance.setPosition(vScrollInstance.value - vScrollInstance.largestep);
                return true;
            }
            else {
                if (vScrollInstance.value - vScrollInstance.largestep != vScrollInstance.min) {
                    vScrollInstance.setPosition(vScrollInstance.min);
                    return true;
                }
            }
            return false;
        },

        _handleDelta: function (delta) {
            if (this.focused) {
                var oldvalue = this.vScrollInstance.value;
                if (delta < 0) {
                    this.scrollDown();
                }
                else this.scrollUp();
                var newvalue = this.vScrollInstance.value;
                if (oldvalue != newvalue) {
                    return false;
                }
            }

            return true;
        },

        _render: function (self) {
            if (self == undefined) self = this;
            var vScroll = self.vScrollInstance.value;
            var hScroll = self.hScrollInstance.value;
            self.content.css({ left: -hScroll, top: -vScroll });
        },

        // Moves the scrollbars to a specific position.
        // @param left. Specifies the horizontal scrollbar position.
        // @param top. Specifies the vertical scrollbar position.
        scrollTo: function (left, top) {
            if (left == undefined || top == undefined)
                return;

            this.vScrollInstance.setPosition(top);
            this.hScrollInstance.setPosition(left);
        },

        // Gets scrollable height.
        getScrollHeight: function () {
            return this.vScrollInstance.max;
        },

        // Gets vertical scroll position.
        getVScrollPosition: function () {
            return this.vScrollInstance.value;
        },

        // Gets scrollable width.
        getScrollWidth: function () {
            return this.hScrollInstance.max;
        },

        // gets the horizontal scroll position.
        getHScrollPosition: function () {
            return this.hScrollInstance.value;
        },

        _arrange: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
            }

            if (this.width != null && this.width.toString().indexOf("auto") != -1) {
                this.host.width(this.width);
            }
            if (this.height != null && this.height.toString().indexOf("auto") != -1) {
                this.host.height(this.height);
            }

            //            this.wrapper.css('overflow', 'auto');
            //            this.vScrollBar.css('display', 'none');
            //            this.hScrollBar.css('display', 'none');

            this.content.css('margin-right', '0px');
            var width = null;
            var height = null;

            if ($.browser.msie && $.browser.version < 10) {
                var contentLeft = parseInt(this.content.css('left'));
                this.content.css('left', 0);
            }
            var contentWidth = parseInt(this.content[0].scrollWidth);
            $.each(this.content.children(), function () {
                contentWidth = Math.max(contentWidth, $(this).outerWidth());
            });

            if ($.browser.msie && $.browser.version < 10) {
                this.content.css('left', contentLeft);
            }
            if (contentWidth < parseInt(this.host.width())) {
                contentWidth = parseInt(this.host.width());
            }

            var contentHeight = parseInt(this.content[0].scrollHeight);

            if (this.sizeMode == 'wrap') {
                this.host.width(contentWidth);
                this.host.height(contentHeight);
                this.vScrollBar.css('visibility', 'hidden');
                this.hScrollBar.css('visibility', 'hidden');
                return;
            }

            var scrollSizeAndOffset = 4 + parseInt(this.scrollBarSize);
            var vScrollMaximum = scrollSizeAndOffset + contentHeight - parseInt(this.host.height());
            var hScrollMaximum = scrollSizeAndOffset + contentWidth - parseInt(this.host.width());
            if (this.horizontalScrollBarMax != undefined) {
                hScrollMaximum = this.horizontalScrollBarMax;
            }
            if (this.verticalScrollBarMax != undefined) {
                vScrollMaximum = this.verticalScrollBarMax;
            }

            var voffset = 0;
            if (vScrollMaximum > scrollSizeAndOffset) {
                if (hScrollMaximum <= 0) {
                    vScrollMaximum = contentHeight - parseInt(this.host.height());
                }

                this.vScrollBar.jqxScrollBar({ 'max': vScrollMaximum });
                this.vScrollBar.css('visibility', 'visible');
            }
            else {
                this.vScrollBar.jqxScrollBar('setPosition', 0);
                this.vScrollBar.css('visibility', 'hidden');
            }
            if (hScrollMaximum > scrollSizeAndOffset + voffset) {
                if (vScrollMaximum <= 0 && this.horizontalScrollBarMax == undefined) {
                    hScrollMaximum = contentWidth - parseInt(this.host.width());
                }
                if ($.browser.msie && $.browser.version >= 8) {
                    if (hScrollMaximum - 10 <= scrollSizeAndOffset + voffset) {
                        this.hScrollBar.css('visibility', 'hidden');
                        this.hScrollBar.jqxScrollBar('setPosition', 0);
                    }
                    else {
                        this.hScrollBar.jqxScrollBar({ 'max': hScrollMaximum });
                        this.hScrollBar.css('visibility', 'visible');
                    }
                }
                else if ($.browser.msie && $.browser.version < 8) {
                    if (hScrollMaximum - 20 <= scrollSizeAndOffset + voffset) {
                        this.hScrollBar.css('visibility', 'hidden');
                        this.hScrollBar.jqxScrollBar('setPosition', 0);
                    }
                    else {
                        this.hScrollBar.jqxScrollBar({ 'max': hScrollMaximum });
                        this.hScrollBar.css('visibility', 'visible');
                    }
                }
                else {
                    this.hScrollBar.jqxScrollBar({ 'max': hScrollMaximum });
                    this.hScrollBar.css('visibility', 'visible');
                }
            }
            else {
                this.hScrollBar.css('visibility', 'hidden');
                this.hScrollBar.jqxScrollBar('setPosition', 0);
                if (this.vScrollBar.css('visibility') == 'visible') {
                    var me = this;
                    me.content.css('margin-right', scrollSizeAndOffset);
                    //          me.content.width(contentWidth - scrollSizeAndOffset);
                }
            }

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                width = this.host.width();
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                height = this.host.height();
            }


            var hostBorderSize = this.host.css('border-width');
            if (hostBorderSize == null) {
                hostBorderSize = 0;
            }

            if (width != null) {
                width = parseInt(width);
                this.host.width(this.width);
            }

            if (height != null) {
                height = parseInt(height);
                this.host.height(this.height);
            }

            // scrollbar Size.
            var scrollSize = this.scrollBarSize;
            if (isNaN(scrollSize)) {
                scrollSize = parseInt(scrollSize);
                if (isNaN(scrollSize)) {
                    scrollSize = '17px';
                }
                else scrollSize = scrollSize + 'px';
            }

            scrollSize = parseInt(scrollSize);
            var scrollOffset = 4;
            var bottomSizeOffset = 2;
            var rightSizeOffset = 0;
            // right scroll offset. 
            if (this.vScrollBar.css('visibility') == 'visible') {
                rightSizeOffset = scrollSize + scrollOffset;
            }

            // bottom scroll offset.
            if (this.hScrollBar.css('visibility') == 'visible') {
                bottomSizeOffset = scrollSize + scrollOffset;
            }

            this.hScrollBar.height(scrollSize);
            this.hScrollBar.css({ top: height - scrollOffset - scrollSize + 'px', left: '0px' });
            this.hScrollBar.width(width - scrollSize - scrollOffset + 'px');

            if (rightSizeOffset == 0) {
                this.hScrollBar.width(width - 2);
            }

            if (this.vScrollBar.css('visibility') != 'hidden') {
                this.vScrollBar.width(scrollSize);
            }
            else this.vScrollBar.width(0);

            this.vScrollBar.height(parseInt(height) - bottomSizeOffset + 'px');
            this.vScrollBar.css({ left: parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px', top: '0px' });
            var vScrollInstance = this.vScrollInstance;
            vScrollInstance.disabled = this.disabled;
            vScrollInstance.refresh();

            var hScrollInstance = this.hScrollInstance;
            hScrollInstance.disabled = this.disabled;
            hScrollInstance.refresh();

            if ((this.vScrollBar.css('visibility') == 'visible') && (this.hScrollBar.css('visibility') == 'visible')) {
                this.bottomRight.css('visibility', 'visible');
                this.bottomRight.css({ left: 1 + parseInt(this.vScrollBar.css('left')), top: 1 + parseInt(this.hScrollBar.css('top')) });
                this.bottomRight.width(parseInt(scrollSize) + 3);
                this.bottomRight.height(parseInt(scrollSize) + 3);
            }
            else this.bottomRight.css('visibility', 'hidden');

            this._raiseevent(0);
            var self = this;

            if (this.sizeMode == 'horizontalwrap') {
                this.host.width(contentWidth);
                this.vScrollBar.css({ left: this.host.width() - parseInt(scrollSize) - scrollOffset + 'px', top: '0px' });
                this.hScrollBar.css('visibility', 'hidden');
            }
            else if (this.sizeMode == 'verticalwrap') {
                this.host.height(contentHeight);
                if (this.hScrollBar.css('visibility') == 'visible') {
                    contentHeight += 20;
                    this.host.height(contentHeight);
                }
                this.hScrollBar.css({ top: contentHeight - scrollOffset - scrollSize + 'px', left: '0px' });
                this.vScrollBar.css('visibility', 'hidden');
            }
            if (this.sizeMode == 'overflowy') {
                this.hScrollBar.css('visibility', 'hidden');
                this.content.width(this.host.width() - rightSizeOffset);
            }
        },

        destroy: function () {
            this._removeHandlers();
            $(window).unbind('unload');
            this.host.remove();
        },

        _raiseevent: function (id, oldValue, newValue) {
            if (this.isInitialized != undefined && this.isInitialized == true) {
                var evt = this.events[id];
                var event = new jQuery.Event(evt);
                event.previousValue = oldValue;
                event.currentValue = newValue;
                event.owner = this;
                var result = this.host.trigger(event);
                return result;
            }
        },

        beginUpdateLayout: function () {
            this.updating = true;
        },

        resumeUpdateLayout: function () {
            this.updating = false;
            this.vScrollInstance.value = 0;
            this.hScrollInstance.value = 0;
            this._arrange();
            this._render();
        },

        propertyChangedHandler: function (object, key, oldValue, value) {
            if (!object.isInitialized)
                return;

            if (!object.updating) {
                if (key == 'scrollBarSize' || key == 'width' || key == 'height') {
                    object._arrange();
                }
            }
            if (key == 'touchMode') {
                if (value != 'auto') {
                    object._updateTouchScrolling();
                }
            }
            if (key == 'theme') {
                object.host.removeClass();
                object.host.addClass(this.toThemeProperty("jqx-panel"));
                object.host.addClass(this.toThemeProperty("jqx-widget"));
                object.host.addClass(this.toThemeProperty("jqx-widget-content"));
                object.host.addClass(this.toThemeProperty("jqx-rc-all"));
                object.vScrollBar.jqxScrollBar({ theme: this.theme });
                object.hScrollBar.jqxScrollBar({ theme: this.theme });
                object.bottomRight.removeClass();
                object.bottomRight.addClass(this.toThemeProperty('jqx-panel-bottomright'));
                object.content.removeClass();
                object.content.addClass(this.toThemeProperty('jqx-widget-content'));
            }
        },

        refresh: function () {
        }
    });
})(jQuery);
﻿/*
* Depends:
*   jqxcore.js
*/

(function ($) {

    $.jqx.jqxWidget("jqxTooltip", "", {});

    $.extend($.jqx._jqxTooltip.prototype, {
        defineInstance: function () {
            //// properties
            this.width = 'auto';
            this.height = 'auto';
            this.position = 'default'; // possible values: top, bottom, left, right, top-left, bottom-left, top-right, bottom-right, absolute, mouse, mouseenter, default
            this.enableBrowserBoundsDetection = true; // possible values: true, false
            this.content = '';
            this.left = 0;
            this.top = 0;
            this.absolutePositionX = 0;
            this.absolutePositionY = 0;
            this.trigger = 'hover'; // possible values: hover, click
            this.showDelay = 100;
            this.autoHide = true; // possible values: true, false
            this.autoHideDelay = 3000;
            this.closeOnClick = true; // possible values: true, false
            this.disabled = false; // possible values: true, false
            this.animationShowDelay = 200;
            this.animationHideDelay = 'fast';
            this.showArrow = true; // possible values: true, false
            this.name = '';
            this.opacity = 0.9;
          
            this._isOpen = false;

            this._eventsMap = {
                'mousedown': 'touchstart',
                'mouseup': 'touchend'
            };

            //// events
            this.events = ['open', 'close', 'opening', 'closing'];
        },

        createInstance: function (args) {
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();

            // creates an array based on the name property for storing tooltip IDs
            var id_array = $.data(document.body, "_tooltipIDArray" + this.name);
            if (!id_array) {
                this.ID_Array = new Array();
                $.data(document.body, "_tooltipIDArray" + this.name, this.ID_Array);
            } else {
                this.ID_Array = id_array;
            };

            // generates a new ID and adds it to an array, based on the name property
            var key = this._generatekey();
            var newID = 'jqxtooltip' + key;
            this.ID_Array.push({ tooltipID: newID, tooltipHost: this.host });

            // appends the tooltip div to the body
            var tooltipHTML = $('<div id="' + newID + '"><div id ="' + newID + 'Main"><div id="' + newID + 'Text"></div></div><div id="' + newID + 'Arrow"></div></div>');
            $("body").append(tooltipHTML);

            // sets the tooltips theme and classes
            this._setTheme();

            // hides the tooltip divs
            var $newID = $("#" + newID);
            $newID.css("visibility", "hidden");
            $newID.css("opacity", 0);
            $newID.css("z-index", 9999);

            // hides the tooltip's arrow
            if (this.showArrow == false) {
                $("#" + newID + "Arrow").css("visibility", "hidden");
            };

            // sets the width and height of the tooltip
            this._setSize();

            // sets the content of the tooltip
            this._setContent();

            //sets the initial position of the tooltip
            this._initialPosition();

            // triggers the tooltip
            if (this.disabled == false) {
                this._trigger();
                if (this.closeOnClick == true) {
                    this._clickHide();
                };
            };
        },

        //// public methods

        // opens (shows) the tooltip
        open: function () {
            if (this.disabled == false && this._id() != "removed") {
                if (this.position == 'mouse' || this.position == 'mouseenter') {
                    var tempPosition = this.position;
                    this.position = 'default';
                    this._setPosition();
                    this._animateShow();
                    this.position = tempPosition;
                } else {
                    this._raiseEvent('2');
                    this._setPosition();
                    this._animateShow();
                };
            };
        },

        // closes (hides) the tooltip
        close: function (delay) {
            var me = this;
            if (delay == undefined) {
                delay = this.animationHideDelay;
            };
            var opacityValue = new Number($(this._id()).css("opacity")).toFixed(2);
            if (this._isOpen == true && opacityValue == this.opacity) {
                clearTimeout(this.autoHideTimeout);
                this._raiseEvent('3');
                $(this._id()).animate({
                    opacity: 0
                }, delay, function () {
                    $(me._id()).css("visibility", "hidden");
                    me._raiseEvent('1');
                    me._isOpen = false;
                });
            };
        },

        // removes the tooltip
        destroy: function () {
            var length = this.ID_Array.length;
            this._removeHandlers();
            $(this._id()).remove();
            for (var i = 0; i < length; i++) {
                if (this.ID_Array[i].tooltipHost === this.host) {
                    this.ID_Array.splice(i, 1);
                    break;
                };
            };
            $(this.element).removeData('jqxTooltip');
        },

        //// private methods

        // refreshes the tooltip
        refresh: function (initialRefresh) {
            if (initialRefresh == true) {
                return;
            };

            var me = this;
            var opacityValue = new Number($(this._id()).css("opacity")).toFixed(2);
            if (this._id() != "removed") {
                if (this.disabled == true && this._isOpen == true && opacityValue == this.opacity) {
                    clearTimeout(this.autoHideTimeout);
                    $(this._id()).stop();
                    $(this._id()).animate({
                        opacity: 0
                    }, this.animationHideDelay, function () {
                        $(me._id()).css("visibility", "hidden");
                        me._isOpen = false;
                    });
                };
                this._setTheme();
                this._setSize();
                this._setContent();
                this._removeHandlers();
                if (this.disabled == false) {
                    this._trigger();
                    if (this.closeOnClick == true) {
                        this._clickHide();
                    };
                };
            };
        },

        // executed when a property is changed
        propertyChangedHandler: function (object, key, oldvalue, value) {
            object.refresh();
        },

        // raises an event
        _raiseEvent: function (id, args) {
            var evt = this.events[id];
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;

            try {
                var result = this.host.trigger(event);
            }
            catch (error) {
            }

            return result;
        },

        // generates a random number, used for unique id
        _generatekey: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4());
        },

        // selects the id of the current tooltip
        _id: function () {
            var ID_tmp, True_ID;
            var length = this.ID_Array.length;
            for (var i = 0; i < length; i++) {
                if (this.ID_Array[i].tooltipHost === this.host) {
                    ID_tmp = this.ID_Array[i].tooltipID;
                    True_ID = "#" + ID_tmp;
                    break;
                };
            };
            if (True_ID == undefined) {
                True_ID = "removed";
            };
            return True_ID;
        },

        // positions the tooltip
        _setPosition: function (event) {
            if (this._isOpen == false && $(this._id()).css("opacity") == 0) {
                this.documentTop = $(document).scrollTop();
                this.documentLeft = $(document).scrollLeft();
                this.windowWidth = $(window).width();
                this.windowHeight = $(window).height();

                this.host_width = this.host.outerWidth();
                this.host_height = this.host.outerHeight();
                this.tooltip_width = $(this._id()).width();
                this.tooltip_height = $(this._id()).height();
                this.host_offset = this.host.offset();
                this.tooltip_offset = $(this._id()).offset();
                this.default_offset = 30;

                this.offset_horizontal = parseInt(this.left); // horizontal offset
                this.offset_vertical = parseInt(this.top); // vertical offset

                var $arrow = $(this._id() + 'Arrow');
                var $main = $(this._id() + 'Main');

                this.arrow_size = 5; // defines the size of the tooltip arrow
                this.tooltip_main_offset = $main.offset();
                this.tooltip_arrow_offset;
             
                switch (this.position) {
                    case 'top':
                        this.tooltip_offset.left = this.host_offset.left + this.host_width / 2 - this.tooltip_width / 2 + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top - this.tooltip_height - this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px  0px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + (($main.width()) / 2 - this.arrow_size);
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + $main.height();
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'bottom':
                        this.tooltip_offset.left = this.host_offset.left + this.host_width / 2 - this.tooltip_width / 2 + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height + this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": "0 " + this.arrow_size + "px " + this.arrow_size + "px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + (($main.width()) / 2 - this.arrow_size);
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'left':
                        this.tooltip_offset.left = - 1 + this.host_offset.left - this.tooltip_width - this.arrow_size + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height / 2 - this.tooltip_height / 2 + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.css({ "border-width": this.arrow_size + "px 0px " + this.arrow_size + "px " + this.arrow_size + "px" });
                        this.tooltip_main_offset = $main.offset();
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = 1 + this.tooltip_main_offset.left + $main.width();
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + ($main.height()) / 2 - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'right':
                        this.tooltip_offset.left = this.host_offset.left + this.host_width + this.arrow_size + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height / 2 - this.tooltip_height / 2 + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px " + this.arrow_size + "px 0px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = (this.tooltip_main_offset.left - this.arrow_size);
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + ($main.height()) / 2 - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'top-left':
                        this.tooltip_offset.left = this.host_offset.left + this.default_offset - this.tooltip_width + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top - this.tooltip_height - this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px  0px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + $main.width() - 6 * this.arrow_size;
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + $main.height();
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'bottom-left':
                        this.tooltip_offset.left = this.host_offset.left + this.default_offset - this.tooltip_width + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height + this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": "0 " + this.arrow_size + "px " + this.arrow_size + "px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + $main.width() - 6 * this.arrow_size;
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'top-right':
                        this.tooltip_offset.left = this.host_offset.left + this.host_width - this.default_offset + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top - this.tooltip_height - this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px  0px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + 4 * this.arrow_size;
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + $main.height();
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'bottom-right':
                        this.tooltip_offset.left = this.host_offset.left + this.host_width - this.default_offset + this.offset_horizontal;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height + this.arrow_size + this.offset_vertical;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": "0 " + this.arrow_size + "px " + this.arrow_size + "px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + 4 * this.arrow_size;
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;

                    case 'absolute':
                        $(this._id()).offset({ top: this.absolutePositionY, left: this.absolutePositionX });

                        // arrow specifications, NO arrow
                        $arrow.css({ "border-width": "0px" });
                        break;

                    case 'mouse':
                        var me = this;
                        if (this._isTouchDevice == false) {
                            switch (this.trigger) {
                                case 'hover':
                                    if (this.mouseHoverTimeout) {
                                        clearTimeout(this.mouseHoverTimeout);
                                    }
                                    this.mouseHoverTimeout = setTimeout(function () {
                                        me.tooltip_offset.left = event.pageX + 10;
                                        me.tooltip_offset.top = event.pageY + 10;
                                        me._detectBrowserBounds();
                                    }, this.showDelay);
                                    break;
                                case 'click':
                                    this.tooltip_offset.left = event.pageX + 10;
                                    this.tooltip_offset.top = event.pageY + 10;
                                    this._detectBrowserBounds();
                                    break;
                            };
                        } else {
                            var x = event.pageX;
                            var y = event.pageY;
                            if (event.originalEvent) {
                                var touch = null;
                                if (event.originalEvent.touches && event.originalEvent.touches.length) {
                                    var touch = event.originalEvent.touches[0];
                                } else if (event.originalEvent.changedTouches && event.originalEvent.changedTouches.length) {
                                    var touch = event.originalEvent.changedTouches[0];
                                }
                                if (touch != undefined)
                                {
                                    x = touch.pageX;
                                    y = touch.pageY;
                                }
                            }
                        
                            this.tooltip_offset.left = x + 10;
                            this.tooltip_offset.top = y + 10;
                            this._detectBrowserBounds();
                        };

                        // arrow specifications, NO arrow
                        $arrow.css({ "border-width": "0px" });

                        break;

                    case 'mouseenter':
                        var mousecoordinates = { top: event.pageY, left: event.pageX };

                        // mouse from TOP
                        if ((mousecoordinates.top < (this.host_offset.top + 10)) && (mousecoordinates.top > (this.host_offset.top - 10))) {
                            this.tooltip_offset.left = mousecoordinates.left - this.tooltip_width / 2;
                            this.tooltip_offset.top = this.host_offset.top - this.tooltip_height - this.arrow_size;

                            this._detectBrowserBounds();

                            // arrow specifications, the same as TOP arrow
                            this.tooltip_main_offset = $main.offset();
                            $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                            $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                            $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px  0px" });
                            this.tooltip_arrow_offset = $arrow.offset();
                            this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + (($main.width()) / 2 - this.arrow_size);
                            this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + $main.height();
                            $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        }
                        // mouse from BOTTOM
                        else if ((mousecoordinates.top < ((this.host_offset.top + this.host_height) + 10)) && (mousecoordinates.top > ((this.host_offset.top + this.host_height) - 10))) {
                            this.tooltip_offset.left = mousecoordinates.left - this.tooltip_width / 2;
                            this.tooltip_offset.top = this.host_offset.top + this.host_height + this.arrow_size;

                            this._detectBrowserBounds();

                            // arrow specifications, the same as BOTTOM arrow
                            this.tooltip_main_offset = $main.offset();
                            $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                            $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                            $arrow.css({ "border-width": "0 " + this.arrow_size + "px " + this.arrow_size + "px" });
                            this.tooltip_arrow_offset = $arrow.offset();
                            this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + (($main.width()) / 2 - this.arrow_size);
                            this.tooltip_arrow_offset.top = this.tooltip_main_offset.top - this.arrow_size;
                            $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        }
                        // mouse from LEFT
                        else if ((mousecoordinates.left < (this.host_offset.left + 10)) && (mousecoordinates.left > (this.host_offset.left - 10))) {
                            this.tooltip_offset.left = this.host_offset.left - this.tooltip_width - this.arrow_size;
                            this.tooltip_offset.top = mousecoordinates.top - this.tooltip_height / 2;

                            this._detectBrowserBounds();

                            // arrow specifications, the same as LEFT arrow
                            this.tooltip_main_offset = $main.offset();
                            $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                            $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                            $arrow.css({ "border-width": this.arrow_size + "px 0px " + this.arrow_size + "px " + this.arrow_size + "px" });
                            this.tooltip_main_offset = $main.offset();
                            this.tooltip_arrow_offset = $arrow.offset();
                            this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + $main.width();
                            this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + ($main.height()) / 2 - this.arrow_size;
                            $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        }
                        // mouse from RIGHT
                        else if ((mousecoordinates.left < (this.host_offset.left + this.host_width + 10)) && (mousecoordinates.left > (this.host_offset.left + this.host_width - 10))) {
                            this.tooltip_offset.left = this.host_offset.left + this.host_width + this.arrow_size;
                            this.tooltip_offset.top = mousecoordinates.top - this.tooltip_height / 2;

                            this._detectBrowserBounds();

                            // arrow specifications, the same as RIGHT arrow
                            this.tooltip_main_offset = $main.offset();
                            $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                            $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                            $arrow.css({ "border-width": this.arrow_size + "px " + this.arrow_size + "px " + this.arrow_size + "px 0px" });
                            this.tooltip_main_offset = $main.offset();
                            this.tooltip_arrow_offset = $arrow.offset();
                            this.tooltip_arrow_offset.left = (this.tooltip_main_offset.left - this.arrow_size);
                            this.tooltip_arrow_offset.top = this.tooltip_main_offset.top + ($main.height()) / 2 - this.arrow_size;
                            $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        };
                        break;

                    case 'default':

                        // similar to 'bottom-right' but without this.offset_horizontal and this.offset_vertical
                        this.tooltip_offset.left = this.host_offset.left + this.host_width - this.default_offset;
                        this.tooltip_offset.top = this.host_offset.top + this.host_height + this.arrow_size;

                        this._detectBrowserBounds();

                        // arrow specifications
                        this.tooltip_main_offset = $main.offset();
                        $arrow.removeClass(this.toThemeProperty("jqx-tooltip-arrow-l-r"));
                        $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow-t-b"));
                        $arrow.css({ "border-width": "0 " + this.arrow_size + "px " + this.arrow_size + "px" });
                        this.tooltip_arrow_offset = $arrow.offset();
                        this.tooltip_arrow_offset.left = this.tooltip_main_offset.left + 4 * this.arrow_size;
                        this.tooltip_arrow_offset.top = this.tooltip_main_offset.top - this.arrow_size;
                        $arrow.offset({ top: this.tooltip_arrow_offset.top, left: this.tooltip_arrow_offset.left });
                        break;
                };
            };
        },

        // sets the content of the tooltip
        _setContent: function () {
            $(this._id() + 'Text').html(this.content);
        },

        // shows the tooltip with animation
        _animateShow: function () {
            this._closeAll();
            clearTimeout(this.autoHideTimeout);
            var opacityValue = new Number($(this._id()).css("opacity")).toFixed(2);
            if (this._isOpen == false && opacityValue == 0) {
                var me = this;
                var $id = $(this._id());
                $id.css("visibility", "visible");
                $id.stop();
                $id.css('opacity', 0);
                $id.animate({
                    opacity: this.opacity
                }, this.animationShowDelay, function () {
                    me._raiseEvent('0');
                    me._isOpen = true;

                    // creates a variable, showing the instance of the opened tooltip
                    var opened_tooltip = $.data(document.body, "_openedTooltip" + me.name);
                    if (opened_tooltip) {
                        opened_tooltip._raiseEvent('3');
                        opened_tooltip._raiseEvent('1');
                    }

                    me.openedTooltip = me;
                    $.data(document.body, "_openedTooltip" + me.name, me);
                    if (me.autoHideTimeout) clearTimeout(me.autoHideTimeout);
                    me.autoHideTimeout = setTimeout(function () {
                        me._autoHide();
                    }, me.autoHideDelay);
                });
            };
        },

        // triggers the tooltip
        _trigger: function () {
            if (this._id() != "removed") {
                this._enterFlag;
                this._leaveFlag;
                var me = this;
                if (this._isTouchDevice == false) {
                    switch (this.trigger) {
                        case 'hover':
                            if (this.position == 'mouse') {
                                this.addHandler(this.host, 'mousemove.tooltip', function (event) {
                                    if (me._enterFlag == 1) {
                                        me._raiseEvent('2');
                                        me._setPosition(event);
                                        clearTimeout(me.hoverShowTimeout);
                                        me.hoverShowTimeout = setTimeout(function () {
                                            me._animateShow();
                                            me._enterFlag = 0;
                                        }, me.showDelay);
                                    }
                                });
                                this.addHandler(this.host, 'mouseenter.tooltip', function () {
                                    if (me._leaveFlag != 0) {
                                        me._enterFlag = 1;
                                    };
                                });
                                this.addHandler(this.host, 'mouseleave.tooltip', function (event) {
                                    me._leaveFlag = 1;
                                    clearTimeout(me.hoverShowTimeout);

                                    var tooltipbounds = $(me._id()).offset();
                                    var width = $(me._id()).width();
                                    var height = $(me._id()).height();

                                    if (parseInt(event.pageX) < parseInt(tooltipbounds.left) || parseInt(event.pageX) > parseInt(tooltipbounds.left) + width) {
                                        me.close();
                                    }
                                    if (parseInt(event.pageY) < parseInt(tooltipbounds.top) || parseInt(event.pageY) > parseInt(tooltipbounds.top) + height) {
                                        me.close();
                                    }
                                });
                                this.addHandler($(this._id()), 'mouseleave.tooltip', function (event) {
                                    me._checkBoundariesAuto(event);
                                    if (me._clickFlag != 0 && me._autoFlag != 0) {
                                        me._leaveFlag = 0;
                                    } else {
                                        me._leaveFlag = 1;
                                        me.close();
                                    };
                                });
                            } else {
                                this.addHandler(this.host, 'mouseenter.tooltip', function (event) {
                                    clearTimeout(me.hoverShowTimeout);
                                    me.hoverShowTimeout = setTimeout(function () {
                                        me._raiseEvent('2');
                                        me._setPosition(event);
                                        me._animateShow();
                                    }, me.showDelay);
                                });
                                this.addHandler(this.host, 'mouseleave.tooltip', function (event) {
                                    me._leaveFlag = 1;
                                    clearTimeout(me.hoverShowTimeout);

                                    var tooltipbounds = $(me._id()).offset();
                                    var width = $(me._id()).width();
                                    var height = $(me._id()).height();

                                    if (parseInt(event.pageX) < parseInt(tooltipbounds.left) || parseInt(event.pageX) > parseInt(tooltipbounds.left) + width) {
                                        me.close();
                                    }
                                    if (parseInt(event.pageY) < parseInt(tooltipbounds.top) || parseInt(event.pageY) > parseInt(tooltipbounds.top) + height) {
                                        me.close();
                                    }
                                });
                                this.addHandler($(this._id()), 'mouseleave.tooltip', function (event) {
                                    me._checkBoundariesAuto(event);
                                    if (me._clickFlag != 0 && me._autoFlag != 0) {
                                        me._leaveFlag = 0;
                                    } else {
                                        me._leaveFlag = 1;
                                        me.close();
                                    };
                                });
                            };
                            break;
                        case 'click':
                            this.addHandler(this.host, 'click.tooltip', function (event) {
                                if (me.position == 'mouseenter') {
                                    me.position = 'mouse';
                                };
                                me._raiseEvent('2');
                                me._setPosition(event);
                                me._animateShow();
                            });
                            break;
                    };
                } else {
                    // if the device is touch
                    this.addHandler(this.host, 'touchstart.tooltip', function (event) {
                        if (me.position == 'mouseenter') {
                            me.position = 'mouse';
                        };
                        me._raiseEvent('2');
                        me._setPosition(event);
                        me._animateShow();
                    });
                };
            };
        },

        // automatically hides the tooltip
        _autoHide: function () {
            var me = this;
    
            var opacityValue = new Number($(this._id()).css("opacity")).toFixed(2);
            if (this.autoHide == true && this._isOpen == true && opacityValue >= this.opacity) {
                me._raiseEvent('3');
                $(me._id()).animate({
                    opacity: 0
                }, me.animationHideDelay, function () {
                    $(me._id()).css("visibility", "hidden");
                    me._raiseEvent('1');
                    me._isOpen = false;
                });
            };
        },

        // hides the tooltip when it is clicked
        _clickHide: function () {
            var me = this;
            this.addHandler($(this._id()), 'click.tooltip', function (event) {
                me._checkBoundariesClick(event);
                me.close();
            });
        },

        // sets the width and height of the tooltip
        _setSize: function () {
            $(this._id()).css({ "width": this.width, "height": this.height });
        },

        // sets the tooltips theme and classes
        _setTheme: function () {
            var id = this._id();
            var $main = $(id + 'Main');
            var $text = $(id + 'Text');
            var $arrow = $(id + 'Arrow');

            $main.addClass(this.toThemeProperty("jqx-widget"));
            $text.addClass(this.toThemeProperty("jqx-widget"));
            $arrow.addClass(this.toThemeProperty("jqx-widget"));

            $main.addClass(this.toThemeProperty("jqx-fill-state-normal"));
            $text.addClass(this.toThemeProperty("jqx-fill-state-normal"));
            $arrow.addClass(this.toThemeProperty("jqx-fill-state-normal"));

            $(id).addClass(this.toThemeProperty("jqx-tooltip"));
            $main.addClass(this.toThemeProperty("jqx-tooltip-main"));
            $text.addClass(this.toThemeProperty("jqx-tooltip-text"));
            $arrow.addClass(this.toThemeProperty("jqx-tooltip-arrow"));
        },

        // sets the initial position of the tooltip as 'default'
        _initialPosition: function () {
            var tempPosition = this.position;
            this.position = 'default';
            this._setPosition();
            this.position = tempPosition;
        },

        // checks the tooltip for browser bounds conflicts and sets the tooltip's offset accordingly (if enableBrowserBoundsDetection == true), otherwise just sets the tooltip's offset
        _detectBrowserBounds: function () {
            var id = this._id();
            if (this.enableBrowserBoundsDetection) {
                // top and left
                if (this.tooltip_offset.top < this.documentTop && this.tooltip_offset.left < 0) {
                    $(id).offset({ top: this.documentTop, left: this.documentLeft });
                    // top and right
                } else if (this.tooltip_offset.top < this.documentTop && (this.tooltip_offset.left + this.tooltip_width) > this.windowWidth + this.documentLeft) {
                    $(id).offset({ top: this.documentTop, left: (this.windowWidth + this.documentLeft - this.tooltip_width) });
                    // top
                } else if (this.tooltip_offset.top < this.documentTop) {
                    $(id).offset({ top: this.documentTop, left: this.tooltip_offset.left });
                    // bottom and left
                } else if ((this.tooltip_offset.top + this.tooltip_height) > (this.windowHeight + this.documentTop) && this.tooltip_offset.left < 0) {
                    $(id).offset({ top: (this.windowHeight + this.documentTop - this.tooltip_height), left: this.documentLeft });
                    // bottom and right
                } else if ((this.tooltip_offset.top + this.tooltip_height) > (this.windowHeight + this.documentTop) && (this.tooltip_offset.left + this.tooltip_width) > this.windowWidth + this.documentLeft) {
                    $(id).offset({ top: (this.windowHeight + this.documentTop - this.tooltip_height), left: (this.windowWidth + this.documentLeft - this.tooltip_width) });
                    // bottom
                } else if ((this.tooltip_offset.top + this.tooltip_height) > (this.windowHeight + this.documentTop)) {
                    $(id).offset({ top: (this.windowHeight + this.documentTop - this.tooltip_height), left: this.tooltip_offset.left });
                    // left
                } else if (this.tooltip_offset.left < 0) {
                    $(id).offset({ top: this.tooltip_offset.top, left: this.documentLeft });
                    // right
                } else if ((this.tooltip_offset.left + this.tooltip_width) > this.windowWidth + this.documentLeft) {
                    $(id).offset({ top: this.tooltip_offset.top, left: (this.windowWidth + this.documentLeft - this.tooltip_width) });
                    // no conflict
                } else {
                    $(id).offset({ top: this.tooltip_offset.top, left: this.tooltip_offset.left });
                };
                // if enableBrowserBoundsDetection == false, the same as no conflict case
            } else {
                $(id).offset({ top: this.tooltip_offset.top, left: this.tooltip_offset.left });
            };
        },

        // checks if a mouseevent was within the boundaries of the host
        _checkBoundaries: function (event) {
            if (event.pageX >= this.host_offset.left && event.pageX <= (this.host_offset.left + this.host_width) && event.pageY >= this.host_offset.top && event.pageY <= (this.host_offset.top + this.host_height)) {
                return true;
            } else {
                return false;
            };
        },

        // checks if a click was within the boundaries of the host
        _checkBoundariesClick: function (event) {
            if (this._checkBoundaries(event)) {
                this._clickFlag = 1;
            } else {
                this._clickFlag = 0;
            };
        },

        // checks if the mouse was was within the boundaries of the host when the tooltip was automatically closed
        _checkBoundariesAuto: function (event) {
            if (this._checkBoundaries(event)) {
                this._autoFlag = 1;
            } else {
                this._autoFlag = 0;
            };
        },

        // removes all event handlers
        _removeHandlers: function () {
            this.removeHandler(this.host, 'mouseenter.tooltip');
            this.removeHandler(this.host, 'mousemove.tooltip');
            this.removeHandler(this.host, 'mouseleave.tooltip');
            this.removeHandler(this.host, 'click.tooltip');
            this.removeHandler(this.host, 'touchstart.tooltip');
            this.removeHandler($(this._id()), 'click.tooltip');
            this.removeHandler($(this._id()), 'mouseleave.tooltip');
        },

        // closes all tooltips, created together
        _closeAll: function () {
            var length = this.ID_Array.length;
            for (var i = 0; i < length; i++) {
                var itterationID = "#" + this.ID_Array[i].tooltipID;
                if (itterationID != this._id()) {
                    $(itterationID).css({ opacity: 0, visibility: "hidden" });
                    this._isOpen = false;
                };
            };
        }
    });
})(jQuery);/*
* jqxcalendar.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2012 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*/


(function ($) {

    $.jqx.jqxWidget("jqxCalendar", "", {});

    $.extend($.jqx._jqxCalendar.prototype, {
        defineInstance: function () {
            // enables or disables the Calendar control.
            if (this.disabled == undefined) {
                this.disabled = false;
            }

            // not available in this version.
            if (this.multipleMonthRows == undefined) {
                this.multipleMonthRows = 1;
            }

            // not available in this version.
            if (this.multipleMonthColumns == undefined) {
                this.multipleMonthColumns = 1;
            }

            // Specifies the Calendar's minimum navigation date.
            if (this.minDate == undefined) {
                this.minDate = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.minDate._setYear(1900);
                this.minDate._setMonth(1);
                this.minDate._setDay(1);
                this.minDate._setHours(1);
                this.minDate._setMinutes(1);
                this.minDate._setSeconds(1);
                this.minDate._setMilliseconds(1);
            }

            // Specifies the Calendar's maximum navigation date.
            if (this.maxDate == undefined) {
                this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.maxDate._setYear(2100);
                this.maxDate._setMonth(1);
                this.maxDate._setDay(1);
                this.maxDate._setHours(1);
                this.maxDate._setMinutes(1);
                this.maxDate._setSeconds(1);
                this.maxDate._setMilliseconds(1);
            }

            // Type: Number
            // Default: 1
            // Gets or sets the navigation step.
            if (this.stepMonths == undefined) {
                this.stepMonths = 1; // Number of months to step back/forward
            }

            // Type: Number
            // Default: null
            // Gets or sets the Calendar's width.
            if (this.width == undefined) {
                this.width = null;
            }

            // Type: height
            // Default: null
            // Gets or sets the Calendar's height.
            if (this.height == undefined) {
                this.height = null;
            }

            // Type: $.jqx._jqxDateTimeInput.getDateTime
            // Default:  $.jqx._jqxDateTimeInput.getDateTime(new Date()); (Today)
            // Gets or sets the Calendar's value.
            if (this.value == undefined) {
                this.value = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.value._setHours(1);
                this.value._setMinutes(1);
                this.value._setSeconds(1);
                this.value._setMilliseconds(1);
            }

            // Type: Number.
            // Default: 0
            // Gets or sets the first day of the week - Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6.
            if (this.firstDayOfWeek == undefined) {
                this.firstDayOfWeek = 0;
            }

            // Type: Boolean.
            // Default: false.
            // Shows or hides the week numbers.
            if (this.showWeekNumbers == undefined) {
                this.showWeekNumbers = false;
            }

            // Type: Boolean.
            // Default: true.
            // Shows or hides the Day Names.
            if (this.showDayNames == undefined) {
                this.showDayNames = true;
            }

            // Type: Boolean
            // Default: false
            // Enables or disables the weekend highlight option.
            if (this.enableWeekend == undefined) {
                this.enableWeekend = false;
            }

            // Type: Boolean
            // Default: true
            // Enables or disables the other month highlight.
            if (this.enableOtherMonthDays == undefined) {
                this.enableOtherMonthDays = true;
            }

            // Type: Boolean
            // Default: true
            // Shows or hides the other month days.
            if (this.showOtherMonthDays == undefined) {
                this.showOtherMonthDays = true;
            }

            // Gets or sets the row header's width.
            // Type: Number.
            if (this.rowHeaderWidth == undefined) {
                this.rowHeaderWidth = 25;
            }

            // Default: 20
            // Gets or sets the column header's height.
            // Type: Number.
            if (this.columnHeaderHeight == undefined) {
                this.columnHeaderHeight = 20;
            }

            // Default: 25
            // Gets or sets the title's height.
            // Type: Number.
            if (this.titleHeight == undefined) {
                this.titleHeight = 25;
            }

            // Type: String.
            // Gets or sets the string format of the day names.
            // Possible values: default, shortest, firstTwoLetters, firstLetter, full
            if (this.dayNameFormat == undefined) {
                this.dayNameFormat = 'firstTwoLetters';
            }

            // Type: string.
            // Represents the title format displayed between the navigation arrow.
            if (this.titleFormat == undefined) {
                this.titleFormat = "MMMM yyyy";
            }

            // Type: Boolean.
            // Default: false
            // Gets or sets the readonly state. In this state the user can navigate through the months, but is not allowed to select.
            if (this.readOnly == undefined) {
                this.readOnly = false;
            }

            //Type: string
            //Default: 'default'
            //Gets or sets the calendar's culture.
            if (this.culture == undefined) {
                this.culture = "default";
            }

            // Type: Boolean
            // Default: true.
            // Enables or disables the fast navigation when the user holds the mouse pressed over a navigation arrow.
            if (this.enableFastNavigation == undefined) {
                this.enableFastNavigation = true;
            }

            // Type: Boolean
            // Default: true
            // Enables or disables the hover state.
            if (this.enableHover == undefined) {
                this.enableHover = true;
            }

            // Type: Boolean
            // Default: true
            // When this property is true, click on other month date will automatically navigate to the previous or next month.
            if (this.enableAutoNavigation == undefined) {
                this.enableAutoNavigation = true;
            }

            // Type: Boolean
            // Default: false
            // enables or disabled the calendar tooltips.
            if (this.enableTooltips == undefined) {
                this.enableTooltips = false;
            }

            // Type: String
            // Back Button Text.
            if (this.backText == undefined) {
                this.backText = "Back";
            }

            // Type: String
            // Forward Button Text.
            if (this.forwardText == undefined) {
                this.forwardText = "Forward";
            }

            // Type: Array
            // Represents a collection of special calendar days.
            if (this.specialDates == undefined) {
                this.specialDates = new Array();
            }
            this.keyboardNavigation = true;
            // Selects a range of dates.
            this.selectionMode = 'default';
            this.todayString = 'Today';
            this.clearString = 'Clear';
            this.showFooter = false;
            this.selection = { from: null, to: null };
            //Type: Number.
            //Default: 0.
            //Sets height of the calendar in pixels. 
            this.height = null;

            // Calendar events.
            this.events =
			[
            // occurs when the back button is clicked.
		  	   'backButtonClick',
            // occurs when the forward button is clicked.
               'nextButtonClick',
            // occurs when the value is changed.
               'valuechanged',
            // occurs when the user clicks a cell.
               'cellMouseDown',
            // occurs when the user clicks a cell but is still holding the mouse key pressed.
               'cellMouseUp',
            // occurs when the user selects a cell.
               'cellSelected',
            // occurs when a cell is unselected. For example: user selects a cell and then selects another cell. The first selected cell is unselected.
               'cellUnselected'
			];
        },

        createInstance: function (args) {
            this.setCalendarSize();
            if (this.element.id == "") {
                this.element.id = $.jqx.utilities.createId();
            }

            var id = this.element.id;
            var me = this;
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                me.setCalendarSize();
            };

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                me.setCalendarSize();
            };

            this.host.attr('tabIndex', 0);
            this.host.css('outline', 'none');
            this.host.addClass(this.toThemeProperty("jqx-calendar"));
            this.host.addClass(this.toThemeProperty("jqx-widget"));
            this.host.addClass(this.toThemeProperty("jqx-widget-content"));
            this.host.addClass(this.toThemeProperty("jqx-rc-all"));
            this._addInput();

            this.addHandler($($(this.element)[0]), 'keydown',
            function (event) {
                var result = true;
                if (me.keyboardNavigation) {
                    if (me._handleKey != undefined) {
                        result = me._handleKey(event);
                        if (!result) {
                            if (event.stopPropagation) event.stopPropagation();
                        }
                    }
                }
                return result;
            });

            var loaded = false;
            var myCalendar = this;
            this.render();

            var percentageSize = false;

            if (me.width != null && me.width.toString().indexOf("%") != -1) {
                percentageSize = true;
            }

            if (me.height != null && me.height.toString().indexOf("%") != -1) {
                percentageSize = true;
            }

            $(window).bind('resize.calendar' + this.element.id, function () {
                var month = myCalendar.host.find("#View1" + me.element.id);
                if (!loaded) {
                    loaded = true;
                    myCalendar.render();
                }
                else myCalendar.refreshTitle(month);

                if (percentageSize) {
                    if (me.refreshTimer) {
                        clearTimeout(me.refreshTimer);
                    }

                    me.refreshTimer = setTimeout(function () {
                        me.refreshControl();
                    }, 1);
                }
            });

            if (percentageSize) {
                setInterval(function () {
                    var width = me.host.width();
                    var height = me.host.height();
                    if (me._lastWidth != width || me._lastHeight != height) {
                        me.refreshControl();
                    }
                    me._lastWidth = width;
                    me._lastHeight = height;
                }, 100);
            }

            var calendarID = 'View1';
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    instance.host.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
                me.refreshControl();
            }
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
            this.input.val(this.getDate().toString());
        },

        setCalendarSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
            }
        },

        _handleKey: function (event) {
            if (this.readOnly)
                return true;

            var key = event.keyCode;
            var selectedDate = this._getSelectedDate();
            if (selectedDate == undefined)
                return true;

            if (event.altKey) {
                return true;
            }

            var date = new $.jqx._jqxDateTimeInput.getDateTime(selectedDate);
            var start = this.getViewStart();
            var end = this.getViewEnd();
            var monthInstance = $.data(this.element, "View1" + this.element.id);
            if (monthInstance == undefined || monthInstance == null)
                return true;

            if (key == 38) {
                date._addDays(-7);
                if (date.dateTime < start) {
                    var res = this.navigateBackward();
                    if (!res)
                        return false;
                }

                this._selectDate(date.dateTime, 'key');
                for (i = 0; i < monthInstance.cells.length; i++) {
                    var cell = monthInstance.cells[i];
                    var cellDate = cell.dateTime.dateTime;
                    if (cell.isOtherMonth && cell.isSelected && cellDate <= date.dateTime) {
                        this.navigateBackward();
                        this._selectDate(date.dateTime, 'key');
                        break;
                    }
                }
                return false;
            }
            else if (key == 40) {
                date._addDays(7);
                if (date.dateTime > end) {
                    var res = this.navigateForward();
                    if (!res)
                        return false;
                }

                this._selectDate(date.dateTime, 'key');
                for (i = 0; i < monthInstance.cells.length; i++) {
                    var cell = monthInstance.cells[i];
                    var cellDate = cell.dateTime.dateTime;
                    if (cell.isOtherMonth && cell.isSelected && cellDate >= date.dateTime) {
                        this.navigateForward();
                        this._selectDate(date.dateTime, 'key');
                        break;
                    }
                }

                return false;
            }

            if (key == 37) {
                date._addDays(-1);
                if (date.dateTime < start) {
                    var res = this.navigateBackward();
                    if (!res)
                        return false;
                }

                this._selectDate(date.dateTime, 'key');
                for (i = 0; i < monthInstance.cells.length; i++) {
                    var cell = monthInstance.cells[i];
                    var cellDate = cell.dateTime.dateTime;
                    if (cell.isOtherMonth && cell.isSelected && cellDate <= date.dateTime) {
                        if (date.dateTime < this.getMinDate() || date.dateTime > this.getMaxDate()) {
                            return;
                        }

                        this.navigateBackward();
                        this._selectDate(date.dateTime, 'key');
                        break;
                    }
                }

                return false;
            }
            else if (key == 39) {
                date._addDays(1);
                if (date.dateTime > end) {
                    var res = this.navigateForward();
                    if (!res)
                        return false;
                }

                this._selectDate(date.dateTime, 'key');
                for (i = 0; i < monthInstance.cells.length; i++) {
                    var cell = monthInstance.cells[i];
                    var cellDate = cell.dateTime.dateTime;
                    if (cell.isOtherMonth && cell.isSelected && cellDate >= date.dateTime) {
                        if (date.dateTime < this.getMinDate() || date.dateTime > this.getMaxDate()) {
                            return;
                        }

                        this.navigateForward();
                        this._selectDate(date.dateTime, 'key');
                        break;
                    }
                }
                return false;
            }

            return true;
        },

        render: function () {
            if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) {
                var month = this._renderSingleCalendar("View1" + this.element.id);
                this.host.append(month);
            }
            else {
            }
        },

        // adds a special date to the calendar.
        // @param - Date.
        // @param - css class name(optional).
        // @param - string for the special date's tooltip(optional).
        addSpecialDate: function (date, className, tooltipContent) {
            if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) {
                var specialDatesLength = this.specialDates.length;
                this.specialDates[specialDatesLength] = { Date: date, Class: className, Tooltip: tooltipContent };

                this.refreshControl();
            }
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.render();
            }
        },

        refreshControl: function () {
            if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) {
                this.refreshSingleCalendar("View1" + this.element.id, null);
            }
        },

        // gets the view's start date.
        getViewStart: function () {
            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);
            return firstDay.dateTime;
        },

        // gets the view's end date.
        getViewEnd: function () {
            var start = this.getViewStart();
            var end = new $.jqx._jqxDateTimeInput.getDateTime(start);
            end._addDays(41);
            return end.dateTime;
        },

        refreshSingleCalendar: function (calendarID, parent) {
            var month = this.host.find("#" + calendarID);
            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);

            this.refreshTitle(month);
            this.refreshCalendarCells(month, firstDay, calendarID);
            this.refreshRowHeader(month, calendarID);
            if (this.selectedDate != undefined) {
                this._selectDate(this.selectedDate);
            }
            var contentHeight = this.host.height() - this.titleHeight - this.columnHeaderHeight;
            if (!this.showDayNames) {
                contentHeight = this.host.height() - this.titleHeight;
            }
            if (this.showFooter) {
                contentHeight -= 20;
            }

            var cellsTableElement = month.find("#cellsTable" + calendarID);
            var rowHeaderElement = month.find("#calendarRowHeader" + calendarID);
            cellsTableElement.height(contentHeight);
            rowHeaderElement.height(contentHeight);
        },

        refreshRowHeader: function (month, calendarID) {
            if (!this.showWeekNumbers)
                return;

            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);
            var dayOfWeek = firstDay.dayOfWeek;
            var weekOfYear = this.getWeekOfYear(firstDay);
            var rowHeader = month.find('#rowHeader');

            rowHeader.width(this.rowHeaderWidth);
            //   month.find("#calendarRowHeader" + month[0].id).append(rowHeader);
            var currentDate = firstDay;
            var rowHeaderCells = new Array();

            for (i = 0; i < 6; i++) {
                var weekString = weekOfYear.toString();
                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);
                var cellID = i + 1;
                var cellElement = rowHeader.find("#headerCell" + cellID);
                cell.element = cellElement;
                cell.row = i;
                cell.column = 0;
                var cellContent = cellElement.find("#headerCellContent" + cellID);
                cellContent.addClass(this.toThemeProperty('jqx-calendar-row-cell'));
                cellContent[0].innerHTML = weekOfYear;
                rowHeaderCells[i] = cell;
                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addWeeks(1)));
                weekOfYear = this.getWeekOfYear(currentDate);
            }

            var monthInstance = $.data(this.element, month[0].id);
            monthInstance.rowCells = rowHeaderCells;
            this._refreshOtherMonthRows(monthInstance, calendarID);
        },

        _refreshOtherMonthRows: function (month, calendarID) {
            if (this.showOtherMonthDays)
                return;

            this._displayLastRow(true, calendarID);
            this._displayFirstRow(true, calendarID);

            var canDisplayFirstRow = false;
            var canDisplayLastRow = false;

            for (i = 0; i < month.cells.length; i++) {
                var cell = month.cells[i];
                if (cell.isVisible && i < 7) {
                    canDisplayFirstRow = true;
                }
                else if (cell.isVisible && i >= month.cells.length - 7) {
                    canDisplayLastRow = true;
                }
            }

            if (!canDisplayFirstRow) {
                this._displayFirstRow(false, calendarID);
            }

            if (!canDisplayLastRow) {
                this._displayLastRow(false, calendarID);
            }
        },

        _displayLastRow: function (show, calendarID) {
            var month = this.host.find("#" + calendarID);
            var calendarRowHeader = month.find("#calendarRowHeader" + month[0].id);
            var lastRow = calendarRowHeader.find("#headerCellContent6");
            var lastMonthRow = month.find("#cellsTable" + month[0].id).find("#row6");

            if (show) {
                lastRow.css('display', 'block');
                lastMonthRow.css('display', 'table-row');
            }
            else {
                lastRow.css('display', 'none');
                lastMonthRow.css('display', 'none');
            }
        },

        _displayFirstRow: function (show, calendarID) {
            var month = this.host.find("#" + calendarID);
            var calendarRowHeader = month.find("#calendarRowHeader" + month[0].id);
            var firstRow = calendarRowHeader.find("#headerCellContent1");
            var firstMonthRow = month.find("#cellsTable" + month[0].id).find("#row1");

            if (show) {
                firstRow.css('display', 'block');
                firstMonthRow.css('display', 'table-row');
            }
            else {
                firstRow.css('display', 'none');
                firstMonthRow.css('display', 'none');
            }
        },

        _renderSingleCalendar: function (calendarID, parent) {
            var oldMonthElement = this.host.find("#" + calendarID.toString());
            if (oldMonthElement != null) {
                oldMonthElement.remove();
            }

            var month = $("<div id='" + calendarID.toString() + "'></div>");

            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);
            var endDay = new $.jqx._jqxDateTimeInput.getDateTime(firstDay.dateTime);
            endDay._addMonths(1);

            var monthInstance = $.jqx._jqxCalendar.monthView(firstDay, endDay, null, null, null, month);

            if (parent == undefined || parent == null) {
                this.host.append(month);

                if (this.height != undefined && !isNaN(this.height)) {
                    month.height(this.height);
                }
                else if (this.height != null && this.height.toString().indexOf("px") != -1) {
                    month.height(this.height);
                }

                if (this.width != undefined && !isNaN(this.width)) {
                    month.width(this.width);
                }
                else if (this.width != null && this.width.toString().indexOf("px") != -1) {
                    month.width(this.width);
                }

                if (this.width != null && this.width.toString().indexOf("%") != -1) {
                    month.width('100%');
                }
                if (this.height != null && this.height.toString().indexOf("%") != -1) {
                    month.height('100%');
                }
            }
            else parent.append(month);

            $.data(this.element, calendarID, monthInstance);

            var contentHeight = this.host.height() - this.titleHeight - this.columnHeaderHeight;
            if (!this.showDayNames) {
                contentHeight = this.host.height() - this.titleHeight;
            }
            if (this.showFooter) {
                contentHeight -= 20;
            }

            if (this.rowHeaderWidth < 0) this.rowHeaderWidth = 0;
            if (this.columnHeaderHeight < 0) this.columnHeaderHeight = 0;
            if (this.titleHeight < 0) this.titleHeight = 0;

            var rowHeaderWidth = this.rowHeaderWidth;
            var columnHeaderHeight = this.columnHeaderHeight;

            if (!this.showWeekNumbers) {
                rowHeaderWidth = 0;
            }

            if (!this.showDayNames) {
                columnHeaderHeight = 0;
            }


            var title = $("<div style='height:" + this.titleHeight + "px;'><table style='margin: 0px; width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'><tr id='calendarTitle' width='100%'>" +
               "<td NOWRAP id='leftNavigationArrow'></td>" + "<td align='center' NOWRAP id='calendarTitleHeader'></td>" + "<td NOWRAP id='rightNavigationArrow'></td>" +
               "</tr></table></div>");

            title.addClass(this.toThemeProperty('jqx-calendar-title-container'));
            month.append(title);
            var monthStructure = $("<table style='margin: 0px; border-spacing: 0px;' cellspacing='0' cellpadding='0'>" +
               "<tr id='calendarHeader' height='" + columnHeaderHeight + "'>" +
               "<td id='selectCell' width='" + rowHeaderWidth + "'></td>" + "<td colspan='2' style='padding-left: 2px; padding-right: 2px' id='calendarColumnHeader'></td>" +
               "</tr>" +
               "<tr id='calendarContent'>" +
               "<td id='calendarRowHeader' valign='top' height='" + contentHeight + "' width='" + rowHeaderWidth + "'></td>" + "<td valign='top' colspan='2' style='padding-left: 2px; padding-right: 2px' id='cellsTable' height='" + contentHeight + "'></td>" +
               "</tr>" +
               "</table>"
           );

            var footerHeight = 20;
            var footer = $("<div style='margin: 0px; display: none; height:" + footerHeight + "px;'><table style='width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'>" +
            "<tr id='calendarFooter'>" +
            "<td align='right' id='todayButton'></td>" + "<td align='left' colspan='2' id=doneButton></td>" +
            "</tr>" + "</table></div>");

            if (this.showFooter) {
                footer.css('display', 'block');
            }

            month.append(monthStructure);
            month.append(footer);
            monthStructure.addClass(this.toThemeProperty('jqx-calendar-month'));

            month.find('#calendarTitle')[0].id = 'calendarTitle' + calendarID;
            month.find('#leftNavigationArrow')[0].id = 'leftNavigationArrow' + calendarID;
            month.find('#calendarTitleHeader')[0].id = 'calendarTitleHeader' + calendarID;
            month.find('#rightNavigationArrow')[0].id = 'rightNavigationArrow' + calendarID;
            month.find('#cellsTable')[0].id = 'cellsTable' + calendarID;
            month.find('#calendarRowHeader')[0].id = 'calendarRowHeader' + calendarID;
            month.find('#calendarFooter')[0].id = 'calendarFooter' + calendarID;
            month.find('#todayButton')[0].id = 'todayButton' + calendarID;
            month.find('#doneButton')[0].id = 'doneButton' + calendarID;
            month.find('#selectCell')[0].id = 'selectCell' + calendarID;
            month.find('#calendarColumnHeader')[0].id = 'calendarColumnHeader' + calendarID;

            month.find('td').css({ padding: 0, margin: 0, border: 'none' });
            month.find('tr').addClass(this.toThemeProperty('jqx-reset'));

            month.addClass(this.toThemeProperty("jqx-widget-content"));
            month.addClass(this.toThemeProperty("jqx-calendar-month-container"));

            var selectCellElement = month.find("#selectCell" + calendarID);
            selectCellElement.addClass(this.toThemeProperty('jqx-reset'));
            selectCellElement.addClass(this.toThemeProperty('jqx-calendar-top-left-header'));

            if (this.showWeekNumbers) {
                this._renderRowHeader(month);
            }
            else {
                var cellsTableElement = month.find("#cellsTable" + calendarID);
                cellsTableElement[0].colSpan = 3;
                var columnHeaderElement = month.find("#calendarColumnHeader" + calendarID);
                columnHeaderElement[0].colSpan = 3;
                var rowHeaderElement = month.find("#calendarRowHeader" + calendarID);
                rowHeaderElement.css('display', 'none');
                var selectCellElement = month.find("#selectCell" + calendarID);
                selectCellElement.css('display', 'none');
            }

            if (this.showFooter) {
                var footer = month.find("#calendarFooter" + calendarID);
                footer.height(20);
                var todayButton = month.find("#todayButton" + calendarID);
                var doneButton = month.find("#doneButton" + calendarID);

                var todayLink = $("<a href='#'>" + this.todayString + "</a>");
                todayLink.appendTo(todayButton);
                var clearLink = $("<a href='#'>" + this.clearString + "</a>");
                clearLink.appendTo(doneButton);
                clearLink.addClass(this.toThemeProperty('jqx-calendar-footer'));
                todayLink.addClass(this.toThemeProperty('jqx-calendar-footer'));
                var self = this;
                this.addHandler(todayLink, 'click', function () {
                    self.setDate(new Date(), 'mouse');
                    if (self.today) self.today();
                });
                this.addHandler(clearLink, 'click', function () {
                    self.setDate(null, 'mouse');
                    if (self.clear) self.clear();
                });
            }

            if (this.showDayNames) {
                this.renderColumnHeader(month);
            }

            if (parent == undefined || parent == null) {
                this.renderTitle(month);
            }

            this.renderCalendarCells(month, firstDay, calendarID)
            this._refreshOtherMonthRows(monthInstance, calendarID);
            month.find('tbody').css({ border: 'none', background: 'transparent' });
            if (this.selectedDate != undefined) {
                this._selectDate(this.selectedDate);
            }

            return month;
        },

        renderTitle: function (month) {
            if ($.global == null || $.global == undefined) {
                throw "jquery.global.js is not loaded.";
            }

            $.global.preferCulture(this.culture);

            var leftArrow = $("<div style='float: left;'></div>");
            var rightArrow = $("<div style='float: right;'></div>");
            var titleElement = month.find("#calendarTitle" + month[0].id);
            titleElement.addClass(this.toThemeProperty("jqx-reset"));
            titleElement.addClass(this.toThemeProperty("jqx-widget-header"));
            titleElement.addClass(this.toThemeProperty("jqx-calendar-title-header"));
            //  titleElement.css('margin', 0);
            //    titleElement.css('padding', 0);

            if ($.browser.msie && $.browser.version < 8) {
                if (titleElement.find('td').css('background-color') != 'transparent') {
                    var bgColor = titleElement.css('background-color');
                    titleElement.find('td').css('background-color', bgColor);
                }
                if (titleElement.find('td').css('background-image') != 'transparent') {
                    var bgImage = titleElement.css('background-image');
                    var bgRepeat = titleElement.css('background-repeat');
                    var bgPosition = titleElement.css('background-position');

                    titleElement.find('td').css('background-image', bgImage);
                    titleElement.find('td').css('background-repeat', bgRepeat);
                    titleElement.find('td').css('background-position', 'left center scroll');
                }
            }
            else {
                titleElement.find('td').css('background-color', 'transparent');
            }

            if (this.disabled) {
                titleElement.addClass(this.toThemeProperty("jqx-calendar-title-header-disabled"));
            }

            leftArrow.addClass(this.toThemeProperty("jqx-calendar-title-navigation"));
            leftArrow.addClass(this.toThemeProperty("icon-arrow-left"));

            var leftArrowElement = month.find("#leftNavigationArrow" + month[0].id).append(leftArrow);

            rightArrow.addClass(this.toThemeProperty("jqx-calendar-title-navigation"));
            rightArrow.addClass(this.toThemeProperty("icon-arrow-right"));

            var rightArrowElement = month.find("#rightNavigationArrow" + month[0].id).append(rightArrow);

            if (this.enableTooltips) {
                if ($(leftArrowElement).jqxTooltip) {
                    $(leftArrowElement).jqxTooltip({name: this.element.id, position: 'mouse', theme: this.theme, content: this.backText });
                    $(rightArrowElement).jqxTooltip({ name: this.element.id, position: 'mouse', theme: this.theme, content: this.forwardText });
                }
            }

            var titleHeader = month.find("#calendarTitleHeader" + month[0].id);
            var title = $.global.format(this.value.dateTime, this.titleFormat, this.culture);
            var titleContent = $("<div style='background: transparent; margin: 0; padding: 0; border: none;' id='titleContent'>" + title + "</div>");
            titleHeader.append(titleContent);
            titleContent.addClass(this.toThemeProperty('jqx-calendar-title-content'));

            var arrowWidth = parseInt(leftArrow.width());
            var headerWidth = month.width() - 2 * arrowWidth;
            var newContent = titleHeader.find("#titleContent").width(headerWidth);

            $.data(leftArrow, 'navigateLeft', this);
            $.data(rightArrow, 'navigateRight', this);
            var isTouchDevice = $.jqx.mobile.isTouchDevice();

            if (!this.disabled) {
                this.addHandler(leftArrow, 'mousedown',
                function (event) {
                    $.data(leftArrow, 'navigateLeftRepeat', true);
                    var element = $.data(leftArrow, 'navigateLeft');
                    if (element.enableFastNavigation && !isTouchDevice) {
                        element.startRepeat(element, leftArrow, true, 250);
                    }
                    element.navigateBackward();
                    return element._raiseEvent(0, event)
                });

                this.addHandler(leftArrow, 'mouseup',
                function (event) {
                    $.data(leftArrow, 'navigateLeftRepeat', false);
                });

                this.addHandler(leftArrow, 'mouseleave',
                function (event) {
                    $.data(leftArrow, 'navigateLeftRepeat', false);
                });

                this.addHandler(rightArrow, 'mousedown',
                function (event) {
                    $.data(rightArrow, 'navigateRightRepeat', true);
                    var element = $.data(rightArrow, 'navigateRight')

                    if (element.enableFastNavigation && !isTouchDevice) {
                        element.startRepeat(element, rightArrow, false, 250);
                    }
                    element.navigateForward();
                    return element._raiseEvent(1, event)
                });

                this.addHandler(rightArrow, 'mouseup',
                function (event) {
                    $.data(rightArrow, 'navigateRightRepeat', false);
                });

                this.addHandler(rightArrow, 'mouseleave',
                function (event) {
                    $.data(rightArrow, 'navigateRightRepeat', false);
                });
            }
        },

        refreshTitle: function (month) {
            if ($.global == null || $.global == undefined) {
                throw "jquery.global.js is not loaded.";
            }

            $.global.preferCulture(this.culture);

            var title = $.global.format(this.value.dateTime, this.titleFormat, this.culture);

            var titleHeader = month.find("#calendarTitleHeader" + month[0].id);
            var oldContent = titleHeader.find("#titleContent");

            var titleContent = $("<div style='background: transparent; margin: 0; padding: 0; border: none;' id='titleContent'>" + title + "</div>");
            titleHeader.append(titleContent);
            titleContent.addClass(this.toThemeProperty('jqx-calendar-title-content'));

            if (oldContent != null) {
                oldContent.remove();
            }

            //            var leftArrow = this.host.find('.jqx-calendar-title-navigation');
            //            var arrowWidth = parseInt(leftArrow.width());
            //            var headerWidth = month.width() - 2 * arrowWidth;

            //   var newContent = titleHeader.find("#titleContent").width(headerWidth);
        },

        startRepeat: function (element, navigationElement, isLeft, timeout) {
            var timeoutobj = window.setTimeout(function () {

                var value = $.data(navigationElement, 'navigateLeftRepeat');
                if (!isLeft) {
                    value = $.data(navigationElement, 'navigateRightRepeat');
                }

                if (value) {
                    if (timeout < 25) timeout = 25;

                    if (isLeft) {
                        element.navigateBackward();
                        element.startRepeat(element, navigationElement, true, timeout - 25);
                    }
                    else {
                        element.navigateForward();
                        timeoutobj = element.startRepeat(element, navigationElement, false, timeout - 25);
                    }
                }
                else {
                    window.clearTimeout(timeoutobj);
                    return;
                }
            }, timeout);
        },

        // navigates (n) month(s) forward.
        // @param - Date
        navigateForward: function (step) {
            if (step == undefined || step == null) {
                step = this.stepMonths;
            }

            var day = this.value.day;
            var month = this.value.month;
            if (month + step <= 12) {
                var maxDays = this.value._daysInMonth(this.value.year, this.value.month + step);
                if (day > maxDays)
                    day = maxDays;
            }

            return this.navigateTo(new Date(this.value.year, this.value.month - 1 + step, day));
        },

        // navigates (n) month(s) back.
        // @param - Number  
        navigateBackward: function (step) {
            if (step == undefined || step == null) {
                step = this.stepMonths;
            }

            var day = this.value.day;
            var month = this.value.month;
            if (month - step >= 1) {
                var maxDays = this.value._daysInMonth(this.value.year, this.value.month - step);
                if (day > maxDays)
                    day = maxDays;
            }

            var date = new Date(this.value.year, this.value.month - 1 - step, day);
            return this.navigateTo(date);
        },

        refreshCalendarCells: function (month, firstDay, calendarID) {
            var tableElement = month.find("#cellsTable" + month[0].id);
            var cellsTable = tableElement.find("#" + 'cellTable' + calendarID.toString());
            var currentDate = firstDay;
            var cells = new Array();
            var k = 0;
            var today = new $.jqx._jqxDateTimeInput.getDateTime(new Date());
            //var cellWidth = (month.width() - this.rowHeaderWidth - 2) / 7;
            //if (!this.showWeekNumbers) {
            //    cellWidth = (month.width() - 2) / 7;
            //}

            for (i = 0; i < 6; i++) {
                for (j = 0; j < 7; j++) {
                    var cellRowID = i + 1;
                    var cellColumnID = j + 1;
                    var cellID = "#cell" + cellRowID + cellColumnID;
                    var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);
                    var cellElement = cellsTable.find(cellID);
                    cell.element = cellElement;
                    cell.row = i;
                    cell.column = j;

                    cell.isVisible = true;
                    cell.isOtherMonth = false;
                    cell.isToday = false;
                    cell.isWeekend = false;
                    cell.isHighlighted = false;
                    cell.isSelected = false;

                    if (currentDate.month != this.value.month) {
                        cell.isOtherMonth = true;
                        cell.isVisible = this.showOtherMonthDays;
                    }

                    if (currentDate.month == today.month && currentDate.day == today.day && currentDate.year == today.year) {
                        cell.isToday = true;
                    }

                    if (currentDate.isWeekend()) {
                        cell.isWeekend = true;
                    }

                    $.data(this.element, "cellContent" + cellID.substring(1), cell);
                    cells[k] = cell;
                    k++;
                    var cellContent = cellElement.find("#cellContent" + cellID.substring(1));  
                    cellContent.html(currentDate.day);
                    this._applyCellStyle(cell, cellElement, cellContent);

                    currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));
                }
            }

            var monthInstance = $.data(this.element, month[0].id);
            if (monthInstance != undefined && monthInstance != null) {
                monthInstance.cells = cells;
            }
        },

        renderCalendarCells: function (month, firstDay, calendarID) {
            var cellsTable = $("<table style='border-spacing: 0px; width: 100%; height: 100%;' cellspacing='0' cellpadding='1' id=" + 'cellTable' + calendarID.toString() + ">" +
               "<tr id='row1'>" +
               "<td id='cell11'></td>" + "<td id='cell12'></td>" + "<td id='cell13'></td>" + "<td id='cell14'></td>" + "<td id='cell15'></td>" + "<td id='cell16'></td>" + "<td id='cell17'></td>" +
               "</tr>" +
               "<tr id='row2'>" +
               "<td id='cell21'></td>" + "<td id='cell22'></td>" + "<td id='cell23'></td>" + "<td id='cell24'></td>" + "<td id='cell25'></td>" + "<td id='cell26'></td>" + "<td id='cell27'></td>" +
               "</tr>" +
               "<tr id='row3'>" +
               "<td id='cell31'></td>" + "<td id='cell32'></td>" + "<td id='cell33'></td>" + "<td id='cell34'></td>" + "<td id='cell35'></td>" + "<td id='cell36'></td>" + "<td id='cell37'></td>" +
               "</tr>" +
               "<tr id='row4'>" +
               "<td id='cell41'></td>" + "<td id='cell42'></td>" + "<td id='cell43'></td>" + "<td id='cell44'></td>" + "<td id='cell45'></td>" + "<td id='cell46'></td>" + "<td id='cell47'></td>" +
               "</tr>" +
               "<tr id='row5'>" +
               "<td id='cell51'></td>" + "<td id='cell52'></td>" + "<td id='cell53'></td>" + "<td id='cell54'></td>" + "<td id='cell55'></td>" + "<td id='cell56'></td>" + "<td id='cell57'></td>" +
               "</tr>" +
               "<tr id='row6'>" +
               "<td id='cell61'></td>" + "<td id='cell62'></td>" + "<td id='cell63'></td>" + "<td id='cell64'></td>" + "<td id='cell65'></td>" + "<td id='cell66'></td>" + "<td id='cell67'></td>" +
               "</tr>" +
               "</table>"
           );

            var tableElement = month.find("#cellsTable" + month[0].id);
            cellsTable.find('table').css({ background: 'none', padding: 0, margin: 0, border: 0 });
            cellsTable.find('td').css({ background: 'none', padding: 1, margin: 0, border: 0 });
            cellsTable.find('tr').css({ background: 'none', padding: 0, margin: 0, border: 0 });

            var oldCellsTable = tableElement.find("#" + 'cellTable' + calendarID.toString());
            if (oldCellsTable != null) {
                oldCellsTable.remove();
            }

            tableElement.append(cellsTable);

            cellsTable.addClass(this.toThemeProperty("jqx-calendar-view"));
            var currentDate = firstDay;

            var startRow = this.showDayNames ? 1 : 0;
            var startColumn = this.showWeekNumbers ? 1 : 0;
            var cells = new Array();
            var k = 0;

            var cellWidth = (month.width() - this.rowHeaderWidth - 2) / 7;
            if (!this.showWeekNumbers) {
                cellWidth = (month.width() - 2) / 7;
            }
            cellWidth = parseInt(cellWidth);
            var today = new $.jqx._jqxDateTimeInput.getDateTime(new Date());

            for (i = 0; i < 6; i++) {
                for (j = 0; j < 7; j++) {
                    var cellRowID = i + 1;
                    var cellColumnID = j + 1;
                    var cellID = "#cell" + cellRowID + cellColumnID;
                    var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);
                    var cellElement = cellsTable.find(cellID);

                    cell.isVisible = true;
                    if (currentDate.month != this.value.month) {
                        cell.isOtherMonth = true;
                        cell.isVisible = this.showOtherMonthDays;
                    }

                    if (currentDate.month == today.month && currentDate.day == today.day && currentDate.year == today.year) {
                        cell.isToday = true;
                    }

                    if (currentDate.isWeekend()) {
                        cell.isWeekend = true;
                    }

                    cell.element = cellElement;
                    cell.row = startRow;
                    cell.column = startColumn;

                    if (cell.isVisible) {
                        var cellContent = $("<div id='cellContent" + cellID.substring(1) + "'>" + currentDate.day + "</div>");
                        cellElement.append(cellContent);
                        cellElement.width(cellWidth);
                   //     cellContent.css('padding', '3px');
                    }
                    else {
                        var cellContent = $("<div id='cellContent" + cellID.substring(1) + "'>" + currentDate.day + "</div>");
                        cellElement.append(cellContent);
                        cellElement.width(cellWidth);
                    //    cellContent.css('padding', '3px');
                    }

                    currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));

                    $.data(cellElement, cellID, this);
                    $.data(this.element, "cellContent" + cellID.substring(1), cell);
                    var me = this;
                    this.addHandler(cellElement, 'mousedown',
                   function (event) {
                       var element = $.data(cellElement, cellID);
                       if (!element.readOnly && !me.disabled) {
                           var content = $(event.target);
                           var cell = $.data(me.element, content[0].id);

                           var result = element._raiseEvent(3, event);
                           if (cell != null && cell != undefined) {
                               if (!cell.isDisabled) {
                                   if (cell.isOtherMonth && element.enableAutoNavigation) {
                                       if (cell.row < 2)
                                           element.navigateBackward();
                                       else
                                           element.navigateForward();
                                       element._selectDate(cell.dateTime.dateTime, 'mouse');
                                   }
                                   else element._selectDate(cell.dateTime.dateTime, 'mouse');
                               }
                           }

                           return result;
                       }
                   });

                    if (!me.disabled) {
                        this.addHandler(cellElement, 'mouseup',
                       function (event) {
                           var element = $.data(cellElement, cellID);
                           if (!element.readOnly) {
                               return element._raiseEvent(4, event)
                           }
                       });

                        this.addHandler(cellElement, 'mouseover',
                              function (event) {
                                  var element = $.data(cellElement, cellID)
                                  if (!element.readOnly) {
                                      var content = $(event.target);
                                      var cell = $.data(me.element, content[0].id);

                                      if (cell != null && cell != undefined) {
                                          cell.isHighlighted = true;
                                          element._applyCellStyle(cell, cell.element, content);
                                      }
                                  }
                              });

                        this.addHandler(cellElement, 'mouseout',
                              function (event) {
                                  var element = $.data(cellElement, cellID)
                                  if (!element.readOnly) {
                                      var content = $(event.target);
                                      var cell = $.data(me.element, content[0].id);

                                      if (cell != null && cell != undefined) {
                                          cell.isHighlighted = false;
                                          element._applyCellStyle(cell, cell.element, content);
                                      }
                                  }
                              });
                    }

                    startColumn++;
                    cells[k] = cell;
                    k++;
                }
                startColumn = 0;
                startRow++;
            }

            var monthInstance = $.data(this.element, month[0].id);
            if (monthInstance != undefined && monthInstance != null) {
                monthInstance.cells = cells;
            }

            this._applyCellStyles();
        },

        // sets the maximum navigation date. 
        // @param - Date
        setMaxDate: function (date) {
            this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(date);
        },

        // gets the maximum navigation date.
        getMaxDate: function () {
            if (this.maxDate != null && this.maxDate != undefined) {
                return this.maxDate.dateTime;
            }

            return null;
        },

        // sets the minimum date. 
        // @param - Date
        setMinDate: function (date) {
            this.minDate = $.jqx._jqxDateTimeInput.getDateTime(date);
        },

        // gets the minimum date.
        getMinDate: function () {
            if (this.minDate != null && this.minDate != undefined) {
                return this.minDate.dateTime;
            }

            return null;
        },

        // sets the calendar's date. 
        // @param - Date
        navigateTo: function (date) {
            if (date < this.getMinDate() || date > this.getMaxDate()) {
                return false;
            }

            if (date == null) {
                return false;
            }

            this.value._setYear(date.getFullYear());
            this.value._setDay(date.getDate());
            this.value._setMonth(date.getMonth() + 1);
            this.refreshControl();
            this._raiseEvent('2');
            return true;
        },

        // sets the calendar's date. 
        // @param - Date
        setDate: function (date) {
            this.navigateTo(date);
            this._selectDate(date);
            if (this.selectionMode == 'range') {
                this._selectDate(date, 'mouse');
            }

            return true;
        },

        // gets the calendar's date.
        getDate: function () {
            if (this.selectedDate == undefined)
                return new Date();

            return this.selectedDate;
        },

        getValue: function()
        {
            if (this.value == undefined)
                return new Date();

            return this.value.dateTime;;
        },

        setRange: function (from, to) {
            this.navigateTo(from);
            this._selectDate(from, 'mouse');
            this._selectDate(to, 'mouse');
        },

        getRange: function () {
            return this.selection;
        },

        // selects a date.
        // @param - Date
        _selectDate: function (date, type) {
            if (this.selectionMode == 'none')
                return;

            if (type == null || type == undefined) type = 'none';
            var monthInstance = $.data(this.element, "View1" + this.element.id);
            if (monthInstance == undefined || monthInstance == null)
                return;

            var self = this;
            if (this.input) {
                if (date != null) {
                    this.input.val(date.toString());
                }
                else this.input.val("");
            }
            this.selectedDate = date;

            $.each(monthInstance.cells, function (index) {
                var cell = this;
                var cellDate = cell.dateTime;
                var cellElement = $(cell.element);
                var cellContent = cellElement.find("#cellContent" + cellElement[0].id);

                if (date == null) {
                    cell.isSelected = false;
                    cell.isDisabled = false;
                    if (index == 0) {
                        self.selection = { from: null, to: null };                              
                        self._raiseEvent('2');
                        self._raiseEvent('5', { selectionType: type });
                    }
                }
                else {
                    if (self.selectionMode != 'range' || type == 'key') {
                        if (cellDate.day == date.getDate() && cellDate.month == (1 + date.getMonth()) && cellDate.year == date.getFullYear() && cell.isSelected) {
                            self._applyCellStyle(cell, cellElement, cellContent);
                            return;
                        }

                        if (cell.isSelected) {
                            self._raiseEvent('6', { selectionType: type });
                        }

                        cell.isSelected = false;
                        if (cellDate.day == date.getDate() && cellDate.month == (1 + date.getMonth()) && cellDate.year == date.getFullYear()) {
                            cell.isSelected = true;
                            if (index == 0) {
                                self.selection = { date: date };
                            }
                            cell.element.focus();
                            if (!cell.isOtherMonth) {
                                self.value._setMonth(date.getMonth() + 1);
                                self.value._setDay(date.getDate());
                                self.value._setYear(date.getFullYear());
                                self._raiseEvent('2');
                                self._raiseEvent('5', { selectionType: type });
                            }
                        }
                    }
                    else if (self.selectionMode == 'range') {
                        if (index == 0) {
                            if (type != 'none') {
                                if (self._clicks == undefined) self._clicks = 0;
                                self._clicks++;

                                if (self._clicks == 1) {
                                    self.selection = { from: date, to: date };
                                }
                                else if (self._clicks == 2) {
                                    var from = self.selection.from;
                                    var min = from <= date ? from : date;
                                    var max = from <= date ? date : from;
                                    self.selection = { from: min, to: max };
                                    self._clicks = 0;
                                }
                            }
                            else {
                                if (self.selection == null || self.selection.from == null) {
                                    self.selection = { from: date, to: date };
                                    if (self._clicks == undefined) self._clicks = 0;
                                    self._clicks++;
                                    if (self._clicks == 2) self._clicks = 0;
                                }
                            }
                        }

                        var getDatePart = function (date) {
                            var newDate = new Date();
                            newDate.setHours(0, 0, 0, 0);
                            newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
                            return newDate;
                        }

                        if (!cell.isOtherMonth && getDatePart(cellDate.dateTime).toString() == getDatePart(date).toString()) {
                            self.value._setMonth(date.getMonth() + 1);
                            self.value._setDay(date.getDate());
                            self.value._setYear(date.getFullYear());
                            self._raiseEvent('2');
                            self._raiseEvent('5', { selectionType: type });
                        }
                        cell.isSelected = false;
                        cell.isDisabled = false;

                        if (getDatePart(cellDate.dateTime) < getDatePart(self.selection.from) && self._clicks == 1) {
                            cell.isDisabled = true;
                        }

                        if (getDatePart(cellDate.dateTime) >= getDatePart(self.selection.from) && getDatePart(cellDate.dateTime) <= getDatePart(self.selection.to)) {
                            cell.isSelected = true;
                        }
                    }
                }

                self._applyCellStyle(cell, cellElement, cellContent);
            });
        },

        // gets the selected date.
        _getSelectedDate: function () {
            var monthInstance = $.data(this.element, "View1" + this.element.id);
            if (monthInstance == undefined || monthInstance == null)
                return;

            for (var i = 0; i < monthInstance.cells.length; i++) {
                var cell = monthInstance.cells[i];
                var cellDate = cell.dateTime.dateTime;
                if (cell.isSelected) {
                    return cellDate;
                }
            }
            if (this.selectedDate) {
                return this.selectedDate;
            }
        },

        // gets the selected cell.
        _getSelectedCell: function () {
            var monthInstance = $.data(this.element, "View1" + this.element.id);
            if (monthInstance == undefined || monthInstance == null)
                return;

            for (var i = 0; i < monthInstance.cells.length; i++) {
                var cell = monthInstance.cells[i];
                var cellDate = cell.dateTime.dateTime;
                if (cell.isSelected) {
                    return cell;
                }
            }
        },

        _applyCellStyle: function (cell, cellElement, cellContent) {
            var self = this;
            cellContent.removeClass();
            cellContent.addClass(this.toThemeProperty("jqx-rc-all"));

            if (this.disabled || cell.isDisabled) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-disabled"));
                cellContent.addClass(this.toThemeProperty("jqx-fill-state-disabled"));
            }

            if (cell.isOtherMonth && this.enableOtherMonthDays && cell.isVisible) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-othermonth"));
            }

            if (cell.isWeekend && this.enableWeekend && cell.isVisible && cell.isVisible) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-weekend"));
            }

            if (!cell.isVisible) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-hidden"));
            }
            else {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell"));
            }

            if (cell.isSelected && cell.isVisible) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-selected"));
                cellContent.addClass(this.toThemeProperty("jqx-fill-state-pressed"));
            }

            if (cell.isHighlighted && cell.isVisible && this.enableHover) {
                if (!cell.isDisabled) {
                    cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-hover"));
                    cellContent.addClass(this.toThemeProperty("jqx-fill-state-hover"));
                }
            }

            if (cell.isToday && cell.isVisible) {
                cellContent.addClass(this.toThemeProperty("jqx-calendar-cell-today"));
            }

            if (this.specialDates.length > 0) {
                var me = this;
                $.each(this.specialDates, function () {
                    if (this.Class != undefined && this.Class != null && this.Class != '') {
                        cellContent.removeClass(this.Class);
                    }
                    else {
                        cellContent.removeClass(self.toThemeProperty("jqx-calendar-cell-specialDate"));
                    }

                    if (cell.dateTime._equalDate(this.Date)) {
                        if (cell.tooltip == null && this.Tooltip != null) {
                            cell.tooltip = this.Tooltip;
                            if ($(cellContent).jqxTooltip) {
                                $(cellContent).jqxTooltip({ name: me.element.id, content: this.Tooltip, position: 'mouse', theme: me.theme });
                            }
                        }

                        cellContent.removeClass(self.toThemeProperty("jqx-calendar-cell-othermonth"));
                        cellContent.removeClass(self.toThemeProperty("jqx-calendar-cell-weekend"));

                        if (this.Class == undefined || this.Class == '') {
                            cellContent.addClass(self.toThemeProperty("jqx-calendar-cell-specialDate"));
                            return false;
                        }
                        else {
                            cellContent.addClass(this.Class);
                            return false;
                        }
                    }
                }
                );
            }
        },

        _applyCellStyles: function () {
            var monthInstance = $.data(this.element, "View1" + this.element.id);
            if (monthInstance == undefined || monthInstance == null)
                return;

            for (i = 0; i < monthInstance.cells.length; i++) {
                var cell = monthInstance.cells[i];
                var cellElement = $(cell.element);
                var cellContent = cellElement.find("#cellContent" + cellElement[0].id);
                this._applyCellStyle(cell, cellElement, cellContent);
            }
        },

        // gets the week of year by Date.
        getWeekOfYear: function (date) {
            var dayOfYear = date.dayOfYear(date.dateTime) - 1;
            var week = date.dayOfWeek - (dayOfYear % 7);
            var offset = ((week - this.firstDayOfWeek) + 14) % 7;
            return Math.ceil((((dayOfYear + offset) / 7) + 1));
        },

        renderColumnHeader: function (month) {
            if (!this.showDayNames)
                return;

            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);
            var dayOfWeek = firstDay.dayOfWeek;
            var weekOfYear = this.getWeekOfYear(firstDay);

            if ($.global == null || $.global == undefined) {
                throw "jquery.global.js is not loaded.";
            }

            $.global.preferCulture(this.culture);
            var day = this.firstDayOfWeek;
            var dayNames = $.global.culture.calendar.days.names;

            var columnHeader = $("<table style='border-spacing: 0px; border-collapse: collapse; width: 100%; height: 100%;' cellspacing='0' cellpadding='1' id='columnHeader'>" +
               "<tr id='columnHeader'>" +
               "<td id='columnCell1'></td>" + "<td id='columnCell2'></td>" + "<td id='columnCell3'></td>" + "<td id='columnCell4'></td>" + "<td id='columnCell5'></td>" + "<td id='columnCell6'></td>" + "<td id='columnCell7'></td>" +
               "</tr>" +
               "</table>"
            );

            columnHeader.find('table').addClass(this.toThemeProperty('jqx-reset'));
            columnHeader.find('tr').addClass(this.toThemeProperty('jqx-reset'));
            columnHeader.find('td').css({ background: 'transparent', padding: 1, margin: 0, border: 'none' });

            columnHeader.addClass(this.toThemeProperty("jqx-reset"));
            columnHeader.addClass(this.toThemeProperty("jqx-calendar-column-header"));
            var calendarColumnHeader = month.find("#calendarColumnHeader" + month[0].id);
            var oldHeader = calendarColumnHeader.find("#columnHeader");
            if (oldHeader != null) oldHeader.remove();
            calendarColumnHeader.append(columnHeader);
            var columnHeaderCells = new Array();
            var currentDate = firstDay;
            var cellWidth = (month.width() - this.rowHeaderWidth - 2) / 7;
            if (!this.showWeekNumbers) {
                cellWidth = (month.width() - 2) / 7;
            }

            for (var i = 0; i < 7; i++) {
                var dayString = dayNames[day];

                // Possible values: default, shortest, firstTwoLetters, firstLetter, full
                switch (this.dayNameFormat) {
                    case 'default':
                        dayString = $.global.culture.calendar.days.namesAbbr[day];
                        break;
                    case 'shortest':
                        dayString = $.global.culture.calendar.days.namesShort[day];
                        break;
                    case 'firstTwoLetters':
                        dayString = dayString.substring(0, 2);
                        break;
                    case 'firstLetter':
                        dayString = dayString.substring(0, 1);
                        break;
                }

                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);
                var cellID = i + 1;
                var cellElement = columnHeader.find("#columnCell" + cellID);

                var oldI = i;

                if (this.enableTooltips) {
                    if ($(cellElement).jqxTooltip) {
                        $(cellElement).jqxTooltip({
                            name: this.element.id, content: dayNames[day], theme: this.theme, position: 'mouse'
                        });
                    }
                }

                if (day >= 6) {
                    day = 0;
                }
                else {
                    day++;
                }

                i = oldI;
                cell.element = cellElement;
                cell.row = 0;
                cell.column = i + 1;
                var textWidth = this._textwidth(dayString);
                var cellContent = "<div style='padding: 0; margin: 0; border: none; background: transparent;' id='columnCell" + cellID + "'>" + dayString + "</div>";
                cellElement.append(cellContent);
                cellElement.find("#columnCell" + cellID).addClass(this.toThemeProperty('jqx-calendar-column-cell'));
                cellElement.width(cellWidth);
                if (this.disabled) {
                    cellElement.find("#columnCell" + cellID).addClass(this.toThemeProperty('jqx-calendar-column-cell-disabled'));
                }

                if (textWidth > 0 && cellWidth > 0) {
                    while (textWidth > cellElement.width()) {
                        if (dayString.length == 0)
                            break;

                        dayString = dayString.substring(0, dayString.length - 1);
                        cellElement.find("#columnCell" + cellID).html(dayString);
                        textWidth = this._textwidth(dayString);
                    }
                }

                columnHeaderCells[i] = cell;
                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addDays(1)));
            }

            if (parseInt(calendarColumnHeader.width()) > parseInt(this.host.width())) {
                calendarColumnHeader.width(this.host.width())
            }

            var monthInstance = $.data(this.element, month[0].id);
            monthInstance.columnCells = columnHeaderCells;
        },

        _textwidth: function (text) {
            var measureElement = $('<span>' + text + '</span>');
            measureElement.addClass(this.toThemeProperty('jqx-calendar-column-cell'));
            $(this.host).append(measureElement);
            var width = measureElement.width();
            measureElement.remove();
            return width;
        },

        _textheight: function (text) {
            var measureElement = $('<span>' + text + '</span>');
            $(this.host).append(measureElement);
            var height = measureElement.height();
            measureElement.remove();
            return height;
        },

        _renderRowHeader: function (month) {
            var visibleDate = this.getVisibleDate();
            var firstDay = this.getFirstDayOfWeek(visibleDate);
            var dayOfWeek = firstDay.dayOfWeek;
            var weekOfYear = this.getWeekOfYear(firstDay);

            var rowHeader = $("<table style='overflow: hidden; width: 100%; height: 100%;' cellspacing='0' cellpadding='1' id='rowHeader'>" +
               "<tr id='rowHeader1'>" +
               "<td id='headerCell1'></td>" +
               "</tr>" +
               "<tr id='rowHeader2'>" +
               "<td id='headerCell2'/>" +
               "</tr>" +
               "<tr id='rowHeader3'>" +
               "<td id='headerCell3'/>" +
               "</tr>" +
               "<tr id='rowHeader4'>" +
               "<td id='headerCell4'/>" +
               "</tr>" +
               "<tr id='rowHeader5'>" +
               "<td id='headerCell5'/>" +
               "</tr>" +
               "<tr id='rowHeader6'>" +
               "<td id='headerCell6'/>" +
               "</tr>" +
               "</table>"
           );

            rowHeader.find('table').addClass(this.toThemeProperty('jqx-reset'));
            rowHeader.find('td').addClass(this.toThemeProperty('jqx-reset'));
            rowHeader.find('tr').addClass(this.toThemeProperty('jqx-reset'));

            rowHeader.addClass(this.toThemeProperty("jqx-calendar-row-header"));

            rowHeader.width(this.rowHeaderWidth);
            var rowHeaderElement = month.find("#rowHeader");

            if (rowHeaderElement != null) {
                rowHeaderElement.remove();
            }

            month.find("#calendarRowHeader" + month[0].id).append(rowHeader);

            var currentDate = firstDay;
            var rowHeaderCells = new Array();

            for (i = 0; i < 6; i++) {
                var weekString = weekOfYear.toString();
                var cell = new $.jqx._jqxCalendar.cell(currentDate.dateTime);
                var cellID = i + 1;
                var cellElement = rowHeader.find("#headerCell" + cellID);
                cell.element = cellElement;
                cell.row = i;
                cell.column = 0;
                var cellContent = "<div style='background: transparent; border: none; padding: 0; margin: 0;' id ='headerCellContent" + cellID + "'>" + weekString + "</div>";
                cellElement.append(cellContent);
                cellElement.find("#headerCellContent" + cellID).addClass(this.toThemeProperty('jqx-calendar-row-cell'));
                rowHeaderCells[i] = cell;
                currentDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(currentDate._addWeeks(1)));
                weekOfYear = this.getWeekOfYear(currentDate);
            }

            var monthInstance = $.data(this.element, month[0].id);
            monthInstance.rowCells = rowHeaderCells;
        },

        // gets the first week day.
        // @param - Date
        getFirstDayOfWeek: function (visibleDate) {
            var date = visibleDate;

            if (this.firstDayOfWeek < 0 || this.firstDayOfWeek > 6)
                this.firstDayOfWeek = 6;

            var num = date.dayOfWeek - this.firstDayOfWeek;
            if (num <= 0) {
                num += 7;
            }

            var newDate = $.jqx._jqxDateTimeInput.getDateTime(date._addDays(-num));
            return newDate;
        },

        // gets the visible date in the current month.
        getVisibleDate: function () {
            var visibleDate = new $.jqx._jqxDateTimeInput.getDateTime(new Date(this.value.dateTime));
            if (visibleDate < this.minDate) {
                visibleDate = this.minDate;
            }

            if (visibleDate > this.maxDate) {
                this.visibleDate = this.maxDate;
            }

            var dayInMonth = visibleDate.day;
            var newVisibleDate = $.jqx._jqxDateTimeInput.getDateTime(visibleDate._addDays(-dayInMonth + 1));
            visibleDate = newVisibleDate;
            return visibleDate;
        },

        destroy: function () {
            this.host
			.removeClass();
            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            var args = arg ? arg : {};

            args.owner = this;
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            if (id == 0 || id == 1 || id == 2 || id == 3 || id == 4 || id == 5 || id == 6) {
                event.args.date = this.getValue();
                event.args.selectedDate = this._getSelectedDate();
            }

            var result = this.host.trigger(event);
            if (id == 0 || id == 1) {
                result = false;
            }

            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'width' || key == 'height') {
                var month = this.host.find("#View1" + this.element.id);
                if (month.length > 0) {
                    this.setCalendarSize();
                    if (this.height != undefined && !isNaN(this.height)) {
                        month.height(this.height);
                    }
                    else if (this.height != null && this.height.toString().indexOf("px") != -1) {
                        month.height(this.height);
                    }

                    if (this.width != undefined && !isNaN(this.width)) {
                        month.width(this.width);
                    }
                    else if (this.width != null && this.width.toString().indexOf("px") != -1) {
                        month.width(this.width);
                    }

                    var contentHeight = this.host.height() - this.titleHeight - this.columnHeaderHeight;
                    var calendarID = "View1" + this.element.id;
                    month.find('#cellsTable' + calendarID).height(contentHeight);
                    month.find('#calendarRowHeader' + calendarID).height(contentHeight);

                    this.refreshControl();
                }
                return;
            }
            else if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, this.host);
            }
            else {
                this.render();
            }
        }
    });
})(jQuery);

(function ($) {
    $.jqx._jqxCalendar.cell = function (date) {
        var cell =
        {
            dateTime: new $.jqx._jqxDateTimeInput.getDateTime(date),

            isToday: false,
            isWeekend: false,
            isOtherMonth: false,
            isVisible: true,
            isSelected: false,
            isHighlighted: false,
            element: null,
            row: -1,
            column: -1,
            tooltip: null
        };

        return cell;
    } // calendar cell

    $.jqx._jqxCalendar.monthView = function (startDate, endDate, cells, rowHeaderCells, columnHeaderCells, element) {
        var month =
        {
            start: startDate,
            end: endDate,
            cells: cells,
            rowCells: rowHeaderCells,
            columnCells: columnHeaderCells,
            element: element
        };

        return month;
    } // calendar month

})(jQuery);/*
* jqxdatetimeinput.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2012 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/

/*
* Depends:
*   jqxcore.js
    jqxcalendar.js
    jquery.global.js 
    jqxToolTip.js ( optional ) 
*/

(function ($) {

    $.jqx.jqxWidget("jqxDateTimeInput", "", {});

    $.extend($.jqx._jqxDateTimeInput.prototype, {

        defineInstance: function () {
            if (this.value == undefined) {
                this.value = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.value._setHours(0);
                this.value._setMinutes(0);
                this.value._setSeconds(0);
                this.value._setMilliseconds(0);
            }
            if (this.minDate == undefined) {
                this.minDate = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.minDate._setYear(1900);
                this.minDate._setMonth(1);
                this.minDate._setDay(1);
                this.minDate._setHours(1);
                this.minDate._setMinutes(1);
                this.minDate._setSeconds(1);
                this.minDate._setMilliseconds(1);
            }

            if (this.maxDate == undefined) {
                this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.maxDate._setYear(2100);
                this.maxDate._setMonth(1);
                this.maxDate._setDay(1);
                this.maxDate._setHours(1);
                this.maxDate._setMinutes(1);
                this.maxDate._setSeconds(1);
                this.maxDate._setMilliseconds(1);
            }
            // Type: Number.
            // Default: 0
            // Gets or sets the first day of the week - Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6.
            if (this.firstDayOfWeek == undefined) {
                this.firstDayOfWeek = 0;
            }
            // Type: Boolean.
            // Default: false.
            // Shows or hides the week numbers.
            if (this.showWeekNumbers == undefined) {
                this.showWeekNumbers = false;
            }
            // store value in cookie
            this.cookies = false;
            this.cookieoptions = null;
            this.showFooter = false;
            //Type: String.
            //Default: null.
            //Sets the masked input's formatString.
            // Available ready to use patterns:
            // short date pattern: "d",
            // long date pattern: "D"
            // short time pattern: "t"
            // long time pattern: "T"
            // long date, short time pattern: "f"
            // long date, long time pattern: "F"
            // month/day pattern: "M"
            // month/year pattern: "Y"    
            // sortable format that does not vary by culture: "S"
            if (this.formatString == undefined) {
                this.formatString = "dd/MM/yyyy";
            }
            //Type: Number.
            //Default: 0.
            //Sets width of the masked input in pixels. Only positive values have effect.
            if (this.width == undefined) {
                this.width = null;
            }

            //Type: Number.
            //Default: 0.
            //Sets height of the masked input in pixels. 
            if (this.height == undefined) {
                this.height = null;
            }

            // Type: String
            // Sets the  text alignment.
            if (this.textAlign == undefined) {
                this.textAlign = 'left';
            }

            // Type: Boolean
            // Default: false
            // Sets the readonly state of the input.
            if (this.readonly == undefined) {
                this.readonly = false;
            }

            // Type: String
            // sets the culture.
            // Default: 'default'
            if (this.culture == undefined) {
                this.culture = "default";
            }

            this.activeEditor = this.activeEditor || null;

            // Type: Boolean
            // Default:true.
            // shows or hides the calendar's button.
            if (this.showCalendarButton == undefined) {
                this.showCalendarButton = true;
            }
            // Type: Number
            // Default: 100
            // Sets the animation's duration when the calendar is displayed.
            if (this.openDelay == undefined) {
                this.openDelay = 350;
            }

            // Type: Number
            // Default: 200
            // Sets the animation's duration when the calendar is going to be hidden.
            if (this.closeDelay == undefined) {
                this.closeDelay = 400;
            }

            // Type: Boolean
            // Default: true
            // Sets whether to close the calendar after selecting a date.
            if (this.closeCalendarAfterSelection == undefined) {
                this.closeCalendarAfterSelection = true;
            }
            // internal property
            this.isEditing = false;
            // Type: Boolean.
            // enables the browser window bounds detection.
            // Default: false.
            this.enableBrowserBoundsDetection = false;
            this.dropDownHorizontalAlignment = 'left';
            // Type: Boolean
            // Enables absolute date selection. When this property is true, the user selects one symbol at a time instead of a group of symbols.
            // Default: false
            this.enableAbsoluteSelection = false;
            // Type: Boolean
            // Enables or disables the DateTimeInput.
            // Default: false
            this.disabled = false;
            // Type: Number
            // Default: 18
            // Sets the button's size.
            this.buttonSize = 18;
            // default, none
            // Type: String.
            // enables or disables the animation.
            this.animationType = 'slide';
            // Type: String
            // Default: auto ( the drop down takes the combobox's width.)
            // Sets the popup's width.
            this.dropDownWidth = '200px';
            // Type: String
            // Default: 200px ( the height is 200px )
            // Sets the popup's height.
            this.dropDownHeight = '200px';
            // 'none', 'range', 'default'
            this.selectionMode = 'default';
            // DateTimeInput events.
            this.events =
			[
            // Occurs when the value is changed.
		  	   'valuechanged',
            // Occurs when the text is changed.
               'textchanged',
            // Occurs when the mouse button is clicked.
               'mousedown',
            // Occurs when the mouse button is clicked.
               'mouseup',
            // Occurs when the user presses a key. 
               'keydown',
            // Occurs when the user presses a key. Fired after keydown and keypress
               'keyup',
            // Occurs when the user presses a key.
               'keypress',
            // Occurs when the calendar is opened.
               'open',
            // Occurs when the calendar is hidden.
               'close'
			];
        },

        // creates the masked input's instance. 
        createInstance: function (args) {
            this.render();
        },

        render: function()
        {
            this._removeHandlers();
            this.element.innerHTML = "";
            this.host
		    .attr({
		        role: "dateTimeInput"
		    });
            var id = this.createID();
            var buttonid = this.createID();
            var dateTimeInputStructure = $("<div style='overflow: hidden; border: 0px;'>" +
                "<div id='dateTimeWrapper' style='float: none; position: relative; width: 100%; height: 100%;'>" +
                "<div id='dateTimeContent" + id + "' style='position: relative; overflow: hidden; float: left;'/>" +
                "<div id='dateTimeButton" + buttonid + "' style='position: relative; float: right;'/>" +
                "</div>" +
                "</div>");

            this._setSize();
            if (this.width == null) {
                this.width = this.host.width();
                this.host.width(this.width);
            }
            this.touch = $.jqx.mobile.isTouchDevice();

            this.host.append(dateTimeInputStructure);
            this.dateTimeWrapper = this.host.find('#dateTimeWrapper');
            this.inputElement = this.host.find("#dateTimeContent" + id);
            this.calendarElement = this.host.find("#dateTimeButton" + buttonid);
            this.dateTimeInput = $("<input autocomplete='off' style='position: relative; border: none; margin: 0; padding: 0;' id='inputElement' class='jqx-input-content' type='textarea'/>").appendTo(this.inputElement);
            this.dateTimeInput.removeClass(this.toThemeProperty("jqx-input-content"));
            this.dateTimeInput.addClass(this.toThemeProperty("jqx-input-content"));
            this.dateTimeInput.addClass(this.toThemeProperty("jqx-widget-content"));
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.dateTimeInput.attr('name', name);

            this.inputElement.addClass(this.toThemeProperty("jqx-input"));
            this.inputElement.addClass(this.toThemeProperty("jqx-widget-content"));
            this.inputElement.addClass(this.toThemeProperty("jqx-rc-all"));
            this.inputElement.height(this.host.height());

            this.calendarButton = $("<div style='padding: 0px; margin: 0px; top: 0; font-size: 3px; position: relative;' class='jqx-input-button-header'>"
            + "<div style='position: relative; font-size: 3px;' class='jqx-input-button-innerheader'></div></div><div style='padding: 0px; margin: 0px; top: 0; position: relative;' class='jqx-input-button-content'/>").appendTo(this.calendarElement);
            this.calendarButtonContent = this.host.find(".jqx-input-button-content");
            this.calendarButtonHeader = this.host.find(".jqx-input-button-header");
            this.calendarButtonInnerHeader = this.host.find(".jqx-input-button-innerheader");


            this.calendarButtonContent.removeClass(this.toThemeProperty("jqx-input-button-content"));
            this.calendarButtonContent.addClass(this.toThemeProperty("jqx-input-button-content"));
            this.calendarButtonContent.removeClass(this.toThemeProperty("jqx-widget-content"));
            this.calendarButtonContent.addClass(this.toThemeProperty("jqx-widget-content"));
            this.calendarButtonHeader.removeClass(this.toThemeProperty("jqx-input-button-header"));
            this.calendarButtonHeader.addClass(this.toThemeProperty("jqx-input-button-header"));
            this.calendarButtonHeader.removeClass(this.toThemeProperty("jqx-widget-header"));
            this.calendarButtonHeader.addClass(this.toThemeProperty("jqx-widget-header"));
            this.calendarButtonInnerHeader.removeClass(this.toThemeProperty("jqx-input-button-innerHeader"));
            this.calendarButtonInnerHeader.addClass(this.toThemeProperty("jqx-input-button-innerHeader"));

            var me = this;
            this._arrange();
            this.addHandler(this.host, 'loadContent', function (event) {
                me._arrange();
            });

            if (this.showCalendarButton) {
                this.calendarButton.css('display', 'block');
            }
            else {
                this.calendarButton.css('display', 'none');
            }

            if ($.jqx._jqxCalendar != null && $.jqx._jqxCalendar != undefined) {
                try {
                    var calendarID = 'calendar' + this.element.id;
                    var oldContainer = $($.find('#' + calendarID));
                    if (oldContainer.length > 0) {
                        oldContainer.remove();
                    }

                    var container = $("<div style='overflow: hidden; background: transparent; position: absolute;' id='calendar" + this.element.id + "'><div id='innerCalendar" + this.element.id + "'></div></div>");
                    if ($.jqx.utilities.getBrowser().browser == 'opera') {
                        container.hide();
                    }
                    container.appendTo(document.body);
                    this.container = container;
                    if (this.showFooter) this.dropDownHeight = this.dropDownHeight + 30;
                    this.calendarContainer = $($.find('#innerCalendar' + this.element.id)).jqxCalendar({ culture: this.culture, showFooter: this.showFooter, selectionMode: this.selectionMode, firstDayOfWeek: this.firstDayOfWeek, showWeekNumbers: this.showWeekNumbers, width: this.dropDownWidth, height: this.dropDownHeight, theme: this.theme });
                    this.calendarContainer.css({ position: 'absolute', zIndex: 100000, top: 0, left: 0 });
                    this.calendar = $.data(this.calendarContainer[0], "jqxCalendar").instance;
                    var me = this;
                    this.calendar.today = function () {
                        me.setDate(new Date);
                        me.hideCalendar();
                    }
                    this.calendar.clear = function () {
                        me.setDate(null);
                        me.hideCalendar();
                    }

                    this.calendar.render();
                    if ($.jqx.utilities.getBrowser().browser == 'opera') {
                        container.show();
                    }
                    container.height(parseInt(this.calendarContainer.height()) + 25);
                    container.width(parseInt(this.calendarContainer.width()) + 25);

                    if (this.selectionMode == 'range') {
                        this.readonly = true;
                    }

                    if (this.animationType == 'none') {
                        this.container.css('display', 'none');
                    }
                    else {
                        this.container.hide();
                    }

                }
                catch (e) {

                }
            }

            if ($.global == null || $.global == undefined) {
                throw "jquery.global.js is not loaded.";
            }

            $.global.preferCulture(this.culture);

            this.selectedText = "";

            this._addHandlers();
            this.self = this;
            this.oldValue = this.getDate();
            this.items = new Array();
            this.editors = new Array();

            if (this.value) {
                this.calendarButtonContent.html("<div style='line-height: 16px;  color: inherit; background: transparent; margin: 0; border: 0; padding: 0px; text-align: center; vertical-align: middle;'>" + "<b style='border: 0; padding: 0px; margin: 0px; background: transparent;'>" + this.value.day + "</b>" + "</div>");
            }
            this._loadItems();
            this._applyArrayExtension();
            this.editorText = "";

            if (this.readonly == true) {
                this.dateTimeInput.css("readonly", this.readonly);
            }

            this.dateTimeInput.css("text-align", this.textAlign);
            this.host.addClass(this.toThemeProperty('jqx-widget'));

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(me.toThemeProperty('jqx-input-disabled'));
                    instance.dateTimeInput.addClass(me.toThemeProperty('jqx-input-disabled'));
                    instance.host.addClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    instance.host.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                    instance.host.removeClass(me.toThemeProperty('jqx-input-disabled'));
                    instance.dateTimeInput.removeClass(me.toThemeProperty('jqx-input-disabled'));
                }
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-input-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-input-disabled'));
                this.dateTimeInput.addClass(this.toThemeProperty('jqx-input-disabled'));
            }

            if (this.host.parents('form').length > 0) {
                this.host.parents('form').bind('reset', function () {
                    setTimeout(function () {
                        me.setDate(new Date());
                    }, 10);
                });
            }

            if (this.cookies) {
                var date = $.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id);
                if (date != null) {
                    this.setDate(new Date(date));
                }
            }

            // fix for IE7
            if ($.browser.msie && $.browser.version < 8) {
                if (this.host.parents('.jqx-window').length > 0) {
                    var zIndex = this.host.parents('.jqx-window').css('z-index');
                    container.css('z-index', zIndex + 10);
                    this.calendarContainer.css('z-index', zIndex + 10);
                }
            }
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.height(this.height);
            }

            if (isPercentage) {
                var me = this;
                if (this.calendarContainer) {
                    this.refresh(false);
                    var width = this.host.width();
                    if (this.dropDownWidth != 'auto') {
                        width = this.dropDownWidth;
                    }
                    this.calendarContainer.jqxCalendar({ width: width });
                    this.container.width(parseInt(width) + 25);
                }

                var resizeFunc = function () {
                    if (me.calendarContainer) {
                        me._arrange();
                        if (me.dropDownWidth == 'auto') {
                            var width = me.host.width();
                            me.calendarContainer.jqxCalendar({ width: width });
                            me.container.width(parseInt(width) + 25);
                        }
                    }
                }

                $(window).unbind('resize.' + this.element.id);
                $(window).bind('resize.' + this.element.id, function () {
                    resizeFunc();
                });
            }
        },

        _arrange: function () {
            var width = parseInt(this.host.width());
            var height = parseInt(this.host.height());
            var buttonSize = this.buttonSize;
            var rightOffset = 3;
            this.calendarButtonHeader.width(buttonSize);
            this.calendarButtonContent.height(buttonSize - rightOffset);
            this.calendarButtonContent.width(buttonSize);
            this.inputElement.height(height);

            var inputElementOffset = parseInt(this.inputElement.outerHeight()) - parseInt(this.inputElement.height());
            inputElementOffset = 0;

            var contentWidth = width - parseInt(this.calendarButton.outerWidth()) - 1 * rightOffset;
            if (contentWidth > 0) {
                this.inputElement.width(contentWidth + 'px');
            }

            this.dateTimeInput.width(contentWidth - rightOffset + 'px');
            this.dateTimeInput.css('left', 0);
            this.dateTimeInput.css('top', 0);
            this.inputElement.css('left', 0);
            this.inputElement.css('top', 0);

            var buttonMiddle = parseInt(this.calendarButtonHeader.outerWidth()) / 2 - parseInt(this.calendarButtonInnerHeader.outerWidth()) / 2;
            this.calendarButtonInnerHeader.css('left', buttonMiddle);
            var buttonsHeight = parseInt(this.calendarButtonContent.outerHeight()) + parseInt(this.calendarButtonHeader.outerHeight());
            var top = parseInt(this.inputElement.outerHeight()) / 2 - buttonsHeight / 2;
            this.calendarElement.css('top', parseInt(top) + 'px');

            var inputHeight = this.dateTimeInput.outerHeight();
            if (inputHeight == 0) {
                inputHeight = parseInt(this.dateTimeInput.css('font-size')) + 3;
            }
            var inputTop = parseInt(this.inputElement.height()) / 2 - parseInt(inputHeight) / 2;
            this.dateTimeInput.css('margin', '0px');
            this.dateTimeInput.css('padding', '0px');
            this.dateTimeInput.css('top', parseInt(inputTop));
        },

        _removeHandlers: function () {
            var me = this;
            this.removeHandler($(document), 'mousedown.' + this.element.id);
            if (this.dateTimeInput) {
                this.removeHandler(this.dateTimeInput, 'keydown.' + this.element.id);
                this.removeHandler(this.dateTimeInput, 'blur');
                this.removeHandler(this.dateTimeInput, 'focus');
                this.removeHandler(this.dateTimeInput, 'mousedown');
                this.removeHandler(this.dateTimeInput, 'mouseup');
                this.removeHandler(this.dateTimeInput, 'keydown');
                this.removeHandler(this.dateTimeInput, 'keyup');
                this.removeHandler(this.dateTimeInput, 'keypress');
            }
            if (this.calendarButton != null) {
                this.removeHandler(this.calendarButton, 'mousedown');
            }
            if (this.calendarContainer != null) {
                this.removeHandler(this.calendarContainer, 'cellSelected');
                this.removeHandler(this.calendarContainer, 'cellMouseDown');
            }
        },

        isOpened: function () {
            var me = this;
            var openedCalendar = $.data(document.body, "openedJQXCalendar" + this.element.id);
            if (openedCalendar != null && openedCalendar == me.calendarContainer) {
                return true;
            }

            return false;
        },

        wheel: function (event, self) {
            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;
            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }
            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);
                if (!result) {
                    if (event.preventDefault)
                        event.preventDefault();
                    event.returnValue = false;
                    return result;
                }
                else return false;
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            if (delta < 0) {
                this.spinDown();
            }
            else this.spinUp();

            return false;
        },

        _addHandlers: function () {
            var id = this.element.id;
            var el = this.element;
            var me = this;

            this.addHandler(this.host, 'mousewheel', function (event) {
                me.wheel(event, me);
            });

            this.addHandler($(document), 'mousedown.' + this.element.id, this._closeOpenedCalendar, { me: this });

            this.addHandler(this.dateTimeInput, 'keydown.' + this.element.id, function (event) {
                var openedCalendar = $.data(document.body, "openedJQXCalendar" + me.element.id);
                if (openedCalendar != null && openedCalendar == me.calendarContainer) {
                    var result = me.handleCalendarKey(event);
                    return result;
                }
            });

            if (this.calendarContainer != null) {
                this.addHandler(this.calendarContainer, 'keydown', function (event) {
                    if (event.keyCode == 13) {
                        if (me.isOpened()) {
                            me.hideCalendar('selected');
                            me.dateTimeInput.focus();
                            return false;
                        }
                        return true;
                    }
                    else if (event.keyCode == 27) {
                        if (me.isOpened()) {
                            me.hideCalendar();
                            me.dateTimeInput.focus();
                            return false;
                        }
                        return true;
                    }
                    if (event.keyCode == 115) {
                        if (me.isOpened()) {
                            me.hideCalendar();
                            me.dateTimeInput.focus();
                            return false;
                        }
                        else if (!me.isOpened()) {
                            me.showCalendar();
                            me.dateTimeInput.focus();
                            return false;
                        }
                    }

                    if (event.altKey) {
                        if (event.keyCode == 38) {
                            if (me.isOpened()) {
                                me.hideCalendar();
                                me.dateTimeInput.focus();
                                return false;
                            }
                        }
                        else if (event.keyCode == 40) {
                            if (!me.isOpened()) {
                                me.showCalendar();
                                me.dateTimeInput.focus();
                                return false;
                            }
                        }
                    }
                });

                this.addHandler(this.calendarContainer, 'cellSelected',
                function (event) {
                    if (me.closeCalendarAfterSelection) {
                        var calendarOldValue = $.data(document.body, "openedJQXCalendarValue");
                        if (event.args.selectionType == 'mouse') {
                            if (me.selectionMode == 'default') {
                                me.hideCalendar('selected');
                            }
                            else {
                                if (me.calendar._clicks == 0) {
                                    me.hideCalendar('selected');
                                }
                            }
                        }
                    }
                });

                this.addHandler(this.calendarContainer, 'cellMouseDown',
                function (event) {
                    if (me.closeCalendarAfterSelection) {
                        if (me.calendar.value) {
                            $.data(document.body, "openedJQXCalendarValue", new $.jqx._jqxDateTimeInput.getDateTime(me.calendar.value.dateTime));
                        }
                    }
                });
            }

            this.addHandler(this.dateTimeInput, 'blur', function () {
                if (me.value != null) {
                    me.isEditing = false;
                    me._validateValue();
                    me._updateText();
                    me.inputElement.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                }
            });

            this.addHandler(this.dateTimeInput, 'focus', function () {
                if (me.value != null) {
                    var selection = me._selection();
                    me.isEditing = true;
                    me._validateValue();
                    me._updateText();
                    me._setSelectionStart(selection.start);
                    me._selectGroup(-1);
                    me.inputElement.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                }
            });

            var eventName = 'mousedown';
            if (this.touch) {
                eventName = 'touchstart';
            }

            this.addHandler(this.calendarButton, eventName,
                function (event) {
                    var calendar = me.container;
                    var isOpen = calendar.css('display') == 'block';
                    if (!me.disabled) {
                        if (!me.isanimating) {
                            if (isOpen) {
                                me.hideCalendar();
                            }
                            else {
                                me.showCalendar();
                                event.preventDefault();
                            }
                        }
                    }
                });

            this.addHandler(this.dateTimeInput, 'mousedown',
            function (event) {
                return me._raiseEvent(2, event)
            });

            this.addHandler(this.dateTimeInput, 'mouseup',
            function (event) {
                return me._raiseEvent(3, event)
            });

            this.addHandler(this.dateTimeInput, 'keydown',
            function (event) {
                return me._raiseEvent(4, event)
            });

            this.addHandler(this.dateTimeInput, 'keyup',
            function (event) {
                return me._raiseEvent(5, event)
            });

            this.addHandler(this.dateTimeInput, 'keypress',
            function (event) {
                return me._raiseEvent(6, event)
            });
        },

        createID: function () {
            var id = Math.random() + '';
            id = id.replace('.', '');
            id = '99' + id;
            id = id / 1;
            return 'dateTimeInput' + id;
        },

        setMaxDate: function (date) {
            if (date == null)
                return;

            this.maxDate = $.jqx._jqxDateTimeInput.getDateTime(date);
            if (this.calendar != null) {
                this.calendar.setMaxDate(date);
            }
        },

        getMaxDate: function () {
            if (this.maxDate != null && this.maxDate != undefined) {
                return this.maxDate.dateTime;
            }

            return null;
        },

        setMinDate: function (date) {
            if (date == null)
                return;

            this.minDate = $.jqx._jqxDateTimeInput.getDateTime(date);
            if (this.calendar != null) {
                this.calendar.setMinDate(date);
            }
        },

        getMinDate: function () {
            if (this.minDate != null && this.minDate != undefined) {
                return this.minDate.dateTime;
            }

            return null;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (object.isInitialized == undefined || object.isInitialized == false)
                return;

            if (key == 'firstDayOfWeek') {
                object.calendarContainer.jqxCalendar({ firstDayOfWeek: value });
            }
            if (key == 'showWeekNumbers') {
                object.calendarContainer.jqxCalendar({ showWeekNumbers: value });
            }

            if (key == 'culture') {
                object._loadItems();
                if (object.calendar != null) {
                    object.calendar.culture = value;
                    object.calendar.render();
                }
            }
            else if (key == 'formatString') {
                object._loadItems();
            }

            if (key == "theme") {
                if (object.dateTimeInput) {
                    object.host.removeClass();
                    object.host.addClass(object.toThemeProperty('jqx-widget'));

                    object.dateTimeInput.removeClass();
                    object.dateTimeInput.addClass(object.toThemeProperty("jqx-input-content"));
                    object.dateTimeInput.addClass(object.toThemeProperty("jqx-widget-content"));

                    object.inputElement.removeClass();
                    object.inputElement.addClass(object.toThemeProperty("jqx-input"));
                    object.inputElement.addClass(object.toThemeProperty("jqx-widget-content"));
                    object.inputElement.addClass(object.toThemeProperty("jqx-rc-all"));

                    object.calendarButtonContent.removeClass();
                    object.calendarButtonContent.addClass(object.toThemeProperty("jqx-input-button-content"));
                    object.calendarButtonContent.addClass(object.toThemeProperty("jqx-widget-content"));
                    object.calendarButtonHeader.removeClass();
                    object.calendarButtonHeader.addClass(object.toThemeProperty("jqx-input-button-header"));
                    object.calendarButtonHeader.addClass(object.toThemeProperty("jqx-widget-header"));
                    object.calendarButtonInnerHeader.removeClass();
                    object.calendarButtonInnerHeader.addClass(object.toThemeProperty("jqx-input-button-innerHeader"));

                    object.calendarContainer.jqxCalendar({ theme: value });
                }
            }

            if (key == "width" || key == "height") {
                object.refresh();
            }

            object._setOption(key, value);
            if (key == 'dropDownWidth' || key == 'dropDownHeight') {
                object.calendarContainer.jqxCalendar({ width: object.dropDownWidth, height: object.dropDownHeight });
                object.calendar.render();
                object.container.height(object.calendarContainer.height());
                object.container.width(object.calendarContainer.width());
            }
        },

        setDate: function (date) {
            if (date == null || date == 'null' || date == 'undefined') {
                if (this.value != null) {
                    this.value = null;
                    this.calendar.setDate(null);
                    this._refreshValue();
                    if (this.cookies) {
                        if (this.value != null) {
                            $.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);
                        }
                    }
                    this._raiseEvent('0', date);
                }
                return;
            }

            if (date < this.getMinDate() || date > this.getMaxDate()) {
                return;
            }

            if (this.value == null) {
                this.value = new $.jqx._jqxDateTimeInput.getDateTime(new Date());
                this.value._setHours(0);
                this.value._setMinutes(0);
                this.value._setSeconds(0);
                this.value._setMilliseconds(0);
            }

            if (date.getFullYear) {
                this.value._setYear(date.getFullYear());
                this.value._setDay(1);
                this.value._setMonth(date.getMonth() + 1);
                this.value._setHours(date.getHours());
                this.value._setMinutes(date.getMinutes());
                this.value._setSeconds(date.getSeconds());
                this.value._setMilliseconds(date.getMilliseconds());
                this.value._setDay(date.getDate());
            }

            this._refreshValue();

            if (this.cookies) {
                if (this.value != null) {
                    $.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);
                }
            }
            this._raiseEvent('0', date);
        },

        getDate: function () {
            if (this.value == undefined)
                return null;

            return this.value.dateTime;
        },

        setRange: function (from, to) {
            this.calendar.setRange(from, to);
            var date = from;
            if (date.getFullYear) {
                this.value._setYear(date.getFullYear());
                this.value._setMonth(date.getMonth() + 1);
                this.value._setHours(date.getHours());
                this.value._setMinutes(date.getMinutes());
                this.value._setSeconds(date.getSeconds());
                this.value._setMilliseconds(date.getMilliseconds());
                this.value._setDay(date.getDate());
            }

            this._raiseEvent('0', this.value.dateTime);
        },

        getRange: function () {
            return this.calendar.getRange();
        },

        _validateValue: function () {
            var needValueUpdate = false;
            for (i = 0; i < this.items.length; i++) {
                var editValue = this.editors[i].value;
                switch (this.items[i].type) {
                    case 'FORMAT_AMPM':
                        if (editValue < 0) {
                            editValue = 0;
                        }
                        else if (editValue > 1) {
                            editValue = 1;
                        }
                        break;
                    case 'Character':
                        break;
                    case 'Day':
                        if (editValue < 1) {
                            editValue = 1;
                        }
                        else if (editValue > 31) {
                            editValue = 31;
                        }
                        break;
                    case 'FORMAT_hh':
                    case 'FORMAT_HH':
                        if (editValue < 0) {
                            editValue = 0;
                        }
                        else if (editValue > 23) {
                            editValue = 23;
                        }
                        break;
                    case 'Millisecond':
                        if (editValue < 0) {
                            editValue = 0;
                        }
                        else if (editValue > 99) {
                            editValue = 99;
                        }
                        break;
                    case 'Minute':
                        if (editValue < 0) {
                            editValue = 0;
                        }
                        else if (editValue > 59) {
                            editValue = 59;
                        }
                        break;
                    case 'Month':
                        if (editValue < 1) {
                            editValue = 1;
                        }
                        else if (editValue > 12) {
                            editValue = 12;
                        }
                        break;
                    case 'ReadOnly':
                        break;
                    case 'Second':
                        if (editValue < 0) {
                            editValue = 0;
                        }
                        else if (editValue > 59) {
                            editValue = 59;
                        }
                        break;
                    case 'Year':
                        if (editValue < this.minDate.year) {
                            editValue = this.minDate.year;
                        }
                        else if (editValue > this.maxDate.year) {
                            editValue = this.maxDate.year;
                        }
                        break;
                }

                if (this.editors[i].value != editValue) {
                    this.editors[i].value = editValue;
                    needValueUpdate = true;
                }
            }

            this.updateValue();

            if (this.value != null) {
                if (this.value.dateTime > this.maxDate.dateTime) {
                    this._internalSetValue(this.maxDate);
                    this._updateEditorsValue();
                }
                else if (this.value.dateTime < this.minDate.dateTime) {
                    this._internalSetValue(this.minDate);
                    this._updateEditorsValue();
                }
            }
        },

        spinUp: function () {
            var value = this.value;
            if (value == null)
                return;

            if (this.activeEditor != null) {
                var currentEditorIndex = this.editors.indexOf(this.activeEditor);
                if (this.items[currentEditorIndex].type == 'Day') {
                    if (this.value != null) {
                        this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month);
                    }
                }

                var positions = this.activeEditor.positions;
                this.activeEditor.increaseValue(this.enableAbsoluteSelection);

                this.activeEditor.positions = positions;
            }

            if (this.isEditing) this.isEditing = false;

            this.updateValue();
            this.isEditing = true;
            this._updateText();

            var index1 = this.editors.indexOf(this.activeEditor);
            if (index1 >= 0) {
                this._selectGroup(index1);
            }
        },

        spinDown: function () {
            var value = this.value;
            if (value == null)
                return;

            if (this.activeEditor != null) {
                var currentEditorIndex = this.editors.indexOf(this.activeEditor);
                if (this.items[currentEditorIndex].type == 'Day') {
                    if (this.value != null) {
                        this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month);
                    }
                }

                var positions = this.activeEditor.positions;
                this.activeEditor.decreaseValue(this.enableAbsoluteSelection);
                this.activeEditor.positions = positions;
            }

            if (this.isEditing) this.isEditing = false;

            this.updateValue();
            this.isEditing = true;
            this._updateText();

            var index1 = this.editors.indexOf(this.activeEditor);
            if (index1 >= 0) {
                this._selectGroup(index1);
            }
        },

        _passKeyToCalendar: function (event) {
            if (event.keyCode == 13) {
                this.hideCalendar('selected');
                return true;
            }
            else if (event.keyCode == 27) {
                var calendar = this.calendarContainer;
                var calendarInstace = this.calendar;
                var closeAfterSelection = this.closeCalendarAfterSelection;
                this.closeCalendarAfterSelection = false;
                calendarInstace.setDate(this.value.dateTime);
                this.closeCalendarAfterSelection = closeAfterSelection;
                this.hideCalendar();
            }

            var closeAfterSelection = this.closeCalendarAfterSelection;
            this.closeCalendarAfterSelection = false;
            var result = this.calendar._handleKey(event);
            this.closeCalendarAfterSelection = closeAfterSelection;
            return result;
        },

        handleCalendarKey: function (event) {
            var $target = $(event.target);
            var openedCalendar = $.data(document.body, "openedJQXCalendar" + this.element.id);
            if (openedCalendar != null) {
                if (openedCalendar.length > 0) {
                    var calendarID = openedCalendar[0].id.toString();
                    var inputID = calendarID.toString().substring(13);
                    var datetimeinput = $(document).find("#" + inputID);
                    var datetimeinputinstance = $.data(datetimeinput[0], "jqxDateTimeInput").instance;
                    var result = datetimeinputinstance._passKeyToCalendar(event);
                    return result;
                }
            }

            return true;
        },

        _findPos: function (obj) {
            if (obj == null)
                return;

            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj['nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },

        testOffset: function (element, offset, inputHeight) {
            var dpWidth = element.outerWidth();
            var dpHeight = element.outerHeight();
            var viewWidth = $(window).width() + $(window).scrollLeft();
            var viewHeight = $(window).height() + $(window).scrollTop();
            if (offset.left + dpWidth > viewWidth) {
                if (dpWidth > this.host.width()) {
                    var hostLeft = this.host.offset().left;
                    var hOffset = dpWidth - this.host.width();
                    offset.left = hostLeft - hOffset + 2;
                }
            }
            if (offset.left < 0) {
                offset.left = parseInt(this.host.offset().left) + 'px'
            }

            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight + 23) : 0);

            return offset;
        },

        open: function () {
            this.showCalendar();
        },

        close: function (reason) {
            this.hideCalendar();
        },

        //OBSOLETE use close instead. 
        hide: function () {
            this.close();
        },

        //OBSOLETE use open instead. 
        show: function () {
            this.open();
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        showCalendar: function () {
            var calendar = this.calendarContainer;
            var calendarInstace = this.calendar;
            var container = this.container;
            var self = this;
            var scrollPosition = $(window).scrollTop();
            var scrollLeftPosition = $(window).scrollLeft();
            var top = parseInt(this._findPos(this.inputElement[0])[1]) + parseInt(this.inputElement.outerHeight()) - 1 + 'px';
            var left = parseInt(this.host.offset().left) + 'px';
            var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser();

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top + 'px';
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left + 'px';
            }

            var hasTransform = $.jqx.utilities.hasTransform(this.host);

            if (hasTransform || (isMobileBrowser != null && isMobileBrowser)) {
                left = $.jqx.mobile.getLeftPos(this.element);
                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.inputElement.outerHeight());
            }

            this.container.css('left', left);
            this.container.css('top', top);

            var closeAfterSelection = this.closeCalendarAfterSelection;
            this.closeCalendarAfterSelection = false;
            this.isEditing = false;
            this._validateValue();
            this._updateText();
            var value = this.value != null ? this.value.dateTime : new Date();
            if (self.selectionMode == 'default') {
                calendarInstace.setDate(value);
            }
            this.closeCalendarAfterSelection = closeAfterSelection;

            var positionChanged = false;

            if (this.dropDownHorizontalAlignment == 'right') {
                var containerWidth = this.container.width();
                var containerLeftOffset = Math.abs(containerWidth - this.host.width());
                if (containerWidth > this.host.width()) {
                    this.container.css('left', 2 + parseInt(left) - containerLeftOffset + "px");
                }
                else this.container.css('left', 25 + parseInt(left) + containerLeftOffset + "px");
            }

            if (this.enableBrowserBoundsDetection) {
                var newOffset = this.testOffset(calendar, { left: parseInt(this.container.css('left')), top: parseInt(top) }, parseInt(this.host.outerHeight()));
                if (parseInt(this.container.css('top')) != newOffset.top) {
                    positionChanged = true;
                    calendar.css('top', 23);
                }
                else calendar.css('top', 0);

                this.container.css('top', newOffset.top);
                if (parseInt(this.container.css('left')) != newOffset.left) {
                    this.container.css('left', newOffset.left);
                }
            }

            this._raiseEvent(7, calendar);

            if (this.animationType != 'none') {
                this.container.css('display', 'block');
                var height = parseInt(calendar.outerHeight());
                calendar.stop();

                this.isanimating = true;
                this.opening = true;
                if (this.animationType == 'fade') {
                    calendar.css('margin-top', 0);
                    calendar.css('opacity', 0);
                    calendar.animate({ 'opacity': 1 }, this.openDelay, function () {
                        self.isanimating = false;
                        self.opening = false;
                        $.data(document.body, "openedJQXCalendar" + self.element.id, calendar);
                        self.calendarContainer.focus();
                    });
                }
                else {
                    calendar.css('opacity', 1);
                    if (positionChanged) {
                        calendar.css('margin-top', height);
                    }
                    else {
                        calendar.css('margin-top', -height);
                    }
                    calendar.animate({ 'margin-top': 0 }, this.openDelay, function () {
                        self.isanimating = false;
                        self.opening = false;
                        $.data(document.body, "openedJQXCalendar" + self.element.id, calendar);
                        self.calendarContainer.focus();
                    });
                }
            }
            else {
                calendar.stop();
                self.isanimating = false;
                self.opening = false;
                calendar.css('opacity', 1);
                calendar.css('margin-top', 0);
                this.container.css('display', 'block');
                $.data(document.body, "openedJQXCalendar" + self.element.id, calendar);
                this.calendarContainer.focus();
            }

            if (this.value == null) {
                if (this.calendar && this.calendar._getSelectedCell()) {
                    this.calendar._getSelectedCell().isSelected = false;
                }
            }
        },

        hideCalendar: function (reason) {
            var calendar = this.calendarContainer;
            var container = this.container;
            var self = this;
            $.data(document.body, "openedJQXCalendar" + this.element.id, null);
            if (this.animationType != 'none') {
                var height = calendar.outerHeight();
                calendar.css('margin-top', 0);
                this.isanimating = true;
                var animationValue = -height;
                if (parseInt(this.container.offset().top) < parseInt(this.host.offset().top)) {
                    animationValue = height;
                }
                if (this.animationType == 'fade') {
                    calendar.animate({ 'opacity': 0 }, this.closeDelay, function () { container.css('display', 'none'); self.isanimating = false; });
                }
                else {
                    calendar.animate({ 'margin-top': animationValue }, this.closeDelay, function () { container.css('display', 'none'); self.isanimating = false; });
                }
            }
            else {
                container.css('display', 'none');
            }

            if (reason != undefined) {
                this._updateSelectedDate();
            }

            this._raiseEvent(8, calendar);
        },

        _updateSelectedDate: function () {
            var value = this.value;
            if (value == null) {
                value = new $.jqx._jqxDateTimeInput.getDateTime(new Date());
                value._setHours(0);
                value._setMinutes(0);
                value._setSeconds(0);
                value._setMilliseconds(0);
            }

            var hour = value.hour;
            var minute = value.minute;
            var second = value.second;
            var milisecond = value.millisecond;
            if (this.selectionMode == 'range' && this.calendar.getRange().from == null) {
                this.setDate(null);
                return;
            }

            var date = new $.jqx._jqxDateTimeInput.getDateTime(this.calendar.value.dateTime);

            date._setHours(hour);
            date._setMinutes(minute);
            date._setSeconds(second);
            date._setMilliseconds(milisecond);
            this.setDate(date.dateTime);
        },

        _closeOpenedCalendar: function (event) {
            var $target = $(event.target);
            var openedCalendar = $.data(document.body, "openedJQXCalendar" + event.data.me.element.id);
            var isCalendar = false;
            $.each($target.parents(), function () {
                if (this.className.indexOf('jqx-calendar') != -1) {
                    isCalendar = true;
                    return false;
                }
                if (this.className.indexOf('jqx-input') != -1) {
                    isCalendar = true;
                    return false;
                }
            });

            if ($(event.target).ischildof(event.data.me.host)) {
                return true;
            }

            if (event.target != null && (event.target.tagName == "B" || event.target.tagName == 'b')) {
                var hostOffset = event.data.me.host.offset();
                var hostWidth = event.data.me.host.width();
                var hostHeight = event.data.me.host.height();
                var top = parseInt(hostOffset.top);
                var left = parseInt(hostOffset.left);

                if (top <= event.pageY && event.pageY <= top + hostHeight)
                {
                    if (left <= event.pageX && event.pageX <= left + hostWidth) {
                        return true;
                    }
                }          
            }

            if (openedCalendar != null && !isCalendar) {
                if (openedCalendar.length > 0) {
                    var calendarID = openedCalendar[0].id.toString();
                    var inputID = calendarID.toString().substring(13);
                    var datetimeinput = $(document).find("#" + inputID);
                    var datetimeinputinstance = $.data(datetimeinput[0], "jqxDateTimeInput").instance;
                    datetimeinputinstance.hideCalendar();
                    $.data(document.body, "openedJQXCalendar" + event.data.me.element.id, null);
                }
            }
        },

        _applyArrayExtension: function () {
            if (!Array.prototype.indexOf) {
                Array.prototype.indexOf = function (elt /*, from*/) {
                    var len = this.length;
                    var from = Number(arguments[1]) || 0;
                    from = (from < 0)
                     ? Math.ceil(from)
                     : Math.floor(from);
                    if (from < 0)
                        from += len;

                    for (; from < len; from++) {
                        if (from in this &&
                      this[from] === elt)
                            return from;
                    }
                    return -1;
                };
            }
        },

        _loadItems: function () {
            if (this.value != null) {
                this.items = new Array();
                var expandedMask = this._getFormatValue(this.formatString);
                this.items = this._parseFormatValue(expandedMask);
                this.editors = new Array();
                for (i = 0; i < this.items.length; i++) {
                    var editor = this.items[i].getDateTimeEditorByItemType(this.value);
                    this.editors[i] = editor;
                }
            }

            this._updateEditorsValue();
            this._updateText();
        },

        _updateText: function () {
            var text = "";
            if (this.items.length == 0 && this.value != null) {
                this._loadItems();
            }

            if (this.value != null) {
                if (this.items.length >= 1) {
                    text = this.format(this.value, 0, this.items.length);
                }


                var oldText = this.dateTimeInput.val();
                if (oldText != text) {
                    this._raiseEvent(1, this.value);
                }
            }

            if (this.selectionMode == 'range') {
                var range = this.getRange();
                fromText = this.format(this.value, 0, this.items.length);
                if (range.to) {
                    var from = $.jqx._jqxDateTimeInput.getDateTime(range.from);
                    fromText = this.format(from, 0, this.items.length);
                    var to = $.jqx._jqxDateTimeInput.getDateTime(range.to);
                    toText = this.format(to, 0, this.items.length);
                    var text = fromText + " - " + toText;
                }
            }

            this.dateTimeInput.val(text)
        },


        format: function (value, startFormatIndex, endFormatIndex) {
            var result = "";
            for (i = startFormatIndex; i < endFormatIndex; ++i) {
                var parsedValue = this.items[i].dateParser(value);

                if (this.isEditing && this.items[i].type != 'ReadOnly') {
                    var isReadOnlyDay = this.items[i].type == 'Day' && this.items[i].format.length > 2;
                    if (this.items[i].type == 'FORMAT_AMPM') {
                        isReadOnlyDay = true;
                    }

                    if (!isReadOnlyDay) {
                        parsedValue = this.items[i].dateParserInEditMode(new Number(this.editors[i].value), "d" + this.editors[i].maxEditPositions);
                        while (parsedValue.length < this.editors[i].maxEditPositions) {
                            parsedValue = '0' + parsedValue;
                        }
                    }
                }
                result += parsedValue;
            }
            return result;
        },

        _getFormatValueGroupLength: function (item) {
            for (i = 1; i < item.toString().length; ++i) {
                if (item.substring(i, i + 1) != item.substring(0, 1))
                    return i;
            }
            return item.length;
        },

        _parseFormatValue: function (value) {
            var myResult = new Array();
            var currentValue = value.toString();
            var i = 0;
            while (currentValue.length > 0) {
                var formatItemLength = this._getFormatValueGroupLength(currentValue);
                var myItem = null;

                switch (currentValue.substring(0, 1)) {
                    case ':':
                    case '/':
                        formatItemLength = 1;
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), 'ReadOnly', this.culture);
                        break;
                    case '"':
                    case '\'':
                        var closingQuotePosition = currentValue.indexOf(currentValue[0], 1);
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(1, 1 + Math.max(1, closingQuotePosition - 1)), 'ReadOnly', this.culture);
                        formatItemLength = Math.max(1, closingQuotePosition + 1);
                        break;
                    case '\\':
                        if (currentValue.length >= 2) {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(1, 1), 'ReadOnly', this.culture);
                            formatItemLength = 2;
                        }
                        break;
                    case 'd':
                    case 'D':
                        if (formatItemLength > 2) {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Day', this.culture);
                        }
                        else {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Day', this.culture);

                        }
                        break;
                    case 'f':
                    case 'F':
                        if (formatItemLength > 7) {
                            formatItemLength = 7;
                        }
                        if (formatItemLength > 3) {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);
                        }
                        else {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Millisecond', this.culture);
                        }
                        break;
                    case 'g':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);
                        break;
                    case 'h':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_hh', this.culture);
                        break;
                    case 'H':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_HH', this.culture);
                        break;
                    case 'm':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Minute', this.culture);
                        break;
                    case 'M':
                        if (formatItemLength > 4)
                            formatItemLength = 4;
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Month', this.culture);
                        break;
                    case 's':
                    case 'S':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Second', this.culture);
                        break;
                    case 't':
                    case 'T':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'FORMAT_AMPM', this.culture);
                        break;
                    case 'y':
                    case 'Y':
                        if (formatItemLength > 1) {
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'Year', this.culture);
                        }
                        else {
                            formatItemLength = 1;
                            myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), dateTimeFormatInfo, 'ReadOnly', this.culture);
                        }
                        break;
                    case 'z':
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, formatItemLength), 'ReadOnly', this.culture);
                        break;

                    default:
                        formatItemLength = 1;
                        myItem = $.jqx._jqxDateTimeInput.DateTimeFormatItem._create(currentValue.substring(0, 1), 'ReadOnly', this.culture);
                        break;
                }

                myResult[i] = $.extend(true, {}, myItem);
                currentValue = currentValue.substring(formatItemLength);
                i++;
            }

            return myResult;
        },

        _getFormatValue: function (format) {
            if (format == null || format.length == 0)
                format = "d";

            if (format.length == 1) {
                switch (format.substring(0, 1)) {
                    case "d":
                        return $.global.culture.calendar.patterns.d;
                    case "D":
                        return $.global.culture.calendar.patterns.D;
                    case "t":
                        return $.global.culture.calendar.patterns.t;
                    case "T":
                        return $.global.culture.calendar.patterns.T;
                    case "f":
                        return $.global.culture.calendar.patterns.f;
                    case "F":
                        return $.global.culture.calendar.patterns.F;
                    case "M":
                        return $.global.culture.calendar.patterns.M;
                    case "Y":
                        return $.global.culture.calendar.patterns.Y;
                    case "S":
                        return $.global.culture.calendar.patterns.S;
                }
            }
            if (format.length == 2 && format.substring(0, 1) == '%')
                format = format.substring(1);
            return format;
        },

        _updateEditorsValue: function () {
            var value = this.value;

            if (value == null)
                return;

            var year = value.year;
            var day = value.day;
            var hour = value.hour;
            var millisecond = value.millisecond;
            var second = value.second;
            var minute = value.minute;
            var month = value.month;

            if (this.items == null)
                return;

            for (i = 0; i < this.items.length; i++) {
                switch (this.items[i].type) {
                    case 'FORMAT_AMPM':
                        this.editors[i].value = 0;
                        break;
                    case 'Day':
                        this.editors[i].value = day;
                        break;
                    case 'FORMAT_hh':
                        this.editors[i].value = hour;
                        break;
                    case 'FORMAT_HH':
                        this.editors[i].value = hour;
                        break;
                    case 'Millisecond':
                        this.editors[i].value = millisecond;
                        break;
                    case 'Minute':
                        this.editors[i].value = minute;
                        break;
                    case 'Month':
                        this.editors[i].value = month;
                        break;
                    case 'Second':
                        this.editors[i].value = second;
                        break;
                    case 'Year':
                        this.editors[i].value = year;
                        break;
                }
            }
        },


        updateValue: function () {
            if (this.isEditing)
                return;

            var dateTime = 0;
            var year = 1;
            var day = 1;
            var hour = 0;
            var milisecond = 0;
            var second = 0;
            var minute = 0;
            var month = 1;
            var amPmOffset = 0;
            var hasYear = false;
            var hasMonth = false;
            var hasDay = false;

            var dayEditors = new Array();
            var amPmEditor = null;

            var k = 0;
            for (var i = 0; i < this.items.length; i++) {
                switch (this.items[i].type) {
                    case 'FORMAT_AMPM':
                        amPmOffset = this.editors[i].value;
                        amPmEditor = this.editors[i];
                        break;
                    case 'Character':

                        break;
                    case 'Day':
                        if (this.items[i].format.length < 4) {
                            day = this.editors[i].value;
                            dayEditors[k++] = this.editors[i];
                            if (day == 0)
                                day = 1;

                            hasDay = true;
                        }
                        break;
                    case 'FORMAT_hh':
                        var hoursEditor = this.editors[i];
                        hour = hoursEditor.value;
                        break;
                    case 'FORMAT_HH':
                        hour = this.editors[i].value;
                        break;
                    case 'Millisecond':
                        milisecond = this.editors[i].value;
                        break;
                    case 'Minute':
                        minute = this.editors[i].value;
                        break;
                    case 'Month':
                        month = this.editors[i].value;
                        hasMonth = true;
                        if (month == 0)
                            month = 1; break;
                    case 'ReadOnly':
                        break;
                    case 'Second':
                        second = this.editors[i].value;
                        break;
                    case 'Year':
                        hasYear = true;
                        year = this.editors[i].value;

                        var yearFormatValue = this.editors[i].getDateTimeItem().format;
                        if (yearFormatValue.length < 3) {
                            var yearString = "1900";
                            if (yearString.Length == 4) {
                                var baseYearString = "" + yearString[0] + yearString[1];
                                var baseYear;
                                baseYear = parseInt(baseYearString);
                                year = year + (baseYear * 100);
                            }
                        }

                        if (year == 0)
                            year = 1;
                        break;
                }
            }

            var oldDate = this.value != null ? new Date(this.value.dateTime) : null;

            if (year > 0 && month > 0 && day > 0 && minute >= 0 && hour >= 0 && second >= 0 && milisecond >= 0) {
                var val = this.value;
                if (val != null) {
                    if (!hasYear) {
                        year = val.year;
                    }

                    if (!hasMonth) {
                        month = val.month;
                    }

                    if (!hasDay) {
                        day = val.day;
                    }
                }

                try {
                    if (month > 12) month = 12;
                    if (month < 1) month = 1;
                    if (val._daysInMonth(year, month) <= day) {
                        day = val._daysInMonth(year, month);
                        if (dayEditors != null && dayEditors.length > 0) {
                            for (i = 0; i < dayEditors.length; i++) {
                                dayEditors[i].value = day;
                            }
                        }
                    }

                    if (amPmEditor != null) {
                        amPmEditor.value = hour < 12 ? 0 : 1;
                    }

                    this.value._setYear(parseInt(year));
                    this.value._setDay(day);
                    this.value._setMonth(month);
                    this.value._setHours(hour);
                    this.value._setMinutes(minute);
                    this.value._setSeconds(second);
                    this.value._setMilliseconds(milisecond);
                }
                catch (err) {
                    this.value = val;
                }

                if (oldDate != null) {
                    var areEqual = this.value.dateTime.getFullYear() == oldDate.getFullYear() && this.value.dateTime.getDate() == oldDate.getDate() && this.value.dateTime.getMonth() == oldDate.getMonth() && this.value.dateTime.getHours() == oldDate.getHours() && this.value.dateTime.getMinutes() == oldDate.getMinutes() && this.value.dateTime.getSeconds() == oldDate.getSeconds();
                    if (!areEqual) {
                        this._raiseEvent('0', this.value.dateTime);
                        if (this.cookies) {
                            if (this.value != null) {
                                $.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions);
                            }
                        }
                    }

                    this.calendarButtonContent.html("<div style='line-height: 16px; background: transparent; margin: 0; border: 0; padding: 0px; text-align: center; vertical-align: middle;'>" + "<b style='border: 0; padding: 0px; margin: 0px; background: transparent;'>" + this.value.day + "</b>" + "</div>");
                }
                else {
                    this.calendarButtonContent.html("<div style='line-height: 16px; background: transparent; margin: 0; border: 0; padding: 0px; text-align: center; vertical-align: middle;'>" + "<b style='border: 0; padding: 0px; margin: 0px; background: transparent;'>" + '' + "</b>" + "</div>");
                }
            }

            var editorIndex = this.editors.indexOf(this.activeEditor);
            var currentItem = this.items[editorIndex];
        },

        _internalSetValue: function (date) {
            this.value._setYear(parseInt(date.year));
            this.value._setDay(date.day);
            this.value._setMonth(date.month);
            this.value._setHours(date.hour);
            this.value._setMinutes(date.minute);
            this.value._setSeconds(date.second);
            this.value._setMilliseconds(date.milisecond);
        },

        _raiseEvent: function (id, arg) {
            var evt = this.events[id];
            var args = {};
            args.owner = this;
            if (arg == null) {
                arg = new Date();
            }
            var key = arg.charCode ? arg.charCode : arg.keyCode ? arg.keyCode : 0;
            var result = true;
            var isreadOnly = this.readonly;
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            event.args.date = this.getDate();
            if (this.selectionMode == 'range') {
                event.args.date = this.getRange();
            }

            if (this.host.css('display') == 'none')
                return true;

            if (id != 2 && id != 3) {
                result = this.host.trigger(event);
            }
            var me = this;

            if (!isreadOnly) {
                if (id == 2 && !this.disabled) {
                    setTimeout(function () {
                        me.isEditing = true;
                        me._selectGroup(-1);
                    }, 25);
                }
            }


            if (id == 4) {
                if (isreadOnly || this.disabled) {
                    return false;
                }

                result = this._handleKeyDown(arg, key);
            }

            else if (id == 5) {
                if (isreadOnly || this.disabled) {
                    return false;
                }


            }
            else if (id == 6) {
                if (isreadOnly || this.disabled) {
                    return false;
                }

                result = this._handleKeyPress(arg, key)
            }

            return result;
        },

        _doLeftKey: function () {
            if (this.activeEditor != null) {
                if (!this.isEditing) this.isEditing = true;

                var lastEditor = this.activeEditor;
                var newEditor = false;
                var index3 = this.editors.indexOf(this.activeEditor);
                var tmpIndex3 = index3;

                if (this.enableAbsoluteSelection) {
                    if (index3 >= 0 && this.activeEditor.positions > 0) {
                        this.activeEditor.positions--;
                        this._selectGroup(index3);
                        return;
                    }
                }

                while (index3 > 0) {
                    this.activeEditor = this.editors[--index3];
                    this._selectGroup(index3);
                    if (this.items[index3].type != 'ReadOnly') {
                        newEditor = true;
                        break;
                    }
                }
                if (!newEditor) {
                    if (tmpIndex3 >= 0) {
                        this.activeEditor = this.editors[tmpIndex3];
                    }
                }
                if (this.activeEditor != null && lastEditor != this.activeEditor) {
                    if (this.items[index3].type != 'ReadOnly') {
                        if (this.enableAbsoluteSelection) {
                            this.activeEditor.positions = this.activeEditor.maxEditPositions - 1;
                        }
                        else {
                            this.activeEditor.positions = 0;
                        }
                    }
                }

                if (this.activeEditor != lastEditor) {
                    this._validateValue();
                    this._updateText();
                    this._selectGroup(this.editors.indexOf(this.activeEditor));
                }
            }
        },

        _doRightKey: function () {
            if (this.activeEditor != null) {
                if (!this.isEditing) this.isEditing = true;

                var lastEditor = this.activeEditor;
                var newEditor = false;
                var index4 = this.editors.indexOf(this.activeEditor);
                var tmpIndex3 = index4;

                if (this.enableAbsoluteSelection) {
                    if (index4 >= 0 && this.activeEditor.positions < this.activeEditor.maxEditPositions - 1) {
                        this.activeEditor.positions++;
                        this._selectGroup(index4);
                        return;
                    }
                }

                while (index4 <= this.editors.length - 2) {
                    this.activeEditor = this.editors[++index4];
                    this._selectGroup(index4);
                    if (this.items[index4].type != 'ReadOnly') {
                        if (this.items[index4].type == 'Day' && this.items[index4].format.length > 2)
                            break;

                        if (this.items[index4].type == 'FORMAT_AMPM')
                            break;

                        newEditor = true;
                        break;
                    }
                }
                if (!newEditor) {
                    if (tmpIndex3 >= 0) {
                        this.activeEditor = this.editors[tmpIndex3];
                    }
                }
                if (this.activeEditor != null && this.activeEditor != lastEditor) {
                    if (this.items[index4].type != 'ReadOnly') {
                        this.activeEditor.positions = 0;
                    }
                }

                if (this.activeEditor != lastEditor) {
                    this._validateValue();
                    this._updateText();
                    this._selectGroup(this.editors.indexOf(this.activeEditor));
                }
            }
        },


        _saveSelectedText: function () {
            var selection = this._selection();
            var text = "";
            var allText = this.dateTimeInput.val();
            if (selection.start > 0 || selection.length > 0) {
                for (i = selection.start; i < selection.end; i++) {
                    text += allText[i];
                }
            }
            window.clipboardData.setData("Text", text);
            return text;
        },

        _selectWithAdvancePattern: function () {
            var editorIndex = this.editors.indexOf(this.activeEditor);
            var canAdvance = false;
            if (this.items[editorIndex].type != 'ReadOnly' && this.items[editorIndex].type != 'Format_AMPM') {
                canAdvance = true;
            }

            if (!canAdvance)
                return;

            var numericEditor = this.activeEditor;

            if (numericEditor != null) {
                var canSelectRight = numericEditor.positions == numericEditor.maxEditPositions;
                if (canSelectRight) {
                    this.editorText = "";
                    var editValue = numericEditor.value;
                    var needValueUpdate = false;

                    switch (this.items[editorIndex].type) {
                        case 'FORMAT_AMPM':
                            if (editValue < 0) {
                                editValue = 0;
                            }
                            else if (editValue > 1) {
                                editValue = 1;
                            }
                            break;
                        case 'Character':
                            break;
                        case 'Day':
                            if (editValue < 1) {
                                editValue = 1;
                            }
                            else if (editValue > 31) {
                                editValue = 31;
                            }
                            break;
                        case 'FORMAT_hh':
                        case 'FORMAT_HH':
                            if (editValue < 0) {
                                editValue = 0;
                            }
                            else if (editValue > 23) {
                                editValue = 23;
                            }
                            break;
                        case 'Millisecond':
                            if (editValue < 0) {
                                editValue = 0;
                            }
                            else if (editValue > 99) {
                                editValue = 99;
                            }
                            break;
                        case 'Minute':
                            if (editValue < 0) {
                                editValue = 0;
                            }
                            else if (editValue > 59) {
                                editValue = 59;
                            }
                            break;
                        case 'Month':
                            if (editValue < 1) {
                                editValue = 1;
                            }
                            else if (editValue > 12) {
                                editValue = 12;
                            }
                            break;
                        case 'ReadOnly':
                            break;
                        case 'Second':
                            if (editValue < 0) {
                                editValue = 0;
                            }
                            else if (editValue > 59) {
                                editValue = 59;
                            }
                            break;
                        case 'Year':
                            if (editValue < this.minDate.year) {
                                editValue = this.minDate.year;
                            }
                            else if (editValue > this.maxDate.year) {
                                editValue = this.maxDate.year;
                            }
                            break;
                    }

                    if (numericEditor.value != editValue) {
                        needValueUpdate = true;
                    }

                    if (!needValueUpdate) {
                        this.isEditing = false;
                        this._validateValue();
                        this._updateText();
                        this.isEditing = true;
                        this._doRightKey();
                        return true;
                    }

                    return false;
                }
            }
        },


        _handleKeyPress: function (e, key) {
            var selection = this._selection();
            var rootElement = this;
            if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */) {
                return true;
            }

            if (key == 8) {
                if (selection.start > 0) {
                    rootElement._setSelectionStart(selection.start);
                }
                return false;
            }

            if (key == 46) {
                if (selection.start < this.items.length) {
                    rootElement._setSelectionStart(selection.start);
                }

                return false;
            }

            if (selection.start >= 0) {
                var letter = String.fromCharCode(key);
                var digit = parseInt(letter);
                if (!isNaN(digit)) {
                    if (this.container.css('display') == 'block') {
                        this.hideCalendar();
                    }

                    this.updateValue();
                    this._updateText();
                    var inserted = false;
                    var activeItem = this.editors.indexOf(this.activeEditor);
                    var dateTimeEditor = null;
                    this.isEditing = true;
                    if (activeItem.type != "ReadOnly" && activeItem.type != "FORMAT_AMPM") {
                        dateTimeEditor = this.activeEditor;
                    }

                    if (dateTimeEditor != null && dateTimeEditor.positions == 0) {
                        this.editorText = "";
                    }

                    if (this.activeEditor == null) {
                        this.activeEditor = this.editors[0];
                    }
                    if (this.activeEditor == null) return false;
                    this.activeEditor.insert(letter);
                    if (dateTimeEditor != null && this.editorText.length >= dateTimeEditor.maxEditPositions) {
                        this.editorText = "";
                    }

                    this.editorText += letter;
                    var advanced = this._selectWithAdvancePattern();

                    if (this.activeEditor.positions == this.activeEditor.maxEditPositions) {
                        var lastEditorIndex = this._getLastEditableEditorIndex();
                        if (this.editors.indexOf(this.activeEditor) == lastEditorIndex && advanced && this.enableAbsoluteSelection) {
                            this.activeEditor.positions = this.activeEditor.maxEditPositions - 1;
                        }
                        else {
                            this.activeEditor.positions = 0;
                        }
                    }

                    inserted = true;

                    this.updateValue();
                    this._updateText();
                    this._selectGroup(this.editors.indexOf(this.activeEditor));

                    return false;
                }
            }
            var specialKey = this._isSpecialKey(key);
            return specialKey;
        },

        _getLastEditableEditorIndex: function () {
            var i = 0;
            var me = this;
            for (itemIndex = this.items.length - 1; itemIndex >= 0; itemIndex--) {
                if (this.items[itemIndex].type != 'ReadOnly') {
                    return itemIndex;
                }
            }

            return -1;
        },

        _handleKeyDown: function (e, key) {
            if (e.keyCode == 115) {
                if (this.isOpened()) {
                    this.hideCalendar();
                    return false;
                }
                else if (!this.isOpened()) {
                    this.showCalendar();
                    return false;
                }
            }

            if (e.altKey) {
                if (e.keyCode == 38) {
                    if (this.isOpened()) {
                        this.hideCalendar();
                        return false;
                    }
                }
                else if (e.keyCode == 40) {
                    if (!this.isOpened()) {
                        this.showCalendar();
                        return false;
                    }
                }
            }

            if (this.isOpened()) {
                return;
            }

            var selection = this._selection();
            if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */) {
                this._saveSelectedText(e);
                return false;
            }

            if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */) return false;

            if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
            || (e.shiftKey && key == 45)) {

                return false;
            }

            if (key == 8 || key == 46) {
                if (!e.altKey && !e.ctrlKey && key == 46) {
                    this.isEditing = false;
                    this.setDate(null);
                }
                else {
                    if (this.activeEditor != null) {
                        var activeEditorIndex = this.editors.indexOf(this.activeEditor);
                        if (this.activeEditor.positions >= 0) {
                            var formattedValue = $.global.format(Number(this.activeEditor.value), "d" + this.activeEditor.maxEditPositions, this.culture)
                            tmp = formattedValue;
                            tmp = tmp.substring(0, this.activeEditor.positions) + '0' + tmp.substring(this.activeEditor.positions + 1);
                            if (parseInt(tmp) < this.activeEditor.minValue) {
                                tmp = $.global.format(Number(this.activeEditor.minValue), "d" + this.activeEditor.maxEditPositions, this.culture)
                            }

                            if (this.enableAbsoluteSelection) {
                                this.activeEditor.value = tmp;
                            }
                            else this.activeEditor.value = this.activeEditor.minValue;

                            this._validateValue();
                            this._updateText();

                            if (key == 8) {
                                var myself = this;

                                if (this.enableAbsoluteSelection && this.activeEditor.positions > 0) {
                                    setTimeout(function () {
                                        myself.activeEditor.positions = myself.activeEditor.positions - 1;
                                        myself._selectGroup(activeEditorIndex);
                                    }, 10);
                                }
                                else {
                                    setTimeout(function () {
                                        myself._doLeftKey();
                                    }, 10);
                                }
                            }
                            else this._selectGroup(activeEditorIndex);
                        }
                        else this._doLeftKey();
                    }
                }
                return false;
            }

            if (key == 38) {
                this.spinUp();
                return false;
            }
            else if (key == 40) {
                this.spinDown();
                return false;
            }

            if (key == 37) {
                this._doLeftKey();
                return false;
            }
            else if (key == 39) {
                this._doRightKey();
                return false;
            }

            var specialKey = this._isSpecialKey(key);

            if (!$.browser.mozilla)
                return true;

            return specialKey;
        },


        _isSpecialKey: function (key) {
            if (key != 8 /* backspace */ &&
			key != 9 /* tab */ &&
			key != 13 /* enter */ &&
			key != 35 /* end */ &&
			key != 36 /* home */ &&
			key != 37 /* left */ &&
			key != 39 /* right */ &&
			key != 27 /* right */ &&
			key != 46 /* del */
		    ) {
                return false;
            }

            return true;
        },


        _selection: function () {
            if ('selectionStart' in this.dateTimeInput[0]) {
                var e = this.dateTimeInput[0];
                var selectionLength = e.selectionEnd - e.selectionStart;
                return { start: e.selectionStart, end: e.selectionEnd, length: selectionLength, text: e.value };
            }
            else {
                var r = document.selection.createRange();
                if (r == null) {
                    return { start: 0, end: e.value.length, length: 0 }
                }

                var re = this.dateTimeInput[0].createTextRange();
                var rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);
                var selectionLength = r.text.length;

                return { start: rc.text.length, end: rc.text.length + r.text.length, length: selectionLength, text: r.text };
            }
        },

        _selectGroup: function (value) {
            if (this.host.css('display') == 'none')
                return;

            var selection = this._selection();
            var str = "";
            var currentString = "";
            var activeEditor = null;
            for (i = 0; i < this.items.length; i++) {
                currentString = this.items[i].dateParser(this.value);
                if (this.isEditing && this.items[i].type != 'ReadOnly') {
                    var isReadOnlyDay = this.items[i].type == 'Day' && this.items[i].format.length > 2;
                    if (this.items[i].type == 'FORMAT_AMPM') {
                        isReadOnlyDay = true;
                    }

                    if (!isReadOnlyDay) {
                        currentString = this.items[i].dateParserInEditMode(new Number(this.editors[i].value), "d" + this.editors[i].maxEditPositions);
                        while (currentString.length < this.editors[i].maxEditPositions) {
                            currentString = '0' + currentString;
                        }
                    }
                }

                str += currentString;

                if (this.items[i].type == 'ReadOnly')
                    continue;

                if (this.items[i].type == 'Day' && this.items[i].format.length > 2)
                    continue;

                if (this.items[i].type == 'FORMAT_AMPM')
                    continue;

                if (value != undefined && value != -1) {
                    if (i >= value) {
                        var selectionStart = str.length - currentString.length;
                        var selectionLength = currentString.length;

                        if (this.enableAbsoluteSelection) {
                            if (!isNaN(parseInt(currentString)) && this.isEditing && value != -1) {
                                selectionLength = 1;
                                selectionStart += this.editors[i].positions;
                            }
                        }

                        if (selectionStart == this.dateTimeInput.val().length) {
                            selectionStart--;
                        }

                        this._setSelection(selectionStart, selectionStart + selectionLength);
                        activeEditor = this.editors[i];
                        this.activeEditor = activeEditor;
                        break;
                    }
                }
                else if (str.length >= selection.start) {
                    activeEditor = this.editors[i];
                    this.activeEditor = activeEditor;
                    var selectionStart = str.length - currentString.length;
                    var selectionLength = 1;
                    if (this.enableAbsoluteSelection) {
                        if (!isNaN(parseInt(currentString)) && this.isEditing && value != -1) {
                            selectionLength = 1;
                            selectionStart += this.editors[i].positions;
                        }
                    }
                    else selectionLength = currentString.length;

                    this._setSelection(selectionStart, selectionStart + selectionLength);
                    break;
                }
            }

            if (i < this.items.length && value == -1) {
                if (this.items[i].type != 'ReadOnly') {
                    this.activeEditor.positions = 0;
                }
            }

            var newSelection = this._selection();
            if (newSelection.length == 0) {
                if (newSelection.start > 0) {
                    var editorIndex = this._getLastEditableEditorIndex();
                    if (editorIndex >= 0) {
                        this._selectGroup(editorIndex);
                    }
                }
            }
        },

        _getLastEditableEditorIndex: function () {
            var editorIndex = -1;
            for (i = 0; i < this.editors.length; i++) {
                if (this.items[i].type == 'ReadOnly')
                    continue;

                if (this.items[i].type == 'Day' && this.items[i].format.length > 2)
                    continue;

                if (this.items[i].type == 'FORMAT_AMPM')
                    continue;

                editorIndex = i;
            }

            return editorIndex;
        },


        _setSelection: function (start, end) {
            if ('selectionStart' in this.dateTimeInput[0]) {
                //  this.dateTimeInput[0].focus();
                this.dateTimeInput[0].setSelectionRange(start, end);
            }
            else {
                var range = this.dateTimeInput[0].createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        },


        _setSelectionStart: function (start) {
            this._setSelection(start, start);
        },

        destroy: function () {
            this.host
			.removeClass("jqx-rc-all")
			;

            this._removeHandlers();
            this.dateTimeInput.remove();
            this.host.remove();
        },

        refresh: function (initialRefresh) {
            if (initialRefresh != true) {
                this._setSize();
                this._arrange();
            }
        },

        _setOption: function (key, value) {
            if (key === "value") {
                if (value == null) {
                    this.value = value;
                    this._refreshValue();
                }
                else {
                    if (!this.value._equalDate(value.dateTime)) {
                        this.value = value;
                        this._refreshValue();
                    }
                }
            }
            if (key == 'maxDate') {
                this.calendar.maxDate = value;
            }

            if (key == 'minDate') {
                this.calendar.minDate = value;
            }

            if (key == 'showCalendarButton') {
                if (value) {
                    this.calendarButton.css('display', 'block');
                }
                else {
                    this.calendarButton.css('display', 'none');
                }
            }

            if (key == "disabled") {
                this.dateTimeInput.attr("disabled", value);
            }

            if (key == "readonly") {
                this.readonly = value;
                this.dateTimeInput.css("readonly", value);
            }

            if (key == "textAlign") {
                this.dateTimeInput.css("text-align", value);
                this.textAlign = value;
            }

            if (key == "width") {
                this.width = value;
                this.width = parseInt(this.width);
                this._arrange();
            }
            else if (key == "height") {
                this.height = value;
                this.height = parseInt(this.height);
                this._arrange();
            }
        },


        _refreshValue: function () {
            this._updateEditorsValue();
            this.updateValue();
            this._validateValue();
            this._updateText();
        }
    })
})(jQuery);


(function ($) {
    $.jqx._jqxDateTimeInput.DateTimeFormatItem = {};
       $.extend($.jqx._jqxDateTimeInput.DateTimeFormatItem, { 

    _create: function(format, type, culture)
    {
        this.format = format;
        this.type = type;
        this.culture = culture;
        return this;
    },

    _itemValue: function()
    {
        switch (this.format.length)
        {
            case 1:
                return 9;
            case 2:
                return 99;
            case 3:
            default:
                return 999;
        }
    },

    _maximumValue: function()
    {
        switch (this.format.length)
        {
            case 1:
                return 9;
            case 2:
                return 99;
            case 3:
            default:
                return 999;
        }     
    },

    dateParser: function(formattedDateTime)
    {
        if (formattedDateTime == null)
            return "";
        var value = $.global.format(formattedDateTime.dateTime, this.format.length == 1 ? '%' + this.format: this.format, this.culture);
        return value;
    },

    dateParserInEditMode: function(val, format)
    {
        if (val == null)
            return "";

        var value = $.global.format(val.toString(), format.length == 1 ? '%' + format: format, this.culture);
        return value;
    },

    getDateTimeEditorByItemType: function(value)
    {
        switch (this.type)
        {
            case 'FORMAT_AMPM':
                var aMpMEditor = $.jqx._jqxDateTimeInput.AmPmEditor._createAmPmEditor(this.format, value.hour / 12, $.global.culture.calendar.AM[0], $.global.culture.calendar.PM[0], this);
                var newEditor = $.extend({}, aMpMEditor); 
                return newEditor;
             case 'Character':
                return null;
            case 'Day':
                var year = value.year;
                var month = value.month;
                var dayNames;
                if (this.format.length == 3)
                    dayNames = $.global.culture.calendar.days.namesAbbr;
                else if (this.format.length > 3)
                    dayNames = $.global.culture.calendar.days.names;
                else
                    dayNames = null;

                var val = value.day;
                if (dayNames != null)
                    val =  value.dayOfWeek + 1;

                var dayEditor = $.jqx._jqxDateTimeInput.DateEditor._createDayEditor(value, value.day, 1, value._daysInMonth(year, month), this.format.length == 1 ? 1 : 2, 2, dayNames, this);
                var newEditor = $.extend({}, dayEditor); 
                return newEditor;
            case 'FORMAT_hh':
                var initialValue = value.hour % 12;
                if (initialValue == 0)
                    initialValue = 12;
                var hhEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(initialValue, 0, 23, this.format.length == 1 ? 1 : 2, 2, this);
                var newEditor = $.extend({}, hhEditor); 
                return newEditor;
            case 'FORMAT_HH':
                var HHEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.hour, 0, 23, this.format.length == 1 ? 1 : 2, 2, this);
                var newEditor = $.extend({}, HHEditor); 
                return newEditor;
            case 'Millisecond':
                var milisecondEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.millisecond / this._itemValue(), 0, this._maximumValue(), this.format.length, this.format.length, this);
                var newEditor = $.extend({}, milisecondEditor); 
                return newEditor;
            case 'Minute':
                var minuteEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.minute, 0, 59, this.format.length == 1 ? 1 : 2, 2, this);
                var newEditor = $.extend({}, minuteEditor); 
                return newEditor;
           case 'Month':
                var monthNames;
                if (this.format.length == 3)
                    monthNames = $.global.culture.calendar.months.namesAbbr;
                else if (this.format.length > 3)
                    monthNames = $.global.culture.calendar.months.names;
                else
                    monthNames = null;
                var monthEditor = $.jqx._jqxDateTimeInput.DateEditor._createMonthEditor(value.month, this.format.length == 2 ? 2 : 1, monthNames, this);
                var newEditor = $.extend({}, monthEditor); 
                return newEditor;
            case 'ReadOnly':
                return $.jqx._jqxDateTimeInput.DisabledEditor._create(this.format.length, value.day, this);
            case 'Second':
                var secondEditor = $.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(value.second, 0, 59, this.format.length == 1 ? 1 : 2, 2, this);
                var newEditor = $.extend({}, secondEditor); 
                return newEditor;
          case 'Year':
               var yearEditor = $.jqx._jqxDateTimeInput.DateEditor._createYearEditor(value.year, this.format.length, this);
               var newEditor = $.extend({}, yearEditor); 
               return newEditor;
        }

        return null;
    },
    //[optimize]
    getDateTimeWithOffset: function(offset, value)
    {
        if (offset == null || value == null)
        {
		    throw 'Invalid arguments';
        }

        var hours = value.hour;
        var minutes = value.minute;
        var seconds = value.second;
        var days = value.day();
        var months = value.month();
        var years = value.year();

        var dateTime = value;
        var newDateTime = value;

        switch (this.type)
        {
            case 'FORMAT_AMPM':
                hours = 12 * (offset - hours / 12);
                break;
            case 'Day':
                days = offset - days;
                if (days != offset)
                {
                    if (offset == 29 && months == 2)
                    {
                        newDateTime = dateTime;
                        while (!DateTime._isLeapYear(newDateTime.year))
                        {
                            newDateTime = newDateTime._addYears(1);
                        }

                            newDateTime = newDateTime._addDays(offset - newDateTime.day);
                    }
                    else
                    {
                        newDateTime = dateTime._addMonths(1 - dateTime.month);
                        newDateTime = newDateTime._addDays(offset - dateTime.day);
                    }
                }
                break;
            case 'FORMAT_hh':
                var res = offset == 12 ? 0 : offset;
                dateTime = dateTime._addHours(res - (dateTime.hour % 12));
                break;
            case 'FORMAT_HH':
                dateTime = dateTime._addHours(offset - dateTime.hour);
                break;
            case 'Millisecond':
                dateTime = dateTime._addMilliseconds(offset * this._itemValue() - dateTime.millisecond);
                break;
            case 'Minute':
                dateTime = dateTime._addMinutes(offset - dateTime.minute);
                break;
            case 'Month':
                newDateTime = dateTime._addMonths(offset - dateTime.month);
                if (offset == 2 && dateTime.day == 29 && dateTime.day != newDateTime.day
                    )
                {
                    newDateTime = dateTime;
                    while (!dateTime.IsLeapYear(newDateTime.year))
                    {
                        newDateTime = newDateTime._addYears(1);
                    }

                    newDateTime = newDateTime._addMonths(offset - newDateTime.month);
                }

                dateTime = newDateTime;
                break;
            case 'ReadOnly':
                break;
            case 'Second':
                dateTime = dateTime._addSeconds(offset - dateTime.second);

                break;
            case 'Year':
                if (offset == 0)
                    offset = 1;

                dateTime = dateTime._addYears(offset - value.year);
                break;
        }
        return dateTime;
    }
    });
})(jQuery);

(function ($) {
         $.jqx._jqxDateTimeInput.DateEditor = $.extend($.jqx._jqxDateTimeInput.DateEditor, { 

        formatValueLength: 0,
        handleYears: false,
        handleDays: false,
        handleMonths: false,
        positions: 0,
        value: 0,
        minEditPositions : 0,
        maxEditPositions: 0,
        minValue: 0,
        maxValue: 0,
        item: null,
        dateTimeFormatInfo: null,
        days: null,
        dateTimeMonths: null,
        lastDayInput: null,

        minPositions : function()
        {
            if (this.handleYears)
            {
                if (this.formatValueLength == 4)
                {
                    if (this.positions <= 1)
                    {
                        return 1;
                    }
                    else
                    {
                        if (this.positions >= 4)
                        {
                            return 4;
                        }
                    }

                    return this.positions;
                }
                else
                {
                    return this.minEditPositions;
                }
            }
            return this.minEditPositions;   
        },
        //[optimize]
        initializeFields: function(minValue, maxValue, minEditPositions, maxEditPositions, item)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.minEditPositions = minEditPositions;
            this.maxEditPositions = maxEditPositions;
            this.updateActiveEditor(minValue);
            this.item = item;
        },
        //[optimize]
        _createYearEditor: function(baseYear, formatValueLength, item)
        {
            $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);
            this.initializeFields(formatValueLength <= 4 ? 0 : 0, formatValueLength < 4 ? 99 : 9999, (formatValueLength == 2) ? 2 : 1, formatValueLength > 3 ? 4 : 2, item);
            this.initializeYearEditor(baseYear, formatValueLength, item.culture);
            this.handleYears = true;
            return this;
        },
        //[optimize]
        initializeYearEditor: function(baseYear, formatValueLength, info)
        {
            this.formatValueLength = formatValueLength;
            this.dateTimeFormatInfo = info;

            var realYear = baseYear;
            realYear = Math.min(realYear, 9999);
            realYear = Math.max(realYear, 1);
            realYear = this.formatValueLength < 4 ? realYear % 100 : realYear;
            this.updateActiveEditor(realYear);
            this.value = realYear;
        },
        //[optimize]
        updateActiveEditor: function(newValue)
        {
            this.value = newValue;
            this.positions = 0;
        },
        //[optimize]
        _createDayEditor: function(editedValue, initialValue, minValue, maxValue, minEditingPositions, maxEditingPositions, dayKeys, item)
        {
            $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);
            this.initializeFields(minValue, maxValue, 1, maxEditingPositions, item);
            this.currentValue = editedValue;
            this.value = initialValue;
            this.days = dayKeys;
            this.handleDays = true;
            return this;
        },
        //[optimize]
        getDayOfWeek: function(val)
        {
            if (typeof this.currentValue == $.jqx._jqxDateTimeInput.DateTime)
            {
                 this.currentValue.dayOfWeek();
            }
            return val;
        },
        //[optimize]
        defaultTextValue: function()
        {
            var value = this.value;
            var minPositions = this.minEditPositions;
            var minFormattedPositions = minPositions;
            var formattedValue = $.global.format(this.value, "d" + minFormattedPositions, "");

            return formattedValue;
        },
        //[optimize]
        textValue : function()
        {
            if (this.handleDays)
            {
                if (this.days == null)
                {
                    return this.defaultTextValue();
                }
                else
                {
                    var val = (this.value % 7) + 1;
                    val = this.getDayOfWeek(val);
                    return this.days[val];
                }
            }
            else if (this.handleMonths)
            {
                if (this.dateTimeMonths == null || this.value < 1 || this.value > 12)
                {
                    return this.defaultTextValue();
                }
                else
                {
                    return this.dateTimeMonths[this.value - 1];
                }
            }
            return this.defaultTextValue();
       },
       //[optimize]
        defaultInsertString: function(inseredValue)
        {
            if (inseredValue == null)
            {
                return this.deleteValue();
            }

            if (inseredValue.length == 0)
            {
                 return this.deleteValue();
            }

           var character = inseredValue.substring(0, 1);
           if (isNaN(character))
           {
              return;
           }

           var res = true;
           var tmp;
           var entries = 1; 
           var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
           tmp = formattedValue;
           if (this.positions >= this.maxEditPositions)
           {
              this.positions = 0;
           }
            
           tmp = tmp.substring(0, this.positions) + character + tmp.substring(this.positions + 1);
           tmp = this.setValueByString(tmp, entries);
           return true;
        },
        //[optimize]
        setValueByString: function(tmp, entries)
        {
            tmp = this.fixValueString(tmp);
            var nextValue = new Number(tmp);
            this.value = nextValue;
            this.positions += entries;
            return tmp;
        },
        //[optimize]
        fixValueString: function(tmp)
        {
            if (tmp.length > this.maxEditPositions)
            {
                tmp = tmp.substring(tmp.length - this.maxEditPositions);
            }

//            var enteredDigit = parseInt(tmp[this.positions]);
//            var pos = this.maxEditPositions - 1;
//            while(parseInt(tmp) > this.maxValue)
//            {
//                if (pos < 0)
//                    break;

//                if (tmp[pos] > 0)
//                {
//                    var digit = parseInt(tmp[pos])-1;
//                    tmp = tmp.substring(0, pos) + digit + tmp.substring(pos+1);
//                }
//                else pos--;
//            }

            return tmp;
        },
        //[optimize]
        initializeValueString: function(formattedValue)
        {
            var tmp;
            tmp = "";

            if (this.hasDigits())
            {
                tmp = formattedValue;
            }
            return tmp;
        },
        //[optimize]
        deleteValue: function()
        {
            if (this.value == this.minValue && this.hasDigits() == false)
            {
                return false;
            }

            this.updateActiveEditor(this.minValue);
            return true;
        },
        //[optimize]
        hasDigits: function()
        {
            return this.positions > 0;
        },
        //[optimize]
        insert: function(input)
        {
            if (this.handleDays)
            {
                if (this.days != null)
                {
                    var res = false;
                    res = this.insertLongString(input, res);
                    if (res)
                    {
                        return res;
                    }
                    res = this.insertShortString(input, res);
                    if (res)
                    {
                        return res;
                    }
                }              

                if (this.value == 1 && this.lastDayInput != null && this.lastDayInput.toString().length > 0 && this.lastDayInput.toString() == "0")
                {
                    this.value = 0;
                }
               
                this.lastDayInput = input;

                return this.defaultInsertString(input);
            }
            else if ( this.handleMonths)
            {
                if (this.dateTimeMonths != null)
                {
                    var res = false;
                    res = this.insertLongString2(input, res);

                    if (res)
                    {
                        return res;
                    }

                    res = this.insertShortString2(input, res);

                    if (res)
                    {
                        return res;
                    }
                }
            }

            return this.defaultInsertString(input);     
        },
        //[optimize]
        insertShortString: function(input, res)
        {
            if (input.length == 1)
            {
                for (i = 0; i < 6; ++i)
                {
                    var testedDay = (this.value + i) % 7 + 1;
                    var dayName = this.days[testedDay - 1];
                    if (dayName.substring(0, 1) == input)
                    {
                        this.updateActiveEditor(testedDay);
                        res = true;
                        return res;
                    }
                }
            }
            return res;
        },
        //[optimize]
        insertLongString: function(input, res)
        {
            if (input.length > 0)
            {
                for (i = 0; i < 6; ++i)
                {
                    var testedDay = (this.value + i) % 7 + 1;
                    if (this.days[testedDay - 1] == input)
                    {
                        this.updateActiveEditor(testedDay);
                        res = true;
                        return res;
                    }
                }
            }
            return res;
        },
        //[optimize]
        _createMonthEditor: function(baseValue, positions, monthsNames, item)
        {
            $.jqx._jqxDateTimeInput.DateEditor = $.extend(true, {}, this);

            this.initializeFields(1, 12, positions, 2, item);
            this.dateTimeMonths = monthsNames;
            this.value = baseValue;
            if (this.dateTimeMonths != null && this.dateTimeMonths[12] != null && this.dateTimeMonths[12].length > 0)
                this.dateTimeMonths = null;
            this.handleMonths = true;
            return this;
        }, 
        //[optimize]
        insertLongString2: function(input, res)
        {
            if (input.length > 0)
            {
                for (i = 0; i < 11; ++i)
                {
                    month = (this.value + i) % 12 + 1;
                    if (this.dateTimeMonths[month - 1] == input)
                    {
                        this.updateActiveEditor(month);
                        res = true;
                        return res;
                    }
                }
            }
            return res;
        },
        //[optimize]
        insertShortString2: function(input, res)
        {
            if (input.length == 1)
            {
                for (i = 0; i < 11; ++i)
                {
                    var month = (this.value + i) % 12 + 1;
                    var monthName = this.dateTimeMonths[month - 1];
                    if (monthName.substring(0, 1) == input)
                    {
                        this.updateActiveEditor(month);
                        res = true;
                        return res;
                    }
                }
            }
            return res;
        },
        //[optimize]
        correctMaximumValue : function(val)
        {
            if (val > this.maxValue)
            {
                val = this.minValue;
            }
            return val;
        },
        //[optimize]
        correctMinimumValue: function(val)
        {
            if (val < this.minValue)
            {
                val = this.maxValue;
            }
            return val;
        },
        //[optimize]
        increaseValue: function(byPosition)
        {
            var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
            var digit = formattedValue.toString()[this.positions];
            digit = parseInt(digit) + 1;
            if (digit > 9 ) digit = 0;
            
            if (!byPosition)
            {
                var tmpValue = this.value + 1;
                tmpValue = this.correctMaximumValue(tmpValue);
                this.updateActiveEditor(tmpValue);
                return true;          
            }

            var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);
          
            if (val != this.value || this.hasDigits())
            {
                this.updateActiveEditor(val);
                return true;
            }
            else
            {
                return false;
            }
        },
        //[optimize]
        decreaseValue: function(byPosition)
        {
            var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
            var digit = formattedValue.toString()[this.positions];
            digit = parseInt(digit) - 1;
            if (digit < 0 ) digit = 9;

            if (!byPosition)
            {
                var tmpValue = this.value - 1;
                tmpValue = this.correctMinimumValue(tmpValue);
                this.updateActiveEditor(tmpValue);
                return true;          
            }

            var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);
          
            if (val != this.value || this.hasDigits())
            {
                this.updateActiveEditor(val);
                return true;
            }
            else
            {
                return false;
            }
        },
        //[optimize]
        getDateTimeItem: function()
        {
            return this.item;
        }
    })
})(jQuery);

//Number Editor
(function ($) {
     $.jqx._jqxDateTimeInput.NumberEditor = {};
       $.extend($.jqx._jqxDateTimeInput.NumberEditor, { 

        formatValueLength: 0,
        positions: 0,
        value: 0,
        minEditPositions : 0,
        maxEditPositions: 0,
        minValue: 0,
        maxValue: 0,
        item: null,
        //[optimize]
        minPositions : function()
        {
            if (this.handleYears)
            {
                if (this.formatValueLength == 4)
                {
                    if (this.positions <= 1)
                    {
                        return 1;
                    }
                    else
                    {
                        if (this.positions >= 4)
                        {
                            return 4;
                        }
                    }

                    return this.positions;
                }
                else
                {
                    return this.minEditPositions;
                }
            }
            return this.minEditPositions;   
        },
        //[optimize]
        _createNumberEditor: function(value, minValue, maxValue, minEditPositions, maxEditPositions, item)            
        {
            $.jqx._jqxDateTimeInput.NumberEditor = $.extend(true, {}, this);
            this.initializeFields(minValue, maxValue, minEditPositions, maxEditPositions, item);
            return this;
         },
        //[optimize]
        initializeFields: function(minValue, maxValue, minEditPositions, maxEditPositions, item)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.minEditPositions = minEditPositions;
            this.maxEditPositions = maxEditPositions;
            this.updateActiveEditor(minValue);
            this.item = item;
        },
        //[optimize]
        updateActiveEditor: function(newValue)
        {
            this.value = newValue;
            this.positions = 0;
        },
        //[optimize]
        getDayOfWeek: function(val)
        {
            if (typeof this.currentValue == $.jqx._jqxDateTimeInput.DateTime)
            {
                 this.currentValue.dayOfWeek();
            }
            return val;
        },
        //[optimize]
        textValue: function()
        {
            var value = this.value;
            var minPositions = this.minEditPositions;
            var minFormattedPositions = minPositions;
            var formattedValue = $.global.format(this.value, "d" + minFormattedPositions, "");

            return formattedValue;
        },
        //[optimize]
        insert: function(inseredValue)
        {
            if (inseredValue == null)
            {
                return this.deleteValue();
            }

            if (inseredValue.length == 0)
            {
                 return this.deleteValue();
            }

           var character = inseredValue.substring(0, 1);
           if (isNaN(character))
           {
              return;
           }

           var res = true;
           var tmp;
           var entries = 1; 
           var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
           tmp = formattedValue;
           if (this.positions >= this.maxEditPositions)
           {
              this.positions = 0;
           }
            
           tmp = tmp.substring(0, this.positions) + character + tmp.substring(this.positions + 1);
           tmp = this.setValueByString(tmp, entries);
           return true;
        },
        //[optimize]
        setValueByString: function(tmp, entries)
        {
            tmp = this.fixValueString(tmp);
            var nextValue = new Number(tmp);
            this.value = nextValue;
            this.positions += entries;
            return tmp;
        },
        //[optimize]
        fixValueString: function(tmp)
        {
            if (tmp.length > this.maxEditPositions)
            {
                tmp = tmp.substring(tmp.length - this.maxEditPositions);
            }

//            var enteredDigit = parseInt(tmp[this.positions]);
//            var pos = this.maxEditPositions - 1;
//            while(parseInt(tmp) > this.maxValue)
//            {
//                if (pos < 0)
//                    break;

//                if (tmp[pos] > 0)
//                {
//                    var digit = parseInt(tmp[pos])-1;
//                    tmp = tmp.substring(0, pos) + digit + tmp.substring(pos+1);
//                }
//                else pos--;
//            }

            return tmp;
        },
        //[optimize]
        initializeValueString: function(formattedValue)
        {
            var tmp;
            tmp = "";

            if (this.hasDigits())
            {
                tmp = formattedValue;
            }
            return tmp;
        },
        //[optimize]
        deleteValue: function()
        {
            if (this.value == this.minValue && this.hasDigits() == false)
            {
                return false;
            }

            this.updateActiveEditor(this.minValue);
            return true;
        },
        //[optimize]
        hasDigits: function()
        {
            return this.positions > 0;
        },
        //[optimize]
        correctMaximumValue : function(val)
        {
            if (val > this.maxValue)
            {
                val = this.minValue;
            }
            return val;
        },
        //[optimize]
        correctMinimumValue: function(val)
        {
            if (val < this.minValue)
            {
                val = this.maxValue;
            }
            return val;
        },
        //[optimize]
        increaseValue: function(byPosition)
        {
            var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
            var digit = formattedValue.toString()[this.positions];
            digit = parseInt(digit) + 1;
            if (digit > 9 ) digit = 0;
            
            if (!byPosition)
            {
                var tmpValue = this.value + 1;
                tmpValue = this.correctMaximumValue(tmpValue);
                this.updateActiveEditor(tmpValue);
                return true;          
            }

            var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);
          
            if (val != this.value || this.hasDigits())
            {
                this.updateActiveEditor(val);
                return true;
            }
            else
            {
                return false;
            }
        },
        //[optimize]
        decreaseValue: function(byPosition)
        {
            var formattedValue = $.global.format(Number(this.value), "d" + this.maxEditPositions, this.culture)     
            var digit = formattedValue.toString()[this.positions];
            digit = parseInt(digit) - 1;
            if (digit < 0 ) digit = 9;

            if (!byPosition)
            {
                var tmpValue = this.value - 1;
                tmpValue = this.correctMinimumValue(tmpValue);
                this.updateActiveEditor(tmpValue);
                return true;          
            }

            var val = formattedValue.substring(0, this.positions) + digit + formattedValue.substring(this.positions + 1);
          
            if (val != this.value || this.hasDigits())
            {
                this.updateActiveEditor(val);
                return true;
            }
            else
            {
                return false;
            }
        },
        //[optimize]
        getDateTimeItem: function()
        {
            return this.item;
        }
    })
})(jQuery);

//DisabledEditor
(function ($) {

   $.jqx._jqxDateTimeInput.DisabledEditor = {};
       $.extend($.jqx._jqxDateTimeInput.DisabledEditor, { 

         _create: function (format, baseValue, am, pm, item) {
            this.format = format;
            this.value = -1;  
            this.item = item;
            return this;
         },

        textValue: function()
        {
            return "";
        },

        insert: function(val)
        {
            return false;
        },

        deleteValue: function()
        {
           return false;
        },

        increaseValue: function()
        {
           return false;
        },

        decreaseValue: function()
        {
            return false;
        },

        getDateTimeItem: function()
        {
            return this.item;
        }
    })
})(jQuery);

//AmPmEditor
(function ($) {

    $.jqx._jqxDateTimeInput.AmPmEditor = {};
       $.extend($.jqx._jqxDateTimeInput.AmPmEditor, { 
         _createAmPmEditor: function (format, baseValue, am, pm, item) {
            this.format = format;
            this.value = baseValue;
            this.amString = am;
            this.pmString = pm;
            this.item = item;

            if (am == pm)
            {
                this.amString  = "<" + am;
                this.pmString = ">" + pm;
            }
            return this;
        },
        //[optimize]
        textValue: function()
        {
           var res = this.amString;
           if (this.value != 0)
           {
               res = this.pmString;
           }
              
           if (this.format.length == 1 && res.length > 1)
           {
               res = res.substring(0, 1);
           }

            return res;
        },
        //[optimize]
        insert: function(val)
        {
            var inserted = val.toString();
            if (inserted.Length == 0)
            {
                return this.deleteValue();
            }

            var res = false;
            if (this.amString.Length > 0
            && this.pmString.Length > 0)
            {
                var amChar = amString[0];
                var newChar = inserted[0];
                var pmChar = pmString[0];

                if (amChar.toString() == newChar.toString())
                {
                    this.value = 0;
                    res = true;

                }
                else if (pmChar.toString() == newChar.toString())
                {
                    this.value = 1;
                    res = true;
                }
            }
            else if (this.pmString.Length > 0)
            {
                this.value = 1;
                res = true;
            }
            else if (this.amString.Length > 0)
            {
                this.value = 0;
                res = true;
            }
          
            return res;
        },
        //[optimize]
        deleteValue: function()
        {
            var isValid = true;

            if (this.amString.Length == 0
                && this.pmString.Length != 0)
            {
                if (this.value == 0)
                {
                    return false;
                }

                this.value = 0;
            }
            else
            {
                if (this.value == 1)
                {
                    return false;
                }

                this.value = 1;
            }
            return isValid;
        },

        increaseValue: function()
        {
           this.value = 1 - this.value;
           return true;
        },

        decreaseValue: function()
        {
            this.increaseValue();
            return true;
        },

        getDateTimeItem: function()
        {
            return this.item;
        }
    })
})(jQuery);

// DateTime 
(function ($) {
    $.jqx._jqxDateTimeInput.getDateTime = function (date)
    {
        var result =
        {
            dateTime: new Date(date),
            daysPer4Years: 0x5b5,
            daysPerYear: 0x16d,
            daysToMonth365:  { 0:0, 1:0x1f, 2:0x3b, 3:90, 4:120, 5:0x97, 6:0xb5, 7:0xd4, 8:0xf3, 9:0x111, 10:0x130, 11:0x14e, 12:0x16d },
            daysToMonth366: { 0:0, 1:0x1f, 2:60, 3:0x5b, 4:0x79, 5:0x98, 6:0xb6, 7:0xd5, 8:0xf4, 9:0x112, 10:0x131, 11:0x14f, 12:0x16e },
            maxValue: 0x2bca2875f4373fff,
            millisPerDay: 0x5265c00,
            millisPerHour: 0x36ee80,
            millisPerMinute: 0xea60,
            millisPerSecond: 0x3e8,
            minTicks: 0,
            minValue: 0,
            ticksPerDay: 0xc92a69c000,
            ticksPerHour: 0x861c46800,
            ticksPerMillisecond: 0x2710,
            ticksPerMinute: 0x23c34600,
            ticksPerSecond: 0x989680,
            hour: date.getHours(),
            minute:  date.getMinutes(),                
            day: date.getDate(),                
            second: date.getSeconds(),
            month: 1+date.getMonth(),
            year: date.getFullYear(),
            millisecond:date.getMilliseconds(),
            dayOfWeek: date.getDay(),
            isWeekend: function(value)
            {
                if (value == undefined || value == null)
                    value = this.dateTime;

                var isWeekend = value.getDay()%6 == 0;
                return isWeekend;
            },
            dayOfYear: function(value)
            {
                if (value == undefined || value == null)
                    value = this.dateTime;

                var firstDay = new Date(value.getFullYear(), 0, 1);
                return Math.ceil((value - firstDay) / 86400000);
            },
            _setDay: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setDate(value);
                this.day = this.dateTime.getDate();
            },
            _setMonth: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setMonth(value-1);
                this.month = 1 + this.dateTime.getMonth();
            },
            _setYear: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setFullYear(value);
                this.year = this.dateTime.getFullYear();
            },
            _setHours: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setHours(value);
                this.hour = this.dateTime.getHours();
            },
            _setMinutes: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setMinutes(value);
                this.minute = this.dateTime.getMinutes();
            },
            _setSeconds: function(value)
            {
                if (value == undefined || value == null)
                    value = 0;

                this.dateTime.setSeconds(value);
                this.second = this.dateTime.getSeconds();
            },
            _setMilliseconds: function(value)
            {
                if (value == undefined || value == null)
                  value = 0;

                this.dateTime.setMilliseconds(value);
                this.millisecond = this.dateTime.getMilliseconds();
            },
            _addDays: function(value)
            {
                var newDate = this.dateTime;
                newDate.setDate(newDate.getDate() + value);
                return newDate;
            },
             _addWeeks: function(value)
            {
                var newDate = this.dateTime;
                newDate.setDate(newDate.getDate() + 7*value);
                return newDate;
            },
            _addMonths: function(value)
            {
                var newDate = this.dateTime;
                newDate.setMonth(newDate.getMonth() + value);
                return newDate;
            },
            _addYears: function(value)
            {
                var newDate = this.dateTime;
                newDate.setFullYear(newDate.getFullYear() + value);
                return newDate;
            },
            _addHours: function(value)
            {
                var newDate = this.dateTime;
                newDate.setHours(newDate.getHours() + value);
                return newDate;
            },
            _addMinutes: function(value)
            {
                var newDate = this.dateTime;
                newDate.setMinutes(newDate.getMinutes() + value);
                return newDate;
            },
            _addSeconds: function(value)
            {
                var newDate = this.dateTime;
                newDate.setSeconds(newDate.getSeconds() + value);
                return newDate;
            },
            _addMilliseconds: function(value)
            {
                var newDate = this.dateTime;
                newDate.setMilliseconds(newDate.getMilliseconds() + value);
                return newDate;
            },
            _isLeapYear: function(year)
            {
                if ((year < 1) || (year > 0x270f))
                {
                    throw "invalid year";
                }
                if ((year % 4) != 0)
                {
                    return false;
                }
                if ((year % 100) == 0)
                {
                    return ((year % 400) == 0);
                }
                return true;
            },
            _dateToTicks: function(year, month, day)
            {
                if (((year >= 1) && (year <= 0x270f)) && ((month >= 1) && (month <= 12)))
                {
                    var numArray = this._isLeapYear(year) ? this.daysToMonth366 : this.daysToMonth365;
                    if ((day >= 1) && (day <= (numArray[month] - numArray[month - 1])))
                    {
                        var year = year - 1;
                        var ticks = ((((((year * 0x16d) + (year / 4)) - (year / 100)) + (year / 400)) + numArray[month - 1]) + day) - 1;
                        return (ticks * 0xc92a69c000);
                    }
                }
            },
            _daysInMonth: function(year, month)
            {
                if ((month < 1) || (month > 12))
                {
                    throw("Invalid month.");
                }
                var arr = this._isLeapYear(year) ? this.daysToMonth366 : this.daysToMonth365;
                return (arr[month] - arr[month - 1]);
            },
            _timeToTicks: function(hour, minute, second)
            {
                var ticks = ((hour * 0xe10) + (minute * 60)) + second;
                return (ticks * 0x989680);
            },
            _equalDate: function(date)
            {
                if (this.year == date.getFullYear() && this.day == date.getDate() && this.month == date.getMonth() + 1)
                    return true;
                      
                return false;
            }
         }
        return result;
    }
})(jQuery);
﻿(function ($) {
    $.jqx.jqxWidget("jqxChart", "", {});

    $.extend($.jqx._jqxChart.prototype,
    {
        createInstance: function (args) {
            if (!$.jqx.dataAdapter) {
                throw 'jqxdata.js is not loaded';
                return;
            }

            this._refreshOnDownloadComlete();

            var self = this;
            this.host.bind('mousemove', function (event) {
                if (this.enabled == false)
                    return;

                event.preventDefault();
                var x = event.pageX || event.clientX || event.screenX;
                var y = event.pageY || event.clientY || event.screenY;

                var pos = self.host.offset();
                x -= pos.left;
                y -= pos.top;

                self.onmousemove(x, y);
            });

            if (this.element.style) {
                var sizeInPercentage = false;
                if (this.element.style.width != null) {
                    sizeInPercentage |= this.element.style.width.toString().indexOf('%') != -1;
                }
                if (this.element.style.height != null) {
                    sizeInPercentage |= this.element.style.height.toString().indexOf('%') != -1;
                }
                if (sizeInPercentage) {
                    $(window).resize(function () {
                        if (self.timer) {
                            clearTimeout(self.timer);
                        }
                        var delay = $.browser.msie ? 200 : 1;
                        self.timer = setTimeout(function () {
                            var tmp = self.enableAnimations;
                            self.enableAnimations = false;
                            self.refresh();
                            self.enableAnimations = tmp;
                        }, delay);
                    });
                }
            }
        }, // createInstance

        _refreshOnDownloadComlete: function () {
            if (this.source instanceof $.jqx.dataAdapter) {
                var me = this;
                var adapteroptions = this.source._options;
                if (adapteroptions == undefined || (adapteroptions != undefined && !adapteroptions.autoBind)) {
                    this.source.autoSync = false;
                    this.source.dataBind();
                }
                if (this.source.records.length == 0) {
                    var updateFunc = function () {
                        // sends a callback function to the user. This allows him to add additional initialization logic before the chart is rendered.
                        if (me.ready) {
                            me.ready();
                        }
                        me.refresh();
                    }
                    this.source.unbindDownloadComplete(this.element.id);
                    this.source.bindDownloadComplete(this.element.id, updateFunc);
                }
                else {
                    // sends a callback function to the user. This allows him to add additional initialization logic before the chart is rendered.
                    if (me.ready) {
                        me.ready();
                    }
                }
                this.source.unbindBindingUpdate(this.element.id);
                this.source.bindBindingUpdate(this.element.id, function () {
                    me.refresh();
                });
            }
        },

        defineInstance: function () {
            this.source = new Array();
            this.seriesGroups = new Array();
            this.categoryAxis = {};
        }, // defineInstance

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'source') {
                this._refreshOnDownloadComlete();
            }

            this.refresh();
        },

        //[optimize]
        _internalRefresh: function () {
            this._stopAnimations();
            this.host.empty();

            // clears the data.
            this._renderData = new Array();
            var renderer = null;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();

            if (!isTouchDevice && document.createElementNS && (this.renderEngine == 'SVG' || this.renderEngine == undefined)) {
                renderer = new $.jqx.svgRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'SVG')
                        throw 'Your browser does not support SVG';

                    return;
                }
            }

            if (!isTouchDevice && renderer == null && this.renderEngine != 'HTML5') {
                renderer = new $.jqx.vmlRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'VML')
                        throw 'Your browser does not support VML';

                    return;
                }
                this._isVML = true;
            }
     
            if (isTouchDevice || (renderer == null && (this.renderEngine == 'HTML5' || this.renderEngine == undefined))) {
                renderer = new $.jqx.HTML5Renderer();
                if (!renderer.init(this.host)) {
                    throw 'Your browser does not support HTML5 Canvas';
                }
            }

            this.renderer = renderer;
            var rect = this.renderer.getRect();
            this._render({ x: 1, y: 1, width: rect.width, height: rect.height });

            if (this.renderer instanceof $.jqx.HTML5Renderer) {
                this.renderer.refresh();
            }
        },

        saveAsPNG: function (filename, exportServer) {
            return this._saveAsImage('png', filename, exportServer);
        },

        saveAsJPEG: function (filename, exportServer) {
            return this._saveAsImage('jpeg', filename, exportServer);
        },

        //[optimize]
        _saveAsImage: function (type, fileName, exportServer) {
            if (fileName == undefined || fileName == '')
                fileName = 'chart.' + type;

            if (exportServer == undefined || exportServer == '')
                exportServer = 'http://www.jqwidgets.com/export_server/export.php';

            var rendererEngineSaved = this.rendererEngine;
            var enableAnimationsSaved = this.enableAnimations;

            this.enableAnimations = false;

            // try switching to HTML5
            this.renderEngine = 'HTML5';

            if (this.renderEngine != rendererEngineSaved) {
                try {
                    this.refresh();
                }
                catch (e) {
                    this.renderEngine = rendererEngineSaved;
                    this.refresh();
                    this.enableAnimations = enableAnimationsSaved;
                }
            }

            try {
                var canvas = this.renderer.getContainer()[0];
                if (canvas) {
                    var data = canvas.toDataURL("image/" + type);

                    //data = data.replace("image/png;", "image/octet-stream;");
                    //document.location = data;

                    data = data.replace("data:image/" + type + ";base64,", "");
                    var form = document.createElement('form');
                    form.method = 'POST';
                    form.action = exportServer;
                    form.style.display = 'none';
                    document.body.appendChild(form);

                    var inputFName = document.createElement('input');
                    inputFName.name = 'fname';
                    inputFName.value = fileName;
                    inputFName.style.display = 'none';

                    var inputContent = document.createElement('input');
                    inputContent.name = 'content';
                    inputContent.value = data;
                    inputContent.style.display = 'none';

                    form.appendChild(inputFName);
                    form.appendChild(inputContent);

                    form.submit();

                    document.body.removeChild(form);
                }
            }
            catch (e) {
            }

            // switch back to existing engine
            if (this.renderEngine != rendererEngineSaved) {
                this.renderEngine = rendererEngineSaved;
                this.refresh();
                this.enableAnimations = enableAnimationsSaved;
            }

            return true;
        },

        refresh: function () {
            this._internalRefresh();
        },

        //[optimize]
        _seriesTypes: [
            'line', 'stackedline', 'stackedline100',
            'spline', 'stackedspline', 'stackedspline100',
            'stepline', 'stackedstepline', 'stackedstepline100',
            'area', 'stackedarea', 'stackedarea100',
            'splinearea', 'stackedsplinearea', 'stackedsplinearea100',
            'steparea', 'stackedsteparea', 'stackedsteparea100',
            'column', 'stackedcolumn', 'stackedcolumn100',
            'pie', 'donut', 'scatter', 'bubble'],

        //[optimize]
        _render: function (rect) {
            this.renderer.clear();
            //if (this._getDataLen() == 0)
            //    return;

            var bckgImg = this.backgroundImage;
            if (bckgImg == undefined || bckgImg == '')
                this.host.css({ 'background-image': '' });
            else
                this.host.css({ 'background-image': (bckgImg.indexOf('(') != -1 ? bckgImg : "url('" + bckgImg + "')") });

            // build stats
            this._buildStats();
            var padding = this.padding || { left: 5, top: 5, right: 5, bottom: 5 };
            var rFill = this.renderer.rect(rect.x, rect.y, rect.width - 1, rect.height - 1);

            if (bckgImg == undefined || bckgImg == '')
                this.renderer.attr(rFill, { fill: this.background || this.backgroundColor || 'white' });
            else
                this.renderer.attr(rFill, { fill: 'transparent' });

            if (this.showBorderLine != false) {
                var borderColor = this.borderLineColor == undefined ? this.borderColor : this.borderLineColor;
                if (borderColor == undefined)
                    borderColor = '#888888';

                var borderLineWidth = this.borderLineWidth;
                if (isNaN(borderLineWidth) || borderLineWidth < 0.5 || borderLineWidth > 10)
                    borderLineWidth = 1;

                this.renderer.attr(rFill, { 'stroke-width': borderLineWidth, stroke: borderColor });
            }

            var paddedRect = { x: padding.left, y: padding.top, width: rect.width - padding.left - padding.right, height: rect.height - padding.top - padding.bottom };
            this._paddedRect = paddedRect;
            var titlePadding = this.titlePadding || { left: 2, top: 2, right: 2, bottom: 2 };
            if (this.title && this.title.length > 0) {
                var cssTitle = this.toThemeProperty('jqx-chart-title-text', null);
                var sz = this.renderer.measureText(this.title, 0, { 'class': cssTitle });
                this.renderer.text(this.title, paddedRect.x + titlePadding.left, paddedRect.y + titlePadding.top, paddedRect.width - (titlePadding.left + titlePadding.right), sz.height, 0, { 'class': cssTitle }, true, 'center', 'center');
                paddedRect.y += sz.height;
                paddedRect.height -= sz.height;
            }
            if (this.description && this.description.length > 0) {
                var cssDesc = this.toThemeProperty('jqx-chart-title-description', null);
                var sz = this.renderer.measureText(this.description, 0, { 'class': cssDesc });
                this.renderer.text(this.description, paddedRect.x + titlePadding.left, paddedRect.y + titlePadding.top, paddedRect.width - (titlePadding.left + titlePadding.right), sz.height, 0, { 'class': cssDesc }, true, 'center', 'center');

                paddedRect.y += sz.height;
                paddedRect.height -= sz.height;
            }

            if (this.title || this.description) {
                paddedRect.y += (titlePadding.bottom + titlePadding.top);
                paddedRect.height -= (titlePadding.bottom + titlePadding.top);
            }

            var plotRect = { x: paddedRect.x, y: paddedRect.y, width: paddedRect.width, height: paddedRect.height };

            var isPieOnly = this._isPieOnlySeries();

            // axis validation
            var hashCatAxis = {};
            for (var i = 0; i < this.seriesGroups.length && !isPieOnly; i++) {
                if (this.seriesGroups[i].type == 'pie' || this.seriesGroups[i].type == 'donut')
                    continue;

                var swap = this.seriesGroups[i].orientation == 'horizontal';
                var sgvx = this.seriesGroups[i].valueAxis;
                if (!sgvx) {
                    throw 'seriesGroup[' + i + '] is missing ' + (swap ? 'categoryAxis' : 'valueAxis') + ' definition';
                }
                var sghx = this._getCategoryAxis(i);
                if (!sghx) {
                    throw 'seriesGroup[' + i + '] is missing ' + (!swap ? 'categoryAxis' : 'valueAxis') + ' definition';
                }
                hashCatAxis[sghx] = 0x00;
            }

            // get vertical axis width
            var wYAxis = 0;
            var wYAxisArr = [];

            for (var i = 0; i < this.seriesGroups.length; i++) {
                if (this.seriesGroups[i].type == 'pie' || this.seriesGroups[i].type == 'donut') {
                    wYAxisArr.push(0);
                    continue;
                }
                var swap = this.seriesGroups[i].orientation == 'horizontal';

                var w = sgvx.axisSize;
                var axisR = { x: 0, y: plotRect.y, width: plotRect.width, height: plotRect.height };
                if (!w || w == 'auto') {
                    if (swap) {
                        w = this._renderCategoryAxis(i, axisR, true, plotRect).width;
                        if ((hashCatAxis[this._getCategoryAxis(i)] & 0x01) == 0x01)
                            w = 0;
                        else
                            hashCatAxis[this._getCategoryAxis(i)] |= 0x01;
                    }
                    else
                        w = this._renderValueAxis(i, axisR, true, plotRect).width;
                }

                if (i > 0 && w > 0)
                    wYAxis += 5;

                wYAxisArr.push(w);
                wYAxis += w;
            }

            // get horizontal axis height
            var hXAxis = 0;
            var hXAxisArr = [];
            for (var i = 0; i < this.seriesGroups.length; i++) {
                if (this.seriesGroups[i].type == 'pie' || this.seriesGroups[i].type == 'donut') {
                    hXAxisArr.push(0);
                    continue;
                }
                var swap = this.seriesGroups[i].orientation == 'horizontal';

                var h = sghx.axisSize;
                if (!h || h == 'auto') {
                    if (swap)
                        h = this._renderValueAxis(i, { x: 0, y: 0, width: 10000000, height: 0 }, true, plotRect).height;
                    else {
                        h = this._renderCategoryAxis(i, { x: 0, y: 0, width: 10000000, height: 0 }, true).height;
                        if ((hashCatAxis[this._getCategoryAxis(i)] & 0x02) == 0x02)
                            h = 0;
                        else
                            hashCatAxis[this._getCategoryAxis(i)] |= 0x02;
                    }
                }

                //if (i > 0 && h > 0)
                //    hXAxis += 5;

                hXAxisArr.push(h + 5);
                hXAxis += h + 5;
            }

            this._plotRect = plotRect;

            var showLegend = (this.showLegend != false);
            var szLegend = !showLegend || this.legendLayout ? { width: 0, height: 0} : this._renderLegend(paddedRect, true);

            if (paddedRect.height < hXAxis + szLegend.height || paddedRect.width < wYAxis)
                return;

            plotRect.height -= hXAxis + szLegend.height;
            plotRect.x += wYAxis;
            plotRect.width -= wYAxis;

            if (!isPieOnly) {
                var lineColor = this.categoryAxis.tickMarksColor || '#888888';
                if (wYAxis == 0) {
                    var x = $.jqx._ptrnd(plotRect.x);
                    var vline = this.renderer.line(x, $.jqx._ptrnd(plotRect.y), x, $.jqx._ptrnd(plotRect.y + plotRect.height + 5), { stroke: lineColor, 'stroke-width': 1 });
                }

                var h = 0;
                for (var i = 0; i < this.seriesGroups.length; i++) {
                    var swap = this.seriesGroups[i].orientation == 'horizontal';
                    var axisR = { x: plotRect.x, y: plotRect.y + plotRect.height + h, width: plotRect.width, height: hXAxisArr[i] - 5 };
                    if (swap)
                        this._renderValueAxis(i, axisR, false, plotRect);
                    else {
                        if ((hashCatAxis[this._getCategoryAxis(i)] & 0x04) == 0x04)
                            continue;
                        this._renderCategoryAxis(i, axisR, false, plotRect);
                        hashCatAxis[this._getCategoryAxis(i)] |= 0x04;
                    }

                    h += hXAxisArr[i];
                }
            }

            if (showLegend) {
                var x = plotRect.x + $.jqx._ptrnd((plotRect.width - szLegend.width) / 2);
                var y = plotRect.y + plotRect.height + hXAxis;
                var w = plotRect.width;
                var h = szLegend.height;
                if (this.legendLayout) {
                    x = this.legendLayout.left || x;
                    y = this.legendLayout.top || y;
                    w = this.legendLayout.width || w;
                    h = this.legendLayout.height || h;
                }
                if (x + w > paddedRect.x + paddedRect.width)
                    w = paddedRect.x + paddedRect.width - x;
                if (y + h > paddedRect.y + paddedRect.height)
                    h = paddedRect.y + paddedRect.height - y;

                this._renderLegend({ x: x, y: y, width: w, height: h });
            }

            this._hasHorizontalLines = false;
            if (!isPieOnly) {
                var xOffset = plotRect.x - wYAxis;
                for (var i = 0; i < this.seriesGroups.length; i++) {
                    var swap = this.seriesGroups[i].orientation == 'horizontal';
                    var w = wYAxisArr[i];
                    if (i > 0 && w > 0)
                        xOffset += 5;
                    var axisR = { x: xOffset, y: plotRect.y, width: w, height: plotRect.height };
                    if (swap) {
                        if ((hashCatAxis[this._getCategoryAxis(i)] & 0x08) == 0x08)
                            continue;

                        this._renderCategoryAxis(i, axisR, false, plotRect);
                        hashCatAxis[this._getCategoryAxis(i)] |= 0x08;
                    }
                    else
                        this._renderValueAxis(i, axisR, false, plotRect);
                    //this._hasHorizontalLines = this._hasHorizontalLines || this._renderHorizontalGridLines(i, plotRect);
                    xOffset += w;
                }
            }

            if (plotRect.width <= 0 || plotRect.height <= 0)
                return;

            this._plotRect = { x: plotRect.x, y: plotRect.y, width: plotRect.width, height: plotRect.height };

            var g = this.renderer.beginGroup();
            var clip = this.renderer.createClipRect({ x: plotRect.x, y: plotRect.y, width: plotRect.width, height: plotRect.height });
            this.renderer.setClip(g, clip);

            for (var i = 0; i < this.seriesGroups.length; i++) {
                var sg = this.seriesGroups[i];
                var isValid = false;
                for (var validtype in this._seriesTypes) {
                    if (this._seriesTypes[validtype] == sg.type) {
                        isValid = true;
                        break;
                    }
                }
                if (!isValid) {
                    throw 'jqxChart: invalid series type "' + sg.type + '"';
                    continue;
                }

                if (sg.type.indexOf('column') != -1)
                    this._renderColumnSeries(i, plotRect);
                else if (sg.type.indexOf('pie') != -1 || sg.type.indexOf('donut') != -1)
                    this._renderPieSeries(i, plotRect);
                else if (sg.type.indexOf('line') != -1 || sg.type.indexOf('area') != -1)
                    this._renderLineSeries(i, plotRect);
                else if (sg.type == 'scatter' || sg.type == 'bubble')
                    this._renderScatterSeries(i, plotRect);
            }

            this.renderer.endGroup();

            if (this.enabled == false) {
                var el = this.renderer.rect(rect.x, rect.y, rect.width, rect.height);
                this.renderer.attr(el, { fill: '#777777', opacity: 0.5, stroke: '#00FFFFFF' });
            }
        },

        _isPieOnlySeries: function () {
            if (this.seriesGroups.length == 0)
                return false;

            for (var i = 0; i < this.seriesGroups.length; i++) {
                if (this.seriesGroups[i].type != 'pie' && this.seriesGroups[i].type != 'donut')
                    return false;
            }

            return true;
        },

        //[optimize]
        _renderChartLegend: function (data, rect, isMeasure, isVerticalFlow) {
            var r = { x: rect.x + 3, y: rect.y + 3, width: rect.width - 6, height: rect.height - 6 };

            var szMeasure = { width: r.width, height: 0 };

            var x = 0, y = 0;
            var rowH = 20;
            var rowW = 0;
            var barSize = 10;
            var space = 10;
            var maxWidth = 0;
            for (var i = 0; i < data.length; i++) {
                var css = data[i].css;
                if (!css)
                    css = this.toThemeProperty('jqx-chart-legend-text', null);

                var text = data[i].text;
                var sz = this.renderer.measureText(text, 0, { 'class': css });
                if (sz.height > rowH)
                    rowH = sz.height;

                if (sz.width > maxWidth)
                    maxWidth = sz.width;

                if (isVerticalFlow) {
                    if (i != 0)
                        y += rowH;

                    if (y > r.height) {
                        y = 0;
                        x += maxWidth + space;
                        maxWidth = sz.width;
                        szMeasure.width = x + maxWidth;
                    }
                }
                else {
                    if (x != 0)
                        x += space;

                    if (x + 2 * barSize + sz.width > r.width && sz.width < r.width) {
                        x = 0;
                        y += rowH;
                        rowH = 20;
                        rowW = r.width;
                        szMeasure.heigh = y + rowH;
                    }
                }

                if (!isMeasure) {
                    var color = data[i].color;
                    var elem = this.renderer.rect(r.x + x, r.y + y + barSize / 2, barSize, barSize);
                    this.renderer.attr(elem, { fill: color, stroke: color, 'stroke-width': 1 });
                    this.renderer.text(text, r.x + x + 1.5 * barSize, r.y + y, sz.width, rowH, 0, { 'class': css }, false, 'center', 'center');
                }

                if (isVerticalFlow) {
                }
                else {
                    x += sz.width + 2 * barSize;
                    if (rowW < x)
                        rowW = x;
                }

            }

            if (isMeasure) {
                szMeasure.height = $.jqx._ptrnd(y + rowH);
                szMeasure.width = $.jqx._ptrnd(rowW);
                return szMeasure;
            }
        },


        //[optimize]
        _renderLegend: function (rect, isMeasure) {
            var legendData = [];
            for (var gidx = 0; gidx < this.seriesGroups.length; gidx++) {
                var g = this.seriesGroups[gidx];

                var categoryAxis = this._getCategoryAxis(gidx);
                var catfs = categoryAxis.toolTipFormatSettings || categoryAxis.formatSettings;
                var catff = categoryAxis.toolTipFormatFunction || categoryAxis.formatFunction;

                for (var sidx = 0; sidx < g.series.length; sidx++) {
                    var s = g.series[sidx];

                    if (g.type == 'pie' || g.type == 'donut') {
                        var colorScheme = s.colorScheme || g.colorScheme || this.colorScheme;
                        var dataLength = this._getDataLen(gidx);
                        for (var i = 0; i < dataLength; i++) {
                            var legendText = this._getDataValue(i, s.displayText, gidx);
                            legendText = this._formatValue(legendText, catfs, catff);

                            var color = this._getColor(colorScheme, sidx * dataLength + i, gidx, sidx);

                            legendData.push({ text: legendText, css: s.displayTextClass, color: color });
                        }

                        continue;
                    }

                    var text = s.displayText || s.dataField || '';
                    var color = this._getSeriesColor(gidx, sidx);

                    legendData.push({ text: text, css: s.displayTextClass, color: color });
                }
            }

            return this._renderChartLegend(legendData, rect, isMeasure, (this.legendLayout && this.legendLayout.flow == 'vertical'));
        },

        //[optimize]
        _renderCategoryAxis: function (groupIndex, rect, isMeasure, chartRect) {
            var axis = this._getCategoryAxis(groupIndex);
            var swapXY = this.seriesGroups[groupIndex].orientation == 'horizontal';
            var szMeasure = { width: 0, height: 0 };
            if (!axis)
                return szMeasure;

            var text = axis.text;

            var gridLinesSettings = { visible: (axis.showGridLines != false), color: (axis.gridLinesColor || '#888888'), unitInterval: (axis.gridLinesInterval || axis.unitInterval) };
            var tickMarksSettings = { visible: (axis.showTickMarks != false), color: (axis.tickMarksColor || '#888888'), unitInterval: (axis.tickMarksInterval || axis.unitInterval) };

            var textRotationAngle = axis.textRotationAngle || 0;

            var offsetR = rect;
            if (swapXY)
                offsetR = { x: rect.x, y: rect.y, width: rect.height, height: rect.width };
            var offsets = this._calculateXOffsets(undefined, offsetR);
            var ui = axis.unitInterval;
            if (isNaN(ui))
                ui = Math.max(1, Math.round(offsets.rangeLength / 10));

            var hTextAlign = axis.horizontalTextAlignment;
            var valuesOnTicks = this._alignValuesWithTicks();

            var widgetRect = this.renderer.getRect();
            var paddingRight = widgetRect.width - rect.x - rect.width;
            var len = this._getDataLen(groupIndex);

            var items = [];
            if (axis.type != 'date') {
                var isCustomRange = offsets.customRange != false;
                var step = ui;
                for (var i = offsets.min; i <= offsets.max; i += step) {
                    if (isCustomRange || axis.dataField == undefined || axis.dataField == '') {
                        value = i;
                    }
                    else {
                        var idx = Math.round(i);

                        value = this._getDataValue(idx, axis.dataField);
                    }

                    var text = this._formatValue(value, axis.formatSettings, axis.formatFunction);
                    if (text == undefined)
                        text = !isCustomRange ? value.toString() : (i).toString();

                    items.push(text);

                    if (i + step > offsets.max) {
                        step = offsets.max - i;
                        if (step <= ui / 2)
                            break;
                    }
                }
            }
            else {
                var arr = this._getDatesArray(offsets.min, offsets.max, axis.baseUnit, valuesOnTicks);
                for (var i = 0; i < arr.length; i += ui)
                    items.push(this._formatValue(arr[i], axis.formatSettings, axis.formatFunction));
            }

            if (axis.flip == true)
                items.reverse();

            var cssDesc = axis.descriptionClass;
            if (!cssDesc)
                cssDesc = this.toThemeProperty('jqx-chart-axis-description', null);

            var cssItems = axis['class'];
            if (!cssItems)
                cssItems = this.toThemeProperty('jqx-chart-axis-text', null);

            if (swapXY)
                textRotationAngle -= 90;

            var axisTextSettings = { text: axis.description, style: cssDesc, halign: 'center', valign: 'center', textRotationAngle: swapXY ? -90 : 0 };
            var itemsTextSettings = { textRotationAngle: textRotationAngle, style: cssItems, halign: hTextAlign, valign: axis.verticalTextAlignment || 'center' };

            return this._renderAxis(swapXY, axisTextSettings, itemsTextSettings, { x: rect.x, y: rect.y, width: rect.width, height: rect.height }, chartRect, ui, valuesOnTicks, items, offsets, gridLinesSettings, tickMarksSettings, isMeasure);
        },

        _renderAxis: function (isVertical, axisTextSettings, textSettings, rect, chartRect, ui, valuesOnTicks, items, offsets, gridLinesSettings, tickMarksSettings, isMeasure) {
            var tickMarkSize = tickMarksSettings.visible ? 4 : 0;
            var padding = 2;

            var szMeasure = { width: 0, height: 0 };
            var szMeasureDesc = { width: 0, height: 0 };

            if (isVertical)
                szMeasure.height = szMeasureDesc.height = rect.height;
            else
                szMeasure.width = szMeasureDesc.width = rect.width;

            if (axisTextSettings.text != undefined && axisTextSettings != '') {
                var textRotationAngle = axisTextSettings.textRotationAngle;
                var sz = this.renderer.measureText(axisTextSettings.text, textRotationAngle, { 'class': axisTextSettings.style });
                szMeasureDesc.width = sz.width;
                szMeasureDesc.height = sz.height;

                if (!isMeasure) {
                    this.renderer.text(
                        axisTextSettings.text,
                        rect.x + (isVertical ? padding : 0),
                        rect.y + (!isVertical ? rect.height - padding - szMeasureDesc.height : 0),
                        isVertical ? szMeasureDesc.width : rect.width,
                        !isVertical ? szMeasureDesc.height : rect.height,
                        textRotationAngle,
                        { 'class': axisTextSettings.style },
                        true,
                        axisTextSettings.halign,
                        axisTextSettings.valign);
                }
            }

            var offset = 0;
            var textXAdjust = valuesOnTicks ? -offsets.itemWidth / 2 : 0;

            if (valuesOnTicks) {
                textSettings.halign = 'center';
            }

            var h = 0;
            var w = 0;
            var itemWidth = offsets.itemWidth;
            for (var i = 0; i < items.length; i++, offset += itemWidth) {
                var text = items[i];

                var textAngle = textSettings.textRotationAngle;

                var sz = this.renderer.measureText(text, textAngle, { 'class': textSettings.style });
                if (sz.width > w)
                    w = sz.width;
                if (sz.height > h)
                    h = sz.height;

                if (!isMeasure && (!sz || (!isVertical && offset + sz.width + textXAdjust < rect.x + rect.width) || (isVertical && offset + sz.height + textXAdjust < chartRect.y + chartRect.height))) {
                    var x = rect.x + offset + textXAdjust;
                    var y = rect.y + (valuesOnTicks ? tickMarkSize : tickMarkSize / 4);
                    if (isVertical) {
                        x = rect.x + padding + (szMeasureDesc.width > 0 ? (szMeasureDesc.width + padding) : 0);
                        y = rect.y + offset + textXAdjust;
                    }
                    this.renderer.text(
                        text,
                        x,
                        y,
                        !isVertical ? itemWidth : rect.width - 2 * padding - tickMarkSize - ((szMeasureDesc.width > 0) ? szMeasureDesc.width + padding : 0),
                        isVertical ? itemWidth : rect.height - 2 * padding - tickMarkSize - ((szMeasureDesc.height > 0) ? szMeasureDesc.height + padding : 0),
                        textAngle,
                        { 'class': textSettings.style },
                        true,
                        textSettings.halign,
                        textSettings.valign);
                }
            }

            szMeasure.width += 2 * padding + tickMarkSize + szMeasureDesc.width + w + (isVertical && szMeasureDesc.width > 0 ? padding : 0);
            szMeasure.height += 2 * padding + tickMarkSize + szMeasureDesc.height + h + (!isVertical && szMeasureDesc.height > 0 ? padding : 0);

            var gridLinePts = {};

            if (!isMeasure) {
                var y = $.jqx._ptrnd(rect.y);
                if (isVertical)
                    this.renderer.line($.jqx._ptrnd(rect.x + rect.width), rect.y, $.jqx._ptrnd(rect.x + rect.width), rect.y + rect.height, { stroke: gridLinesSettings.color, 'stroke-width': 1 });
                else
                    this.renderer.line($.jqx._ptrnd(rect.x), y, $.jqx._ptrnd(rect.x + rect.width + 1), y, { stroke: gridLinesSettings.color, 'stroke-width': 1 });
            }

            // render vertical grid lines
            if (!isMeasure) {
                var gridLinesInterval = gridLinesSettings.unitInterval;
                if (isNaN(gridLinesInterval))
                    gridLinesInterval = ui;

                for (var i = 0; i <= offsets.rangeLength + gridLinesInterval; i += gridLinesInterval) {
                    var lineOffset = 0;

                    if (isVertical) {
                        lineOffset = $.jqx._ptrnd(rect.y + i * rect.height / (offsets.rangeLength));
                        if (lineOffset > rect.y + rect.height)
                            break;
                    }
                    else {
                        lineOffset = $.jqx._ptrnd(rect.x + i * rect.width / (offsets.rangeLength));
                        if (lineOffset > rect.x + rect.width)
                            break;
                    }

                    if (gridLinesSettings.visible || (i == offsets.rangeLength)) {
                        if (isVertical)
                            this.renderer.line($.jqx._ptrnd(chartRect.x), lineOffset, $.jqx._ptrnd(chartRect.x + chartRect.width), lineOffset, { stroke: gridLinesSettings.color, 'stroke-width': 1.0 });
                        else
                            this.renderer.line(lineOffset, $.jqx._ptrnd(chartRect.y), lineOffset, $.jqx._ptrnd(chartRect.y + chartRect.height), { stroke: gridLinesSettings.color, 'stroke-width': 1.0 });

                        gridLinePts[lineOffset] = true;
                    }
                }
            }

            // render category axis tick marks
            if (!isMeasure && tickMarksSettings.visible) {
                var tickMarksInterval = tickMarksSettings.unitInterval;
                if (isNaN(tickMarksInterval))
                    tickMarksInterval = ui;

                for (var i = 0; i <= offsets.rangeLength + tickMarksInterval; i += tickMarksInterval) {
                    var lineOffset = 0;

                    if (isVertical) {
                        lineOffset = $.jqx._ptrnd(rect.y + i * rect.height / (offsets.rangeLength));
                    }
                    else {
                        lineOffset = $.jqx._ptrnd(rect.x + i * rect.width / (offsets.rangeLength));
                    }

                    if (gridLinePts[lineOffset - 1])
                        lineOffset--;
                    else if (gridLinePts[lineOffset + 1])
                        lineOffset++;

                    if (isVertical) {
                        if (lineOffset > rect.y + rect.height)
                            break;
                    }
                    else {
                        if (lineOffset > rect.x + rect.width)
                            break;
                    }

                    if (isVertical)
                        this.renderer.line(rect.x + rect.width, lineOffset, rect.x + rect.width - tickMarkSize, lineOffset, { stroke: gridLinesSettings.color, 'stroke-width': 1.0 });
                    else
                        this.renderer.line(lineOffset, rect.y, lineOffset, rect.y + tickMarkSize, { stroke: gridLinesSettings.color, 'stroke-width': 1.0 });
                }
            }

            szMeasure.width = $.jqx._rup(szMeasure.width);
            szMeasure.height = $.jqx._rup(szMeasure.height);

            return szMeasure;
        },

        //[optimize]
        _renderValueAxis: function (groupIndex, rect, isMeasure, chartRect) {
            var g = this.seriesGroups[groupIndex];
            var swapXY = g.orientation == 'horizontal';
            var axis = g.valueAxis;
            if (!axis)
                throw 'SeriesGroup ' + groupIndex + ' is missing valueAxis definition';

            var szMeasure = { width: 0, height: 0 };

            if (this._isPieOnlySeries()) {
                if (isMeasure)
                    return szMeasure;

                return;
            }

            var gstat = this._stats.seriesGroups[groupIndex];
            if (!gstat || !gstat.isValid || false == axis.displayValueAxis) {
                if (isMeasure)
                    return szMeasure;
                return;
            }

            var cssDesc = axis.descriptionClass;
            if (!cssDesc)
                cssDesc = this.toThemeProperty('jqx-chart-axis-description', null);

            var axisTextSettings = { text: axis.description, style: cssDesc, halign: 'center', valign: 'center', textRotationAngle: swapXY ? 0 : -90 };

            var cssItems = axis.itemsClass;
            if (!cssItems)
                cssItems = this.toThemeProperty('jqx-chart-axis-text', null);

            var itemsTextSettings = { style: cssItems, halign: 'center', valign: 'center', textRotationAngle: 0 };

            var valuesOnTicks = axis.valuesOnTicks != false;

            var field = axis.dataField;
            var ints = gstat.intervals;

            var min = gstat.min;
            var mu = gstat.mu;

            var unitH = (swapXY ? rect.width : rect.height) / ints;

            var yOffset = rect.y + rect.height - unitH;

            var format = axis.formatSettings;
            var isStacked100 = g.type.indexOf("stacked") != -1 && g.type.indexOf("100") != -1;
            if (isStacked100 && !format)
                format = { sufix: '%' };

            var items = [];
            var offsets = {};
            offsets.data = [];
            offsets.itemWidth = unitH;

            if (!valuesOnTicks) {
                ints = Math.max(ints - 1, 1);
            }

            for (var i = 0; i <= ints; i++) {
                var value = valuesOnTicks ? min + i * mu : min + (i + 0.5) * mu;
                var text = (axis.formatFunction) ? axis.formatFunction(value) : this._formatNumber(value, format);

                items.push(text);
                offsets.data.push(yOffset + unitH / 2);

                yOffset -= unitH;
            }

            offsets.rangeLength = (gstat.intervals) * gstat.mu;

            if (g.valueAxis.flip != true) {
                offsets.data = offsets.data.reverse();
                items = items.reverse();
            }

            var gridLinesSettings = { visible: (axis.showGridLines != false), color: (axis.gridLinesColor || '#888888'), unitInterval: (axis.gridLinesInterval || axis.unitInterval) };
            var tickMarksSettings = { visible: (axis.showTickMarks != false), color: (axis.tickMarksColor || '#888888'), unitInterval: (axis.tickMarksInterval || axis.unitInterval) };

            return this._renderAxis(!swapXY, axisTextSettings, itemsTextSettings, rect, chartRect, mu, valuesOnTicks, items, offsets, gridLinesSettings, tickMarksSettings, isMeasure);
        },

        //[optimize]
        _buildStats: function () {
            var stat = { seriesGroups: new Array() };
            this._stats = stat;

            for (var g = 0; g < this.seriesGroups.length; g++) {
                var group = this.seriesGroups[g];
                stat.seriesGroups[g] = {};
                var grst = stat.seriesGroups[g];
                grst.isValid = true;

                var hasValueAxis = group.valueAxis != undefined;

                var isStacked = -1 != group.type.indexOf("stacked");
                var isStacked100 = isStacked && -1 != group.type.indexOf("100");

                if (isStacked100) {
                    grst.psums = new Array();
                    grst.nsums = new Array();
                }

                var gmin = NaN, gmax = NaN;
                var gsumP = NaN, gsumN = NaN;
                var gbase = group.baselineValue || 0;
                var len = this._getDataLen(g);
                var gMaxRange = 0;
                for (var i = 0; i < len && grst.isValid; i++) {
                    var min = hasValueAxis ? group.valueAxis.minValue : 0;
                    var max = hasValueAxis ? group.valueAxis.maxValue : 0;
                    var sumP = 0, sumN = 0;
                    if (typeof (min) != 'number')
                        min = NaN;
                    if (typeof (max) != 'number')
                        max = NaN;

                    for (var s = 0; s < group.series.length; s++) {
                        var val = this._getDataValueAsNumber(i, group.series[s].dataField, g);
                        if (isNaN(val)) {
                            continue;
                            throw 'jqxChart: Data source contains invalid value at Index: ' + i + ', DataField: ' + group.series[s].dataField;
                            grst.isValid = false;
                            break;
                        }

                        if ((val > max || isNaN(max)) && ((!hasValueAxis || isNaN(group.valueAxis.maxValue)) ? true : val <= group.valueAxis.maxValue))
                            max = val;
                        if ((val < min || isNaN(min)) && ((!hasValueAxis || isNaN(group.valueAxis.minValue)) ? true : val >= group.valueAxis.minValue))
                            min = val;

                        if (val > gbase)
                            sumP += val;
                        else if (val < gbase)
                            sumN += val;
                    }

                    var range = sumP - sumN;
                    if (gMaxRange < range)
                        gMaxRange = range;

                    if (isStacked100) {
                        grst.psums[i] = sumP;
                        grst.nsums[i] = sumN;
                    }

                    if (max > gmax || isNaN(gmax))
                        gmax = max;
                    if (min < gmin || isNaN(gmin))
                        gmin = min;

                    if (sumP > gsumP || isNaN(gsumP))
                        gsumP = sumP;
                    if (sumN < gsumN || isNaN(gsumN))
                        gsumN = sumN;
                }

                if (isStacked100) {
                    gsumP = gsumP == 0 ? 0 : Math.max(gsumP, -gsumN);
                    gsumN = gsumN == 0 ? 0 : Math.min(gsumN, -gsumP);
                }

                var mu = hasValueAxis ? group.valueAxis.unitInterval : 0;
                if (!mu) {
                    mu = isStacked ? (gsumP - gsumN) / 10 : (gmax - gmin) / 10;
                }

                var tickMarksInterval = hasValueAxis ? group.valueAxis.tickMarksInterval || mu : 0;
                var gridLinesInterval = hasValueAxis ? group.valueAxis.gridLinesInterval || mu : 0;

                if (gmin < gsumN)
                    gsumN = gmin;
                if (gmax > gsumP)
                    gsumP = gmax;

                var mn = $.jqx._rnd(isStacked ? gsumN : gmin, mu, false);
                var mx = $.jqx._rnd(isStacked ? gsumP : gmax, mu, true);

                if (isStacked100) {
                    mx = (mx > 0) ? 100 : 0;
                    mn = (mn < 0) ? -100 : 0;
                    mu = hasValueAxis ? group.valueAxis.unitInterval : 10;
                    if (mu <= 0 || mu >= 100)
                        mu = 10;
                    if (tickMarksInterval <= 0 || tickMarksInterval >= 100)
                        tickMarksInterval = 10;
                    if (gridLinesInterval <= 0 || gridLinesInterval >= 100)
                        gridLinesInterval = 10;
                }

                if (isNaN(mx) || isNaN(mn) || isNaN(mu))
                    continue;

                var intervals = (mx - mn) / (mu == 0 ? 1 : mu);
                if (intervals < 1)
                    continue;

                var diff = mx - mn;
                grst.rmax = isStacked ? gsumP : gmax;
                grst.rmin = isStacked ? gsumN : gmin;
                grst.min = mn;
                grst.max = mx;
                grst.mu = mu;
                grst.maxRange = gMaxRange;
                grst.intervals = intervals;
                grst.tickMarksInterval = tickMarksInterval;
                grst.tickMarksIntervals = tickMarksInterval == 0 ? 0 : diff / tickMarksInterval;
                grst.gridLinesInterval = gridLinesInterval;
                grst.gridLinesIntervals = gridLinesInterval == 0 ? 0 : diff / gridLinesInterval;
                if (diff == 0)
                    diff = 1;
                grst.scale = isStacked ? (gsumP - gsumN) / diff : (gmax - gmin) / diff;
            }
        },

        //[optimize]
        _getDataLen: function (groupIndex) {
            var ds = this.source;
            if (groupIndex != undefined && groupIndex != -1 && this.seriesGroups[groupIndex].source)
                ds = this.seriesGroups[groupIndex].source;

            if (ds instanceof $.jqx.dataAdapter)
                ds = ds.records;

            if (ds)
                return ds.length;

            return 0;
        },

        //[optimize]
        _getDataValue: function (index, dataField, groupIndex) {
            var ds = this.source;
            if (groupIndex != undefined && groupIndex != -1)
                ds = this.seriesGroups[groupIndex].source || ds;

            if (ds instanceof $.jqx.dataAdapter)
                ds = ds.records;

            if (!ds || index < 0 || index > ds.length - 1)
                return NaN;

            return (dataField && dataField != '') ? ds[index][dataField] : ds[index];
        },

        //[optimize]
        _getDataValueAsNumber: function (index, dataField, groupIndex) {
            var val = this._getDataValue(index, dataField, groupIndex);
            if (this._isDate(val))
                return val.valueOf();

            if (typeof (val) != 'number')
                val = parseFloat(val);
            if (typeof (val) != 'number')
                val = undefined;
            return val;
        },

        //[optimize]
        _renderPieSeries: function (groupIndex, rect) {
            var dataLength = this._getDataLen(groupIndex);
            var group = this.seriesGroups[groupIndex];

            while (this._renderData.length < groupIndex + 1)
                this._renderData.push(null);

            this._renderData[groupIndex] = [];

            for (var sidx = 0; sidx < group.series.length; sidx++) {
                var s = group.series[sidx]
                var colorScheme = s.colorScheme || group.colorScheme || this.colorScheme;
                var initialAngle = s.initialAngle || 0;
                var currentAngle = initialAngle;
                var radius = s.radius || Math.min(rect.width, rect.height) * 0.4;
                if (isNaN(radius))
                    radius = 1;

                var innerRadius = s.innerRadius || 0;
                if (isNaN(innerRadius) || innerRadius >= radius)
                    innerRadius = 0;

                var centerOffset = s.centerOffset || 0;
                var offsetX = $.jqx.getNum([s.offsetX, group.offsetX, rect.width / 2]);
                var offsetY = $.jqx.getNum([s.offsetY, group.offsetY, rect.height / 2]);

                var anim = this._getAnimProps(groupIndex, sidx);
                var duration = anim.enabled && dataLength < 5000 && this._isVML != true ? anim.duration : 0;

                this._renderData[groupIndex].push([]);

                // compute the sum
                var sumP = 0;
                var sumN = 0;
                for (var i = 0; i < dataLength; i++) {
                    var val = this._getDataValueAsNumber(i, s.dataField, groupIndex);
                    if (typeof (val) != 'number')
                        continue;
                    if (val > 0)
                        sumP += val;
                    else
                        sumN += val;
                }

                var range = sumP - sumN;
                if (range == 0)
                    range = 1;

                // render
                for (var i = 0; i < dataLength; i++) {
                    var val = this._getDataValueAsNumber(i, s.dataField, groupIndex);
                    if (typeof (val) != 'number')
                        continue;

                    var angle = Math.round(Math.abs(val) / range * 360.0);
                    if (i + 1 == dataLength)
                        angle = 360 + initialAngle - currentAngle;

                    var x = rect.x + offsetX;
                    var y = rect.y + offsetY;

                    var sliceRenderData = { x1: x, y1: y, innerRadius: innerRadius, outerRadius: radius, key: groupIndex + '_' + sidx + '_' + i };
                    this._renderData[groupIndex][sidx].push(sliceRenderData);


                    var pieSliceElement = this.renderer.pieslice(x, y, innerRadius, radius, currentAngle, duration > 0 ? currentAngle : currentAngle + angle, centerOffset);

                    if (duration > 0) {
                        var centerOffsetValue = centerOffset;
                        if ($.isFunction(centerOffset)) {
                            centerOffsetValue = centerOffset({ seriesIndex: sidx, seriesGroupIndex: groupIndex, itemIndex: i });
                        }
                        if (isNaN(centerOffsetValue))
                            centerOffsetValue = 0;

                        var ctx = { x: x, y: y, innerRadius: innerRadius, outerRadius: radius, fromAngle: currentAngle, toAngle: currentAngle + angle, centerOffset: centerOffsetValue };
                        var self = this;
                        this._animate(
                        pieSliceElement,
                        undefined,
                        duration,
                        function (element, ctx, percent) {
                            var toAngle = ctx.fromAngle + percent * (ctx.toAngle - ctx.fromAngle);
                            var cmd = self.renderer.pieSlicePath(ctx.x, ctx.y, ctx.innerRadius, ctx.outerRadius, ctx.fromAngle, toAngle, ctx.centerOffset);
                            self.renderer.attr(element, { 'd': cmd });
                        },
                        ctx);
                    }

                    var colors = this._getColors(groupIndex, sidx, i, 'radialGradient', radius);

                    this.renderer.attr(pieSliceElement, { fill: colors.fillColor, stroke: colors.lineColor, 'stroke-width': 1 });

                    ///////////////////////////////
                    // render label
                    var angleFrom = currentAngle, angleTo = currentAngle + angle;
                    var diff = Math.abs(angleFrom - angleTo);
                    var lFlag = diff > 180 ? 1 : 0;
                    if (diff > 360) {
                        angleFrom = 0;
                        angleTo = 360;
                    }
                    var radFrom = angleFrom * Math.PI * 2 / 360;
                    var radTo = angleTo * Math.PI * 2 / 360;
                    var midAngle = diff / 2 + angleFrom;
                    var radMid = midAngle * Math.PI * 2 / 360;

                    // measure
                    var sz = this._showLabel(groupIndex, sidx, i, { x: 0, y: 0, width: 0, height: 0 }, 'left', 'top', true);
                    var labelRadius = s.labelRadius || radius + Math.max(sz.width, sz.height);
                    labelRadius += centerOffset;
                    var x = $.jqx._ptrnd(rect.x + offsetX + labelRadius * Math.cos(radMid) - sz.width / 2);
                    var y = $.jqx._ptrnd(rect.y + offsetY - labelRadius * Math.sin(radMid) - sz.height / 2);

                    // render
                    this._showLabel(groupIndex, sidx, i, { x: x, y: y, width: sz.width, height: sz.height }, 'left', 'top');
                    /////////////////////////////////

                    // Install mouse event handlers
                    this._installHandlers(pieSliceElement, groupIndex, sidx, i);

                    currentAngle += angle;
                }
            }
        },

        //[optimize]
        _renderColumnSeries: function (groupIndex, rect) {
            var group = this.seriesGroups[groupIndex];
            if (!group.series || group.series.length == 0)
                return;

            var isStacked = group.type.indexOf('stacked') != -1;
            var isStacked100 = isStacked && group.type.indexOf('100') != -1;

            var dataLength = this._getDataLen(groupIndex);

            var columnGap = group.columnsGapPercent;
            if (isNaN(columnGap) || columnGap < 0 || columnGap > 100)
                columnGap = 25;

            var seriesGap = group.seriesGapPercent;
            if (isNaN(seriesGap) || seriesGap < 0 || seriesGap > 100)
                seriesGap = 10;

            var inverse = group.orientation == 'horizontal';

            var gRect = rect;
            if (inverse)
                gRect = { x: rect.y, y: rect.x, width: rect.height, height: rect.width };

            var renderData = this._calcGroupOffsets(groupIndex, gRect);
            if (!renderData || renderData.xoffsets.length == 0)
                return;

            for (var sidx = 0; sidx < group.series.length; sidx++) {
                var s = group.series[sidx];
                var dataField = s.dataField;

                var anim = this._getAnimProps(groupIndex, sidx);
                var duration = anim.enabled && renderData.xoffsets.length < 100 ? anim.duration : 0;

                var valuesOnTicks = this._alignValuesWithTicks(groupIndex);

                var columnElements = [];
                for (var i = renderData.xoffsets.first; i <= renderData.xoffsets.last; i++) {
                    var val = this._getDataValueAsNumber(i, dataField, groupIndex);
                    if (typeof (val) != 'number')
                        continue;

                    var x1 = renderData.xoffsets.data[i];
                    if (valuesOnTicks)
                        x1 -= renderData.xoffsets.itemWidth / 2;

                    var x2 = x1 + renderData.xoffsets.itemWidth;
                    var wGroup = (x2 - x1 + 1);
                    var wGroupRender = (x2 - x1 + 1) / (1 + columnGap / 100);
                    var seriesSpace = (!isStacked && group.series.length > 1) ? (wGroupRender * seriesGap / 100) / (group.series.length - 1) : 0;
                    var wColumn = (wGroupRender - seriesSpace * (group.series.length - 1));
                    if (wGroupRender < 1)
                        wGroupRender = 1;

                    var col = 0;
                    if (!isStacked && group.series.length > 1) {
                        wColumn /= group.series.length;
                        col = sidx;
                    }

                    var x = x1 + (wGroup - wGroupRender) / 2 + col * (seriesSpace + wColumn);
                    if (col == group.series.length)
                        wColumn = wGroup - x1 + wGroupRender - x;

                    //x = $.jqx._ptrnd(x);

                    var to = renderData.offsets[sidx][i].to;
                    var from = renderData.offsets[sidx][i].from;
                    var base = renderData.baseOffset;
                    var h = from - to;

                    var elRect = { x: rect.x + x, y: Math.min(to, from), width: wColumn, height: Math.abs(h) };
                    if (inverse) {
                        elRect = { height: wColumn, y: rect.y + x };
                        elRect.x = from;
                        elRect.width = Math.abs(h);
                        if (h > 0)
                            elRect.x -= h;
                    }

                    columnElements.push({ itemIndex: i, rect: elRect, size: h, vertical: !inverse });
                }

                var ctx = { groupIndex: groupIndex, seriesIndex: sidx, items: columnElements };
                var self = this;
                this._animate(
                        undefined,
                        undefined,
                        duration,
                        function (element, ctx, percent) {
                            self._animateColumns(ctx, percent);
                        },
                        ctx);
            }
        },

        _calcStackedItemSize: function (gidx, sidx, iidx, percent) {
            var data = this._renderData[gidx];
            var sum = 0, nsum = 0;
            for (var si = 0; si < data.offsets.length; si++) {
                var d = Math.abs(data.offsets[si][iidx].to - data.offsets[si][iidx].from);
                if (data.offsets[si][iidx].to < data.baseOffset)
                    sum += d;
                else
                    nsum += d;
            }

            var nstop = nsum * percent;
            var stop = sum * percent;
            sum = 0;
            nsum = 0;
            var sz = 0;
            for (var si = 0; si <= sidx; si++) {
                sz = Math.abs(data.offsets[si][iidx].to - data.offsets[si][iidx].from);
                if (data.offsets[si][iidx].to < data.baseOffset)
                    sum += sz;
                else
                    nsum += sz;
            }

            var diff = Math.abs(data.offsets[sidx][iidx].to - data.offsets[sidx][iidx].from);
            if (data.offsets[sidx][iidx].to >= data.baseOffset) {
                sum = nsum;
                stop = nstop;
            }

            if (stop < sum - diff)
                return 0;
            if (stop >= sum)
                return diff;

            return stop - (sum - diff);
        },

        _animateColumns: function (context, percent) {
            var gidx = context.groupIndex;
            var sidx = context.seriesIndex;

            var group = this.seriesGroups[gidx];
            var s = group.series[sidx];

            var colors = this._getColors(gidx, sidx, undefined, this._getGroupGradientType(gidx));

            var opacity = s.opacity || group.opacity;
            if (!opacity || opacity < 0 || opacity > 1)
                opacity = 1;

            var isStacked = group.type.indexOf('stacked') != -1;
            var items = context.items;
            for (var i = 0; i < items.length; i++) {
                var rect = items[i].rect;
                var size = $.jqx._ptrnd(items[i].size * percent);

                if (isStacked) {
                    size = this._calcStackedItemSize(gidx, sidx, i, percent);
                    if (size == 0)
                        continue;
                    if (items[i].size < 0)
                        size *= -1;
                }

                if (items[i].element == undefined) {
                    items[i].element = this.renderer.rect(rect.x, rect.y, items[i].vertical ? rect.width : 0, items[i].vertical ? 0 : rect.height);
                    this.renderer.attr(items[i].element, { fill: colors.fillColor, 'fill-opacity': opacity, stroke: colors.lineColor, 'stroke-width': 1 });
                }

                size = Math.abs(size);

                if (items[i].vertical == true) {
                    if (items[i].size < 0)
                        this.renderer.attr(items[i].element, { height: size });
                    else
                        this.renderer.attr(items[i].element, { y: rect.y + rect.height - size, height: size });
                }
                else {
                    if (items[i].size < 0)
                        this.renderer.attr(items[i].element, { width: size });
                    else
                        this.renderer.attr(items[i].element, { x: rect.x + rect.width - size, width: size });

                }

                if (percent == 1.0) {
                    this._installHandlers(items[i].element, gidx, sidx, i);
                    this._showLabel(gidx, sidx, i, rect);
                }
            }
        },

        //[optimize]
        _renderScatterSeries: function (groupIndex, rect) {
            var group = this.seriesGroups[groupIndex];
            if (!group.series || group.series.length == 0)
                return;

            var isBubble = group.type == 'bubble';

            var inverse = group.orientation == 'horizontal';

            var gRect = rect;
            if (inverse)
                gRect = { x: rect.y, y: rect.x, width: rect.height, height: rect.width };

            var renderData = this._calcGroupOffsets(groupIndex, gRect);

            if (!renderData || renderData.xoffsets.length == 0)
                return;

            var valuesOnTicks = this._alignValuesWithTicks(groupIndex);

            for (var sidx = 0; sidx < group.series.length; sidx++) {
                var colors = this._getColors(groupIndex, sidx, undefined, this._getGroupGradientType(groupIndex));
                var s = group.series[sidx];
                var dataField = s.dataField;

                var opacity = s.opacity || group.opacity;
                if (!opacity || opacity < 0 || opacity > 1)
                    opacity = 1;

                var min = NaN, max = NaN;
                if (isBubble) {
                    for (var i = renderData.xoffsets.first; i <= renderData.xoffsets.last; i++) {
                        var val = this._getDataValueAsNumber(i, s.radiusDataField, groupIndex);
                        if (typeof (val) != 'number')
                            throw 'Invalid radiusDataField value at [' + i + ']';

                        if (isNaN(min) || val < min)
                            min = val;
                        if (isNaN(max) || val > max)
                            max = val;
                    }
                }

                var minRadius = s.minRadius;
                if (isNaN(minRadius))
                    minRadius = rect.width / 50;

                var maxRadius = s.maxRadius;
                if (isNaN(maxRadius))
                    maxRadius = rect.width / 25;

                if (minRadius > maxRadius)
                    throw 'Invalid settings: minRadius must be less than or equal to maxRadius';

                var radius = s.radius || 5;

                var anim = this._getAnimProps(groupIndex, sidx);
                var duration = anim.enabled && renderData.xoffsets.length < 5000 ? anim.duration : 0;

                for (var i = renderData.xoffsets.first; i <= renderData.xoffsets.last; i++) {
                    var val = this._getDataValueAsNumber(i, dataField, groupIndex);
                    if (typeof (val) != 'number')
                        continue;

                    var x = renderData.xoffsets.data[i];
                    var y = renderData.offsets[sidx][i].to;

                    if (isNaN(x) || isNaN(y))
                        continue;

                    if (inverse) {
                        var tmp = x;
                        x = y;
                        y = tmp + rect.y;
                    }
                    else {
                        x += rect.x;
                    }

                    x = $.jqx._ptrnd(x);
                    y = $.jqx._ptrnd(y);


                    var r = radius;
                    if (isBubble) {
                        var rval = this._getDataValueAsNumber(i, s.radiusDataField, groupIndex);
                        if (typeof (rval) != 'number')
                            continue;
                        r = minRadius + (maxRadius - minRadius) * (rval - min) / Math.max(1, max - min);
                        if (isNaN(r))
                            r = minRadius;
                    }

                    var elem = this.renderer.circle(x, y, duration == 0 ? r : 0);
                    this.renderer.attr(elem, { fill: colors.fillColor, 'fill-opacity': opacity, stroke: colors.lineColor, 'stroke-width': 1 });

                    var ctx = { from: 0, to: r };
                    var self = this;

                    if (duration > 0)
                        this._animate(elem, undefined, duration, function (element, context, percent) { self._animR(element, context, percent); }, ctx);

                    this._installHandlers(elem, groupIndex, sidx, i);

                    //this._showLabel(groupIndex, s, i, elRect);
                }
            }
        },

        _animR: function (element, context, percent) {
            var r = Math.round((context.to - context.from) * percent + context.from);
            if (this._isVML) {
                this.renderer.updateCircle(element, undefined, undefined, r);
            }
            else {
                this.renderer.attr(element, { r: r });
            }
        },

        //[optimize]
        _showToolTip: function (x, y, gidx, sidx, iidx) {
            if (this.showToolTips == false)
                return;

            var categoryAxis = this._getCategoryAxis(gidx);

            if (this._toolTipElement &&
                gidx == this._toolTipElement.gidx &&
                sidx == this._toolTipElement.sidx &&
                iidx == this._toolTipElement.iidx)
                return;

            this._hideToolTip();

            if (this._pointMarker) {
                // make it relative to the marker instead of cursor
                x = parseInt(this._pointMarker.x + 5);
                y = parseInt(this._pointMarker.y - 5);
            }

            var group = this.seriesGroups[gidx];
            var series = group.series[sidx];

            var valfs = series.toolTipFormatSettings || group.toolTipFormatSettings;
            var valff = series.toolTipFormatFunction || group.toolTipFormatFunction;

            var colors = this._getColors(gidx, sidx, iidx);
            var text = this._getFormattedValue(gidx, sidx, iidx, valfs, valff);
            var catvalue = this._getDataValue(iidx, categoryAxis.dataField, gidx);
            if (categoryAxis.dataField == undefined || categoryAxis.dataField == '')
                catvalue = iidx;

            var catfs = categoryAxis.toolTipFormatSettings || categoryAxis.formatSettings;
            var catff = categoryAxis.toolTipFormatFunction || categoryAxis.formatFunction;
            if (categoryAxis.type == 'date')
                catvalue = this._castAsDate(catvalue);
            var categoryText = this._formatValue(catvalue, catfs, catff);

            if (group.type != 'pie' && group.type != 'donut')
                text = (series.displayText || series.dataField || '') + ', ' + categoryText + ': ' + text;
            else {
                catvalue = this._getDataValue(iidx, series.displayText || series.dataField, gidx);
                categoryText = this._formatValue(catvalue, catfs, catff);
                text = categoryText + ': ' + text;
            }

            var cssToolTip = series.toolTipClass || group.toolTipClass || this.toThemeProperty('jqx-chart-tooltip-text', null);
            var toolTipFill = series.toolTipBackground || group.toolTipBackground || '#FFFFFF';
            var toolTipStroke = series.toolTipLineColor || group.toolTipLineColor || colors.lineColor;
            var sz = this.renderer.measureText(text, 0, { 'class': cssToolTip });
            sz.width = sz.width + 5;
            sz.height = sz.height + 6;

            rect = this.renderer.getRect();

            x = Math.max(x - 5, rect.x);
            y = Math.max(y - sz.height, rect.y);

            if (sz.width > rect.width || sz.height > rect.height)
                return;

            if (x + sz.width > rect.x + rect.width)
                x = rect.x + rect.width - sz.width - 2;

            if (y + sz.height > rect.y + rect.height)
                y = rect.y + rect.height - sz.height - 2;

            var box = this.renderer.rect(x, y, sz.width, sz.height);
            this.renderer.attr(box, { fill: toolTipFill, 'fill-opacity': 0, stroke: toolTipStroke, rx: 2, ry: 2, 'stroke-width': 1 });
            var txt = this.renderer.text(text, x, y, sz.width, sz.height, 0, { 'class': cssToolTip, 'opacity': 0 }, true, 'center', 'center');

            this._toolTipElement = { box: box, txt: txt, sidx: sidx, gidx: gidx, iidx: iidx };

            this._animate(box,
            [
            { key: 'fill-opacity', from: 0, to: 0.8 }
            ], 200);
            this._animate(txt,
            [
            { key: 'opacity', from: 0, to: 1 }
            ], 500);


        },

        //[optimize]
        _hideToolTip: function () {
            if (!this._toolTipElement)
                return;

            this.renderer.removeElement(this._toolTipElement.box);
            this.renderer.removeElement(this._toolTipElement.txt);

            this._toolTipElement = undefined;
        },

        //[optimize]
        _showLabel: function (gidx, sidx, iidx, rect, halign, valign, isMeasure) {
            var group = this.seriesGroups[gidx];
            var series = group.series[sidx];
            var sz = { width: 0, height: 0 };
            if (series.showLabels == false || (!series.showLabels && !group.showLabels))
                return sz;

            if (rect.width < 0 || rect.height < 0)
                return sz;

            var labelsAngle = series.labelsAngle || group.labelsAngle || 0;
            var labelOffset = series.labelOffset || group.labelOffset || { x: 0, y: 0 };
            var labelCSS = series.labelClass || group.labelClass || this.toThemeProperty('jqx-chart-label-text', null);

            halign = halign || 'center';
            valign = valign || 'center';
            var text = this._getFormattedValue(gidx, sidx, iidx);
            var w = rect.width;
            var h = rect.height;

            if (w == 0 || h == 0 || isMeasure) {
                sz = this.renderer.measureText(text, labelsAngle, { 'class': labelCSS });
                if (isMeasure)
                    return sz;
                w = sz.width;
                h = sz.height;
            }
            var elemLabel = this.renderer.text(text, rect.x + labelOffset.x, rect.y + labelOffset.y, w, h, labelsAngle, {}, labelsAngle != 0, halign, valign);
            this.renderer.attr(elemLabel, { 'class': labelCSS });
            if (this._isVML) {
                this.renderer.removeElement(elemLabel);
                this.renderer.getContainer()[0].appendChild(elemLabel);
            }
        },

        _getAnimProps: function (gidx, sidx) {
            var g = this.seriesGroups[gidx];
            var s = g.series[sidx];

            var enabled = this.enableAnimations == true;

            if (g.enableAnimations)
                enabled = g.enableAnimations == true;

            if (s.enableAnimations)
                enabled = s.enableAnimations == true;

            var duration = this.animationDuration;
            if (isNaN(duration))
                duration = 1000;

            var gd = g.animationDuration;
            if (!isNaN(gd))
                duration = gd;

            var sd = s.animationDuration;
            if (!isNaN(sd))
                duration = sd;

            if (duration > 5000)
                duration = 1000;

            return { enabled: enabled, duration: duration };
        },

        //[optimize]
        _renderLineSeries: function (groupIndex, rect) {
            var group = this.seriesGroups[groupIndex];
            if (!group.series || group.series.length == 0)
                return;

            var isArea = group.type.indexOf('area') != -1;
            var isStacked = group.type.indexOf('stacked') != -1;
            var isStacked100 = isStacked && group.type.indexOf('100') != -1;
            var isSpline = group.type.indexOf('spline') != -1;
            var isStep = group.type.indexOf('step') != -1;

            if (isStep && isSpline)
                return;

            var dataLength = this._getDataLen(groupIndex);
            var wPerItem = rect.width / dataLength;

            var intervals = Math.round(rect.width / wPerItem);
            var intervalLen = Math.round(dataLength / intervals);

            var swapXY = group.orientation == 'horizontal';
            var flipCategory = this._getCategoryAxis(groupIndex).flip == true;

            var gRect = rect;
            if (swapXY)
                gRect = { x: rect.y, y: rect.x, width: rect.height, height: rect.width };

            var renderData = this._calcGroupOffsets(groupIndex, gRect);

            if (!renderData || renderData.xoffsets.length == 0)
                return;

            var alignWithTicks = this._alignValuesWithTicks(groupIndex);

            for (var s = group.series.length - 1; s >= 0; s--) {
                var settings = this._getLineSettings(groupIndex, s);
                var curr = renderData.xoffsets.first;
                var last = curr;
                do {
                    var points = [];
                    var prev = -1;
                    var px = 0;
                    var xPrev = NaN;
                    var yPrev = NaN;
                    var pyStart = NaN;

                    if (renderData.xoffsets.length < 1)
                        continue;

                    var anim = this._getAnimProps(groupIndex, s);
                    var duration = anim.enabled && renderData.xoffsets.length < 10000 && this._isVML != true ? anim.duration : 0;
                    var first = curr;

                    for (var i = curr; i <= renderData.xoffsets.last; i++) {
                        curr = i;
                        var x = renderData.xoffsets.data[i];

                        if (x == undefined)
                            continue;

                        var py = renderData.offsets[s][i].to;
                        if (py == undefined) {
                            curr++;
                            break;
                        }
                        last = i;

                        if (!isArea && isStacked100) {
                            if (py <= gRect.y)
                                py = gRect.y + 1;
                            if (py >= gRect.y + gRect.height)
                                py = gRect.y + gRect.height - 1;
                        }
                        x = Math.max(x, 1);
                        px = x;

                        if (isStep && !isNaN(xPrev) && !isNaN(yPrev)) {
                            if (yPrev != py) {
                                points.push(swapXY ? { y: gRect.x + px, x: $.jqx._ptrnd(yPrev)} : { x: gRect.x + px, y: $.jqx._ptrnd(yPrev) });
                            }
                        }

                        points.push(swapXY ? { y: gRect.x + px, x: $.jqx._ptrnd(py), index: i} : { x: gRect.x + px, y: $.jqx._ptrnd(py), index: i });

                        xPrev = px;
                        yPrev = py;
                        if (isNaN(pyStart))
                            pyStart = py;

                    }

                    var left = gRect.x + renderData.xoffsets.data[first];
                    //var last = curr < renderData.xoffsets.length - 1 ? curr - 1 : renderData.xoffsets.last;
                    var right = gRect.x + renderData.xoffsets.data[last];

                    if (isArea && group.alignEndPointsWithIntervals != false) {
                        var sign = flipCategory ? -1 : 1;
                        if (left > gRect.x)
                            left -= sign * ((left - gRect.x) % renderData.xoffsets.itemWidth + 1);
                        if (right < gRect.x + gRect.width)
                            right += sign * (renderData.xoffsets.itemWidth - (right - gRect.x) % renderData.xoffsets.itemWidth - 1);
                    }
                    right = $.jqx._ptrnd(right);
                    left = $.jqx._ptrnd(left);

                    var yBase = renderData.baseOffset;
                    pyStart = $.jqx._ptrnd(pyStart);
                    var pyEnd = $.jqx._ptrnd(py) || yBase;

                    var lineCmd = this._calculateLine(points, yBase, duration == 0 ? 1.0 : 0, isArea, swapXY);
                    if (lineCmd != '')
                        lineCmd = this._buildLineCmd(lineCmd, left, right, pyStart, pyEnd, yBase, isArea, isSpline && points.length > 3, swapXY);
                    else
                        lineCmd = "M 0 0"; // workaround for errors in Chrome

                    var pathElement = this.renderer.path(
                        lineCmd,
                        {
                            'stroke-width': settings.stroke,
                            'stroke': settings.colors.lineColor,
                            'fill-opacity': settings.opacity,
                            fill: isArea ? settings.colors.fillColor : 'none'
                        }
                    );

                    this._installHandlers(pathElement, groupIndex, s);

                    if (duration > 0) {
                        var ctx = { groupIndex: groupIndex, seriesIndex: s, pointsArray: points, left: left, right: right, pyStart: pyStart, pyEnd: pyEnd, yBase: yBase, isArea: isArea, isSpline: isSpline };
                        var self = this;
                        this._animate(
                        pathElement,
                        undefined,
                        duration,
                        function (element, ctx, percent) {
                            var cmd = self._calculateLine(ctx.pointsArray, ctx.yBase, percent, ctx.isArea, swapXY);
                            if (cmd == '')
                                return;
                            var cnt = ctx.pointsArray.length;
                            if (!ctx.isArea)
                                cnt = Math.round(cnt * percent);
                            cmd = self._buildLineCmd(cmd, ctx.left, ctx.right, ctx.pyStart, ctx.pyEnd, ctx.yBase, ctx.isArea, cnt > 3 && ctx.isSpline, swapXY);
                            self.renderer.attr(element, { 'd': cmd });

                            if (percent == 1.0) {
                                var lineSettings = self._getLineSettings(ctx.groupIndex, ctx.seriesIndex);
                                for (var i = 0; i < ctx.pointsArray.length; i++) {
                                    self._showLabel(ctx.groupIndex, ctx.seriesIndex, ctx.pointsArray[i].index, { x: ctx.pointsArray[i].x, y: ctx.pointsArray[i].y, width: 0, height: 0 });
                                    self._drawSymbol(self._getSymbol(ctx.groupIndex, ctx.seriesIndex), ctx.pointsArray[i].x, ctx.pointsArray[i].y, lineSettings.colors.fillColor, lineSettings.colors.lineColor, 1/*lineSettings.stroke*/, lineSettings.opacity);
                                }
                            }
                        },
                        ctx);
                    }
                    else {
                        for (var i = 0; i < points.length; i++) {
                            this._showLabel(groupIndex, s, points[i].index, { x: points[i].x, y: points[i].y, width: 0, height: 0 });
                            this._drawSymbol(this._getSymbol(groupIndex, s), points[i].x, points[i].y, settings.colors.fillColor, settings.colors.lineColor, settings.stroke, settings.opacity);
                        }
                    }

                }
                while (curr < renderData.xoffsets.length - 1);
            } // for s
        },

        _calculateLine: function (pointsArray, yBase, percent, isArea, swapXY) {
            var cmd = '';
            var cnt = pointsArray.length;
            if (!isArea)
                cnt = Math.round(cnt * percent);

            for (var i = 0; i < cnt; i++) {
                if (i > 0)
                    cmd += ' ';
                var y = pointsArray[i].y;
                var x = pointsArray[i].x;
                if (isArea) {
                    if (swapXY)
                        x = $.jqx._ptrnd((x - yBase) * percent + yBase);
                    else
                        y = $.jqx._ptrnd((y - yBase) * percent + yBase);
                }

                cmd += x + ',' + y;
            }

            return cmd;
        },

        _buildLineCmd: function (pointsArray, left, right, pyStart, pyEnd, yBase, isArea, isSpline, swapXY) {
            var cmd = pointsArray;
            if (isSpline)
                cmd = this._getBezierPoints(pointsArray);

            var split = cmd.split(' ');
            var firstPoint = split[0].replace('C', '');

            if (isArea) {
                var ptTopLeft = swapXY ? pyStart + ',' + left : left + ',' + pyStart;
                var ptTopRight = swapXY ? pyEnd + ',' + right : right + ',' + pyEnd;
                var ptBottomLeft = swapXY ? yBase + ',' + left : left + ',' + yBase
                var ptBottomRight = swapXY ? yBase + ',' + right : right + ',' + yBase;

                cmd = 'M ' + ptBottomLeft + ' L ' + firstPoint
                        + (isSpline ? '' : (' L ' + firstPoint + ' '))
                        + cmd
                        + (isSpline ?
                            (' L' + ptBottomRight + ' M ' + ptBottomRight)
                            :
                            (' ' + ptBottomRight + ' ' + ptBottomLeft)
                        );

                cmd += ' Z';
            }
            else {
                if (isSpline)
                    cmd = 'M ' + firstPoint + ' ' + cmd;
                else
                    cmd = 'M ' + firstPoint + ' ' + 'L ' + firstPoint + ' ' + cmd;
            }

            return cmd;
        },

        //[optimize]
        _getLineSettings: function (groupIndex, seriesIndex) {
            var group = this.seriesGroups[groupIndex];
            var isArea = group.type.indexOf('area') != -1;
            var colors = this._getColors(groupIndex, seriesIndex, undefined, this._getGroupGradientType(groupIndex));

            var opacity = group.series[seriesIndex].opacity || group.opacity;
            if (!opacity || opacity < 0 || opacity > 1)
                opacity = 1;

            var stroke = group.series[seriesIndex].lineWidth || group.lineWidth;
            if (!stroke || stroke == 'auto' || isNaN(stroke) || stroke < 1 || stroke > 15) {
                stroke = isArea ? 2 : 3;
            }

            return { colors: colors, stroke: stroke, opacity: opacity };
        },

        //[optimize]
        _getColors: function (gidx, sidx, iidx, gradientType) {
            var group = this.seriesGroups[gidx];
            if (group.type != 'pie' && group.type != 'donut')
                iidx = undefined;

            var useGradient = group.series[sidx].useGradient || group.useGradient;
            if (useGradient == undefined)
                useGradient = true;

            var color;
            if (!isNaN(iidx)) {
                var dataLength = this._getDataLen(gidx);
                color = this._getColor(group.series[sidx].colorScheme || group.colorScheme || this.colorScheme, sidx * dataLength + iidx, gidx, sidx);
            }
            else
                color = this._getSeriesColor(gidx, sidx);

            var colorSelected = $.jqx._adjustColor(color, 1.1);

            var lineColor = $.jqx._adjustColor(color, 0.9);
            var lineSelected = $.jqx._adjustColor(colorSelected, 0.9);
            var fillColor = color;
            var fillSelected = colorSelected;

            var stops2 = [[0, 1.5], [100, 1]];
            var stops4 = [[0, 1], [25, 1.1], [50, 1.5], [100, 1]];
            var stopsR = [[0, 1.3], [90, 1.2], [100, 1.0]];

            if (useGradient) {
                if (gradientType == 'verticalLinearGradient') {
                    fillColor = this.renderer._toLinearGradient(color, true, stops2);
                    fillSelected = this.renderer._toLinearGradient(colorSelected, true, stops2);
                }
                else if (gradientType == 'horizontalLinearGradient') {
                    fillColor = this.renderer._toLinearGradient(color, false, stops4);
                    fillSelected = this.renderer._toLinearGradient(colorSelected, false, stops4);
                }
                else if (gradientType == 'radialGradient') {
                    var params = undefined;
                    var stops = stops2;
                    if ((group.type == 'pie' || group.type == 'donut') && iidx != undefined && this._renderData[gidx] && this._renderData[gidx][sidx]) {
                        params = this._renderData[gidx][sidx][iidx];
                        stops = stopsR;
                    }

                    fillColor = this.renderer._toRadialGradient(color, stops, params);
                    fillSelected = this.renderer._toRadialGradient(colorSelected, stops, params);
                }
            }

            return { baseColor: color, fillColor: fillColor, lineColor: lineColor, fillSelected: fillSelected, lineSelected: lineSelected };
        },

        //[optimize]
        _installHandlers: function (element, gidx, sidx, iidx) {
            var self = this;
            var g = this.seriesGroups[gidx];
            var s = this.seriesGroups[gidx].series[sidx];

            var isLineType = g.type.indexOf('line') != -1 || g.type.indexOf('area') != -1;

            if (!isLineType) {
                this.renderer.addHandler(element, 'mousemove', function (e) {
                    e.preventDefault();
                    self._startTooltipTimer(gidx, sidx, iidx);
                });
            }

            this.renderer.addHandler(element, 'mouseover', function (e) {
                e.preventDefault();
                self._select(element, gidx, sidx, iidx);
                // bypass for line and area series
                if (isLineType)
                    return;

                if (isNaN(iidx))
                    return;

                self._raiseEvent('mouseover', g, s, iidx);
            });

            this.renderer.addHandler(element, 'mouseout', function (e) {
                e.preventDefault();

                if (iidx != undefined)
                    self._cancelTooltipTimer();

                // bypass for line and area series
                if (isLineType)
                    return;

                self._unselect();

                if (isNaN(iidx))
                    return;

                self._raiseEvent('mouseout', g, s, iidx);
            });

            this.renderer.addHandler(element, 'click', function (e) {
                e.preventDefault();

                // bypass for line and area series
                if (isLineType)
                    return;

                if (g.type.indexOf('column') != -1)
                    self._unselect();

                if (isNaN(iidx))
                    return;

                self._raiseEvent('click', g, s, iidx);
            });

        },

        //[optimize]
        _getHorizontalOffset: function (gidx, sidx, x, y) {
            var rect = this._plotRect;
            var dataLength = this._getDataLen(gidx);
            if (dataLength == 0)
                return { index: undefined, value: x };

            var renderData = this._calcGroupOffsets(gidx, this._plotRect);
            if (renderData.xoffsets.length == 0)
                return { index: undefined, value: undefined };

            var px = x - rect.x;
            var py = y - rect.y;

            var g = this.seriesGroups[gidx];
            if (g.orientation == 'horizontal') {
                var tmp = px;
                px = py;
                py = tmp;
            }

            var inverse = this._getCategoryAxis(gidx).flip == true;

            var minDist = undefined;
            var idx = undefined;
            for (var i = 0; i < renderData.xoffsets.length; i++) {
                var x1 = renderData.xoffsets.data[i];
                var y1 = renderData.offsets[sidx][i].to;

                //var dist = Math.sqrt(Math.pow(Math.abs(px - x1), 2) + Math.pow(Math.abs(py - y1), 2));
                var dist = Math.abs(px - x1);
                if (isNaN(minDist) || minDist > dist) {
                    minDist = dist;
                    idx = i;
                }
            }

            return { index: idx, value: renderData.xoffsets.data[idx] };
        },

        //[optimize]
        onmousemove: function (x, y) {
            this._mouseX = x;
            this._mouseY = y;

            this._hideToolTip();

            if (!this._selected)
                return;

            var rect = this._plotRect;

            var rBounds = this._paddedRect;
            if (x < rBounds.x || x > rBounds.x + rBounds.width ||
                y < rBounds.y || y > rBounds.y + rBounds.height) {
                this._unselect();
                return;
            }

            var gidx = this._selected.group;
            var g = this.seriesGroups[gidx];
            var s = g.series[this._selected.series];

            var inverse = g.orientation == 'horizontal';

            var type = this.seriesGroups[gidx].type;
            var rect = this._plotRect;
            if (type.indexOf('line') != -1 || type.indexOf('area') != -1) {
                var offset = this._getHorizontalOffset(gidx, this._selected.series, x, y);
                var i = offset.index;
                if (i == undefined)
                    return;

                if (this._selected.item != i) {
                    if (this._selected.item)
                        this._raiseEvent('mouseout', g, s, this._selected.item);

                    this._selected.item = i;
                    this._raiseEvent('mouseover', g, s, i);
                }

                var symbolType = this._getSymbol(this._selected.group, this._selected.series);
                if (symbolType == 'none')
                    symbolType = 'circle';

                var renderData = this._calcGroupOffsets(gidx, rect);
                y = renderData.offsets[this._selected.series][i].to;
                if (y == undefined)
                    return;

                x = offset.value;

                if (inverse) {
                    var tmp = x;
                    x = y;
                    y = tmp + rect.y;
                }
                else {
                    x += rect.x;
                }

                y = $.jqx._ptrnd(y);
                x = $.jqx._ptrnd(x);

                if (this._pointMarker) {
                    this.renderer.removeElement(this._pointMarker.element);
                }

                var color = this._getSeriesColor(this._selected.group, this._selected.series);
                var strokeColor = $.jqx._adjustColor(color, 0.5);

                this._pointMarker = { type: symbolType, x: x, y: y };
                this._pointMarker.element = this._drawSymbol(symbolType, x, y, color, strokeColor, 1.0, 1.0, 8);

                this._startTooltipTimer(gidx, this._selected.series, i);
            }
        },

        //[optimize]
        _drawSymbol: function (type, x, y, fill, stroke, lineWidth, opacity, size) {
            var element;
            var sz = size || 6;
            var sz2 = sz / 2;
            switch (type) {
                case 'none':
                    return undefined;
                case 'circle':
                    element = this.renderer.circle(x, y, sz / 2);
                    break;
                case 'square':
                    sz = sz - 1; sz2 = sz / 2;
                    element = this.renderer.rect(x - sz2, y - sz2, sz, sz);
                    break;
                case 'diamond':
                    {
                        var path = 'M ' + (x - sz2) + ',' + (y)
                            + ' L ' + (x) + ',' + (y + sz2)
                            + ' L ' + (x + sz2) + ',' + (y)
                            + ' L ' + (x) + ',' + (y - sz2)
                            + ' Z';
                        element = this.renderer.path(path);
                    } break;
                case 'triangle_up':
                    {
                        var path = 'M ' + (x - sz2) + ',' + (y + sz2)
                            + ' L ' + (x + sz2) + ',' + (y + sz2)
                            + ' L ' + (x) + ',' + (y - sz2)
                            + ' Z';
                        element = this.renderer.path(path);
                    } break;
                case 'triangle_down':
                    {
                        var path = 'M ' + (x - sz2) + ',' + (y - sz2)
                            + ' L ' + (x) + ',' + (y + sz2)
                            + ' L ' + (x + sz2) + ',' + (y - sz2)
                            + ' Z';
                        element = this.renderer.path(path);
                    } break;
                case 'triangle_left':
                    {
                        var path = 'M ' + (x - sz2) + ',' + (y)
                            + ' L ' + (x + sz2) + ',' + (y + sz2)
                            + ' L ' + (x + sz2) + ',' + (y - sz2)
                            + ' Z';
                        element = this.renderer.path(path);
                    } break;
                case 'triangle_right':
                    {
                        var path = 'M ' + (x - sz2) + ',' + (y - sz2)
                            + ' L ' + (x - sz2) + ',' + (y + sz2)
                            + ' L ' + (x + sz2) + ',' + (y)
                            + ' Z';
                        element = this.renderer.path(path);
                    } break;
                default:
                    element = this.renderer.circle(x, y, sz);
            }

            this.renderer.attr(element, { fill: fill, stroke: stroke, 'stroke-width': lineWidth, 'fill-opacity': opacity });
            return element;
        },

        //[optimize]
        _getSymbol: function (groupIndex, seriesIndex) {
            var symbols = ['circle', 'square', 'diamond', 'triangle_up', 'triangle_down', 'triangle_left', 'triangle_right'];
            var g = this.seriesGroups[groupIndex];
            var s = g.series[seriesIndex];
            var symbolType = undefined;
            if (s.symbolType != undefined)
                symbolType = s.symbolType;
            if (symbolType == undefined)
                symbolType = g.symbolType;

            if (symbolType == 'default')
                return symbols[seriesIndex % symbols.length];
            else if (symbolType != undefined)
                return symbolType;

            return 'none';
        },

        //[optimize]
        _startTooltipTimer: function (gidx, sidx, iidx) {
            this._cancelTooltipTimer();
            var self = this;
            var g = self.seriesGroups[gidx];
            var delay = this.toolTipShowDelay || this.toolTipDelay;
            if (isNaN(delay) || delay > 10000 || delay < 0)
                delay = 500;

            this._tttimer = setTimeout(function () {
                self._showToolTip(self._mouseX, self._mouseY - 3, gidx, sidx, iidx);
                var toolTipHideDelay = self.toolTipHideDelay;
                if (isNaN(toolTipHideDelay))
                    toolTipHideDelay = 4000;
                self._tttimer = setTimeout(function () { self._hideToolTip(); }, toolTipHideDelay);
            }, delay);
        },

        //[optimize]
        _cancelTooltipTimer: function () {
            clearTimeout(this._tttimer);
        },

        //[optimize]
        _getGroupGradientType: function (gidx) {
            var g = this.seriesGroups[gidx];
            if (g.type.indexOf('area') != -1)
                return g.orientation == 'horizontal' ? 'horizontalLinearGradient' : 'verticalLinearGradient';
            else if (g.type.indexOf('column') != -1)
                return g.orientation == 'horizontal' ? 'verticalLinearGradient' : 'horizontalLinearGradient';
            else if (g.type.indexOf('scatter') != -1 || g.type.indexOf('bubble') != -1 || g.type.indexOf('pie') != -1 || g.type.indexOf('donut') != -1)
                return 'radialGradient';

            return undefined;
        },

        //[optimize]
        _select: function (element, gidx, sidx, iidx) {
            if (this._selected && this._selected.element != element) {
                this._unselect();
            }

            this._selected = { element: element, group: gidx, series: sidx, item: iidx };
            var g = this.seriesGroups[gidx];

            var colors = this._getColors(gidx, sidx, iidx, this._getGroupGradientType(gidx));
            if (g.type.indexOf('line') != -1 && g.type.indexOf('area') == -1)
                colors.fillSelected = 'none';

            this.renderer.attr(element, { 'stroke': colors.lineSelected, fill: colors.fillSelected });
        },

        //[optimize]
        _unselect: function () {
            if (this._selected) {
                var gidx = this._selected.group;
                var sidx = this._selected.series;
                var iidx = this._selected.item;
                var g = this.seriesGroups[gidx];
                var s = g.series[sidx];

                var colors = this._getColors(gidx, sidx, iidx, this._getGroupGradientType(gidx));
                if (g.type.indexOf('line') != -1 && g.type.indexOf('area') == -1)
                    colors.fillColor = 'none';

                this.renderer.attr(this._selected.element, { 'stroke': colors.lineColor, fill: colors.fillColor });

                if (g.type.indexOf('line') != -1 || g.type.indexOf('area') != -1 && !isNaN(iidx)) {
                    this._raiseEvent('mouseout', g, s, iidx);
                }

                this._selected = undefined;
            }

            if (this._pointMarker) {
                this.renderer.removeElement(this._pointMarker.element);
                this._pointMarker = undefined;
            }
        },

        //[optimize]
        _raiseEvent: function (event, group, serie, index) {
            var fn = serie[event] || group[event];
            var gidx = 0;
            for (; gidx < this.seriesGroups.length; gidx++)
                if (this.seriesGroups[gidx] == group)
                    break;
            if (gidx == this.seriesGroups.length)
                return;

            if (fn && $.isFunction(fn))
                fn({ event: event, seriesGroup: group, serie: serie, elementIndex: index, elementValue: this._getDataValue(index, serie.dataField, gidx) });
        },

        //[optimize]
        _calcGroupOffsets: function (groupIndex, rect) {
            var group = this.seriesGroups[groupIndex];
            if (!group.series || group.series.length == 0)
                return;

            var inverse = group.valueAxis.flip == true;

            if (!this._renderData)
                this._renderData = new Array();

            while (this._renderData.length < groupIndex + 1)
                this._renderData.push(null);

            if (this._renderData[groupIndex] != null)
                return this._renderData[groupIndex];

            var out = new Array();

            var isStacked = group.type.indexOf("stacked") != -1;
            var isStacked100 = isStacked && group.type.indexOf("100") != -1;

            var dataLength = this._getDataLen(groupIndex);
            var gbase = group.baselineValue || 0;
            var stat = this._stats.seriesGroups[groupIndex];
            if (!stat || !stat.isValid)
                return;

            if (gbase > stat.max)
                gbase = stat.max;
            if (gbase < stat.min)
                gbase = stat.min;

            var range = isStacked100 ? stat.maxRange : stat.max - stat.min;
            var scale = rect.height / range;

            var yzero = 0;
            if (isStacked100) {
                if (stat.min * stat.max < 0) {
                    range /= 2;
                    yzero = -(range + gbase) * scale;
                }
                else {
                    yzero = -gbase * scale;
                }
            }
            else
                yzero = -(gbase - stat.min) * scale;

            if (inverse)
                yzero = -yzero + rect.y;
            else
                yzero += rect.y + rect.height;

            var yPOffset = new Array();
            var yNOffset = new Array();

            yzero = $.jqx._ptrnd(yzero);

            var th = (stat.min * stat.max < 0) ? rect.height / 2 : rect.height;

            for (var j = 0; j < group.series.length; j++) {
                out.push(new Array());
                for (var i = 0; i < dataLength; i++) {
                    var val = this._getDataValueAsNumber(i, group.series[j].dataField, groupIndex);
                    if (isNaN(val)) {
                        out[j].push({ from: undefined, to: undefined });
                        continue;
                    }

                    if (val > stat.rmax)
                        val = stat.rmax;
                    if (val < stat.rmin)
                        val = stat.rmin;

                    var yOffset = (val > gbase) ? yPOffset : yNOffset;

                    var h = scale * (val - gbase);
                    var y = yzero;

                    if (isStacked) {
                        if (isStacked100) {
                            var irange = (stat.psums[i] - stat.nsums[i]);

                            if (val > gbase) {
                                h = (stat.psums[i] / irange) * th;
                                if (stat.psums[i] != 0)
                                    h *= val / stat.psums[i];
                            }
                            else {
                                h = (stat.nsums[i] / irange) * th;
                                if (stat.nsums[i] != 0)
                                    h *= val / stat.nsums[i];
                            }
                        }

                        if (isNaN(yOffset[i])) {
                            yOffset[i] = yzero;
                        }

                        y = yOffset[i];
                    }

                    h = Math.abs(h);
                    h = this._isVML ? Math.round(h) : $.jqx._rup(h);

                    // adjust the height to make sure it span the entire height
                    // otherwise there will be a few pixels inaccuracy
                    if (j == group.series.length - 1 && isStacked100) {
                        var sumH = 0;
                        for (var k = 0; k < j; k++)
                            sumH += Math.abs(out[k][i].to - out[k][i].from);
                        sumH += h;
                        if (sumH < th) {
                            if (h > 0.5)
                                h = $.jqx._ptrnd(h + th - sumH);
                            else {
                                var k = j - 1;
                                while (k >= 0) {
                                    var diff = Math.abs(out[k][i].to - out[k][i].from);
                                    if (diff > 1) {
                                        if (out[k][i].from > out[k][i].to) {
                                            out[k][i].from += th - sumH;
                                        }
                                        break;
                                    }
                                    k--;
                                }
                            }
                        }
                    }

                    if (inverse)
                        h *= -1;

                    if (val < gbase) {
                        yOffset[i] += h;
                        out[j].push({ from: y, to: y + h - 1 });
                    }
                    else {
                        yOffset[i] -= h;
                        out[j].push({ from: y, to: y - h });
                    }
                }
            }

            var h = scale * Math.max(stat.min, gbase);
            this._renderData[groupIndex] = { baseOffset: yzero, offsets: out };

            // calculate horizontal offsets
            this._renderData[groupIndex].xoffsets = this._calculateXOffsets(groupIndex, rect);
            // end calculating horizontal offsets

            return this._renderData[groupIndex];
        },

        _isPointSeriesOnly: function () {
            for (var i = 0; i < this.seriesGroups.length; i++) {
                var g = this.seriesGroups[i];
                if (g.type.indexOf('line') == -1 && g.type.indexOf('area') == -1 && g.type.indexOf('scatter') == -1 && g.type.indexOf('bubble') == -1)
                    return false;
            }

            return true;
        },

        _alignValuesWithTicks: function (groupIndex) {
            var psonly = this._isPointSeriesOnly();

            // if categoryAxis
            var xAxis = this._getCategoryAxis(groupIndex);
            var xAxisValuesOnTicks = xAxis.valuesOnTicks == undefined ? psonly : xAxis.valuesOnTicks != false;
            if (groupIndex == undefined)
                return xAxisValuesOnTicks;

            var g = this.seriesGroups[groupIndex];

            if (g.valuesOnTicks == undefined)
                return xAxisValuesOnTicks;

            return g.valuesOnTicks;
        },

        _getYearsDiff: function (from, to) {
            return to.getFullYear() - from.getFullYear(); // this._getMonthsDiff(from, to) / 12;
        },

        _getMonthsDiff: function (from, to) {
            return 12 * (to.getFullYear() - from.getFullYear()) + to.getMonth() - from.getMonth();
        },

        _getDaysDiff: function (from, to) {
            return (to.valueOf() - from.valueOf()) / (1000 * 24 * 3600);
        },

        _getDateDiff: function (from, to, baseUnit) {
            var diff = 0;
            if (baseUnit == 'year')
                diff = this._getYearsDiff(from, to);
            else if (baseUnit == 'month')
                diff = this._getMonthsDiff(from, to);
            else
                diff = this._getDaysDiff(from, to);

            return diff;
        },

        _getDatesArray: function (min, max, baseUnit, inclNext) {
            var arr = [];

            var len = this._getDateDiff(min, max, baseUnit) + 1;
            if (baseUnit == 'year') {
                if (inclNext)
                    len++;
                var val = min.getFullYear();
                for (var i = 0; i < len; i++) {
                    arr.push(new Date(val, 0, 1, 0, 0, 0, 0));
                    val++;
                }
            }
            else if (baseUnit == 'month') {
                if (inclNext)
                    len++;

                var month = min.getMonth();
                var year = min.getFullYear();
                for (var i = 0; i < len; i++) {
                    arr.push(new Date(year, month, 1, 0, 0, 0, 0));
                    month++;
                    if (month > 11) {
                        year++;
                        month = 0;
                    }
                }
            }
            else if (baseUnit == 'day') {
                for (var i = 0; i < len; i++) {
                    var date = new Date(min.valueOf() + i * 1000 * 3600 * 24);
                    arr.push(date);
                }
            }

            return arr;
        },

        _calculateXOffsets: function (groupIndex, rect) {
            var xAxis = this._getCategoryAxis(groupIndex);
            var xoffsets = new Array();
            var dataLength = this._getDataLen(groupIndex);
            var isDate = xAxis.type == 'date';
            var axisMin = isDate ? this._castAsDate(xAxis.minValue) : this._castAsNumber(xAxis.minValue);
            var axisMax = isDate ? this._castAsDate(xAxis.maxValue) : this._castAsNumber(xAxis.maxValue);

            var min = axisMin, max = axisMax;

            if (isNaN(min) || isNaN(max)) {
                for (var i = 0; i < dataLength; i++) {
                    var value = this._getDataValue(i, xAxis.dataField, groupIndex);
                    value = isDate ? this._castAsDate(value) : this._castAsNumber(value);
                    if (value == undefined || isNaN(value))
                        continue;
                    if (value < min || isNaN(min))
                        min = value;
                    if (value > max || isNaN(max))
                        max = value;
                }
            }

            min = axisMin || min;
            max = axisMax || max;

            if (isDate && !(this._isDate(min) && this._isDate(max))) {
                throw 'Invalid Date values';
            }

            var isRange = (xAxis.maxValue != undefined) || (xAxis.minValue != undefined);
            if (isRange && (isNaN(max) || isNaN(min))) {
                isRange = false;
                throw 'Invalid min/max category values';
            }

            if (!isRange && !isDate) {
                min = 0;
                max = dataLength - 1;
            }

            var interval = xAxis.unitInterval;
            if (isNaN(interval) || interval <= 0)
                interval = 1;

            var rangeLength = NaN;
            var valuesOnTicks = this._alignValuesWithTicks(groupIndex);

            if (isRange) {
                if (valuesOnTicks)
                    rangeLength = max - min;
                else
                    rangeLength = max - min + interval;
            }
            else {
                rangeLength = dataLength - 1;
                if (!valuesOnTicks)
                    rangeLength++;
            }

            if (rangeLength == 0)
                rangeLength = interval;

            var dateRangeDays = 0;
            var _max = max;
            var _min = min;

            if (isDate) {
                rangeLength = this._getDateDiff(_min, _max, xAxis.baseUnit);
                rangeLength = $.jqx._rnd(rangeLength, 1, false);

                if (!valuesOnTicks || (valuesOnTicks && (xAxis.baseUnit == 'month' || xAxis.baseUnit == 'year')))
                    rangeLength++;

                if (xAxis.baseUnit != 'day') {
                    if (xAxis.baseUnit == 'month') {
                        _min = new Date(_min.getFullYear(), _min.getMonth(), 1);
                        _max = new Date(_min);
                        _max.setMonth(_max.getMonth() + rangeLength);
                    }
                    else {
                        _min = new Date(_min.getFullYear(), 0, 1);
                        _max = new Date(_min);
                        _max.setYear(_max.getFullYear() + rangeLength);
                    }
                }
                dateRangeDays = $.jqx._rnd(this._getDateDiff(_min, _max, 'day'), 1, false);
                if (!valuesOnTicks) {
                    dateRangeDays++;
                }
            }

            var itemsCount = Math.max(1, rangeLength / interval);
            var itemWidth = rect.width / itemsCount;

            var isColumn = groupIndex != undefined && this.seriesGroups[groupIndex].type.indexOf('column') != -1;

            var xAdjust = 0;
            if (!valuesOnTicks && (!isDate || xAxis.baseUnit == 'day') && !isColumn)
                xAdjust = itemWidth / 2;

            var first = -1, last = -1;
            for (var i = 0; i < dataLength; i++) {
                if (!isRange && !isDate) {
                    xoffsets.push($.jqx._ptrnd(xAdjust + (i - _min) / rangeLength * rect.width));
                    if (first == -1)
                        first = i;
                    if (last == -1 || last < i)
                        last = i;
                    continue;
                }

                var value = this._getDataValue(i, xAxis.dataField, groupIndex);
                value = isDate ? this._castAsDate(value) : this._castAsNumber(value);
                if (isNaN(value) || value < _min || value > _max) {
                    xoffsets.push(-1);
                    continue;
                }

                var diffFromMin = isDate ? this._getDateDiff(_min, value, 'day') : value - _min;

                var x = $.jqx._ptrnd(xAdjust + diffFromMin / (isDate ? dateRangeDays : rangeLength) * rect.width);

                xoffsets.push(x);
                if (first == -1)
                    first = i;
                if (last == -1 || last < i)
                    last = i;
            }

            if (xAxis.flip == true) {
                xoffsets.reverse();
            }

            return { data: xoffsets, first: first, last: last, length: last == -1 ? 0 : last - first + 1, itemWidth: itemWidth, rangeLength: rangeLength, min: min, max: max, customRange: isRange };
        },

        //[optimize]
        _getCategoryAxis: function (gidx) {
            if (gidx == undefined || this.seriesGroups.length <= gidx)
                return this.categoryAxis;

            return this.seriesGroups[gidx].categoryAxis || this.categoryAxis;
        },

        //[optimize]
        _isGreyScale: function (groupIndex, seriesIndex) {
            var g = this.seriesGroups[groupIndex];
            var s = g.series[seriesIndex];

            if (s.greyScale == true)
                return true;
            else if (s.greyScale == false)
                return false;

            if (g.greyScale == true)
                return true;
            else if (g.greyScale == false)
                return false;

            return this.greyScale == true;
        },



        //[optimize]
        _getSeriesColor: function (groupIndex, seriesIndex) {
            var color = this._getSeriesColorInternal(groupIndex, seriesIndex);

            if (this._isGreyScale(groupIndex, seriesIndex) && color.indexOf('#') == 0) {
                color = $.jqx.toGreyScale(color);
            }

            return color;
        },

        //[optimize]
        _getSeriesColorInternal: function (groupIndex, seriesIndex) {
            var g = this.seriesGroups[groupIndex];
            var s = g.series[seriesIndex];

            if (s.color)
                return s.color;

            var sidx = 0;
            for (var i = 0; i <= groupIndex; i++) {
                for (var j in this.seriesGroups[i].series) {
                    if (i == groupIndex && j == seriesIndex)
                        break;
                    else
                        sidx++;
                }
            }

            var colorScheme = this.colorScheme;
            if (g.colorScheme) {
                colorScheme = g.colorScheme;
                sidex = seriesIndex;
            }

            if (colorScheme == undefined || colorScheme == '')
                colorScheme = this.colorSchemes[0].name;

            if (colorScheme) {
                for (var i = 0; i < this.colorSchemes.length; i++) {
                    var cs = this.colorSchemes[i];
                    if (cs.name == colorScheme) {
                        while (sidx > cs.colors.length) {
                            sidx -= cs.colors.length;
                            if (++i >= this.colorSchemes.length)
                                i = 0;
                            cs = this.colorSchemes[i];
                        }

                        return cs.colors[sidx % cs.colors.length];
                    }
                }
            }

            return '#222222';
        },

        _getColor: function (scheme, index, gidx, sidx) {
            if (scheme == undefined || scheme == '')
                scheme = this.colorSchemes[0].name;

            for (var i = 0; i < this.colorSchemes.length; i++)
                if (scheme == this.colorSchemes[i].name)
                    break;

            var j = 0;
            while (j <= index) {
                if (i == this.colorSchemes.length)
                    i = 0;

                var schLen = this.colorSchemes[i].colors.length;
                if (j + schLen <= index) {
                    j += schLen;
                    i++;
                }
                else {
                    var color = this.colorSchemes[i].colors[index - j];

                    if (this._isGreyScale(gidx, sidx) && color.indexOf('#') == 0)
                        color = $.jqx.toGreyScale(color);

                    return color;
                }
            }
        },

        getColorScheme: function (scheme) {
            for (var i in this.colorSchemes) {
                if (this.colorSchemes[i].name == scheme)
                    return this.colorSchemes[i].colors;
            }

            return undefined;
        },

        addColorScheme: function (scheme, colors) {
            for (var i in this.colorSchemes) {
                if (this.colorSchemes[i].name == scheme) {
                    this.colorSchemes[i].colors = colors;
                    return;
                }
            }

            this.colorSchemes.push({ name: scheme, colors: colors });
        },

        removeColorScheme: function (scheme) {
            for (var i in this.colorSchemes) {
                if (this.colorSchemes[i].name == scheme) {
                    this.colorSchemes.splice(i, 1);
                    break;
                }
            }
        },

        /************* COLOR SCHEMES ************/
        //[optimize]
        colorSchemes: [
            { name: 'scheme01', colors: ['#4572A7', '#AA4643', '#89A54E', '#71588F', '#4198AF'] },
            { name: 'scheme02', colors: ['#7FD13B', '#EA157A', '#FEB80A', '#00ADDC', '#738AC8'] },
            { name: 'scheme03', colors: ['#E8601A', '#FF9639', '#F5BD6A', '#599994', '#115D6E'] },
            { name: 'scheme04', colors: ['#D02841', '#FF7C41', '#FFC051', '#5B5F4D', '#364651'] },
            { name: 'scheme05', colors: ['#25A0DA', '#309B46', '#8EBC00', '#FF7515', '#FFAE00'] },
            { name: 'scheme06', colors: ['#0A3A4A', '#196674', '#33A6B2', '#9AC836', '#D0E64B'] },
            { name: 'scheme07', colors: ['#CC6B32', '#FFAB48', '#FFE7AD', '#A7C9AE', '#888A63'] },
            { name: 'scheme08', colors: ['#2F2933', '#01A2A6', '#29D9C2', '#BDF271', '#FFFFA6'] },
            { name: 'scheme09', colors: ['#1B2B32', '#37646F', '#A3ABAF', '#E1E7E8', '#B22E2F'] },
            { name: 'scheme10', colors: ['#5A4B53', '#9C3C58', '#DE2B5B', '#D86A41', '#D2A825'] },
            { name: 'scheme11', colors: ['#993144', '#FFA257', '#CCA56A', '#ADA072', '#949681']}///,
        //{ name: 'scheme02', colors: ['#105B63', '#FFFAD5', '#FFD34E', '#DB9E36', '#BD4932'] },
        //{ name: 'scheme04', colors: ['#BBEBBC', '#F0EE94', '#F5C465', '#FA7642', '#FF1E54'] },
        //{ name: 'scheme08', colors: ['#40371E', '#F2EEAC', '#BFA575', '#A63841', '#BFB8A3']},
        //{ name: 'scheme11', colors: ['#222526', '#FFBB6E', '#F28D00', '#D94F00', '#7F203B'] },
        //{ name: 'scheme12', colors: ['#381C19', '#472E29', '#948658', '#F0E99A', '#362E29'] },
        //{ name: 'scheme18', colors: ['#142D58', '#447F6E', '#E1B65B', '#C8782A', '#9E3E17'] },
        //{ name: 'scheme20', colors: ['#4D2B1F', '#635D61', '#7992A2', '#97BFD5', '#BFDCF5'] }//,
        //{ name: 'scheme04', colors: ['#844341', '#D5CC92', '#BBA146', '#897B26', '#55591C'] },
        //{ name: 'scheme05', colors: ['#56626B', '#6C9380', '#C0CA55', '#F07C6C', '#AD5472'] },
        //{ name: 'scheme07', colors: ['#96003A', '#FF7347', '#FFBC7B', '#FF4154', '#440203'] },
        //{ name: 'scheme08', colors: ['#5D7359', '#E0D697', '#D6AA5C', '#8C5430', '#661C0E'] },
        //{ name: 'scheme21', colors: ['#16193B', '#35478C', '#4E7AC7', '#7FB2F0', '#ADD5F7'] },
        //{ name: 'scheme24', colors: ['#7B1A25', '#BF5322', '#9DA860', '#CEA457', '#B67818'] },
        //{ name: 'scheme26', colors: ['#0081DA', '#3AAFFF', '#99C900', '#FFEB3D', '#309B46'] },
        //{ name: 'scheme27', colors: ['#0069A5', '#0098EE', '#7BD2F6', '#FFB800', '#FF6800'] },
        //{ name: 'scheme28', colors: ['#FF6800', '#A0A700', '#FF8D00', '#678900', '#0069A5'] }

        ],

        /********** END OF COLOR SCHEMES ********/
        //[optimize]
        _formatValue: function (value, formatSettings, formatFunction) {
            if (value == undefined)
                return '';

            if (this._isObject(value) && !formatFunction)
                return '';

            if (formatFunction) {
                if (!$.isFunction(formatFunction))
                    return value.toString();

                try {
                    return formatFunction(value);
                }
                catch (e) {
                    return e.message;
                }
            }

            if (this._isNumber(value))
                return this._formatNumber(value, formatSettings);

            if (this._isDate(value))
                return this._formatDate(value, formatSettings);

            if (formatSettings) {
                return (formatSettings.prefix || '') + value.toString() + (formatSettings.sufix || '');
            }

            return value.toString();
        },

        //[optimize]
        _getFormattedValue: function (groupIndex, seriesIndex, itemIndex, formatSettings, formatFunction) {
            var g = this.seriesGroups[groupIndex];
            var s = g.series[seriesIndex];
            var text = '';

            var fs = formatSettings, fn = formatFunction;
            if (!fn)
                fn = s.formatFunction || g.formatFunction;
            if (!fs)
                fs = s.formatSettings || g.formatSettings;

            // series format settings takes priority over group format function;
            if (!s.formatFunction && s.formatSettings)
                fn = undefined;

            var value = this._getDataValue(itemIndex, s.dataField, groupIndex);
            if (value) {
                // format function is used with priority when available.
                text = this._formatValue(value, fs, fn);
            }

            return text || '';
        },

        //[optimize]
        _isNumberAsString: function (text) {
            if (typeof (text) != 'string')
                return false;

            text = $.trim(text);
            for (var i = 0; i < text.length; i++) {
                var ch = text.charAt(i);
                if ((ch >= '0' && ch <= '9') || ch == ',' || ch == '.')
                    continue;

                if (ch == '-' && i == 0)
                    continue;

                if ((ch == '(' && i == 0) || (ch == ')' && i == text.length - 1))
                    continue;

                return false;
            }

            return true;
        },

        //[optimize]
        _castAsDate: function (value) {
            if (value instanceof Date && !isNaN(value))
                return value;

            if (typeof (value) == 'string') {
                var date = new Date(value);
                if (date != undefined)
                    return date;
            }

            return undefined;
        },


        //[optimize]
        _castAsNumber: function (value) {
            if (value instanceof Date && !isNaN(value))
                return value.valueOf();

            if (typeof (value) == 'string') {
                if (this._isNumber(value)) {
                    value = parseFloat(value);
                }
                else {
                    var date = new Date(value);
                    if (date != undefined)
                        value = date.valueOf();
                }
            }

            return value;
        },

        //[optimize]
        _isNumber: function (value) {
            if (typeof (value) == 'string') {
                if (this._isNumberAsString(value))
                    value = parseFloat(value);
            }
            return typeof value === 'number' && isFinite(value);
        },

        //[optimize]
        _isDate: function (value) {
            return value instanceof Date;
        },

        //[optimize]
        _isBoolean: function (value) {
            return typeof value === 'boolean';
        },

        //[optimize]
        _isObject: function (value) {
            return (value && (typeof value === 'object' || $.isFunction(value))) || false;
        },

        //[optimize]
        _formatDate: function (value, settings) {
            return value.toString();
        },

        //[optimize]
        _formatNumber: function (value, settings) {
            if (!this._isNumber(value))
                return value;

            settings = settings || {};

            var decimalSeparator = settings.decimalSeparator || '.';
            var thousandsSeparator = settings.thousandsSeparator || '';
            var prefix = settings.prefix || '';
            var sufix = settings.sufix || '';
            var decimalPlaces = settings.decimalPlaces || ((value * 100 != parseInt(value) * 100) ? 2 : 0);
            var negativeWithBrackets = settings.negativeWithBrackets || false;

            var negative = (value < 0);

            if (negative && negativeWithBrackets)
                value *= -1;

            var output = value.toString();
            var decimalindex;

            var decimal = Math.pow(10, decimalPlaces);
            output = (Math.round(value * decimal) / decimal).toString();
            if (isNaN(output)) {
                output = '';
            }

            decimalindex = output.lastIndexOf(".");
            if (decimalPlaces > 0) {
                if (decimalindex < 0) {
                    output += decimalSeparator;
                    decimalindex = output.length - 1;
                }
                else if (decimalSeparator !== ".") {
                    output = output.replace(".", decimalSeparator);
                }
                while ((output.length - 1 - decimalindex) < decimalPlaces) {
                    output += "0";
                }
            }

            decimalindex = output.lastIndexOf(decimalSeparator);
            decimalindex = (decimalindex > -1) ? decimalindex : output.length;
            var newoutput = output.substring(decimalindex);
            var cnt = 0;
            for (var i = decimalindex; i > 0; i--, cnt++) {
                if ((cnt % 3 === 0) && (i !== decimalindex) && (!negative || (i > 1) || (negative && negativeWithBrackets))) {
                    newoutput = thousandsSeparator + newoutput;
                }
                newoutput = output.charAt(i - 1) + newoutput;
            }
            output = newoutput;

            if (negative && negativeWithBrackets)
                output = '(' + output + ')';

            return prefix + output + sufix;
        },

        //[optimize]
        _defaultNumberFormat: { prefix: '', sufix: '', decimalSeparator: '.', thousandsSeparator: ',', decimalPlaces: 2, negativeWithBrackets: false },

        _getBezierPoints: function (arr) {
            var points = [];
            var split = arr.split(' ');
            for (var i = 0; i < split.length; i++) {
                var pt = split[i].split(',');
                points.push({ x: parseFloat(pt[0]), y: parseFloat(pt[1]) });
            }

            var result = '';

            for (var i = 0; i < points.length - 1; i++) {
                var p = [];
                if (0 == i) {
                    p.push(points[i]);
                    p.push(points[i]);
                    p.push(points[i + 1]);
                    p.push(points[i + 2]);
                } else if (points.length - 2 == i) {
                    p.push(points[i - 1]);
                    p.push(points[i]);
                    p.push(points[i + 1]);
                    p.push(points[i + 1]);
                } else {
                    p.push(points[i - 1]);
                    p.push(points[i]);
                    p.push(points[i + 1]);
                    p.push(points[i + 2]);
                }

                var out = [];
                var a = 9;
                out.push({ x: p[1].x, y: p[1].y });
                out.push({ x: ((-p[0].x + a * p[1].x + p[2].x) / a), y: ((-p[0].y + a * p[1].y + p[2].y) / a) });
                out.push({ x: ((p[1].x + a * p[2].x - p[3].x) / a), y: ((p[1].y + a * p[2].y - p[3].y) / a) });
                out.push({ x: p[2].x, y: p[2].y });

                result += "C" + $.jqx._ptrnd(out[1].x) + "," + $.jqx._ptrnd(out[1].y) + " " + $.jqx._ptrnd(out[2].x) + "," + $.jqx._ptrnd(out[2].y) + " " + $.jqx._ptrnd(out[3].x) + "," + $.jqx._ptrnd(out[3].y) + " ";
            }

            return result;
        },

        _animTickInt: 50,

        _animate: function (element, properties, duration, fn, context, easing) {
            if (duration == 0) {
                fn(element, context, 1.0);
                return;
            }

            if (!this._animList) {
                this._animList = [];
                this._animTicks = 0;
            }

            var endTick = this._animTicks + Math.round(duration / this._animTickInt);

            if (easing == undefined)
                easing = 'easeInOutSine';
            this._animList.push({ key: element, properties: properties, startTick: this._animTicks, endTick: endTick, fn: fn, context: context, easing: easing });

            this._enableAnimTimer();
        },

        _stopAnimations: function () {
            clearTimeout(this._animtimer);
            this._animtimer = undefined;
            this._animList = undefined;
        },

        _enableAnimTimer: function () {
            if (!this._animtimer) {
                var self = this;
                this._animtimer = setTimeout(function () { self._runAnimation(); }, this._animTickInt);
            }
        },

        _runAnimation: function () {
            if (this._animList && this._animList.length > 0) {
                this._animTicks++;

                var newlist = [];
                for (var i = 0; i < this._animList.length; i++) {
                    var item = this._animList[i];
                    if (item.endTick > this._animTicks)
                        newlist.push(item);

                    var tSince = (this._animTicks - item.startTick) * this._animTickInt;
                    var tDuration = (item.endTick - item.startTick) * this._animTickInt;

                    var percent = tDuration > 0 ? tSince / tDuration : 0;
                    var easeParecent = percent;
                    if (item.easing)
                        easeParecent = jQuery.easing[item.easing](percent, tSince, 0, 1, tDuration);

                    if (percent > 1)
                        percent = 1;

                    if (item.endTick == item.startTick)
                        easeParecent = 1.0;

                    if (item.fn) // custom function
                    {
                        item.fn(item.key, item.context, easeParecent);
                        continue;
                    }

                    var params = {};
                    for (var j = 0; j < item.properties.length; j++) {
                        var p = item.properties[j];
                        var val = 0;

                        if (percent == 1) {
                            val = p.to;
                        }
                        else {
                            val = easeParecent * (p.to - p.from) + p.from;
                        }

                        params[p.key] = val;
                    }
                    this.renderer.attr(item.key, params);
                }

                this._animList = newlist;

                if (this.renderer instanceof $.jqx.HTML5Renderer)
                    this.renderer.refresh();
            }

            this._animtimer = null;
            this._enableAnimTimer();
        }

    });

    //[optimize]
    $.jqx.toGreyScale = function (color) {
        var rgb = $.jqx.cssToRgb(color);
        rgb[0] = rgb[1] = rgb[2] = Math.round(0.3 * rgb[0] + 0.59 * rgb[1] + 0.11 * rgb[2]);
        var hex = $.jqx.rgbToHex(rgb[0], rgb[1], rgb[2]);
        return '#' + hex[0] + hex[1] + hex[2];
    },

    //[optimize]
    $.jqx._adjustColor = function (color, adj) {
        var rgb = $.jqx.cssToRgb(color);

        var color = '#'
        for (var i = 0; i < 3; i++) {
            var c = Math.round(adj * rgb[i]);
            if (c > 255)
                c = 255;
            else if (c <= 0)
                c = 0;
            c = $.jqx.decToHex(c);
            if (c.toString().length == 1)
                color += '0';

            color += c;
        }

        return color.toUpperCase();
    }

    //[optimize]
    $.jqx.decToHex = function (dec) {
        return dec.toString(16);
    },

    //[optimize]
        $.jqx.hexToDec = function (hex) {
            return parseInt(hex, 16);
        }

    //[optimize]
    $.jqx.rgbToHex = function (r, g, b) {
        return [$.jqx.decToHex(r), $.jqx.decToHex(g), $.jqx.decToHex(b)];
    }

    //[optimize]
    $.jqx.hexToRgb = function (h, e, x) {
        return [$.jqx.hexToDec(h), $.jqx.hexToDec(e), $.jqx.hexToDec(x)];
    }

    //[optimize]
    $.jqx.cssToRgb = function (color) {
        if (color.indexOf('rgb') <= -1) {
            return $.jqx.hexToRgb(color.substring(1, 3), color.substring(3, 5), color.substring(5, 7));
        }
        return color.substring(4, color.length - 1).split(',');
    }

    $.jqx.swap = function (x, y) {
        var tmp = x;
        x = y;
        y = tmp;
    }

    $.jqx.getNum = function (arr) {
        if (!$.isArray(arr)) {
            if (isNaN(arr))
                return 0;
        }
        else {
            for (var i = 0; i < arr.length; i++)
                if (!isNaN(arr[i]))
                    return arr[i];
        }

        return 0;
    }

    $.jqx._ptrnd = function (val) {
        if (!document.createElementNS) {
            if (Math.round(val) == val)
                return val;
            return $.jqx._rnd(val, 1, false);
        }

        if (Math.abs(Math.round(val) - val) == 0.5)
            return val;

        var rnd = $.jqx._rnd(val, 1, false);
        return rnd - 0.5;
    }

    $.jqx._rup = function (n) {
        var nr = Math.round(n);
        if (n > nr)
            nr++;

        return nr;
    }

    //[optimize]
    $.jqx._rnd = function (num, unit, toGreater) {
        if (isNaN(num))
            return num;
        var a = num - num % unit;
        if (num == a)
            return a;

        if (toGreater) {
            if (num > a)
                a += unit;
        }
        else {
            if (a > num)
                a -= unit;
        }

        return a;
    }

    $.jqx.commonRenderer = {
        pieSlicePath: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset) {
            if (!outerRadius)
                outerRadius = 1;

            var diff = Math.abs(angleFrom - angleTo);
            var lFlag = diff > 180 ? 1 : 0;
            if (diff >= 360) {
                angleTo = angleFrom + 359.99;
            }
            var radFrom = angleFrom * Math.PI * 2 / 360;
            var radTo = angleTo * Math.PI * 2 / 360;

            var x1 = x, x2 = x, y1 = y, y2 = y;

            var isDonut = !isNaN(innerRadius) && innerRadius > 0;

            if (isDonut)
                centerOffset = 0;

            if (centerOffset + innerRadius > 0) {
                if (centerOffset > 0) {
                    var midAngle = diff / 2 + angleFrom;
                    var radMid = midAngle * Math.PI * 2 / 360;

                    x += centerOffset * Math.cos(radMid);
                    y -= centerOffset * Math.sin(radMid);
                }

                if (isDonut) {
                    var inR = innerRadius;
                    x1 = x + inR * Math.cos(radFrom);
                    y1 = y - inR * Math.sin(radFrom);
                    x2 = x + inR * Math.cos(radTo);
                    y2 = y - inR * Math.sin(radTo);
                }
            }

            var x3 = x + outerRadius * Math.cos(radFrom);
            var x4 = x + outerRadius * Math.cos(radTo);
            var y3 = y - outerRadius * Math.sin(radFrom);
            var y4 = y - outerRadius * Math.sin(radTo);

            var path = '';

            if (isDonut) {
                path = 'M ' + x2 + ',' + y2;
                path += ' a' + innerRadius + ',' + innerRadius;
                path += ' 0 ' + lFlag + ',1 ' + (x1 - x2) + ',' + (y1 - y2);
                path += ' L' + x3 + ',' + y3;
                path += ' a' + outerRadius + ',' + outerRadius;
                path += ' 0 ' + lFlag + ',0 ' + (x4 - x3) + ',' + (y4 - y3);
            }
            else {
                path = 'M ' + x4 + ',' + y4;
                path += ' a' + outerRadius + ',' + outerRadius;
                path += ' 0 ' + lFlag + ',1 ' + (x3 - x4) + ',' + (y3 - y4);
                path += ' L' + x + ',' + y + ' Z';
            }

            return path;
        }
    }

    $.jqx.svgRenderer = function () { }

    $.jqx.svgRenderer.prototype = {
        _svgns: "http://www.w3.org/2000/svg",

        init: function (host) {
            var s = "<table id=tblChart cellspacing='0' cellpadding='0' border='0' align='left' valign='top'><tr><td colspan=2 id=tdTop></td></tr><tr><td id=tdLeft></td><td class='chartContainer'></td></tr></table>";
            host.append(s);
            this.host = host;
            var container = host.find(".chartContainer");
            container[0].style.width = host.width() + 'px';
            container[0].style.height = host.height() + 'px';
            var offset;
            try {
                var svg = document.createElementNS(this._svgns, 'svg');
                svg.setAttribute('id', 'svgChart');
                svg.setAttribute('version', '1.1');
                svg.setAttribute('width', '100%');
                svg.setAttribute('height', '100%');
                //svg.setAttribute('shape-rendering', 'chispEdges'); //crisp-edges
                container[0].appendChild(svg);
                this.canvas = svg;
            }
            catch (e) {
                return false;
            }

            this._id = new Date().getTime();
            this.clear();

            this._layout();
            this._runLayoutFix();

            return true;
        },

        //[optimize]
        _runLayoutFix: function () {
            var self = this;
            this._fixLayout();
        },

        //[optimize]
        _fixLayout: function () {
            var offset = $(this.canvas).position();

            var pxleft = (parseFloat(offset.left) == parseInt(offset.left));
            var pxtop = (parseFloat(offset.top) == parseInt(offset.top));

            if ($.browser.msie) {
                var pxleft = true, pxtop = true;
                var el = this.host;
                var xdiff = 0, ydiff = 0;
                while (el && el.position && el[0].parentNode) {
                    var pos = el.position();
                    xdiff += parseFloat(pos.left) - parseInt(pos.left);
                    ydiff += parseFloat(pos.top) - parseInt(pos.top);
                    el = el.parent();
                }
                pxleft = parseFloat(xdiff) == parseInt(xdiff);
                pxtop = parseFloat(ydiff) == parseInt(ydiff);
            }

            if (!pxleft)
                this.host.find("#tdLeft")[0].style.width = '0.5px';
            if (!pxtop)
                this.host.find("#tdTop")[0].style.height = '0.5px';

        },

        //[optimize]
        _layout: function () {
            var offset = $(this.canvas).offset();
            var container = this.host.find(".chartContainer");
            this._width = Math.max($.jqx._rup(this.host.width()) - 1, 0);
            this._height = Math.max($.jqx._rup(this.host.height()) - 1, 0);

            container[0].style.width = this._width;
            container[0].style.height = this._height;

            this._fixLayout();
        },

        getRect: function () {
            return { x: 0, y: 0, width: this._width, height: this._height };
        },

        getContainer: function () {
            var container = this.host.find(".chartContainer");
            return container;
        },

        clear: function () {
            while (this.canvas.childElementCount > 0) {
                this.canvas.removeChild(this.canvas.firstElementChild);
            }

            this._defs = document.createElementNS(this._svgns, 'defs');
            this._gradients = {};
            this.canvas.appendChild(this._defs);
        },

        removeElement: function (element) {
            if (element != undefined) {
                try {
                    if (element.parentNode)
                        element.parentNode.removeChild(element);
                    else
                        this.canvas.removeChild(element);
                }
                catch (error) {
                }
            }
        },

        _openGroups: [],

        beginGroup: function () {
            var parent = this._activeParent();
            var g = document.createElementNS(this._svgns, 'g');
            parent.appendChild(g);
            this._openGroups.push(g);

            return g;
        },

        endGroup: function () {
            if (this._openGroups.length == 0)
                return;

            this._openGroups.pop();
        },

        _activeParent: function () {
            return this._openGroups.length == 0 ? this.canvas : this._openGroups[this._openGroups.length - 1];
        },

        //[optimize]
        createClipRect: function (rect) {
            var c = document.createElementNS(this._svgns, 'clipPath');
            var r = document.createElementNS(this._svgns, 'rect');
            this.attr(r, { x: rect.x, y: rect.y, width: rect.width, height: rect.height });

            this._clipId = this._clipId || 0;
            c.id = 'cl' + this._id + '_' + (++this._clipId).toString();
            c.appendChild(r);

            this._defs.appendChild(c);

            return c;
        },

        //[optimize]
        setClip: function (elem, clip) {
            return this.attr(elem, { 'clip-path': 'url(#' + clip.id + ')' });
        },

        _clipId: 0,

        //[optimize]
        addHandler: function (element, event, fn) {
            element['on' + event] = fn;
        },

        //[optimize]
        shape: function (name, params) {
            var s = document.createElementNS(this._svgns, name);
            if (!s)
                return undefined;

            for (var param in params)
                s.setAttribute(param, params[param]);

            this._activeParent().appendChild(s);

            return s;
        },

        //[optimize]
        measureText: function (text, angle, params) {
            var txt = document.createElementNS(this._svgns, 'text');
            this.attr(txt, params);
            txt.appendChild(txt.ownerDocument.createTextNode(text));

            var parent = this._activeParent();
            parent.appendChild(txt);
            var bbox = txt.getBBox();

            if (isNaN(bbox.width) || isNaN(bbox.height) || Math.abs(bbox.width) == Infinity || Math.abs(bbox.height) == Infinity) // fix for Opera SVG
                return { width: 0, height: 0 };

            var tw = $.jqx._rup(bbox.width);
            var th = $.jqx._rup(bbox.height);
            parent.removeChild(txt);

            if (angle == 0)
                return { width: tw, height: th };

            var rads = angle * Math.PI * 2 / 360;
            var sn = Math.abs(Math.sin(rads));
            var cs = Math.abs(Math.cos(rads));
            var bh = Math.abs(tw * sn + th * cs);
            var bw = Math.abs(tw * cs + th * sn);

            return { width: $.jqx._rup(bw), height: $.jqx._rup(bh) };
        },

        //[optimize]
        text: function (text, x, y, width, height, angle, params, clip, halign, valign) {
            var gClip;

            if (!halign)
                halign = 'center';
            if (!valign)
                valign = 'center';
            if (clip) {
                gClip = this.beginGroup();
                var crect = this.createClipRect({ x: $.jqx._rup(x) - 1, y: $.jqx._rup(y) - 1, width: $.jqx._rup(width) + 2, height: $.jqx._rup(height) + 2 });
                this.setClip(gClip, crect);
                //var r = this.rect(x, y, width, height);
                //this.attr(r, { fill: 'rgba(255,0,0,0.1)', stroke: 'red' });
            }

            var txt = document.createElementNS(this._svgns, 'text');
            this.attr(txt, params);
            txt.appendChild(txt.ownerDocument.createTextNode(text));

            var parent = this._activeParent();
            parent.appendChild(txt);
            var bbox = txt.getBBox();
            parent.removeChild(txt);

            var tw = bbox.width;
            var th = bbox.height * 0.6;

            var w = width || 0;
            var h = height || 0;

            if (!angle || angle == 0) {
                if (halign == 'center')
                    x += (w - tw) / 2;
                else if (halign == 'right')
                    x += (w - tw);

                y += th;

                if (valign == 'center')
                    y += (h - th) / 2;
                else if (valign == 'bottom')
                    y += h - th;

                if (!width)
                    width = tw;

                if (!height)
                    height = th;

                this.attr(txt, { x: $.jqx._rup(x), y: $.jqx._rup(y), width: $.jqx._rup(width), height: $.jqx._rup(height), cursor: 'default' });
                parent.appendChild(txt);
                this.endGroup();

                return txt; // parent == this.canvas ? txt : parent;
            }
            var rads = angle * Math.PI * 2 / 360;
            var sn = Math.sin(rads);
            var cs = Math.cos(rads);

            var h2 = th * cs + tw * sn;
            var w2 = tw * cs + th * sn;

            var ySave = y;
            var xSave = x;

            x += (width - w2) / 2;
            y += (height - h2) / 2;

            y += th * cs;

            if (halign == 'left') {
                if (cs > 0) {
                    x = xSave;
                    if (sn < 0)
                        x -= sn * th;
                }
                else {
                    x = xSave - cs * tw;
                    if (sn < 0)
                        x -= sn * th;
                }
            }
            else if (halign == 'right') {
                if (cs > 0) {
                    x = xSave + width - w2;
                    if (sn < 0)
                        x += sn * th;
                }
                else {
                    x = xSave + width;
                    if (sn >= 0)
                        x -= sn * th;
                }
            }

            if (valign == 'top') {
                if (sn < 0) {
                    y = ySave - sn * tw;
                    if (cs > 0)
                        y += cs * th;
                }
                else {
                    y = ySave;
                    if (cs > 0)
                        y = ySave + th * cs;
                }
            }
            else if (valign == 'bottom') {
                if (sn < 0) {
                    y = ySave + height;
                    if (cs <= 0)
                        y += th * cs;
                }
                else {
                    y = ySave + height - tw * sn;
                    if (cs < 0)
                        y += th * cs;
                }
            }

            x = $.jqx._rup(x);
            y = $.jqx._rup(y);

            var gTranslate = this.shape('g', { transform: 'translate(' + x + ',' + y + ')' });
            var gRotate = this.shape('g', { transform: 'rotate(' + angle + ')' });

            gTranslate.appendChild(gRotate);
            gRotate.appendChild(txt);

            parent.appendChild(gTranslate);

            this.endGroup();

            return gTranslate;
        },

        //[optimize]
        line: function (x1, y1, x2, y2, params) {
            var line = this.shape('line', { x1: x1, y1: y1, x2: x2, y2: y2 });
            this.attr(line, params);
        },

        //[optimize]
        path: function (points, params) {
            var s = this.shape('path');
            s.setAttribute('d', points);
            if (params) {
                this.attr(s, params);
            }
            return s;
        },

        //[optimize]
        rect: function (x, y, w, h, params) {
            x = $.jqx._ptrnd(x);
            y = $.jqx._ptrnd(y);
            w = $.jqx._rup(w);
            h = $.jqx._rup(h);
            var s = this.shape('rect', { x: x, y: y, width: w, height: h });
            if (params)
                this.attr(s, params);
            return s;
        },

        //[optimize]
        circle: function (x, y, r) {
            return this.shape('circle', { cx: x, cy: y, r: r });
        },

        //[optimize]
        pieSlicePath: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset) {
            return $.jqx.commonRenderer.pieSlicePath(x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset);
        },

        //[optimize]
        pieslice: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset, params) {
            var pathCmd = this.pieSlicePath(x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset);

            var s = this.shape('path');
            s.setAttribute('d', pathCmd);

            if (params)
                this.attr(s, params);

            return s;
        },

        //[optimize]
        attr: function (element, params) {
            if (!element || !params)
                return;
            for (var param in params)
                element.setAttribute(param, params[param]);
        },

        //[optimize]
        getAttr: function (element, key) {
            return element['getAttribute'](key);
        },

        //[optimize]
        _gradients: {},

        //[optimize]
        _toLinearGradient: function (color, isVertical, stops) {
            var id = 'grd' + color.replace('#', '') + (isVertical ? 'v' : 'h');
            var url = 'url(#' + id + ')';
            if (this._gradients[url])
                return url;

            var gr = document.createElementNS(this._svgns, 'linearGradient');
            this.attr(gr, { x1: '0%', y1: '0%', x2: isVertical ? '0%' : '100%', y2: isVertical ? '100%' : '0%', id: id });

            for (var stop in stops) {
                var s = document.createElementNS(this._svgns, 'stop');
                var st = 'stop-color:' + $.jqx._adjustColor(color, stops[stop][1]);
                this.attr(s, { offset: stops[stop][0] + '%', style: st });
                gr.appendChild(s);
            }

            this._defs.appendChild(gr);
            this._gradients[url] = true;

            return url;
        },

        //[optimize]
        _toRadialGradient: function (color, stops, coords) {
            var id = 'grd' + color.replace('#', '') + 'r' + (coords != undefined ? coords.key : '');

            var url = 'url(#' + id + ')';
            if (this._gradients[url])
                return url;

            var gr = document.createElementNS(this._svgns, 'radialGradient');
            if (coords == undefined)
                this.attr(gr, { cx: '50%', cy: '50%', r: '100%', fx: '50%', fy: '50%', id: id });
            else
                this.attr(gr, { cx: coords.x1, cy: coords.y1, r: coords.outerRadius, id: id, gradientUnits: 'userSpaceOnUse' });

            for (var stop in stops) {
                var s = document.createElementNS(this._svgns, 'stop');
                var st = 'stop-color:' + $.jqx._adjustColor(color, stops[stop][1]);
                this.attr(s, { offset: stops[stop][0] + '%', style: st });
                gr.appendChild(s);
            }

            this._defs.appendChild(gr);
            this._gradients[url] = true;

            return url;
        }

    } // svgRenderer

    $.jqx.vmlRenderer = function () { };
    $.jqx.vmlRenderer.prototype = {
        init: function (host) {
            var s = "<div class='chartContainer' style=\"position:relative;overflow:hidden;\"><div>";
            host.append(s);
            this.host = host;
            var container = host.find(".chartContainer");
            container[0].style.width = host.width() + 'px';
            container[0].style.height = host.height() + 'px';

            var addNamespace = true;

            try {
                for (var i = 0; i < document.namespaces.length; i++) {
                    if (document.namespaces[i].name == 'v' && document.namespaces[i].urn == "urn:schemas-microsoft-com:vml") {
                        addNamespace = false;
                        break;
                    }
                }
            }
            catch (e) {
                return false;
            }

            if ($.browser.msie && parseInt($.browser.version) < 9 &&
                (document.childNodes && document.childNodes.length > 0 && document.childNodes[0].data && document.childNodes[0].data.indexOf('DOCTYPE') != -1)
                ) {
                if (addNamespace) {
                    document.namespaces.add('v', 'urn:schemas-microsoft-com:vml');
                }

                this._ie8mode = true;
            }
            else {
                if (addNamespace) {
                    document.namespaces.add('v', 'urn:schemas-microsoft-com:vml');
                    document.createStyleSheet().cssText = "v\\:* { behavior: url(#default#VML); display: inline-block; }";
                }
            }

            this.canvas = container[0];

            this._width = Math.max($.jqx._rup(container.width()), 0);
            this._height = Math.max($.jqx._rup(container.height()), 0);

            container[0].style.width = this._width + 2;
            container[0].style.height = this._height + 2;

            this._id = new Date().getTime();
            this.clear();
            return true;
        },

        getRect: function () {
            return { x: 0, y: 0, width: this._width, height: this._height };
        },

        getContainer: function () {
            var container = this.host.find(".chartContainer");
            return container;
        },

        clear: function () {
            while (this.canvas.childElementCount > 0) {
                this.canvas.removeChild(this.canvas.firstElementChild);
            }

            this._gradients = {};
        },

        removeElement: function (element) {
            if (element != null) {
                element.parentNode.removeChild(element);
            }
        },

        _openGroups: [],

        beginGroup: function () {
            var parent = this._activeParent();
            var g = document.createElement('v:group');
            g.style.position = 'absolute';
            g.coordorigin = "0,0";
            g.coordsize = this._width + ',' + this._height;
            g.style.left = 0;
            g.style.top = 0;
            g.style.width = this._width;
            g.style.height = this._height;

            parent.appendChild(g);
            this._openGroups.push(g);
            return g;
        },

        endGroup: function () {
            if (this._openGroups.length == 0)
                return;

            this._openGroups.pop();
        },

        _activeParent: function () {
            return this._openGroups.length == 0 ? this.canvas : this._openGroups[this._openGroups.length - 1];
        },

        //[optimize]
        createClipRect: function (rect) {
            var div = document.createElement("div");
            div.style.height = rect.height + 'px';
            div.style.width = rect.width + 'px';
            div.style.position = 'absolute';
            div.style.left = rect.x + 'px';
            div.style.top = rect.y + 'px';
            div.style.overflow = 'hidden';

            this._clipId = this._clipId || 0;
            div.id = 'cl' + this._id + '_' + (++this._clipId).toString();
            this._activeParent().appendChild(div);
            return div;
        },

        //[optimize]
        setClip: function (elem, clip) {
            //if (elem.parentElement)
            //    elem.parentElement.removeChild(elem);

            clip.appendChild(elem);
        },

        _clipId: 0,

        //[optimize]
        addHandler: function (element, event, fn) {
            $(element).bind(event, fn);
        },

        //[optimize]
        measureText: function (text, angle, params) {
            var txtbox = document.createElement('v:textbox');
            var span = document.createElement('span');
            span.appendChild(document.createTextNode(text));
            txtbox.appendChild(span);
            if (params['class'])
                span.className = params['class'];

            var parent = this._activeParent();
            parent.appendChild(txtbox);
            var box = $(txtbox);
            var tw = $.jqx._rup(box.width());
            var th = $.jqx._rup(box.height());
            parent.removeChild(txtbox);

            if (th == 0 && $.browser.msie && parseInt($.browser.version) < 9) {
                var fontSize = box.css('font-size');
                if (fontSize) {
                    th = parseInt(fontSize);
                    if (isNaN(th)) th = 0;
                }
            }

            if (angle == 0)
                return { width: tw, height: th };

            var rads = angle * Math.PI * 2 / 360;
            var sn = Math.abs(Math.sin(rads));
            var cs = Math.abs(Math.cos(rads));
            var bh = Math.abs(tw * sn + th * cs);
            var bw = Math.abs(tw * cs + th * sn);

            return { width: $.jqx._rup(bw), height: $.jqx._rup(bh) };
        },

        //[optimize]
        text: function (text, x, y, width, height, angle, params, clip, halign, valign) {
            var color = params.stroke || 'black';
            var gClip;

            if (!halign)
                halign = 'center';
            if (!valign)
                valign = 'center';
            clip = false;
            if (clip) {
                gClip = this.beginGroup();
                var crect = this.createClipRect({ x: $.jqx._rup(x), y: $.jqx._rup(y), width: $.jqx._rup(width), height: $.jqx._rup(height) });
                this.setClip(gClip, crect);
            }

            var txtbox = document.createElement('v:textbox');
            txtbox.style.position = 'absolute';

            var span = document.createElement('span');
            span.appendChild(document.createTextNode(text));
            if (params['class']) {
                span.className = params['class'];
            }
            txtbox.appendChild(span);

            var parent = this._activeParent();
            parent.appendChild(txtbox);

            var tw = $(txtbox).width();
            var th = $(txtbox).height();
            parent.removeChild(txtbox);

            var w = width || 0;
            var h = height || 0;

            if (!angle || angle == 0 || Math.abs(angle) != 90) {
                if (halign == 'center')
                    x += (w - tw) / 2;
                else if (halign == 'right')
                    x += (w - tw);

                if (valign == 'center')
                    y = y + (h - th) / 2;
                else if (valign == 'bottom')
                    y = y + h - th;

                if (!width)
                    width = tw;

                if (!height)
                    height = th;

                if (!gClip) {
                    txtbox.style.left = $.jqx._rup(x);
                    txtbox.style.top = $.jqx._rup(y);
                    txtbox.style.width = $.jqx._rup(width);
                    txtbox.style.height = $.jqx._rup(height);
                }
                parent.appendChild(txtbox);

                if (gClip) {
                    this.endGroup();
                    return parent;
                }

                return txtbox;
            }

            var rads = angle * Math.PI * 2 / 360;
            var bh = Math.abs(tw * Math.sin(rads) - th * Math.cos(rads));
            var bw = Math.abs(tw * Math.cos(rads) + th * Math.sin(rads));

            if (halign == 'center')
                x += (w - bw) / 2;
            else if (halign == 'right')
                x += (w - bw);

            if (valign == 'center')
                y = y + (h - bh) / 2;
            else if (valign == 'bottom')
                y = y + h - bh;

            x = $.jqx._rup(x);
            y = $.jqx._rup(y);
            var x2 = $.jqx._rup(x + bw);
            var y2 = $.jqx._rup(y + bh);

            if (Math.abs(angle) == 90) {
                parent.appendChild(txtbox);
                txtbox.style.left = $.jqx._rup(x);
                txtbox.style.top = $.jqx._rup(y);

                txtbox.style.filter = 'progid:DXImageTransform.Microsoft.BasicImage(rotation=3)';

                if (gClip) {
                    this.endGroup();
                    return parent;
                }

                return txtbox;
            }

            return txtbox;
        },

        //[optimize]
        shape: function (name, params) {
            var s = document.createElement(this._createElementMarkup(name));
            if (!s)
                return undefined;

            for (var param in params)
                s.setAttribute(param, params[param]);

            this._activeParent().appendChild(s);

            return s;
        },

        line: function (x1, y1, x2, y2, params) {
            var linePath = 'M ' + x1 + ',' + y1 + ' L ' + x2 + ',' + y2 + ' X E';
            var line = this.path(linePath);
            this.attr(line, params);
            return line;
        },

        _createElementMarkup: function (shape) {
            var str = '<v:' + shape + ' style=\"\">' + '</v:' + shape + '>';
            if (this._ie8mode) {
                str = str.replace('style=\"\"', 'style=\"behavior: url(#default#VML);\"');
            }

            return str;
        },

        //[optimize]
        path: function (points, params) {
            var shape = document.createElement(this._createElementMarkup('shape'));
            shape.style.position = 'absolute';
            shape.coordsize = this._width + ' ' + this._height;
            shape.coordorigin = '0 0';
            shape.style.width = parseInt(this._width);
            shape.style.height = parseInt(this._height);
            shape.style.left = 0;
            shape.style.top = 0;
            var path = document.createElement(this._createElementMarkup('path'));
            path.v = points;
            shape.appendChild(path);
            this._activeParent().appendChild(shape);
            if (params)
                this.attr(shape, params);

            return shape;
        },

        //[optimize]
        rect: function (x, y, w, h, params) {
            x = $.jqx._ptrnd(x);
            y = $.jqx._ptrnd(y);
            w = $.jqx._rup(w);
            h = $.jqx._rup(h);
            var vmlRect = this.shape('rect', params);
            vmlRect.style.position = 'absolute';
            vmlRect.style.left = x;
            vmlRect.style.top = y;
            vmlRect.style.width = w;
            vmlRect.style.height = h;
            vmlRect.strokeweight = 0;
            return vmlRect;
        },

        //[optimize]
        circle: function (x, y, r) {
            var vmlCircle = this.shape('oval');
            x = $.jqx._ptrnd(x - r);
            y = $.jqx._ptrnd(y - r);
            r = $.jqx._rup(r);
            vmlCircle.style.position = 'absolute';
            vmlCircle.style.left = x;
            vmlCircle.style.top = y;
            vmlCircle.style.width = r * 2;
            vmlCircle.style.height = r * 2;
            return vmlCircle;
        },

        updateCircle: function (circle, x, y, r) {
            if (x == undefined)
                x = parseFloat(circle.style.left) + parseFloat(circle.style.width) / 2;
            if (y == undefined)
                y = parseFloat(circle.style.top) + parseFloat(circle.style.height) / 2;
            if (r == undefined)
                r = parseFloat(circle.width) / 2;

            x = $.jqx._ptrnd(x - r);
            y = $.jqx._ptrnd(y - r);
            r = $.jqx._rup(r);
            circle.style.left = x;
            circle.style.top = y;
            circle.style.width = r * 2;
            circle.style.height = r * 2;
        },

        pieSlicePath: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset) {
            if (!outerRadius)
                outerRadius = 1;

            var diff = Math.abs(angleFrom - angleTo);
            var lFlag = diff > 180 ? 1 : 0;
            if (diff > 360) {
                angleFrom = 0;
                angleTo = 360;
            }
            var radFrom = angleFrom * Math.PI * 2 / 360;
            var radTo = angleTo * Math.PI * 2 / 360;

            var x1 = x, x2 = x, y1 = y, y2 = y;
            var isDonut = !isNaN(innerRadius) && innerRadius > 0;

            if (isDonut)
                centerOffset = 0;

            if (centerOffset > 0) {
                var midAngle = diff / 2 + angleFrom;
                var radMid = midAngle * Math.PI * 2 / 360;

                x += centerOffset * Math.cos(radMid);
                y -= centerOffset * Math.sin(radMid);
            }

            if (isDonut) {
                var inR = innerRadius;
                x1 = $.jqx._ptrnd(x + inR * Math.cos(radFrom));
                y1 = $.jqx._ptrnd(y - inR * Math.sin(radFrom));
                x2 = $.jqx._ptrnd(x + inR * Math.cos(radTo));
                y2 = $.jqx._ptrnd(y - inR * Math.sin(radTo));
            }

            var x3 = $.jqx._ptrnd(x + outerRadius * Math.cos(radFrom));
            var x4 = $.jqx._ptrnd(x + outerRadius * Math.cos(radTo));
            var y3 = $.jqx._ptrnd(y - outerRadius * Math.sin(radFrom));
            var y4 = $.jqx._ptrnd(y - outerRadius * Math.sin(radTo));

            outerRadius = $.jqx._ptrnd(outerRadius);
            innerRadius = $.jqx._ptrnd(innerRadius);

            x = $.jqx._ptrnd(x);
            y = $.jqx._ptrnd(y);

            var aStart = Math.round(angleFrom * 65535);
            var aEnd = Math.round(angleTo - angleFrom) * 65536;

            var path = '';
            if (isDonut) {
                path = 'M' + x1 + ' ' + y1;
                path += ' AE ' + x + ' ' + y + ' ' + innerRadius + ' ' + innerRadius + ' ' + aStart + ' ' + aEnd;
                path += ' L ' + x4 + ' ' + y4;
                aStart = Math.round(angleFrom - angleTo) * 65535;
                aEnd = Math.round(angleTo) * 65536;
                path += ' AE ' + x + ' ' + y + ' ' + outerRadius + ' ' + outerRadius + ' ' + aEnd + ' ' + aStart;
                path += ' L ' + x1 + ' ' + y1;
            }
            else {
                path = 'M' + x + ' ' + y;
                path += ' AE ' + x + ' ' + y + ' ' + outerRadius + ' ' + outerRadius + ' ' + aStart + ' ' + aEnd;
            }

            path += ' X E';

            return path;
        },

        pieslice: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset, params) {

            var pathCmd = this.pieSlicePath(x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset);
            var el = this.path(pathCmd, params);

            if (params)
                this.attr(el, params);

            return el;
        },


        _keymap: [
                { svg: 'fill', vml: 'fillcolor' },
                { svg: 'stroke', vml: 'strokecolor' },
                { svg: 'stroke-width', vml: 'strokeweight' },
                { svg: 'fill-opacity', vml: 'fillopacity' },
                { svg: 'opacity', vml: 'opacity' },
                { svg: 'cx', vml: 'style.left' },
                { svg: 'cy', vml: 'style.top' },
                { svg: 'height', vml: 'style.height' },
                { svg: 'width', vml: 'style.width' },
                { svg: 'x', vml: 'style.left' },
                { svg: 'y', vml: 'style.top' },
                { svg: 'd', vml: 'v' }
                ],

        //[optimize]
        _translateParam: function (name) {
            for (var key in this._keymap) {
                if (this._keymap[key].svg == name)
                    return this._keymap[key].vml;
            }

            return name;
        },

        //[optimize]
        attr: function (element, params) {
            if (!element || !params)
                return;
            for (var param in params) {
                var vmlparam = this._translateParam(param);
                if (vmlparam == 'fillcolor' && params[param].indexOf('grd') != -1) {
                    element.type = params[param];
                }
                else if (vmlparam == 'opacity' || vmlparam == 'fillopacity') {
                    if (element.fill) {
                        element.fill.opacity = params[param];
                    }
                } else {
                    if (vmlparam.indexOf('style.') == -1)
                        element[vmlparam] = params[param];
                    else
                        element.style[vmlparam.replace('style.', '')] = params[param];
                }
            }
        },

        //[optimize]
        getAttr: function (element, key) {
            var vmlparam = this._translateParam(key);
            if (vmlparam == 'opacity' || vmlparam == 'fillopacity')
                if (element.fill) {
                    return element.fill.opacity;
                }
                else {
                    return 1;
                }

            if (vmlparam.indexOf('style.') == -1)
                return element[vmlparam];

            return element.style[vmlparam.replace('style.', '')];
        },

        //[optimize]
        _gradients: {},

        _toRadialGradient: function (color, isVertical, stops) {
            return color;
        },

        //[optimize]
        _toLinearGradient: function (color, isVertical, stops) {
            if (this._ie8mode) {
                return color;
            }

            var id = 'grd' + color.replace('#', '') + (isVertical ? 'v' : 'h');
            var ref = '#' + id + '';
            if (this._gradients[ref])
                return ref;

            var gr = document.createElement(this._createElementMarkup('fill'));
            gr.type = 'gradient';
            gr.method = 'linear';
            gr.angle = isVertical ? 0 : 90;

            var colors = '';
            for (var stop in stops) {
                if (stop > 0)
                    colors += ', ';
                colors += stops[stop][0] + '% ' + $.jqx._adjustColor(color, stops[stop][1]);
            }

            gr.colors = colors;

            var shapetype = document.createElement(this._createElementMarkup('shapetype'));
            shapetype.appendChild(gr);
            shapetype.id = id;

            this.canvas.appendChild(shapetype);

            return ref;
        }
    } // vmlRenderer

    /************************************************
    * jQWidgets HTML5 Canvas Renderer               *
    ************************************************/
    $.jqx.HTML5Renderer = function () { }

    $.jqx.ptrnd = function (val) {
        if (Math.abs(Math.round(val) - val) == 0.5)
            return val;

        var rnd = Math.round(val);
        if (rnd < val)
            rnd = rnd - 1;

        return rnd + 0.5;
    }


    $.jqx.HTML5Renderer.prototype = {
        _elements: {},

        init: function (host) {
            try {
                this.host = host;
                this.host.append("<canvas id='__jqxCanvasWrap' style='width:100%; height: 100%;'/>");
                this.canvas = host.find('#__jqxCanvasWrap');
                this.canvas[0].width = host.width();
                this.canvas[0].height = host.height();
                this.ctx = this.canvas[0].getContext('2d');
            }
            catch (e) {
                return false;
            }

            return true;
        },

        getContainer: function () {
            if (this.canvas && this.canvas.length == 1)
                return this.canvas;

            return undefined;
        },


        getRect: function () {
            return { x: 0, y: 0, width: this.canvas[0].width - 1, height: this.canvas[0].height - 1 };
        },

        beginGroup: function () {
            // TODO
        },

        endGroup: function () {
            // TODO
        },

        setClip: function () {
            // TODO
        },

        createClipRect: function (rect) {
            // TODO
        },

        addHandler: function (element, event, fn) {
            // TODO
            //element['on' + event] = fn;
        },


        clear: function () {
            this._elements = {};
            this._maxId = 0;
            this._renderers._gradients = {};
            this._gradientId = 0;
        },

        removeElement: function (element) {
            if (this._elements[element.id])
                delete this._elements[element, id];
        },

        _maxId: 0,

        shape: function (name, params) {
            var s = { type: name, id: this._maxId++ };

            for (var param in params)
                s[param] = params[param];

            this._elements[s.id] = s;

            return s;
        },

        attr: function (element, params) {
            for (var param in params)
                element[param] = params[param];
        },

        rect: function (x, y, w, h, params) {
            if (isNaN(x))
                throw 'Invalid value for "x"';
            if (isNaN(y))
                throw 'Invalid value for "y"';
            if (isNaN(w))
                throw 'Invalid value for "width"';
            if (isNaN(h))
                throw 'Invalid value for "height"';

            var s = this.shape('rect', { x: x, y: y, width: w, height: h });
            if (params)
                this.attr(s, params);
            return s;
        },

        path: function (pathCmd, params) {
            var s = this.shape('path', params);
            this.attr(s, { d: pathCmd });
            return s;
        },

        line: function (x1, y1, x2, y2, params) {
            return this.path('M ' + x1 + ',' + y1 + ' L ' + x2 + ',' + y2, params);
        },

        circle: function (x, y, r, params) {
            var s = this.shape('circle', { x: x, y: y, r: r });
            if (params)
                this.attr(s, params);
            return s;
        },

        pieSlicePath: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset) {
            return $.jqx.commonRenderer.pieSlicePath(x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset);
        },

        pieslice: function (x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset, params) {
            var element = this.path(this.pieSlicePath(x, y, innerRadius, outerRadius, angleFrom, angleTo, centerOffset), params);
            this.attr(element, { x: x, y: y, innerRadius: innerRadius, outerRadius: outerRadius, angleFrom: angleFrom, angleTo: angleTo });
            return element;
        },

        _getCSSStyle: function (name) {
            var sheets = document.styleSheets;

            for (var i = 0; i < sheets.length; i++) {
                for (var j = 0; sheets[i].cssRules && j < sheets[i].cssRules.length; j++) {
                    if (sheets[i].cssRules[j].selectorText != undefined) {
                        if (sheets[i].cssRules[j].selectorText.indexOf(name) != -1)
                            return sheets[i].cssRules[j].style;
                    }
                }
            }

            return {};
        },

        measureText: function (text, angle, params) {
            var fontFamily = 'Arial';
            var fontSize = '10pt';
            var fontWeight = '';
            if (params['class']) {
                var style = this._getCSSStyle(params['class']);
                if (style['fontSize'])
                    fontSize = style['fontSize'];
                if (style['fontFamily'])
                    fontFamily = style['fontFamily'];
                if (style['fontWeight'])
                    fontWeight = style['fontWeight'];
            }

            this.ctx.font = fontWeight + ' ' + fontSize + ' ' + fontFamily;
            var tw = this.ctx.measureText(text).width;

            var span = document.createElement("span");
            span.font = this.ctx.font;
            span.textContent = text;
            document.body.appendChild(span);
            var th = span.offsetHeight * 0.6;
            document.body.removeChild(span);

            if (angle == 0)
                return { width: tw, height: th };

            var rads = angle * Math.PI * 2 / 360;
            var sn = Math.abs(Math.sin(rads));
            var cs = Math.abs(Math.cos(rads));
            var bh = Math.abs(tw * sn + th * cs);
            var bw = Math.abs(tw * cs + th * sn);

            return { width: $.jqx._rup(bw), height: $.jqx._rup(bh) };
        },

        //[optimize]
        text: function (text, x, y, width, height, angle, params, clip, halign, valign) {
            var t = this.shape('text', { text: text, x: x, y: y, width: width, height: height, angle: angle, clip: clip, halign: halign, valign: valign });
            if (params) {
                this.attr(t, params);
            }

            t.fontFamily = 'Arial';
            t.fontSize = '10pt';
            t.fontWeight = '';
            t.color = '#000000';
            if (params['class']) {
                var style = this._getCSSStyle(params['class']);
                t.fontFamily = style.fontFamily || t.fontFamily;
                t.fontSize = style.fontSize || t.fontSize;
                t.fontWeight = style['fontWeight'] || t.fontWeight;
                t.color = style.color || t.color;
            }

            var sz = this.measureText(text, 0, params);
            t.textWidth = sz.width;
            t.textHeight = sz.height;

            return t;
        },

        _toLinearGradient: function (color, isVertical, stops) {
            if (this._renderers._gradients[color])
                return color;

            var colorStops = [];
            for (var i = 0; i < stops.length; i++)
                colorStops.push({ percent: stops[i][0] / 100, color: $.jqx._adjustColor(color, stops[i][1]) });

            var name = 'gr' + this._gradientId++;
            this.createGradient(name, isVertical ? 'vertical' : 'horizontal', colorStops);
            return name;
        },

        _toRadialGradient: function (color, stops) {
            if (this._renderers._gradients[color])
                return color;

            var colorStops = [];
            for (var i = 0; i < stops.length; i++)
                colorStops.push({ percent: stops[i][0] / 100, color: $.jqx._adjustColor(color, stops[i][1]) });

            var name = 'gr' + this._gradientId++;
            this.createGradient(name, 'radial', colorStops);
            return name;
        },

        _gradientId: 0,

        //[optimize]
        createGradient: function (name, orientation, colorStops) {
            this._renderers.createGradient(name, orientation, colorStops);
        },

        _renderers: {
            _gradients: {},

            //[optimize]
            createGradient: function (name, orientation, colorStops) {
                this._gradients[name] = { orientation: orientation, colorStops: colorStops };
            },

            setStroke: function (ctx, params) {
                ctx.strokeStyle = params['stroke'] || 'transparent';
                ctx.lineWidth = params['stroke-width'] || 1;
            },

            setFillStyle: function (ctx, params) {
                ctx.fillStyle = 'transparent';

                if (params['fill-opacity']) {
                    ctx.globalAlpha = params['fill-opacity'];
                }
                else {
                    ctx.globalAlpha = 1;
                }

                if (params.fill && params.fill.indexOf('#') == -1 && this._gradients[params.fill]) {
                    var isVertical = this._gradients[params.fill].orientation != 'horizontal';
                    var isRadial = this._gradients[params.fill].orientation == 'radial';
                    var x1 = $.jqx.ptrnd(params.x);
                    var y1 = $.jqx.ptrnd(params.y);
                    var x2 = $.jqx.ptrnd(params.x + (isVertical ? 0 : params.width));
                    var y2 = $.jqx.ptrnd(params.y + (isVertical ? params.height : 0));

                    var gradient;

                    if ((params.type == 'circle' || params.type == 'path') && isRadial) {
                        x = $.jqx.ptrnd(params.x);
                        y = $.jqx.ptrnd(params.y);
                        r1 = params.innerRadius || 0;
                        r2 = params.outerRadius || params.r || 0;
                        gradient = ctx.createRadialGradient(x, y, r1, x, y, r2);
                    }

                    if (!isRadial) {
                        if (isNaN(x1) || isNaN(x2) || isNaN(y1) || isNaN(y2)) {
                            x1 = 0;
                            y1 = 0;
                            x2 = isVertical ? 0 : ctx.canvas.width;
                            y2 = isVertical ? ctx.canvas.height : 0;
                        }

                        gradient = ctx.createLinearGradient(x1, y1, x2, y2);
                    }

                    var colorStops = this._gradients[params.fill].colorStops;
                    for (var i = 0; i < colorStops.length; i++)
                        gradient.addColorStop(colorStops[i].percent, colorStops[i].color);

                    ctx.fillStyle = gradient;
                }
                else if (params.fill) {
                    ctx.fillStyle = params.fill;
                }
            },

            rect: function (ctx, params) {
                ctx.fillRect($.jqx.ptrnd(params.x), $.jqx.ptrnd(params.y), params.width, params.height);
                ctx.strokeRect($.jqx.ptrnd(params.x), $.jqx.ptrnd(params.y), params.width, params.height);
            },

            circle: function (ctx, params) {
                if (params.r == 0)
                    return;
                ctx.beginPath();
                ctx.arc($.jqx.ptrnd(params.x), $.jqx.ptrnd(params.y), params.r, 0, Math.PI * 2, false);
                ctx.closePath();
                ctx.fill();
                ctx.stroke();
            },

            _parsePoint: function (str) {
                var x = this._parseNumber(str);
                var y = this._parseNumber(str);
                return ({ x: x, y: y });
            },

            _parseNumber: function (str) {
                var numStarted = false;
                for (var i = this._pos; i < str.length; i++) {
                    if ((str[i] >= '0' && str[i] <= '9') || str[i] == '.' || (str[i] == '-' && !numStarted)) {
                        numStarted = true;
                        continue;
                    }
                    if (!numStarted && (str[i] == ' ' || str[i] == ',')) {
                        this._pos++;
                        continue;
                    }

                    break;
                }

                var val = parseFloat(str.substring(this._pos, i));
                if (isNaN(val))
                    return undefined;

                this._pos = i;
                return val;
            },

            _pos: 0,
            _cmds: "mlcaz",
            _lastCmd: '',

            _isRelativeCmd: function (cmd) {
                return $.jqx.string.contains(this._cmds, cmd);
            },

            _parseCmd: function (string) {
                for (var i = this._pos; i < string.length; i++) {
                    if ($.jqx.string.containsIgnoreCase(this._cmds, string[i])) {
                        this._pos = i + 1;
                        this._lastCmd = string[i];
                        return this._lastCmd;
                    }
                    if (string[i] == ' ') {
                        this._pos++;
                        continue;
                    }
                    if (string[i] >= '0' && string[i] <= '9') {
                        this._pos = i /*+ 1*/;
                        if (this._lastCmd == '')
                            break;
                        else
                            return this._lastCmd;
                    }
                }

                return undefined;
            },

            _toAbsolutePoint: function (point) {
                return { x: this._currentPoint.x + point.x, y: this._currentPoint.y + point.y };
            },

            _currentPoint: { x: 0, y: 0 },

            path: function (ctx, params) {
                var path = params.d;

                this._pos = 0;
                this._lastCmd = '';

                var firstPoint = undefined;
                this._currentPoint = { x: 0, y: 0 };

                ctx.beginPath();

                var i = 0;
                while (this._pos < path.length) {
                    var cmd = this._parseCmd(path);
                    if (cmd == undefined)
                        break;

                    if (cmd == 'M' || cmd == 'm') {
                        var point = this._parsePoint(path);
                        if (point == undefined)
                            break;
                        ctx.moveTo(point.x, point.y);
                        this._currentPoint = point;
                        if (firstPoint == undefined)
                            firstPoint = point;

                        continue;
                    }

                    if (cmd == 'L' || cmd == 'l') {
                        var point = this._parsePoint(path);
                        if (point == undefined)
                            break;

                        ctx.lineTo(point.x, point.y);
                        this._currentPoint = point;
                        continue;
                    }

                    if (cmd == 'A' || cmd == 'a') {
                        var rx = this._parseNumber(path);
                        var ry = this._parseNumber(path);
                        var angle = this._parseNumber(path) * (Math.PI / 180.0);
                        var largeFlag = this._parseNumber(path);
                        var sweepFlag = this._parseNumber(path);
                        var endPoint = this._parsePoint(path);

                        if (this._isRelativeCmd(cmd)) {
                            endPoint = this._toAbsolutePoint(endPoint);
                        }

                        if (rx == 0 || ry == 0)
                            continue;

                        var cp = this._currentPoint;

                        /// START
                        // x1', y1'
                        var cp2 = {
                            x: Math.cos(angle) * (cp.x - endPoint.x) / 2.0 + Math.sin(angle) * (cp.y - endPoint.y) / 2.0,
                            y: -Math.sin(angle) * (cp.x - endPoint.x) / 2.0 + Math.cos(angle) * (cp.y - endPoint.y) / 2.0
                        };

                        // adjust radii
                        var adj = Math.pow(cp2.x, 2) / Math.pow(rx, 2) + Math.pow(cp2.y, 2) / Math.pow(ry, 2);
                        if (adj > 1) {
                            rx *= Math.sqrt(adj);
                            ry *= Math.sqrt(adj);
                        }

                        // cx', cy'
                        var s = (largeFlag == sweepFlag ? -1 : 1) * Math.sqrt(
								((Math.pow(rx, 2) * Math.pow(ry, 2)) - (Math.pow(rx, 2) * Math.pow(cp2.y, 2)) - (Math.pow(ry, 2) * Math.pow(cp2.x, 2))) /
								(Math.pow(rx, 2) * Math.pow(cp2.y, 2) + Math.pow(ry, 2) * Math.pow(cp2.x, 2))
							);

                        if (isNaN(s))
                            s = 0;

                        var cp3 = { x: s * rx * cp2.y / ry, y: s * -ry * cp2.x / rx };

                        // cx, cy
                        var centerPoint = {
                            x: (cp.x + endPoint.x) / 2.0 + Math.cos(angle) * cp3.x - Math.sin(angle) * cp3.y,
                            y: (cp.y + endPoint.y) / 2.0 + Math.sin(angle) * cp3.x + Math.cos(angle) * cp3.y
                        };

                        // vector magnitude
                        var m = function (v) { return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2)); }

                        // ratio between two vectors
                        var r = function (u, v) { return (u[0] * v[0] + u[1] * v[1]) / (m(u) * m(v)) }

                        // angle between two vectors
                        var a = function (u, v) { return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(r(u, v)); }

                        // initial angle
                        var startAngle = a([1, 0], [(cp2.x - cp3.x) / rx, (cp2.y - cp3.y) / ry]);

                        // angle delta
                        var u = [(cp2.x - cp3.x) / rx, (cp2.y - cp3.y) / ry];
                        var v = [(-cp2.x - cp3.x) / rx, (-cp2.y - cp3.y) / ry];
                        var deltaAngle = a(u, v);
                        if (r(u, v) <= -1)
                            deltaAngle = Math.PI;

                        if (r(u, v) >= 1)
                            deltaAngle = 0;

                        if (sweepFlag == 0 && deltaAngle > 0)
                            deltaAngle = deltaAngle - 2 * Math.PI;

                        if (sweepFlag == 1 && deltaAngle < 0)
                            deltaAngle = deltaAngle + 2 * Math.PI;

                        var r = (rx > ry) ? rx : ry;
                        var sx = (rx > ry) ? 1 : rx / ry;
                        var sy = (rx > ry) ? ry / rx : 1;

                        ctx.translate(centerPoint.x, centerPoint.y);
                        ctx.rotate(angle);
                        ctx.scale(sx, sy);
                        ctx.arc(0, 0, r, startAngle, startAngle + deltaAngle, 1 - sweepFlag);
                        ctx.scale(1 / sx, 1 / sy);
                        ctx.rotate(-angle);

                        ctx.translate(-centerPoint.x, -centerPoint.y);

                        continue;
                    }

                    if ((cmd == 'Z' || cmd == 'z') && firstPoint != undefined) {
                        ctx.lineTo(firstPoint.x, firstPoint.y);
                        this._currentPoint = firstPoint;
                        continue;
                    }

                    if (cmd == 'C' || cmd == 'c') {
                        var p1 = this._parsePoint(path);
                        var p2 = this._parsePoint(path);
                        var p3 = this._parsePoint(path);

                        ctx.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
                        this._currentPoint = p3;
                        continue;
                    }

                }

                ctx.fill();
                ctx.stroke();
                ctx.closePath();
            },

            text: function (ctx, params) {
                var x = $.jqx.ptrnd(params.x);
                var y = $.jqx.ptrnd(params.y);
                var width = $.jqx.ptrnd(params.width);
                var height = $.jqx.ptrnd(params.height);
                var halign = params.halign;
                var valign = params.valign;
                var angle = params.angle;
                var clip = params.clip || true;

                ctx.save();

                if (!halign)
                    halign = 'center';
                if (!valign)
                    valign = 'center';

                if (clip) {
                    ctx.rect(x - 2, y - 2, width + 5, height + 5);
                    ctx.clip();
                }

                var tw = params.textWidth;
                var th = params.textHeight;

                var w = width || 0;
                var h = height || 0;

                ctx.fillStyle = params.color;
                ctx.font = params.fontWeight + ' ' + params.fontSize + ' ' + params.fontFamily;

                if (!angle || angle == 0) {
                    if (halign == 'center')
                        x += (w - tw) / 2;
                    else if (halign == 'right')
                        x += (w - tw);

                    y += th;

                    if (valign == 'center')
                        y += (h - th) / 2;
                    else if (valign == 'bottom')
                        y += h - th;

                    if (!width)
                        width = tw;

                    if (!height)
                        height = th;

                    ctx.fillText(params.text, x, y);
                    ctx.restore();
                    return;
                }
                var rads = angle * Math.PI * 2 / 360;
                var sn = Math.sin(rads);
                var cs = Math.cos(rads);

                var h2 = th * cs + tw * sn;
                var w2 = tw * cs + th * sn;

                var ySave = y;
                var xSave = x;

                x += (width - w2) / 2;
                y += (height - h2) / 2;

                y += th * cs;

                if (halign == 'left') {
                    if (cs > 0) {
                        x = xSave;
                        if (sn < 0)
                            x -= sn * th;
                    }
                    else {
                        x = xSave - cs * tw;
                        if (sn < 0)
                            x -= sn * th;
                    }
                }
                else if (halign == 'right') {
                    if (cs > 0) {
                        x = xSave + width - w2;
                        if (sn < 0)
                            x += sn * th;
                    }
                    else {
                        x = xSave + width;
                        if (sn >= 0)
                            x -= sn * th;
                    }
                }

                if (valign == 'top') {
                    if (sn < 0) {
                        y = ySave - sn * tw;
                        if (cs > 0)
                            y += cs * th;
                    }
                    else {
                        y = ySave;
                        if (cs > 0)
                            y = ySave + th * cs;
                    }
                }
                else if (valign == 'bottom') {
                    if (sn < 0) {
                        y = ySave + height;
                        if (cs <= 0)
                            y += th * cs;
                    }
                    else {
                        y = ySave + height - tw * sn;
                        if (cs < 0)
                            y += th * cs;
                    }
                }

                x = $.jqx._rup(x);
                y = $.jqx._rup(y);

                ctx.translate(x, y);
                ctx.rotate(rads);
                ctx.fillText(params.text, 0, 0);

                ctx.restore();
            }

        },

        refresh: function () {
            this.ctx.clearRect(0, 0, this.canvas[0].width, this.canvas[0].height);
            for (var element in this._elements) {
                var params = this._elements[element];

                this._renderers.setFillStyle(this.ctx, params);
                this._renderers.setStroke(this.ctx, params);

                this._renderers[this._elements[element].type](this.ctx, params);
            }
        }
    } // End of jQWidgets HTML5 renderer


})(jQuery);
/*
*   Depends:
*       jqxcore.js
*       jqxchart.js
*
*/
(function ($) {

    /*
    *   RadialGauge's functionality
    */
    var radialGauge = {

        defineInstance: function () {
            this.width = 350;
            this.height = 350;
            this.radius = '50%';
            this.endAngle = 270;
            this.startAngle = 30;
            this.value = 0;
            this.min = 0;
            this.max = 220;
            this.disabled = false;
            this.ticksDistance;
            this.colorScheme = 'scheme01';
            this.animationDuration = 400;
            this.showRanges = true;
            this.easing = 'easeOutCubic';
            this.labels;
            this.pointer;
            this.cap;
            this.caption;
            this.border;
            this.ticksMinor;
            this.ticksMajor;
            this.style;
            this.ranges = [];

            //Equal to the radius without any reductions
            this._radius;
            this._border = null;
            this._radiusDifference = 2;
            this._pointer = null;
            this._labels = [];
            this._cap = null;
            this._ticks = [];
            this._ranges = [];
            this._gauge = null;
            this._caption = null;
            this._animationTimeout = 10;
            this._r = null;
            this._animations = [];
        },

        createInstance: function (args) {
            this._radius = this.radius;
            this.endAngle = this.endAngle * Math.PI / 180 + Math.PI / 2;
            this.startAngle = this.startAngle * Math.PI / 180 + Math.PI / 2;
            this._refresh();
            this.setValue(this.value, 0);
            this._r.getContainer().css('overflow', 'hidden');
        },

        _validateEasing: function () {
            return !!$.easing[this.easing];
        },

        _validateProperties: function () {
            if (this.startAngle === this.endAngle) {
                throw new Error('The end angle can not be equal to the start angle!');
            }
            if (!this._validateEasing()) {
                this.easing = 'linear';
            }
            this.ticksDistance = this._validatePercentage(this.ticksDistance, '20%');
            this.border = this._borderConstructor(this.border, this);
            this.style = this.style || { fill: '#ffffff', stroke: '#E0E0E0' };
            this.ticksMinor = new this._tickConstructor(this.ticksMinor, this);
            this.ticksMajor = new this._tickConstructor(this.ticksMajor, this);
            this.cap = new this._capConstructor(this.cap, this);
            this.pointer = new this._pointerConstructor(this.pointer, this);
            this.labels = new this._labelsConstructor(this.labels, this);
            this.caption = new this._captionConstructor(this.caption, this);
            for (var i = 0; i < this.ranges.length; i += 1) {
                this.ranges[i] = new this._rangeConstructor(this.ranges[i], this);
            }
        },

        _hostInit: function () {
            var width = this._getScale(this.width, 'width', this.host.parent()),
                height = this._getScale(this.height, 'height', this.host.parent()),
                border = this._outerBorderOffset(),
                host = this.host,
                childSize;
            host.width(width);
            host.height(height);
            this.radius = childSize = (this._getScale(this._radius, 'width', this.host) || width / 2) - border;
            this._originalRadius = parseInt(this.radius, 10) - this._radiusDifference;
            this._innerRadius = this._originalRadius;
            if (this.border) {
                this._innerRadius -= this._getSize(this.border.size);
            }
            host[0].innerHTML = '<div />';
            this._gaugeParent = host.children();
            this._gaugeParent.width(width);
            this._gaugeParent.height(height);
            this._r.init(this._gaugeParent);
        },

        _refresh: function () {
            var renderer = null;
            this._isVML = false;

            if (document.createElementNS && (this.renderEngine == 'SVG' || this.renderEngine == undefined)) {
                renderer = new $.jqx.svgRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'SVG')
                        throw 'Your browser does not support SVG';

                    return;
                }
            }

            if (renderer == null && this.renderEngine != 'HTML5') {
                renderer = new $.jqx.vmlRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'VML')
                        throw 'Your browser does not support VML';

                    return;
                }
                this._isVML = true;
            }

            if (renderer == null && (this.renderEngine == 'HTML5' || this.renderEngine == undefined)) {
                renderer = new $.jqx.HTML5Renderer();
                if (!renderer.init(this.host)) {
                    throw 'Your browser does not support HTML5 Canvas';
                }
            }

            this._r = renderer;
            this._validateProperties();
            this._hostInit();
            //this._performLayout();
            this._removeElements();
            //this._hostInit();
            this._render();
            this.setValue(this.value, 0);
        },

        refresh: function () {
            this._refresh.apply(this, Array.prototype.slice(arguments));
        },

        _outerBorderOffset: function () {
            var borderStroke = parseInt(this.border.style['stroke-width'], 10) || 1;
            return borderStroke / 2;
            //console.log(this._r.getContainer().css('padding', 2));
            //this.
            //this.host.children('.chartContainer').css('padding', borderStroke);
        },

        _removeCollection: function (collection) {
            for (var i = 0; i < collection.length; i += 1) {
                $(collection[i]).remove();
            }
            collection = [];
        },

        _render: function () {
            this._addBorder();
            this._addGauge();
            this._addRanges();
            this._addTicks();
            this._addLabels();
            this._addCaption();
            this._addPointer();
            this._addCap();
        },

        _addBorder: function () {
            if (!this.border.visible) {
                return;
            }
            var color = this.border.style.fill,
                borderSize = this._outerBorderOffset();
            if (!color) {
                color = '#BABABA';
            }
            if (this.border.showGradient) {
                if (color.indexOf('url') < 0 && color.indexOf('#grd') < 0) {
                    this._originalColor = color;
                } else {
                    color = this._originalColor;
                }
                color = this._r._toLinearGradient(color, true, [[0, 1], [25, 1.1], [50, 1.5], [100, 1]]);
            }
            this._border = this._r.circle(this._originalRadius + borderSize, this._originalRadius + borderSize, this._originalRadius);
            this.border.style.fill = color;
            this._r.attr(this._border, this.border.style);
        },

        _addGauge: function () {
            var r = this._originalRadius,
                url = this._r._toLinearGradient('#ffffff', [[3, 2], [100, 1]]),
                borderSize = this._outerBorderOffset();
            this._gauge = this._r.circle(r + borderSize, r + borderSize, this._innerRadius);
            this._r.attr(this._gauge, this.style);
        },

        _addCap: function () {
            var visibility = 'visible',
                borderSize = this._outerBorderOffset();
            if (!this.cap.visible) {
                visibility = 'hidden';
            }
            var r = this._originalRadius,
                size = this._getSize(this.cap.size),
                circle;
            circle = this._r.circle(r + borderSize, r + borderSize, size);
            this._capCenter = [r, r];
            this._r.attr(circle, this.cap.style);
            $(circle).css('visibility', visibility);
            this._cap = circle;
        },

        _addTicks: function () {
            var ticksMinor = this.ticksMinor,
                ticksMajor = this.ticksMajor,
                minorStep = ticksMinor.interval,
                majorStep = ticksMajor.interval,
                oldVals = {};
            for (var i = this.min, j = this.min; i <= this.max || j <= this.max; i += minorStep, j += majorStep) {
                if (j <= this.max && ticksMajor.visible) {
                    this._drawTick({
                        angle: this._getAngleByValue(j),
                        distance: this._getDistance(this.ticksDistance),
                        style: ticksMajor.style,
                        size: this._getSize(ticksMajor.size),
                        type: 'major'
                    });
                    oldVals[j.toFixed(5)] = true;
                }
                if (!oldVals[i.toFixed(5)] && ticksMinor.visible) {
                    this._drawTick({
                        angle: this._getAngleByValue(i),
                        distance: this._getDistance(this.ticksDistance),
                        style: ticksMinor.style,
                        size: this._getSize(ticksMinor.size),
                        type: 'minor'
                    });
                }
            }
            this._handleTicksVisibility();
        },

        _handleTicksVisibility: function () {
            if (!this.ticksMinor.visible) {
                this.host.children('.jqx-gauge-tick-minor').css('visibility', 'hidden');
            } else {
                this.host.children('.jqx-gauge-tick-minor').css('visibility', 'visible');
            }
            if (!this.ticksMajor.visible) {
                this.host.children('.jqx-gauge-tick-major').css('visibility', 'hidden');
            } else {
                this.host.children('.jqx-gauge-tick-major').css('visibility', 'visible');
            }
        },

        /*
        *   Calculates the size relatively to the inner gauge.
        *   _innerRadius is equal to the inner part of the gauge (without border).
        *   _originalRadius is the gauge + it's border.
        */
        _getSize: function (size) {
            if (size.toString().indexOf('%') >= 0) {
                size = (parseInt(size, 10) / 100) * this._innerRadius;
            }
            size = parseInt(size, 10);
            return size;
        },

        _getDistance: function (size) {
            return this._getSize(size) + (this._originalRadius - this._innerRadius);
        },

        _drawTick: function (options) {
            var angle = options.angle,
                distance = options.distance,
                size = options.size,
                borderSize = this._outerBorderOffset(),
                r = this._originalRadius,
                width = r - distance,
                innerWidth = width - size,
                x1 = r + borderSize + width * Math.sin(angle),
                y1 = r + borderSize + width * Math.cos(angle),
                x2 = r + borderSize + innerWidth * Math.sin(angle),
                y2 = r + borderSize + innerWidth * Math.cos(angle),
                line;
            options.style['class'] = this.toThemeProperty('jqx-gauge-tick-' + options.type);
            if (this._isVML) {
                x1 = Math.round(x1);
                x2 = Math.round(x2);
                y1 = Math.round(y1);
                y2 = Math.round(y2);
            }
            line = this._r.line(x1, y1, x2, y2, options.style);
            this._ticks.push(line);
        },

        _addRanges: function () {
            var visibility = 'visible';
            if (!this.showRanges) {
                visibility = 'hidden';
            } else {
                var ranges = this.ranges;
                for (var i = 0; i < ranges.length; i += 1) {
                    this._addRange(ranges[i], visibility);
                }
            }
        },

        _getMaxRangeSize: function () {
            var range, size = -1, start, end;
            for (var i = 0; i < this.ranges.length; i += 1) {
                start = this.ranges[i].startWidth;
                end = this.ranges[i].endWidth;
                if (start > size) {
                    size = start;
                }
                if (end > size) {
                    size = end;
                }
            }
            return size;
        },

        _getRangeDistance: function (distance, width) {
            var labelsPosition = this._getLabelsDistance(),
                rangeDistance = this._getDistance(distance),
                maxRangeSize = this._getMaxRangeSize();
            if (this.labels.position === 'outside') {
                if (labelsPosition < rangeDistance + this._getMaxTickSize()) {
                    return this._getDistance(this.ticksDistance) + maxRangeSize / 2 + this._getSize(this.ticksMajor.size);
                }
            } else if (this.labels.position === 'inside') {
                if (labelsPosition + this._getMaxTickSize() < rangeDistance) {
                    return this._getSize(this.border.size) + this._originalRadius / 20;
                }
            }
            return rangeDistance;
        },

        _addRange: function (range, visibility) {
            if (range.startValue < this.min || range.endValue > this.max) {
                return;
            }
            var startAngle = this._getAngleByValue(range.startValue),
                endAngle = this._getAngleByValue(range.endValue),
                radius = this._originalRadius,
                startDistance = radius - this._getRangeDistance(range.startDistance, range.startWidth),
                endDistance = radius - this._getRangeDistance(range.endDistance, range.endWidth),
                startWidth = range.startWidth,
                endWidth = range.endWidth,
                borderSize = this._outerBorderOffset(),
                startPoint = {
                    x: radius + borderSize + startDistance * Math.sin(startAngle),
                    y: radius + borderSize + startDistance * Math.cos(startAngle)
                },
                endPoint = {
                    x: radius + borderSize + endDistance * Math.sin(endAngle),
                    y: radius + borderSize + endDistance * Math.cos(endAngle)
                },
                startProjectionPoint = this._getProjectionPoint(startAngle, radius + borderSize, startDistance, startWidth),
                endProjectionPoint = this._getProjectionPoint(endAngle, radius + borderSize, endDistance, endWidth),
                orientation = 'default',
                path, range;
            if (Math.abs(endAngle - startAngle) > Math.PI) {
                orientation = 'opposite';
            }
            if (this._isVML) {
                path = this._rangeVMLRender(startPoint, endPoint, radius, startProjectionPoint, endProjectionPoint, endWidth, startWidth, startDistance, endDistance, orientation);
            } else {
                path = this._rangeSVGRender(startPoint, endPoint, radius, startProjectionPoint, endProjectionPoint, endWidth, startWidth, startDistance, endDistance, orientation);
            }
            range.style.visibility = visibility;
            range.style['class'] = this.toThemeProperty('jqx-gauge-range');
            range = this._r.path(path, range.style);
            this._ranges.push(range);
        },

        _rangeSVGRender: function (startPoint, endPoint, radius, startProjectionPoint, endProjectionPoint, endWidth, startWidth, startDistance, endDistance, orientation) {
            var path = '',
                startDistance = radius - startDistance,
                endDistance = radius - endDistance,
                circle = ['0,1', '0,0'];
            if (orientation === 'opposite') {
                circle = ['1,1', '1,0'];
            }
            path = 'M' + startPoint.x + ',' + startPoint.y + ' ';
            path += 'A' + (radius - startDistance) + ',' + (radius - startDistance) + ' 100 ' + circle[0] + ' ' + endPoint.x + ',' + endPoint.y + ' ';
            path += 'L ' + (endProjectionPoint.x) + ',' + (endProjectionPoint.y) + ' ';
            path += 'A' + (radius - endWidth - startDistance) + ',' + (radius - endWidth - startDistance) + ' 100 ' + circle[1] + ' ' + (startProjectionPoint.x) + ',' + (startProjectionPoint.y) + ' ';
            path += 'L ' + (startPoint.x) + ',' + (startPoint.y) + ' ';
            path += 'z';
            return path;
        },

        _rangeVMLRender: function (startPoint, endPoint, radius, startProjectionPoint, endProjectionPoint, endWidth, startWidth, startDistance, endDistance, orientation) {
            radius -= radius - startDistance + 10;
            var path = '',
                outerRadius = Math.floor(radius + (startWidth + endWidth) / 2),
                startDistance = Math.floor(radius - startDistance),
                endDistance = Math.floor(endDistance),
                middleProjection = {
                    x: (startProjectionPoint.x + endProjectionPoint.x) / 2,
                    y: (startProjectionPoint.y + endProjectionPoint.y) / 2
                },
                projDistance = Math.sqrt((endProjectionPoint.x - startProjectionPoint.x) * (endProjectionPoint.x - startProjectionPoint.x) + (endProjectionPoint.y - startProjectionPoint.y) * (endProjectionPoint.y - startProjectionPoint.y)),
                projCenterX = Math.floor(middleProjection.x + Math.sqrt(radius * radius - (projDistance / 2) * (projDistance / 2)) * (startProjectionPoint.y - endProjectionPoint.y) / projDistance),
                projCenterY = Math.floor(middleProjection.y + Math.sqrt(radius * radius - (projDistance / 2) * (projDistance / 2)) * (endProjectionPoint.x - startProjectionPoint.x) / projDistance),
                middle = {
                    x: (startPoint.x + endPoint.x) / 2,
                    y: (startPoint.y + endPoint.y) / 2
                },
                distance = Math.sqrt((endPoint.x - startPoint.x) * (endPoint.x - startPoint.x) + (endPoint.y - startPoint.y) * (endPoint.y - startPoint.y)),
                centerX = Math.floor(middle.x + Math.sqrt(Math.abs(outerRadius * outerRadius - (distance / 2) * (distance / 2))) * (startPoint.y - endPoint.y) / distance),
                centerY = Math.floor(middle.y + Math.sqrt(Math.abs(outerRadius * outerRadius - (distance / 2) * (distance / 2))) * (endPoint.x - startPoint.x) / distance);

            if (orientation === 'opposite') {
                projCenterX = Math.floor(middleProjection.x - Math.sqrt(radius * radius - (projDistance / 2) * (projDistance / 2)) * (startProjectionPoint.y - endProjectionPoint.y) / projDistance);
                projCenterY = Math.floor(middleProjection.y - Math.sqrt(radius * radius - (projDistance / 2) * (projDistance / 2)) * (endProjectionPoint.x - startProjectionPoint.x) / projDistance);

                centerX = Math.floor(middle.x - Math.sqrt(Math.abs(outerRadius * outerRadius - (distance / 2) * (distance / 2))) * (startPoint.y - endPoint.y) / distance);
                centerY = Math.floor(middle.y - Math.sqrt(Math.abs(outerRadius * outerRadius - (distance / 2) * (distance / 2))) * (endPoint.x - startPoint.x) / distance);
            }
            radius = Math.floor(radius);
            endPoint = { x: Math.floor(endPoint.x), y: Math.floor(endPoint.y) };
            startPoint = { x: Math.floor(startPoint.x), y: Math.floor(startPoint.y) };
            startProjectionPoint = { x: Math.floor(startProjectionPoint.x), y: Math.floor(startProjectionPoint.y) };
            endProjectionPoint = { x: Math.floor(endProjectionPoint.x), y: Math.floor(endProjectionPoint.y) };

            path = 'm ' + endPoint.x + ',' + endPoint.y;
            path += 'at ' + (centerX - outerRadius) + ' ' + (centerY - outerRadius) + ' ' + (outerRadius + centerX) + ' ' + (outerRadius + centerY) + ' ' + endPoint.x + ',' + endPoint.y + ' ' + startPoint.x + ',' + startPoint.y;
            path += 'l ' + startProjectionPoint.x + ',' + startProjectionPoint.y;
            path += 'm ' + endPoint.x + ',' + endPoint.y;
            path += 'l ' + endProjectionPoint.x + ',' + endProjectionPoint.y;
            path += 'at ' + (projCenterX - radius) + ' ' + (projCenterY - radius) + ' ' + (radius + projCenterX) + ' ' + (radius + projCenterY) + ' ' + endProjectionPoint.x + ',' + endProjectionPoint.y + ' ' + startProjectionPoint.x + ',' + startProjectionPoint.y;
            path += 'qx ' + startProjectionPoint.x + ' ' + startProjectionPoint.y;
            return path;
        },

        _getProjectionPoint: function (angle, radius, ratio, displacement) {
            var point = { x: radius + (ratio - displacement) * Math.sin(angle), y: radius + (ratio - displacement) * Math.cos(angle) };
            return point;
        },

        _addLabels: function (options) {
            var distance = this._getDistance(this._getLabelsDistance());
            for (currentLabel = this.min; currentLabel <= this.max; currentLabel += this.labels.interval) {
                if (this.labels.visible) {
                    this._addLabel({
                        angle: this._getAngleByValue(currentLabel),
                        value: currentLabel,
                        distance: distance,
                        style: this.labels.className
                    });
                }
            }
        },

        _getLabelsDistance: function () {
            var maxSize = this._getMaxLabelSize(),
                labelsDistance = this._getDistance(this.labels.distance),
                ticksDistance = this._getDistance(this.ticksDistance);
            maxSize = maxSize.width;
            if (this.labels.position === 'inside') {
                return ticksDistance + maxSize - 5;
            } else if (this.labels.position === 'outside') {
                if (labelsDistance < (ticksDistance - maxSize * 1.5)) {
                    return labelsDistance;
                }
                return Math.max(ticksDistance - maxSize * 1.5, 0.6 * maxSize);
            }
            return this.labels.distance;
        },

        _addLabel: function (options) {
            var angle = options.angle,
                r = this._originalRadius,
                w = r - options.distance,
                offset = this.labels.offset,
                callback = this.labels.formatValue,
                borderSize = this._outerBorderOffset(),
                x = r + borderSize + w * Math.sin(angle) + offset[0],
                y = r + borderSize + w * Math.cos(angle) + offset[1],
                value = options.value,
                className = options.style || '',
                textSize,
                label;
            if (typeof callback === 'function') {
                value = callback(value);
            }
            textSize = this._r.measureText(value, 0, { 'class': className });
            label = this._r.text(value, Math.round(x) - textSize.width / 2, Math.round(y), textSize.width, textSize.height, 0, { 'class': this.toThemeProperty('jqx-gauge-label') });
            this._labels.push(label);
        },

        _addCaption: function () {
            var text = this.caption.value,
                className = this.toThemeProperty('jqx-gauge-caption'),
                offset = this.caption.offset,
                size = this._r.measureText(text, 0, { 'class': className }),
                position = this._getPosition(this.caption.position, size, offset),
                style = this.caption.style,
                border = this._outerBorderOffset(),
                t = this._r.text(text, position.left + border, position.top + border, size.width, size.height, 0, { 'class': className });
            this._caption = t;
        },

        _getPosition: function (position, size, offset) {
            var left = 0,
                top = 0,
                r = this._originalRadius;
            switch (position) {
                case 'left':
                    left = (r - size.width) / 2;
                    top = r - size.height / 2;
                    break;
                case 'right':
                    left = r + (r - size.width) / 2;
                    top = r - size.height / 2;
                    break;
                case 'bottom':
                    left = (2 * r - size.width) / 2;
                    top = (r + 2 * r - size.height) / 2;
                    break;
                default:
                    left = (2 * r - size.width) / 2;
                    top = (r + size.height) / 2;
                    break;
            }
            return { left: left + offset[0], top: top + offset[1] };
        },

        _addPointer: function () {
            var visibility = 'visible';
            if (!this.pointer.visible) {
                visibility = 'hidden';
            }
            var radius = this._originalRadius,
                length = this._getSize(this.pointer.length),
                innerW = length * 0.9,
                angle = this._getAngleByValue(this.value),
                pointerType = this.pointer.pointerType,
                points;
            points = this._computePointerPoints(this._getSize(this.pointer.width), angle, length, pointerType !== 'default');
            this._pointer = this._r.path(points, this.pointer.style);
            $(this._pointer).css('visibility', visibility);
        },

        _computePointerPoints: function (pointerWidth, angle, pointerLength, rect) {
            if (!rect) {
                return this._computeArrowPoints(pointerWidth, angle, pointerLength);
            } else {
                return this._computeRectPoints(pointerWidth, angle, pointerLength);
            }
        },

        _computeArrowPoints: function (pointerWidth, angle, pointerLength) {
            var r = this._originalRadius - 0.5,
                sin = Math.sin(angle),
                cos = Math.cos(angle),
                borderSize = this._outerBorderOffset(),
                x = r + borderSize + pointerLength * sin,
                y = r + borderSize + pointerLength * cos,
                startX1 = r + borderSize + pointerWidth * cos,
                startY1 = r + borderSize - pointerWidth * sin,
                startX2 = r + borderSize - pointerWidth * cos,
                startY2 = r + borderSize + pointerWidth * sin,
                points;
            if (this._isVML) {
                startX1 = Math.round(startX1);
                startX2 = Math.round(startX2);
                startY1 = Math.round(startY1);
                startY2 = Math.round(startY2);
                x = Math.round(x);
                y = Math.round(y);
            }
            points = 'M ' + startX1 + ',' + startY1 + ' L ' + startX2 + ',' + startY2 + ' L ' + x + ',' + y + '';
            return points;
        },

        _computeRectPoints: function (pointerWidth, angle, pointerLength) {
            var r = this._originalRadius,
                sin = Math.sin(angle),
                cos = Math.cos(angle),
                arrowDistance = pointerLength,
                borderSize = this._outerBorderOffset(),
                endX1 = r + borderSize - pointerWidth * cos + pointerLength * sin,
                endY1 = r + borderSize + pointerWidth * sin + pointerLength * cos,
                endX2 = r + borderSize + pointerWidth * cos + pointerLength * sin,
                endY2 = r + borderSize - pointerWidth * sin + pointerLength * cos,
                startX1 = r + borderSize + pointerWidth * cos,
                startY1 = r + borderSize - pointerWidth * sin,
                startX2 = r + borderSize - pointerWidth * cos,
                startY2 = r + borderSize + pointerWidth * sin,
                points;
            if (this._isVML) {
                startX1 = Math.round(startX1);
                startX2 = Math.round(startX2);
                startY1 = Math.round(startY1);
                startY2 = Math.round(startY2);
                endX1 = Math.round(endX1);
                endY1 = Math.round(endY1);
                endX2 = Math.round(endX2);
                endY2 = Math.round(endY2);
            }
            points = 'M ' + startX1 + ',' + startY1 + ' L ' + startX2 + ',' + startY2 + ' L ' + endX1 + ',' + endY1 + ' ' + endX2 + ',' + endY2;
            return points;
        },

        _getAngleByValue: function (value) {
            var startAngle = this.startAngle,
                endAngle = this.endAngle,
                start = this.min,
                end = this.max,
                singleValue = (startAngle - endAngle) / (end - start);
      //      return singleValue * value + startAngle + Math.PI;
            return singleValue * (value - this.min) + startAngle + Math.PI;
        },

        _setValue: function (value) {
            if (value <= this.max && value >= this.min) {
                var angle = this._getAngleByValue(value),
                    pointerType = this.pointer.pointerType,
                    points = this._computePointerPoints(this._getSize(this.pointer.width), angle, this._getSize(this.pointer.length), pointerType !== 'default');
                if (this._isVML) {
                    this._r.attr(this._pointer.childNodes[0], { v: points });
                } else {
                    this._r.attr(this._pointer, { d: points });
                }
                this.value = value;
            }
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key == 'min') {
                this.min = parseInt(value);
            }
            if (key == 'max') {
                this.max = parseInt(value);
            }
            if (key == 'value') {
                this.value = parseInt(value);
            }

            if (key === 'disabled') {
                if (value) {
                    this.disable();
                } else {
                    this.enable();
                }
            } else if (key === 'value') {
                this.value = oldvalue;
                this.setValue(value);
            } else {
                if (key === 'startAngle') {
                    this.startAngle = this.startAngle * Math.PI / 180 - Math.PI / 2;
                } else if (key === 'endAngle') {
                    this.endAngle = this.endAngle * Math.PI / 180 - Math.PI / 2;
                } else if (key === 'colorScheme') {
                    this.pointer.style = null;
                    this.cap.style = null;
                } else if (key === 'radius') {
                    this._radius = value;
                }
                if (key !== 'animationDuration' && key !== 'easing') {
                    this._refresh();
                }
            }
            if (this._r instanceof $.jqx.HTML5Renderer)
                this._r.refresh();
        },

        _tickConstructor: function (data, jqx) {
            if (this.host) {
                return new this._tickConstructor(data, jqx);
            }
            data = data || {};
            this.size = jqx._validatePercentage(data.size, '10%');
            this.interval = parseFloat(data.interval);
            if (!this.interval) {
                this.interval = 5;
            }
            this.style = data.style || { stroke: '#898989', 'stroke-width': 1 };
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
        },

        _capConstructor: function (data, jqx) {
            var color = jqx._getColorScheme(jqx.colorScheme)[0];
            if (this.host) {
                return new this._capConstructor(data, jqx);
            }
            data = data || {};
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
            this.size = jqx._validatePercentage(data.size, '4%');
            this.style = data.style || { fill: color, 'stroke-width': '1px', stroke: color, 'z-index': 30 };
        },

        _pointerConstructor: function (data, jqx) {
            var color = jqx._getColorScheme(jqx.colorScheme)[0];
            if (this.host) {
                return new this._pointerConstructor(data, jqx);
            }
            data = data || {};
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
            this.pointerType = data.pointerType;
            if (this.pointerType !== 'default' && this.pointerType !== 'rectangle') {
                this.pointerType = 'default';
            }
            this.style = data.style || { 'z-index': 0, stroke: color, fill: color, 'stroke-width': 1 };
            this.length = jqx._validatePercentage(data.length, '70%');
            this.width = jqx._validatePercentage(data.width, '2%');
        },

        _labelsConstructor: function (data, jqx) {
            if (this.host) {
                return new this._labelsConstructor(data, jqx);
            }
            data = data || {};
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
            this.offset = data.offset;
            if (!(this.offset instanceof Array)) {
                this.offset = [0, -10];
            }
            this.interval = parseFloat(data.interval);
            if (!this.interval) {
                this.interval = 20;
            }
            this.distance = jqx._validatePercentage(data.distance, '38%');
            this.position = data.position;
            if (this.position !== 'inside' && this.position !== 'outside') {
                this.position = 'none';
            }
            this.formatValue = data.formatValue;
            if (typeof this.formatValue !== 'function') {
                this.formatValue = function (value) {
                    return value;
                }
            }
        },

        _captionConstructor: function (data, jqx) {
            if (this.host) {
                return new this._captionConstructor(data, jqx);
            }
            data = data || {};
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
            this.value = data.value || '';
            this.position = data.position;
            if (this.position !== 'bottom' && this.position !== 'top' &&
                this.position !== 'left' && this.position !== 'right') {
                this.position = 'bottom';
            }
            this.offset = data.offset;
            if (!(this.offset instanceof Array)) {
                this.offset = [0, 0];
            }
        },

        _rangeConstructor: function (data, jqx) {
            if (this.host) {
                return new this._rangeConstructor(data, jqx);
            }
            data = data || {};
            this.startDistance = jqx._validatePercentage(data.startDistance, '5%');
            this.endDistance = jqx._validatePercentage(data.endDistance, '5%');
            this.style = data.style || { fill: '#000000', stroke: '#111111' };
            this.startWidth = parseInt(data.startWidth, 10);
            if (!this.startWidth) {
                this.startWidth = 10;
            }
            this.startWidth = Math.max(this.startWidth, 2);
            this.endWidth = parseInt(data.endWidth, 10);
            if (!this.endWidth) {
                this.endWidth = 10;
            }
            this.endWidth = Math.max(this.endWidth, 2);
            this.startValue = parseInt(data.startValue, 10);
            if (!this.startValue) {
                this.startValue = 0;
            }
            this.endValue = parseInt(data.endValue, 10);
            if (!this.endValue) {
                this.endValue = 100;
            }
        },

        _borderConstructor: function (data, jqx) {
            if (this.host) {
                return new this._borderConstructor(data, jqx);
            }
            data = data || {};
            this.size = jqx._validatePercentage(data.size, '10%');
            this.style = data.style || { stroke: '#cccccc' };
            if (typeof data.showGradient === 'undefined') {
                this.showGradient = true;
            } else {
                this.showGradient = data.showGradient;
            }
            if (typeof data.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = data.visible;
            }
        }
    };



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    *
    *
    *                                       Reusable methods
    *
    *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    var common = {

        _events: ['valueChanging', 'valueChanged'],
        _animationTimeout: 10,
        _schemes: $.jqx._jqxChart.prototype.colorSchemes,

        _getScale: function (size, dim, parent) {
            if (size && size.toString().indexOf('%') >= 0) {
                size = parseInt(size, 10) / 100;
                return parent[dim]() * size;
            }
            return parseInt(size, 10);
        },

        _removeElements: function () {
            this.host.children('.chartContainer').remove();
            this.host.children('#tblChart').remove();
        },

        _getMaxLabelSize: function () {
            var maxVal = this.max,
                minVal = this.min,
                maxSize = this._r.measureText(maxVal, 0, { 'class': this.toThemeProperty('jqx-gauge-label') }),
                minSize = this._r.measureText(minVal, 0, { 'class': this.toThemeProperty('jqx-gauge-label') });
            if (minSize.width > maxSize.width) {
                return minSize;
            }
            return maxSize;
        },

        disable: function () {
            this.disabled = true;
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        enable: function () {
            this.disabled = false;
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        destroy: function () {
            this._removeElements();
        },

        _validatePercentage: function (data, def) {
            if (parseFloat(data) !== 0 && (!data || !parseInt(data, 10))) {
                data = def;
            }
            return data;
        },

        _getColorScheme: function (name) {
            var scheme;
            for (var i = 0; i < this._schemes.length; i += 1) {
                scheme = this._schemes[i];
                if (scheme.name === name) {
                    return scheme.colors;
                }
            }
            return null;
        },

        setValue: function (value, duration) {
            if (!this.disabled) {
                if (value > this.max) {
                    value = this.max;
                }
                if (value < this.min) {
                    value = this.min;
                }
                duration = duration || this.animationDuration || 0;
                var distance = duration / this._animationTimeout;
                this._animate((value - this.value) / distance, this.value, value, duration);
            }
        },

        _animate: function (step, start, end, duration) {
            if (this._timeout) {
                this._endAnimation(this.value, false);
            }
            if (!duration) {
                this._endAnimation(end, true);
                return;
            }
            this._animateHandler(step, start, end, 0, duration);
        },

        _animateHandler: function (step, start, end, current, duration) {
            var self = this;
            if (current <= duration) {
                this._timeout = setTimeout(function () {
                    self.value = start + (end - start) * $.easing[self.easing](current / duration, current, 0, 1, duration);
                    self._setValue(self.value);
                    self._raiseEvent(0, {
                        value: self.value
                    });
                    self._animateHandler(step, start, end, current + self._animationTimeout, duration);
                }, this._animationTimeout);
            } else {
                this._endAnimation(end, true);
            }
        },

        _endAnimation: function (end, toRaiseEvent) {
            clearTimeout(this._timeout);
            this._timeout = null;
            this._setValue(end);
            if (toRaiseEvent) {
                this._raiseEvent(1, {
                    value: end
                });
            }
        },

        _getMaxTickSize: function () {
            return Math.max(this._getSize(this.ticksMajor.size), this._getSize(this.ticksMinor.size));
        },

        _raiseEvent: function (eventId, args) {
            var event = $.Event(this._events[eventId]),
                result;
            event.args = args || {};
            result = this.host.trigger(event);
            return result;
        }
    },



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
    *
    *
    *                               LinearGauge's functionality
    *
    *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    linearGauge = {

        defineInstance: function () {
            this.value = -50;
            this.max = 40;
            this.min = -60;
            this.width = 100;
            this.height = 300;
            this.pointer = {};
            this.labels = {};
            this.animationDuration = 1000;
            this.showRanges = {};
            this.ticksMajor = { size: '15%', interval: 5 };
            this.ticksMinor = { size: '10%', interval: 2.5 };
            this.ranges = [];
            this.easing = 'easeOutCubic';
            this.colorScheme = 'scheme01';
            this.disabled = false;

            this.rangesOffset = 0;
            this.background = {};
            this.ticksPosition = 'both';
            this.rangeSize = '5%';
            this.scaleStyle = null;
            this.ticksOffset = null;
            this.scaleLength = '90%';
            this.orientation = 'vertical';

            //Used for saving the solid background color when a gradient is used
            this._originalColor;
            this._width;
            this._height;
            this._r;
        },

        createInstance: function () {
            this.host.css('overflow', 'hidden');
        },

        refresh: function (init) {
            var renderer = null;
            this._isVML = false;

            if (document.createElementNS && (this.renderEngine == 'SVG' || this.renderEngine == undefined)) {
                renderer = new $.jqx.svgRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'SVG')
                        throw 'Your browser does not support SVG';

                    return;
                }
            }

            if (renderer == null && this.renderEngine != 'HTML5') {
                renderer = new $.jqx.vmlRenderer();
                if (!renderer.init(this.host)) {
                    if (this.renderEngine == 'VML')
                        throw 'Your browser does not support VML';

                    return;
                }
                this._isVML = true;
            }

            if (renderer == null && (this.renderEngine == 'HTML5' || this.renderEngine == undefined)) {
                renderer = new $.jqx.HTML5Renderer();
                if (!renderer.init(this.host)) {
                    throw 'Your browser does not support HTML5 Canvas';
                }
            }

            this._r = renderer;
            this._validateProperties();
            this._reset();
            this._init();
            this._performLayout();
            this._render();
            //this.setValue(this.value, 1);
        },

        _getBorderSize: function () {
            var def = 1,
                size;
            if (this._isVML) {
                def = 0;
            }
            if (this.background) {
                size = (parseInt(this.background.style['stroke-width'], 10) || def) / 2;
                if (this._isVML) {
                    return Math.round(size);
                }
                return size;
            }
            return def;
        },

        _validateProperties: function () {
            this.background = this._backgroundConstructor(this.background, this);
            this.ticksOffset = this.ticksOffset || this._getDefaultTicksOffset();
            this.rangesOffset = this.rangesOffset || 0;
            this.rangeSize = this._validatePercentage(this.rangeSize, 5);
            this.ticksOffset[0] = this._validatePercentage(this.ticksOffset[0], '5%');
            this.ticksOffset[1] = this._validatePercentage(this.ticksOffset[1], '5%');
            this.ticksMinor = this._tickConstructor(this.ticksMinor, this);
            this.ticksMajor = this._tickConstructor(this.ticksMajor, this);
            this.scaleStyle = this.scaleStyle || this.ticksMajor.style;
            this.labels = this._labelsConstructor(this.labels, this);
            this.pointer = this._pointerConstructor(this.pointer, this);
            for (var i = 0; i < this.ranges.length; i += 1) {
                this.ranges[i] = this._rangeConstructor(this.ranges[i], this);
            }
        },

        _getDefaultTicksOffset: function () {
            if (this.orientation === 'horizontal') {
                return ['5%', '36%'];
            }
            return ['36%', '5%'];
        },

        _handleOrientation: function () {
            if (this.orientation === 'vertical') {
                $.extend(this, linearVerticalGauge);
            } else {
                $.extend(this, linearHorizontalGauge);
            }
        },

        _reset: function () {
            this.host.empty();
        },

        _performLayout: function () {
            var borderStroke = parseInt(this.background.style['stroke-width'], 10) || 1;
            this._width -= borderStroke;
            this._height -= borderStroke;
            this.host.css('padding', borderStroke / 2);
        },

        _init: function () {
            var border = this._getBorderSize(),
                chartContainer;
            this._width = this._getScale(this.width, 'width', this.host.parent()) - 3;
            this._height = this._getScale(this.height, 'height', this.host.parent()) - 3;
            this.element.innerHTML = '<div/>';
            this.host.width(this._width);
            this.host.height(this._height);
            this.host.children().width(this._width);
            this.host.children().height(this._height);
            this._r.init(this.host.children());
            chartContainer = this._r.getContainer();
            chartContainer.width(this._width);
            chartContainer.height(this._height);
        },

        _render: function () {
            this._renderBackground();
            this._renderTicks();
            this._renderLabels();
            this._renderRanges();
            this._renderPointer();
        },

        _renderBackground: function () {
            if (!this.background.visible) {
                return;
            }
            var options = this.background.style,
                border = $.jqx._rup(this._getBorderSize()),
                shape = 'rect',
                rect;
            options = this._handleShapeOptions(options);
            if (this.background.backgroundType === 'roundedRectangle' && this._isVML) {
                shape = 'roundrect';
            }
            if (!this._Vml) {
                options.x = border;
                options.y = border;
            }
            rect = this._r.shape(shape, options);
            if (this._isVML) {
                this._fixVmlRoundrect(rect, options);
            }
        },

        _handleShapeOptions: function (options) {
            var color = this.background.style.fill,
                border = this._getBorderSize();
            if (!color) {
                color = '#cccccc';
            }
            if (this.background.showGradient) {
                if (color.indexOf('url') < 0 && color.indexOf('#grd') < 0) {
                    this._originalColor = color;
                } else {
                    color = this._originalColor;
                }
                color = this._r._toLinearGradient(color, this.orientation === 'horizontal', [[1, 1.1], [90, 1.5]]);
            }
            this.background.style.fill = color;
            if (this.background.backgroundType === 'roundedRectangle') {
                if (this._isVML) {
                    options.arcsize = this.background.borderRadius + '%';
                } else {
                    options.rx = this.background.borderRadius;
                    options.ry = this.background.borderRadius;
                }
            }
            options.width = this._width - 1;
            options.height = this._height - 1;
            return options;
        },

        _fixVmlRoundrect: function (rect, options) {
            var border = this._getBorderSize();
            rect.style.position = 'absolute';
            rect.style.left = border;
            rect.style.top = border;
            rect.style.width = this._width - 1;
            rect.style.height = this._height - 1;
            rect.strokeweight = 0;
            delete options.width;
            delete options.height;
            delete options.arcsize;
            this._r.attr(rect, options);
        },

        _renderTicks: function () {
            var distance = Math.abs(this.max - this.min),
                minor = this.ticksMinor,
                major = this.ticksMajor,
                majorCount = distance / major.interval,
                minorCount = distance / minor.interval,
                majorOptions, minorOptions;
            majorOptions = { size: this._getSize(major.size), style: major.style, visible: major.visible, interval: major.interval };
            minorOptions = { size: this._getSize(minor.size), style: minor.style, visible: minor.visible, interval: minor.interval, checkOverlap: true };
            if (this.ticksPosition === 'near' || this.ticksPosition === 'both') {
                this._ticksRenderHandler(majorOptions);
                this._ticksRenderHandler(minorOptions);
            }
            if (this.ticksPosition === 'far' || this.ticksPosition === 'both') {
                majorOptions.isFar = true;
                minorOptions.isFar = true;
                this._ticksRenderHandler(majorOptions);
                this._ticksRenderHandler(minorOptions);
            }
            this._renderConnectionLine();
        },

        _ticksRenderHandler: function (options) {
            if (!options.visible) {
                return;
            }
            var offsetLeft = this._getSize(this.ticksOffset[0], 'width'),
                offsetTop = this._getSize(this.ticksOffset[1], 'height'),
                border = this._getBorderSize(),
                inactiveOffset = this._calculateTickOffset() + this._getMaxTickSize();
            if (options.isFar) {
                inactiveOffset += options.size;
            }
            this._drawTicks(options, border, inactiveOffset + border);
        },

        _drawTicks: function (options, border, inactiveOffset) {
            var position;
            for (var i = this.min; i <= this.max; i += options.interval) {
                position = this._valueToCoordinates(i);
                if (!options.checkOverlap || !this._overlapTick(i)) {
                    this._renderTick(options.size, position, options.style, inactiveOffset);
                }
            }
        },

        _calculateTickOffset: function () {
            var offsetLeft = this._getSize(this.ticksOffset[0], 'width'),
                offsetTop = this._getSize(this.ticksOffset[1], 'height'),
                offset = offsetTop;
            if (this.orientation === 'vertical') {
                offset = offsetLeft;
            }
            return offset;
        },

        _overlapTick: function (value) {
            value += this.min;
            if (value % this.ticksMinor.interval === value % this.ticksMajor.interval) {
                return true;
            }
            return false;
        },

        _renderConnectionLine: function () {
            if (!this.ticksMajor.visible && !this.ticksMinor.visible) {
                return;
            }
            var scaleLength = this._getScaleLength(),
                border = this._getBorderSize(),
                maxPosition = this._valueToCoordinates(this.max),
                minPosition = this._valueToCoordinates(this.min),
                maxSize = this._getMaxTickSize(),
                offset = maxSize + border;
            if (this.orientation === 'vertical') {
                offset += this._getSize(this.ticksOffset[0], 'width');
                this._r.line(offset, maxPosition, offset, minPosition, this.scaleStyle);
            } else {
                offset += this._getSize(this.ticksOffset[1], 'height');
                this._r.line(maxPosition, offset, minPosition, offset, this.scaleStyle);
            }
        },

        _getScaleLength: function () {
            return this._getSize(this.scaleLength, (this.orientation === 'vertical' ? 'height' : 'width'));
        },

        _renderTick: function (size, distance, style, offset) {
            var coordinates = this._handleTickCoordinates(size, distance, offset);
            this._r.line(Math.round(coordinates.x1), Math.round(coordinates.y1), Math.round(coordinates.x2), Math.round(coordinates.y2), style);
        },

        _handleTickCoordinates: function (size, distance, offset) {
            if (this.orientation === 'vertical') {
                return {
                    x1: offset - size,
                    x2: offset,
                    y1: distance,
                    y2: distance
                };
            }
            return {
                x1: distance,
                x2: distance,
                y1: offset - size,
                y2: offset
            };
        },

        _getTickCoordinates: function (tickSize, offset) {
            var ticksCoordinates = this._handleTickCoordinates(tickSize, 0, this._calculateTickOffset());
            if (this.orientation === 'vertical') {
                ticksCoordinates = ticksCoordinates.x1;
            } else {
                ticksCoordinates = ticksCoordinates.y1;
            }
            ticksCoordinates += tickSize;
            return ticksCoordinates;

        },

        _renderLabels: function () {
            if (!this.labels.visible) {
                return;
            }
            var startPosition = this._getSize(this.ticksOffset[0], 'width'),
                tickSize = this._getMaxTickSize(),
                labelsPosition = this.labels.position,
                dimension = 'height',
                border = this._getBorderSize(),
                ticksCoordinates = this._calculateTickOffset() + tickSize,
                maxLabelSize;
            if (this.orientation === 'vertical') {
                startPosition = this._getSize(this.ticksOffset[1], 'height');
                dimension = 'width';
            }
            maxLabelSize = this._getMaxLabelSize()[dimension];
            if (labelsPosition === 'near' || labelsPosition === 'both') {
                this._labelListRender(ticksCoordinates - tickSize - maxLabelSize + border, startPosition + border, maxLabelSize, 'near');
            }
            if (labelsPosition === 'far' || labelsPosition === 'both') {
                this._labelListRender(ticksCoordinates + tickSize + maxLabelSize + border, startPosition + border, maxLabelSize, 'far');
            }
        },

        _labelListRender: function (offset, distance, maxLabelSize, position) {
            var interval = this.labels.interval,
                count = Math.abs(this.max - this.min) / interval,
                length = this._getScaleLength(),
                step = length / count,
                currentValue = (this.orientation === 'vertical') ? this.max : this.min;
            offset += this._getSize(this.labels.offset);
            for (var i = 0; i <= count; i += 1) {
                this._renderLabel(distance, position, offset, maxLabelSize, currentValue);
                currentValue += (this.orientation === 'vertical') ? -interval : interval;
                distance += step;
            }
        },

        _renderLabel: function (distance, position, offset, maxLabelSize, currentValue) {
            var param = { 'class': this.toThemeProperty('jqx-gauge-label') },
                interval = this.labels.interval,
                widthDiff, textSize, formatedValue;
            formatedValue = this.labels.formatValue(currentValue, position);
            textSize = this._r.measureText(formatedValue, 0, param);
            if (this.orientation === 'vertical') {
                widthDiff = (position === 'near') ? maxLabelSize - textSize.width : 0;
                this._r.text(formatedValue, Math.round(offset) + widthDiff - maxLabelSize / 2,
                             Math.round(distance - textSize.height / 2), textSize.width, textSize.height, 0, param);
            } else {
                widthDiff = (position === 'near') ? maxLabelSize - textSize.height : 0;
                this._r.text(formatedValue, Math.round(distance - textSize.width / 2),
                             Math.round(offset) + widthDiff - maxLabelSize / 2, textSize.width, textSize.height, 0, param);
            }
        },

        _renderRanges: function () {
            if (!this.showRanges) {
                return;
            }
            var dim = (this.orientation === 'vertical') ? 'width' : 'height',
                offset = this._getSize(this.rangesOffset, dim),
                size = this._getSize(this.rangeSize, dim),
                options;
            for (var i = 0; i < this.ranges.length; i += 1) {
                options = this.ranges[i];
                options.size = size;
                this._renderRange(options, offset);
            }
        },

        _renderRange: function (options, offset) {
            var scaleLength = this._getScaleLength(),
                border = this._getBorderSize(),
                offsetLeft = this._getSize(this.ticksOffset[0], 'width'),
                offsetTop = this._getSize(this.ticksOffset[1], 'height'),
                maxSize = this._getMaxTickSize(),
                size = this._getSize(options.size),
                top = this._valueToCoordinates(options.endValue);
                var startValue = options.startValue;
                if (startValue < this.min) startValue = this.min;
                var height = Math.abs(this._valueToCoordinates(startValue) - top),
                rect, width;
            if (this.orientation === 'vertical') {
                rect = this._r.rect(offsetLeft + maxSize + offset - size + border, top, options.size, height, options.style);
            } else {
                width = height;
                rect = this._r.rect(this._valueToCoordinates(options.startValue), offsetTop + maxSize + border, width, options.size, options.style);
            }
            this._r.attr(rect, options.style);
        },

        _renderPointer: function () {
            if (!this.pointer.visible) {
                return;
            }
            if (this.pointer.pointerType === 'default') {
                this._renderColumnPointer();
            } else {
                this._renderArrowPointer();
            }
        },

        _renderColumnPointer: function () {
            this._pointer = this._r.rect(0, 0, 0, 0, this.pointer.style);
            this._r.attr(this._pointer, this.pointer.style);
            this._setValue(this.value);
        },

        _renderArrowPointer: function () {
            var path = this._getArrowPathByValue(0);
            this._pointer = this._r.path(path, this.pointer.style);
        },

        _getArrowPathByValue: function (value) {
            var border = this._getBorderSize(),
                top = Math.ceil(this._valueToCoordinates(value)) + border,
                left = border,
                offsetLeft = Math.ceil(this._getSize(this.ticksOffset[0], 'width')),
                offsetTop = Math.ceil(this._getSize(this.ticksOffset[1], 'height')),
                offset = Math.ceil(this._getSize(this.pointer.offset)),
                maxSize = Math.ceil(this._getMaxTickSize()),
                size = Math.ceil(this._getSize(this.pointer.size)),
                side = Math.ceil(Math.sqrt((size * size) / 3)),
                path, topProjection, temp;
            if (this.orientation === 'vertical') {
                left += offsetLeft + maxSize + offset;
                topProjection = (offset >= 0) ? left + size : left - size;
                path = 'M ' + left + ' ' + top + ' L ' + topProjection + ' ' + (top - side) + ' L ' + topProjection + ' ' + (top + side);
            } else {
                left += offsetLeft + maxSize * 2 + side + offset;
                temp = top;
                top = left;
                left = temp;
                topProjection = (offset >= 0) ? top - size : top + size;
                path = 'M ' + left + ' ' + top + ' L ' + (left - side) + ' ' + topProjection + ' L ' + (left + side) + ' ' + topProjection;
            }
            return path;
        },

        _setValue: function (val) {
            if (this.pointer.pointerType === 'default') {
                this._performColumnPointerLayout(val);
            } else {
                this._performArrowPointerLayout(val);
            }
            this.value = val;
        },

        _performColumnPointerLayout: function (val) {
            var bottom = this._valueToCoordinates(this.min),
                top = this._valueToCoordinates(val),
                height = Math.abs(bottom - top),
                border = this._getBorderSize(),
                offsetLeft = this._getSize(this.ticksOffset[0], 'width'),
                offsetTop = this._getSize(this.ticksOffset[1], 'height'),
                maxSize = this._getMaxTickSize(),
                width = this._getSize(this.pointer.size),
                offset = this._getSize(this.pointer.offset),
                attrs = {},
                left;
            if (this.orientation === 'vertical') {
                left = offsetLeft + maxSize;
                attrs = { left: left + offset + 1 + border, top: top, height: height, width: width };
            } else {
                left = offsetTop + maxSize;
                attrs = { left: bottom, top: left + offset - width - 1 + border, height: width, width: height };
            }
            this._setRectAttrs(attrs);
        },

        _performArrowPointerLayout: function (val) {
            var attr = this._getArrowPathByValue(val);
            if (this._isVML) {
                this._r.attr(this._pointer.childNodes[0], { v: attr });
                this._pointer.v = attr;
            } else {
                this._r.attr(this._pointer, { d: attr });
            }
        },

        _setRectAttrs: function (attrs) {
            if (!this._isVML) {
                this._r.attr(this._pointer, { x: attrs.left });
                this._r.attr(this._pointer, { y: attrs.top });
                this._r.attr(this._pointer, { width: attrs.width });
                this._r.attr(this._pointer, { height: attrs.height });
            } else {
                this._pointer.style.top = attrs.top;
                this._pointer.style.left = attrs.left;
                this._pointer.style.width = attrs.width;
                this._pointer.style.height = attrs.height;
            }
        },

        _valueToCoordinates: function (value) {
            var border = this._getBorderSize(),
                scaleLength = this._getScaleLength(),
                offsetLeft = this._getSize(this.ticksOffset[0], 'width'),
                offsetTop = this._getSize(this.ticksOffset[1], 'height'),
                current = Math.abs(this.min - value),
                distance = Math.abs(this.max - this.min);
            if (this.orientation === 'vertical') {
                return this._height - (current / distance) * scaleLength - (this._height - offsetTop - scaleLength) + border;
            }
            return (current / distance) * scaleLength + (this._width - offsetLeft - scaleLength) + border;
        },

        _getSize: function (size, dim) {
            dim = dim || (this.orientation === 'vertical' ? 'width' : 'height');
            if (size.toString().indexOf('%') >= 0) {
                size = (parseInt(size, 10) / 100) * this['_' + dim];
            }
            size = parseInt(size, 10);
            return size;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key == 'min') {
                this.min = parseInt(value);
            }
            if (key == 'max') {
                this.max = parseInt(value);
            }
            if (key == 'value') {
                this.value = parseInt(value);
            }

            if (key === 'disabled') {
                if (value) {
                    this.disable();
                } else {
                    this.enable();
                }
            } else if (key === 'value') {
                this.value = oldvalue;
                this.setValue(value);
            } else {
                if (key === 'colorScheme') {
                    this.pointer.style = null;
                } else if (key === 'orientation' && oldvalue !== value) {
                    var temp = this.ticksOffset[0];
                    this.ticksOffset[0] = this.ticksOffset[1];
                    this.ticksOffset[1] = temp;
                }
                if (key !== 'animationDuration' && key !== 'easing') {
                    this.refresh();
                }
            }
            if (this._r instanceof $.jqx.HTML5Renderer)
                this._r.refresh();
        },

        //Constructor functions for property validation
        _backgroundConstructor: function (background, jqx) {
            if (this.host) {
                return new this._backgroundConstructor(background, jqx);
            }
            var validBackgroundTypes = { rectangle: true, roundedRectangle: true };
            background = background || {};
            this.style = background.style || { stroke: '#cccccc', fill: null };
            if (background.visible || typeof background.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = false;
            }
            if (validBackgroundTypes[background.backgroundType]) {
                this.backgroundType = background.backgroundType;
            } else {
                this.backgroundType = 'roundedRectangle';
            }
            if (this.backgroundType === 'roundedRectangle') {
                if (typeof background.borderRadius === 'number') {
                    this.borderRadius = background.borderRadius;
                } else {
                    this.borderRadius = 15;
                }
            }
            if (typeof background.showGradient === 'undefined') {
                this.showGradient = true;
            } else {
                this.showGradient = background.showGradient;
            }
        },

        _tickConstructor: function (tick, jqx) {
            if (this.host) {
                return new this._tickConstructor(tick, jqx);
            }
            this.size = jqx._validatePercentage(tick.size, '10%');
            this.interval = parseFloat(tick.interval);
            if (!this.interval) {
                this.interval = 5;
            }
            this.style = tick.style || { stroke: '#A1A1A1', 'stroke-width': '1px' };
            if (typeof tick.visible === 'undefined') {
                this.visible = true;
            } else {
                this.visible = tick.visible;
            }
        },

        _labelsConstructor: function (label, jqx) {
            if (this.host) {
                return new this._labelsConstructor(label, jqx);
            }
            this.position = label.position;
            if (this.position !== 'far' && this.position !== 'near' && this.position !== 'both') {
                this.position = 'both';
            }
            if (typeof label.formatValue === 'function') {
                this.formatValue = label.formatValue;
            } else {
                this.formatValue = function (val) {
                    return val;
                }
            }
            this.visible = label.visible;
            if (this.visible !== false && this.visible !== true) {
                this.visible = true;
            }
            if (typeof label.interval !== 'number') {
                this.interval = 10;
            } else {
                this.interval = label.interval;
            }
            this.offset = jqx._validatePercentage(label.offset, 0);
        },

        _rangeConstructor: function (range, jqx) {
            if (this.host) {
                return new this._rangeConstructor(range, jqx);
            }
            if (typeof range.startValue === 'number') {
                this.startValue = range.startValue;
            } else {
                this.startValue = jqx.min;
            }
            if (typeof range.endValue === 'number' && range.endValue > range.startValue) {
                this.endValue = range.endValue;
            } else {
                this.endValue = this.startValue + 1;
            }
            this.style = range.style || { fill: '#dddddd', stroke: '#dddddd' };
        },

        _pointerConstructor: function (pointer, jqx) {
            if (this.host) {
                return new this._pointerConstructor(pointer, jqx);
            }
            var color = jqx._getColorScheme(jqx.colorScheme)[0];
            this.pointerType = pointer.pointerType;
            if (this.pointerType !== 'default' && this.pointerType !== 'arrow') {
                this.pointerType = 'default';
            }
            this.style = pointer.style || { fill: color, stroke: color, 'stroke-width': 1 };
            this.size = jqx._validatePercentage(pointer.size, '7%');
            this.visible = pointer.visible;
            if (this.visible !== true && this.visible !== false) {
                this.visible = true;
            }
            this.offset = jqx._validatePercentage(pointer.offset, 0);
        }

    };

    //Extending with the common functionality
    $.extend(radialGauge, common);
    $.extend(linearGauge, common);

    //Initializing jqxWidgets
    $.jqx.jqxWidget("jqxLinearGauge", "", {});
    $.jqx.jqxWidget("jqxGauge", "", {});

    //Extending the widgets' prototypes
    $.extend($.jqx._jqxGauge.prototype, radialGauge);
    $.extend($.jqx._jqxLinearGauge.prototype, linearGauge);

})(jQuery);/*
* jqxcheckbox.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/*
* Depends:
*   jqxcore.js*/


(function ($) {

    $.jqx.jqxWidget("jqxCheckBox", "", {});

    $.extend($.jqx._jqxCheckBox.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the delay of the fade animation when the CheckBox is going to be opened.
            this.animationShowDelay = 300,
            // Type: Number
            // Default: 300
            // Gets or sets the delay of the fade animation when the CheckBox is going to be closed. 
             this.animationHideDelay = 300,
            // Type: Number.
            // Default: null.
            // Sets the width.
            this.width = null;
            // Type: Number.
            // Default: null.
            // Sets the height.
            this.height = null;
            // Type: String
            // Default: '13px'
            // Gets or sets the checkbox's size.
            this.boxSize = '13px';
            // Type: Bool and Null
            // Default: false
            // Gets or sets the ckeck state.
            // Possible Values: true, false and null.
            this.checked = false;
            // Type: Bool
            // Default: false
            // Gets or sets whether the checkbox has 3 states - checked, unchecked and indeterminate.
            this.hasThreeStates = false;
            // Type: Bool
            // Default: false
            // Gets whether the CheckBox is disabled.
            this.disabled = false;
            // Type: Bool
            // Default: true
            // Gets or sets whether the clicks on the container are handled as clicks on the check box.
            this.enableContainerClick = true;
            // Type: Bool
            // Default: true
            // Gets or sets whether the checkbox is locked. In this mode the user is not allowed to check/uncheck the checkbox.
            this.locked = false;
            // Type: String
            // Default: ''
            // Gets or sets the group name. When this property is set, the checkboxes in the same group behave as radio buttons.
            this.groupName = '';
            this.keyboardCheck = true;
            this.enableHover = true;
            this.hasInput = true;
            // 'checked' is triggered when the checkbox is checked.
            // 'unchecked' is triggered when the checkbox is unchecked.
            // 'indeterminate' is triggered when the checkbox's ckecked property is going to be null.
            // 'change' is triggered when the checkbox's state is changed.
            this.events =
			 [
			    'checked', 'unchecked', 'indeterminate', 'change'
             ];
        },

        createInstance: function (args) {
            this.init = true;
            var me = this;
            this.setSize();
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                me.setSize();
            };

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                me.setSize();
            };

            this.checkbox = $('<div><div><span></span></div></div>');
            this.host.attr('tabIndex', 0);
            this.host.prepend(this.checkbox);
            this.host.append($('<div style="clear: both;"></div>'));

            this.checkMark = $(this.checkbox).find('span');
            this.box = $(this.checkbox).find('div');

            this.box.addClass(this.toThemeProperty('jqx-checkbox-default'));
            this.box.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this.box.addClass(this.toThemeProperty('jqx-rc-all'));

            if (this.disabled) {
                this.disable();
            }

            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-checkbox'));

            if (this.locked) {
                this.host.css('cursor', 'auto');
            }

            var checked = this.element.getAttribute('checked');
            if (checked == 'checked' || checked == 'true' || checked == true) {
                this.checked = true;
            }

            this._addInput();
            this._render();
            this._addHandlers();
            this.init = false;
        },

        _addInput: function()
        {
            if (this.hasInput) {
                var name = this.host.attr('name');
                if (!name) name = this.element.id;
                this.input = $("<input type='hidden'/>");
                this.host.append(this.input);
                this.input.attr('name', name);
                this.input.val(this.checked);
            }
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.setSize();
                this._render();
            }
        },

        setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
        },

        _addHandlers: function () {
            var me = this;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            var eventName = 'click';
            if (isTouchDevice) eventName = 'touchend';

            this.addHandler(this.box, eventName, function (event) {
                if (!me.disabled && !me.enableContainerClick && !me.locked) {
                    me.toggle();
                    if (me.updated) {
                        event.owner = me;
                        me.updated(event, me.checked, me.oldChecked);
                    }
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'keydown', function (event) {
                if (!me.disabled && !me.locked && me.keyboardCheck) {
                    if (event.keyCode == 32) {
                        me.toggle();
                        event.preventDefault();
                        return false;
                    }
                }
            });

            this.addHandler(this.host, eventName, function (event) {
                if (!me.disabled && me.enableContainerClick && !me.locked) {
                    me.toggle();
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'selectstart', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'mouseup', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    event.preventDefault();
                }
            });


            this.addHandler(this.host, 'focus', function (event) {
                if (!me.disabled && !me.locked) {
                    if (me.enableHover) {
                        me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                    }
                    me.box.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                    event.preventDefault();
                    me.hovered = true;
                    return false;
                }
            });

            this.addHandler(this.host, 'blur', function (event) {
                if (!me.disabled && !me.locked) {
                    if (me.enableHover) {
                        me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                    }
                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                    event.preventDefault();
                    me.hovered = false;
                    return false;
                }
            });

            this.addHandler(this.host, 'mouseenter', function (event) {
                if (me.locked) {
                    me.host.css('cursor', 'arrow')
                }
                if (me.enableHover) {
                    if (!me.disabled && me.enableContainerClick && !me.locked) {
                        me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                        me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                        event.preventDefault();
                        me.hovered = true;
                        return false;
                    }
                }
            });

            this.addHandler(this.host, 'mouseleave', function (event) {
                if (me.enableHover) {
                    if (!me.disabled && me.enableContainerClick && !me.locked) {
                        me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                        me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                        event.preventDefault();
                        me.hovered = false;
                        return false;
                    }
                }
            });


            this.addHandler(this.box, 'mouseenter', function () {
                if (me.locked) {
                    return;
                }

                if (!me.disabled && !me.enableContainerClick) {
                    me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                    me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                }
            });

            this.addHandler(this.box, 'mouseleave', function () {
                if (!me.disabled && !me.enableContainerClick) {
                    me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                }
            });
        },

        _removeHandlers: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            var eventName = 'click';
            if (isTouchDevice) eventName = 'touchend';

            this.removeHandler(this.box, eventName);
            this.removeHandler(this.box, 'mouseenter');
            this.removeHandler(this.box, 'mouseleave');
            this.removeHandler(this.host, eventName);
            this.removeHandler(this.host, 'mouseup');
            this.removeHandler(this.host, 'selectstart');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this.host, 'focus');
        },

        _render: function () {
            if (this.boxSize == null) this.boxSize = 13;

            this.box.width(this.boxSize);
            this.box.height(this.boxSize);
            this.checkMark.width(this.boxSize);
            this.checkMark.height(this.boxSize);

            if (!this.disabled) {
                if (this.enableContainerClick) {
                    this.host.css('cursor', 'pointer');
                }
                else this.host.css('cursor', 'auto');
            }
            else {
                this.disable();
            }

            this.updateStates();
        },

        _setState: function (checked) {
            if (this.checked != checked) {
                this.checked = checked;
                this.checkMark.removeClass();
                if (this.checked) {
                    this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));
                    this.checkMark.css('opacity', 1);
                }
                else if (this.checked == null) {
                    this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));
                    this.checkMark.css('opacity', 1);
                }
            }
        },

        // checks the ckeckbox.
        check: function () {
            this.checked = true;
            var me = this;
            this.checkMark.removeClass();

            if ($.browser.msie) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));
            }
            else {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));
                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }

            var checkboxes = $.find(this.toThemeProperty('.jqx-checkbox', true));

            if (this.groupName != null && this.groupName.length > 0) {
                $.each(checkboxes, function () {
                    var groupName = $(this).jqxCheckBox('groupName');
                    if (groupName == me.groupName && this != me.element) {
                        $(this).jqxCheckBox('uncheck')
                    }
                });
            }

            this._raiseEvent('0', true);
            this._raiseEvent('3', { checked: true });
            if (this.input != undefined) {
                this.input.val(this.checked);
            }
        },

        // unchecks the checkbox.
        uncheck: function () {
            this.checked = false;
            var me = this;

            if ($.browser.msie) {
                me.checkMark.removeClass();
            }
            else {
                this.checkMark.css('opacity', 1);
                this.checkMark.stop().animate({ opacity: 0 }, this.animationHideDelay, function () {
                    me.checkMark.removeClass();
                });
            }

            this._raiseEvent('1');
            this._raiseEvent('3', { checked: false });
            if (this.input != undefined) {
                this.input.val(this.checked);
            }
        },

        // sets the indeterminate state.
        indeterminate: function () {
            this.checked = null;
            this.checkMark.removeClass();

            if ($.browser.msie) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));
            }
            else {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));
                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }

            this._raiseEvent('2');
            this._raiseEvent('3', { checked: null });
            if (this.input != undefined) {
                this.input.val(this.checked);
            }
        },

        // toggles the check state.
        toggle: function () {
            if (this.disabled)
                return;

            if (this.locked)
                return;

            if (this.groupName != null && this.groupName.length > 0) {
                if (this.checked != true) {
                    this.checked = true;
                    this.updateStates();
                }
                return;
            }

            this.oldChecked = this.checked;
            if (this.checked == true) {
                this.checked = this.hasThreeStates ? null : false;
            }
            else {
                this.checked = this.checked != null;
            }

            this.updateStates();
            if (this.input != undefined) {
                this.input.val(this.checked);
            }
        },

        // updates check states depending on the value of the 'checked' property.
        updateStates: function () {
            if (this.checked) {
                this.check();
            }
            else if (this.checked == false) {
                this.uncheck();
            }
            else if (this.checked == null) {
                this.indeterminate();
            }
        },

        // disables the checkbox.
        disable: function () {
            this.disabled = true;

            if (this.checked == true) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));
            }
            this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled-box'));
            this.host.addClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled'));
        },

        // enables the checkbox.
        enable: function () {
            if (this.checked == true) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));
            }
            this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled-box'));
            this.host.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.disabled = false;
        },

        destroy: function () {
            this.host.remove();
        },

        _raiseEvent: function (id, args) {
            if (this.init) return;
            var evt = this.events[id];
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;

            try {
                var result = this.host.trigger(event);
            }
            catch (error) {
            }

            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == object.enableContainerClick && !object.disabled && !object.locked) {
                if (value) {
                    object.host.css('cursor', 'pointer');
                }
                else object.host.css('cursor', 'auto');
            }

            if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }

            if (key == 'checked') {
                if (value != oldvalue) {
                    switch (value) {
                        case true:
                            object.check();
                            break;
                        case false:
                            object.uncheck();
                            break;
                        case null:
                            object.indeterminate();
                            break;
                    }
                }
            }

            if (key == 'disabled') {
                if (value != oldvalue) {
                    if (value) {
                        object.disable();
                    } else object.enable();
                }
            }
        }
    });
})(jQuery);
/*
* Depends:
*   jqxcore.js
*/

(function ($) {

    $.jqx.jqxWidget("jqxButtonGroup", "", {});

    $.extend($.jqx._jqxButtonGroup.prototype, {
        defineInstance: function () {
            //Possible values: checkbox, radio, default
            this.mode = 'default';
            this.roundedCorners = true;
            this.disabled = false;
            this.enableHover = false;
            this.orientation = 'horizontal';

            this._eventsMap = {
                'mousedown': 'touchstart',
                'mouseup': 'touchend'
            };
            this._events = ['selected', 'unselected', 'buttonclick'];
            this._buttonId = {};
            this._selected = null;
            this._pressed = null;
            this._baseId = 'group_button';
        },

        createInstance: function (args) {
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            var me = this;
            this.addHandler(this.host, 'selectstart', function (event) {
                if (!me.disabled) {
                    event.preventDefault();
                }
            });
        },

        refresh: function () {
            this._refreshButtons();
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                var e = this._eventsMap[event] || event;
                e += "." + this.element.id;
                return e;
            }
            event += "." + this.element.id;
            return event;
        },

        _refreshButtons: function () {
            if (this.lastElement)
                this.lastElement.remove();

            this.lastElement = $("<div style='clear: both;'></div>");
            var children = this.host.children(),
                count = children.length,
                current;
            for (var i = 0; i < count; i += 1) {
                current = $(children[i]);
                this._refreshButton(current, i, count);
            }
            this.lastElement.appendTo(this.host);
        },

        _refreshButton: function (btn, counter, count) {
            (function (btn) {
                btn = this._render(btn);
                this._removeStyles(btn);
                this._addStyles(btn, counter, count);
                this._performLayout(btn);
                this._removeButtonListeners(btn);
                this._addButtonListeners(btn);
                this._handleButtonId(btn, counter);
            }).apply(this, [btn]);
        },

        destroy: function () {
            this._removeStyles();
            this._removeEventListeners();
        },

        _render: function (btn) {
            if (btn[0].tagName.toLowerCase() === 'button') {
                return this._renderFromButton(btn);
            } else {
                return this._renderButton(btn);
            }
        },

        _renderButton: function (btn) {
            var content;
            btn.wrapInner('<div/>');
            return btn;
        },

        _removeStyles: function (btn) {
            this.host.removeClass('jqx-widget');
            this.host.removeClass('jqx-rc-all');
            btn.removeClass(this.toThemeProperty('jqx-fill-state-normal'));
            btn.removeClass(this.toThemeProperty('jqx-group-button-normal'));
            btn.removeClass(this.toThemeProperty('jqx-rc-tl'));
            btn.removeClass(this.toThemeProperty('jqx-rc-bl'));
            btn.removeClass(this.toThemeProperty('jqx-rc-tr'));
            btn.removeClass(this.toThemeProperty('jqx-rc-br'));
            btn.css('margin-left', 0);
        },

        _addStyles: function (btn, counter, count) {
            this.host.addClass('jqx-widget');
            this.host.addClass('jqx-rc-all');
            this.host.addClass('jqx-buttongroup');
            btn.addClass(this.toThemeProperty('jqx-button'));
            btn.addClass(this.toThemeProperty('jqx-group-button-normal'));
            btn.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            if (this.roundedCorners) {
                if (counter === 0) {
                    this._addRoundedCorners(btn, true);
                } else if (counter === count - 1) {
                    this._addRoundedCorners(btn, false);
                }
            }
            if (this.orientation == 'horizontal') {
                btn.css('margin-left', -parseInt(btn.css('border-left-width'), 10));
            }
            else {
                btn.css('margin-top', -parseInt(btn.css('border-left-width'), 10));
            }
        },

        _addRoundedCorners: function (button, left) {
            if (this.orientation == 'horizontal') {
                if (left) {
                    button.addClass(this.toThemeProperty('jqx-rc-tl'));
                    button.addClass(this.toThemeProperty('jqx-rc-bl'));
                } else {
                    button.addClass(this.toThemeProperty('jqx-rc-tr'));
                    button.addClass(this.toThemeProperty('jqx-rc-br'));
                }
            }
            else {
                if (left) {
                    button.addClass(this.toThemeProperty('jqx-rc-tl'));
                    button.addClass(this.toThemeProperty('jqx-rc-tr'));
                } else {
                    button.addClass(this.toThemeProperty('jqx-rc-bl'));
                    button.addClass(this.toThemeProperty('jqx-rc-br'));
                }
            }
        },

        _centerContent: function (content, parent) {
            content.css({
                'margin-top': (parent.height() - content.height()) / 2,
                'margin-left': (parent.width() - content.width()) / 2
            });
            return content;
        },

        _renderFromButton: function (btn) {
            var content = btn.val();
            if (content == "") {
                content = btn.html();
            }

            var div;
            var id = btn[0].id;
            btn.wrap('<div/>');
            div = btn.parent();
            div.attr('style', btn.attr('style'));
            btn.remove();
            div.html(content);
            div[0].id = id;
            return div;
        },

        _performLayout: function (btn) {
            if (this.orientation == 'horizontal') {
                btn.css('float', 'left');
            }
            else {
                btn.css('float', 'none');
            }

            this._centerContent($(btn.children()), btn);
        },

        _mouseEnterHandler: function (e) {
            var self = e.data.self,
                btn = $(e.currentTarget);
            if (self._isDisabled(btn) || !self.enableHover) {
                return;
            }
            btn.addClass(self.toThemeProperty('jqx-group-button-hover'));
            btn.addClass(self.toThemeProperty('jqx-fill-state-hover'));
        },

        _mouseLeaveHandler: function (e) {
            var self = e.data.self,
                btn = $(e.currentTarget);
            if (self._isDisabled(btn) || !self.enableHover) {
                return;
            }
            btn.removeClass(self.toThemeProperty('jqx-group-button-hover'));
            btn.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
        },

        _mouseDownHandler: function (e) {
            var self = e.data.self,
                btn = $(e.currentTarget);
            if (self._isDisabled(btn)) {
                return;
            }
            self._pressed = btn;
            btn.addClass(self.toThemeProperty('jqx-group-button-pressed'));
            btn.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
        },

        _mouseUpHandler: function (e) {
            var self = e.data.self,
                btn = $(e.currentTarget);
            if (self._isDisabled(btn)) {
                return;
            }
            self._handleSelection(btn);
            self._pressed = null;
            btn = self._buttonId[btn[0].id];
            self._raiseEvent(2, { index: btn.num, button: btn.btn });
        },

        _isDisabled: function (btn) {
            if (!btn || !btn[0]) {
                return false;
            }
            return this._buttonId[btn[0].id].disabled;
        },

        _documentUpHandler: function (e) {
            var self = e.data.self,
                pressedButton = self._pressed;
            if (pressedButton && !self._buttonId[pressedButton[0].id].selected) {
                pressedButton.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                self._pressed = null;
            }
        },

        _addButtonListeners: function (btn) {
            var self = this;
            this.addHandler(btn, this._getEvent('mouseenter'), this._mouseEnterHandler, { self: this });
            this.addHandler(btn, this._getEvent('mouseleave'), this._mouseLeaveHandler, { self: this });
            this.addHandler(btn, this._getEvent('mousedown'), this._mouseDownHandler, { self: this });
            this.addHandler(btn, this._getEvent('mouseup'), this._mouseUpHandler, { self: this });
            this.addHandler($(document), this._getEvent('mouseup'), this._documentUpHandler, { self: this });
        },

        _removeButtonListeners: function (btn) {
            this.removeHandler(btn, this._getEvent('mouseenter'), this._mouseEnterHandler);
            this.removeHandler(btn, this._getEvent('mouseleave'), this._mouseLeaveHandler);
            this.removeHandler(btn, this._getEvent('mousedown'), this._mouseDownHandler);
            this.removeHandler(btn, this._getEvent('mouseup'), this._mouseUpHandler);
            this.removeHandler($(document), this._getEvent('mouseup'), this._documentUpHandler);
        },

        _handleSelection: function (btn) {
            if (this.mode === 'radio') {
                this._handleRadio(btn);
            } else if (this.mode === 'checkbox') {
                this._handleCheckbox(btn);
            } else {
                this._handleDefault(btn);
            }
        },

        _handleRadio: function (btn) {
            var selected = this._getSelectedButton();
            if (selected && selected.btn[0].id !== btn[0].id) {
                this._unselectButton(selected.btn, true);
            }
            for (var data in this._buttonId) {
                this._buttonId[data].selected = true;
                this._unselectButton(this._buttonId[data].btn, false);
            }

            this._selectButton(btn, true);
        },

        _handleCheckbox: function (btn) {
            var btnInfo = this._buttonId[btn[0].id];
            if (btnInfo.selected) {
                this._unselectButton(btnInfo.btn, true);
            } else {
                this._selectButton(btn, true);
            }
        },

        _handleDefault: function (btn) {
            this._selectButton(btn, false);
            for (var data in this._buttonId) {
                this._buttonId[data].selected = true;
                this._unselectButton(this._buttonId[data].btn, false);
            }
        },

        _getSelectedButton: function () {
            for (var data in this._buttonId) {
                if (this._buttonId[data].selected) {
                    return this._buttonId[data];
                }
            }
            return null;
        },

        _getSelectedButtons: function () {
            var selected = [];
            for (var data in this._buttonId) {
                if (this._buttonId[data].selected) {
                    selected.push(this._buttonId[data].num);
                }
            }
            return selected;
        },

        _getButtonByIndex: function (index) {
            var current;
            for (var data in this._buttonId) {
                if (this._buttonId[data].num === index) {
                    return this._buttonId[data];
                }
            }
            return null;
        },

        _selectButton: function (btn, raiseEvent) {
            var btnInfo = this._buttonId[btn[0].id];
            if (btnInfo.selected) {
                return;
            }
            btnInfo.btn.addClass(this.toThemeProperty('jqx-group-button-pressed'));
            btnInfo.btn.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            btnInfo.selected = true;
            if (raiseEvent) {
                this._raiseEvent(0, { index: btnInfo.num, button: btnInfo.btn });
            }
        },

        _unselectButton: function (btn, raiseEvent) {
            var btnInfo = this._buttonId[btn[0].id];
            if (!btnInfo.selected) {
                return;
            }
            btnInfo.btn.removeClass(this.toThemeProperty('jqx-group-button-pressed'));
            btnInfo.btn.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            btnInfo.selected = false;
            if (raiseEvent) {
                this._raiseEvent(1, { index: btnInfo.num, button: btnInfo.btn });
            }
        },

        setSelection: function (index) {
            if (this.mode === 'checkbox') {
                if (typeof index === 'number') {
                    this._setSelection(index);
                } else {
                    for (var i = 0; i < index.length; i += 1) {
                        this._setSelection(index[i]);
                    }
                }
            } else if (typeof index === 'number' && this.mode === 'radio') {
                this._setSelection(index);
            }
        },

        _setSelection: function (index) {
            var btn = this._getButtonByIndex(index);
            this._handleSelection(btn.btn);
        },

        getSelection: function () {
            if (this.mode === 'radio') {
                return this._getSelectedButton().num;
            } else if (this.mode === 'checkbox') {
                return this._getSelectedButtons();
            }
            return undefined;
        },

        disable: function () {
            var current;
            for (var btn in this._buttonId) {
                current = this._buttonId[btn];
                this.disableAt(current.num);
            }
        },

        enable: function () {
            var current;
            for (var btn in this._buttonId) {
                current = this._buttonId[btn];
                this.enableAt(current.num);
            }
        },

        disableAt: function (index) {
            var btn = this._getButtonByIndex(index);
            if (!btn.disabled) {
                btn.disabled = true;
                btn.btn.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
        },

        enableAt: function (index) {
            var btn = this._getButtonByIndex(index);
            if (btn.disabled) {
                btn.disabled = false;
                btn.btn.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
        },

        _handleButtonId: function (btn, number) {
            var id = btn[0].id,
                btnId = { btn: btn, num: number, selected: false },
                widgetId;
            if (!id) {
                id = this._baseId + new Date().getTime();
            }
            btn[0].id = id;
            this._buttonId[id] = btnId;
            return id;
        },

        _raiseEvent: function (id, data) {
            var event = $.Event(this._events[id]);
            event.args = data;
            return this.host.trigger(event);
        },

        _unselectAll: function () {
            for (var data in this._buttonId) {
                this._unselectButton(this._buttonId[data].btn, false);
            }
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key === 'mode') {
                if (value != 'checkbox') {
                    this._unselectAll();
                }
                return;
            } else if (key === 'disabled') {
                if (value) {
                    this.disable();
                } else {
                    this.enable();
                }
            } else {
                this.refresh();
            }
        }
    });
})(jQuery);
(function ($) {

    $.jqx.jqxWidget("jqxListBox", "", {});

    $.extend($.jqx._jqxListBox.prototype, {
        defineInstance: function () {
            // Type: Boolean
            // Default: true    
            // enables/disables the listbox.
            this.disabled = false;
            // gets or sets the listbox width.
            this.width = null;
            // gets or sets the listbox height.
            this.height = null;
            // Represents the collection of list items.
            this.items = new Array();
            // Type: Boolean
            // Default: false
            // enables/disables the multiple selection.
            this.multiple = false;
            // Gets or sets the selected index.
            this.selectedIndex = -1;
            // Gets the selected item indexes.
            this.selectedIndexes = new Array();
            // Type: Object
            // Default: null
            // data source.
            this.source = null;
            // Type: Number
            // Default: 15
            // gets or sets the scrollbars size.
            this.scrollBarSize = 15;
            // Type: Boolean
            // Default: true
            // enables/disables the hover state.
            this.enableHover = true;
            // Type: Boolean
            // Default: true
            // enables/disables the selection.
            this.enableSelection = true;
            // gets the visible items. // this property is internal for the listbox.
            this.visualItems = new Array();
            // gets the groups. // this property is internal for the listbox.
            this.groups = new Array();
            // Type: Boolean
            // Default: true
            // gets or sets whether the items width should be equal to the listbox's width.
            this.equalItemsWidth = true;
            // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.
            this.itemHeight = -1;
            // this property is internal for the listbox.
            this.visibleItems = new Array();
            // Type: String
            // Default: Group
            // represents the text of the empty group. This is displayed only when the items are not loaded from html select element.
            this.emptyGroupText = 'Group';
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox should display a checkbox next to each item.
            this.checkboxes = false;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox checkboxes have three states - checked, unchecked and indeterminate.           
            this.hasThreeStates = false;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox's height is equal to the sum of its items height          
            this.autoHeight = false;
            this.autoItemsHeight = false;
            // represents the listbox's events.    
            // Type: Boolean
            // Default: true
            // Gets or sets whether the listbox items are with rounded corners.         
            this.roundedcorners = true;
            this.touchMode = 'auto';
            this.displayMember = "";
            this.valueMember = "";
            // Type: String
            // Default: startswithignorecase
            // Possible Values: 'none, 'contains', 'containsignorecase', 'equals', 'equalsignorecase', 'startswithignorecase', 'startswith', 'endswithignorecase', 'endswith'
            this.searchMode = 'startswithignorecase';
            this.incrementalSearch = true;
            this.incrementalSearchDelay = 700;
            this.allowDrag = false;
            this.allowDrop = true;
            // Possible values: 'none, 'default', 'copy'
            this.dropAction = 'default';
            this.touchModeStyle = 'auto';
            this.keyboardNavigation = true;
            this.enableMouseWheel = true;
            this.multipleextended = false;
            this.emptyString = "null";

            this.events =
            [
            // triggered when the user selects an item.
                'select',
            // triggered when the user unselects an item.
                'unselect',
            // triggered when the selection is changed.
                'change',
            // triggered when the user checks or unchecks an item. 
                'checkChange',
            // triggered when the user drags an item. 
               'dragStart',
            // triggered when the user drops an item. 
               'dragEnd',
               // triggered when the binding is completed.
               'bindingComplete'
            ];
        },

        createInstance: function (args) {
            this.render();
        },

        render: function () {
            this.element.innerHTML = "";
            var self = this;
            this.host.addClass(this.toThemeProperty("jqx-listbox"));
            this.host.addClass(this.toThemeProperty("jqx-reset"));
            this.host.addClass(this.toThemeProperty("jqx-rc-all"));
            this.host.addClass(this.toThemeProperty("jqx-widget"));
            this.host.addClass(this.toThemeProperty("jqx-widget-content"));

            var isPercentage = false;

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
                isPercentage = true;
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
                if (this.host.height() == 0) {
                    this.host.height(200);
                }
                isPercentage = true;
            }
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var listBoxStructure = $("<div tabIndex=0 style='-webkit-appearance: none; background: transparent; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div tabIndex=1 style='-webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='listBoxContent' tabIndex=2 style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='verticalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='horizontalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/>" +
                "</div>" +
                "</div>");
            this._addInput();
            this.host.attr('tabIndex', 1);
            this.host.append(listBoxStructure);
            var verticalScrollBar = this.host.find("#verticalScrollBar" + this.element.id);
            if (!verticalScrollBar.jqxScrollBar) {
                alert('jqxscrollbar.js is not loaded.');
                return;
            }

            this.vScrollBar = verticalScrollBar.jqxScrollBar({ 'vertical': true, theme: this.theme, touchMode: this.touchMode, largestep: parseInt(this.host.height()) / 2 });
            var horizontalScrollBar = this.host.find("#horizontalScrollBar" + this.element.id);
            this.hScrollBar = horizontalScrollBar.jqxScrollBar({ 'vertical': false, touchMode: this.touchMode, theme: this.theme });

            this.content = this.host.find("#listBoxContent");
            this.content[0].id = 'listBoxContent' + this.element.id;
            this.bottomRight = this.host.find("#bottomRight").addClass(this.toThemeProperty('jqx-listbox-bottomright'));
            this.bottomRight[0].id = "bottomRight" + this.element.id;
            this.vScrollBar.css('visibility', 'inherit');
            this.hScrollBar.css('visibility', 'inherit');
            this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;
            if (this.isTouchDevice()) {
                var overlayContent = $("<div class='overlay' style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>");
                this.content.parent().append(overlayContent);
                this.overlayContent = this.host.find('.overlay');
            }
            this._updateTouchScrolling();

            this.host.addClass('jqx-disableselect');
            if (this.host.jqxDragDrop) {
                jqxListBoxDragDrop();
            }
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            else {
                this.host.attr('name', "");
            }

            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
        },

        _updateTouchScrolling: function () {
            var self = this;
            if (this.isTouchDevice()) {
                self.enableHover = false;
                var element = this.overlayContent ? this.overlayContent : this.content;

                $(element).unbind('touchstart.touchScroll');
                $(element).unbind('touchmove.touchScroll');
                $(element).unbind('touchend.touchScroll');
                $(element).unbind('touchcancel.touchScroll');

                $.jqx.mobile.touchScroll(element, self.vScrollInstance.max, function (left, top) {
                    if (self.vScrollBar.css('visibility') != 'hidden') {
                        var oldValue = self.vScrollInstance.value;
                        self.vScrollInstance.setPosition(oldValue + top);
                        self._lastScroll = new Date();
                    }
                    if (self.hScrollBar.css('visibility') != 'hidden') {
                        var oldValue = self.hScrollInstance.value;
                        self.hScrollInstance.setPosition(oldValue + left);
                        self._lastScroll = new Date();
                    }
                }, this.element.id);

                if (self.vScrollBar.css('visibility') != 'visible' && self.hScrollBar.css('visibility') != 'visible') {
                    $.jqx.mobile.setTouchScroll(false, this.element.id);
                }
                else {
                    $.jqx.mobile.setTouchScroll(true, this.element.id);
                }
            }
        },

        isTouchDevice: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.element);
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice && this.touchModeStyle != false) {
                this.scrollBarSize = 10;
            }
            if (isTouchDevice) {
                this.host.addClass(this.toThemeProperty('jqx-touch'));
            }

            return isTouchDevice;
        },

        beginUpdate: function () {
            this.updatingListBox = true;
        },

        endUpdate: function () {
            this.updatingListBox = false;
            this._addItems();
            this._renderItems();
        },

        beginUpdateLayout: function () {
            this.updating = true;
        },

        resumeUpdateLayout: function () {
            this.updating = false;
            this.vScrollInstance.value = 0;
            this._render(false);
        },

        //_updateSize: function () {
        //    var me = this;
        //    var hostWidth = me.host.width();
        //    var hostHeight = me.host.height();

        //    if (!me._oldWidth) {
        //        me._oldWidth = hostWidth;
        //    }

        //    if (!me._oldHeight) {
        //        me._oldHeight = hostHeight;
        //    }

        //    setTimeout(function () {
        //        if (hostWidth != me._oldWidth) {
        //            me._updatescrollbars();
        //            me._renderItems();
        //        }

        //        if (hostHeight != me._oldHeight) {
        //            if (me.items) {
        //                if (me.autoItemsHeight) {
        //                    me._render(false);
        //                }
        //                else {
        //                    if (me.items.length > 0 && me.virtualItemsCount * me.items[0].height < hostHeight) {
        //                        me._render(false);
        //                    }
        //                    else {
        //                        me._updatescrollbars();
        //                        me._renderItems();
        //                    }
        //                }
        //            }
        //        }

        //        me._oldWidth = hostWidth;
        //        me._oldHeight = hostHeight;
        //    }, 1);
        //},

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'source' || key == 'checkboxes') {
                object.clearSelection();
                object.refresh();
            }

            if (key == 'scrollBarSize' || key == 'equalItemsWidth') {
                if (value != oldvalue) {
                    object._updatescrollbars();
                }
            }

            if (key == 'disabled') {
                object._renderItems();
            }

            if (key == "touchMode") {
                object._removeHandlers();
                object.vScrollBar.jqxScrollBar({ touchMode: value });
                object.hScrollBar.jqxScrollBar({ touchMode: value });
                object._updateTouchScrolling();
                object._addHandlers();
                object._render(false);
            }

            if (!this.updating) {
                if (key == "width" || key == "height") {
                    setTimeout(function () {
                        object.vScrollInstance.value = 0;
                        if (key == "width") {
                            if (oldvalue != value) {
                                object.host.width(value);
                                object._updatescrollbars();
                                object._renderItems();
                            }
                        }
                        else {
                            if (oldvalue != value) {
                                object.host.height(value);
                                if (object.items) {
                                    if (object.items.length > 0 && object.virtualItemsCount * object.items[0].height < value) {
                                        object._render(false);
                                    }
                                    else {
                                        object._updatescrollbars();
                                        object._renderItems();
                                    }
                                }
                            }
                        }
                    }, 1);
                }
            }

            if (key == 'theme') {
                if (oldvalue != value) {
                    object.hScrollBar.jqxScrollBar({ theme: object.theme });
                    object.vScrollBar.jqxScrollBar({ theme: object.theme });
                    object.host.removeClass();
                    object.host.addClass(object.toThemeProperty("jqx-listbox"));
                    object.host.addClass(object.toThemeProperty("jqx-widget"));
                    object.host.addClass(object.toThemeProperty("jqx-widget-content"));
                    object.host.addClass(object.toThemeProperty("jqx-reset"));
                    object.host.addClass(object.toThemeProperty("jqx-rc-all"));
                    object.refresh();
                }
            }

            if (key == 'selectedIndex') {
                object.clearSelection();
                object.selectIndex(value, true);
            }

            if (key == "displayMember" || key == "valueMember") {
                if (oldvalue != value) {
                    var oldSelectedIndex = object.selectedIndex;
                    object.refresh();
                    object.selectedIndex = oldSelectedIndex;
                    object.selectedIndexes[oldSelectedIndex] = oldSelectedIndex;
                }
                object._renderItems();
            }

            if (key == 'autoHeight') {
                if (oldvalue != value) {
                    object._render(false);
                }
                else {
                    object._updatescrollbars();
                    object._renderItems();
                }
            }
        },

        loadFromSelect: function (id) {
            if (id == null)
                return;

            var searchElementId = '#' + id;
            var selectElement = $(searchElementId);
            if (selectElement.length > 0) {
                var options = selectElement.find('option');
                var groups = selectElement.find('optgroup');
                var index = 0;
                var selectedOption = -1;
                var optionItems = new Array();

                $.each(options, function () {
                    var hasGroup = groups.find(this).length > 0;
                    var group = null;

                    if (this.text != this.value && (this.label == null || this.label == '')) {
                        this.label = this.text;
                    }

                    var item = { disabled: this.disabled, value: this.value, label: this.label, title: this.title, originalItem: this };

                    var ie7 = $.browser.msie && $.browser.version < 8;
                    if (ie7) {
                        if (item.value == '' && this.text != null && this.text.length > 0) {
                            item.value = this.text;
                        }
                    }

                    if (hasGroup) {
                        group = groups.find(this).parent()[0].label;
                        item.group = group;
                    }

                    if (this.selected) selectedOption = index;
                    optionItems[index] = item;
                    index++;
                });

                this.source = optionItems;
                this.fromSelect = true;
                this.clearSelection();
                this.selectedIndex = selectedOption;
                this.selectedIndexes[this.selectedIndex] = this.selectedIndex;
                this.refresh();
            }
        },

        refresh: function (initialRefresh) {
            var me = this;
            if (this.vScrollBar == undefined) {
                return;
            }
            this.visibleItems = new Array();
            var selectInitialItem = function (initialRefresh) {
                if (initialRefresh == true) {
                    if (me.selectedIndex != -1) {
                        var tmpIndex = me.selectedIndex;
                        me.selectedIndex = -1;
                        me._stopEvents = true;
                        me.selectIndex(tmpIndex, false, true);
                        if (me.selectedIndex == -1) {
                            me.selectedIndex = tmpIndex;
                        }
                        me._stopEvents = false;
                    }
                }
            }
            if (this.itemswrapper != null) {
                this.itemswrapper.remove();
                this.itemswrapper = null;
            }
            if ($.jqx.dataAdapter && this.source != null && this.source._source) {
                this.databind(this.source);
                selectInitialItem(initialRefresh);
                return;
            }
            this.items = this.loadItems(this.source);
            this._render(false, initialRefresh == true);
            selectInitialItem(initialRefresh);
        },

        _render: function (ensurevisible, initialRefresh) {
            this._addItems();
            this._renderItems();
            this.vScrollInstance.setPosition(0);
            this._cachedItemHtml = new Array();
            if (ensurevisible == undefined || ensurevisible) {
                if (this.items != undefined && this.items != null) {
                    if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {
                        this.selectIndex(this.selectedIndex, true, true, true);
                    }
                }
            }

            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
                if (this.isTouchDevice()) {
                    this._removeHandlers();
                    if (this.overlayContent) {
                        this.overlayContent.remove();
                        this.overlayContent = null;
                    }
                    this._updateTouchScrolling();
                    this._addHandlers();
                    return;
                }
            }
            this._updateTouchScrolling();
            if (this.rendered) {
                this.rendered();
            }
            if (this.ready) {
                this.ready();
            }
        },

        _createID: function () {
            var id = Math.random() + '';
            id = id.replace('.', '');
            id = '99' + id;
            id = id / 1;
            while (this.items[id]) {
                id = Math.random() + '';
                id = id.replace('.', '');
                id = id / 1;
            }
            return 'listitem' + id;
        },

        _hitTest: function (hitLeft, hitTop) {
            var top = parseInt(this.vScrollInstance.value);
            var firstIndex = this._searchFirstVisibleIndex(hitTop + top, this.renderedVisibleItems)
            if (this.renderedVisibleItems[firstIndex] != undefined && this.renderedVisibleItems[firstIndex].isGroup)
                return null;

            if (this.renderedVisibleItems.length > 0) {
                var lastItem = this.renderedVisibleItems[this.renderedVisibleItems.length - 1];
                if (lastItem.height + lastItem.top < hitTop + top) {
                    return null;
                }
            }

            firstIndex = this._searchFirstVisibleIndex(hitTop + top)
            return this.visibleItems[firstIndex];

            return null;
        },

        _searchFirstVisibleIndex: function (value, collection) {
            if (value == undefined) {
                value = parseInt(this.vScrollInstance.value);
            }
            var min = 0;
            if (collection == undefined || collection == null) {
                collection = this.visibleItems;
            }

            var max = collection.length;
            while (min <= max) {
                mid = parseInt((min + max) / 2)
                var item = collection[mid];
                if (item == undefined)
                    break;

                if (item.initialTop > value && item.initialTop + item.height > value) {
                    max = mid - 1;
                } else if (item.initialTop < value && item.initialTop + item.height <= value) {
                    min = mid + 1;
                } else {
                    return mid;
                    break;
                }
            }

            return 0;
        },

        _renderItems: function () {
            if (this.items == undefined || this.items.length == 0) {
                this.visibleItems = new Array();
                return;
            }

            if (this.updatingListBox == true)
                return;

            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var top = parseInt(vScrollInstance.value);
            var left = parseInt(hScrollInstance.value);
            var itemsLength = this.items.length;
            var hostWidth = this.host.width();
            var contentWidth = parseInt(this.content[0].style.width);
            var width = contentWidth + parseInt(hScrollInstance.max);
            var vScrollBarWidth = parseInt(this.vScrollBar[0].style.width) + 2;
            if (this.vScrollBar[0].style.visibility == 'hidden') {
                vScrollBarWidth = 0;
            }

            if (this.hScrollBar[0].style.visibility != 'visible') {
                width = contentWidth;
            }
            var virtualItemsCount = this._getVirtualItemsCount();
            var renderCollection = new Array();
            var y = 0;
            var hostHeight = parseInt(this.element.style.height) + 2;
            if (this.element.style.height.indexOf('%') != -1) {
                hostHeight = this.host.outerHeight();
            }

            if (isNaN(hostHeight)) {
                hostHeight = 0;
            }
            var maxWidth = 0;
            var visibleIndex = 0;
            var renderIndex = 0;

            if (vScrollInstance.value == 0 || this.visibleItems.length == 0) {
                for (var indx = 0; indx < this.items.length; indx++) {
                    var item = this.items[indx];
                    if (item.visible) {
                        item.top = -top;
                        item.initialTop = -top;
                        if (!item.isGroup && item.visible) {
                            this.visibleItems[visibleIndex++] = item;
                            item.visibleIndex = visibleIndex - 1;
                        }

                        this.renderedVisibleItems[renderIndex++] = item;

                        item.left = -left;
                        var bottom = item.top + item.height;
                        if (bottom >= 0 && item.top - item.height <= hostHeight) {
                            renderCollection[y++] = { index: indx, item: item };
                        }

                        top -= item.height;
                    }
                }
            }
            var firstIndex = top > 0 ? this._searchFirstVisibleIndex(this.vScrollInstance.value, this.renderedVisibleItems) : 0;
            var initialHeight = 0;
            y = 0;
            var scrollValue = this.vScrollInstance.value;
            var iterations = 0;
            while (initialHeight < 100 + hostHeight) {
                var item = this.renderedVisibleItems[firstIndex];
                if (item == undefined)
                    break;
                if (item.visible) {
                    item.left = -left;
                    var bottom = item.top + item.height - scrollValue;
                    if (bottom >= 0 && item.initialTop - scrollValue - item.height <= 2 * hostHeight) {
                        renderCollection[y++] = { index: firstIndex, item: item };
                    }
                }

                firstIndex++;
                if (item.visible) {
                    initialHeight += item.initialTop - scrollValue + item.height - initialHeight;
                }
                iterations++;
                if (iterations > this.items.length - 1)
                    break;
            }

            var listItemNormalClass = this.toThemeProperty('jqx-listitem-state-normal') + ' ' + this.toThemeProperty('jqx-item');
            var listItemGroupClass = this.toThemeProperty('jqx-listitem-state-group');
            var listItemDisabledClass = this.toThemeProperty('jqx-listitem-state-disabled') + ' ' + this.toThemeProperty('jqx-fill-state-disabled');
            var middle = 0;
            var me = this;
            for (var indx = 0; indx < this.visualItems.length; indx++) {
                var itemElement = this.visualItems[indx];
                var hideItem = function () {
                    var spanElement = itemElement[0].firstChild; // itemElement.find('#spanElement');
                    if (me.checkboxes) {
                        spanElement = itemElement[0].lastChild;
                    }

                    if (spanElement != null) {
                        spanElement.style.visibility = 'hidden';
                        spanElement.className = "";
                    }

                    if (me.checkboxes && me.host.jqxCheckBox) {
                        var checkbox = itemElement.find('.chkbox');
                        checkbox.css({ 'visibility': 'hidden' });
                    }
                }

                if (indx < renderCollection.length) {
                    var item = renderCollection[indx].item;
                    if (item.initialTop - scrollValue >= hostHeight) {
                        hideItem();
                        continue;
                    }

                    var spanElement = $(itemElement[0].firstChild); // itemElement.find('#spanElement');
                    if (this.checkboxes) {
                        spanElement = $(itemElement[0].lastChild);
                    }

                    if (spanElement.length == 0)
                        continue;

                    if (spanElement[0] == null) continue;
                    spanElement[0].className = "";
                    spanElement[0].style.display = "block";
                    spanElement[0].style.visibility = "inherit";
                    var classNameBuilder = "";
                    //                    spanElement.css({ 'display': 'block', 'visibility': 'inherit' });

                    if (!item.isGroup && !this.selectedIndexes[item.index] >= 0) {
                        classNameBuilder = listItemNormalClass;
                        //spanElement.addClass(listItemNormalClass);
                    }
                    else {
                        classNameBuilder = listItemGroupClass;
                        //spanElement.addClass(listItemGroupClass);
                    }

                    if (item.disabled || this.disabled) {
                        classNameBuilder += " " + listItemDisabledClass;
                        //spanElement.addClass(listItemDisabledClass);
                    }

                    if (this.roundedcorners) {
                        classNameBuilder += " " + this.toThemeProperty('jqx-rc-all');
                        //spanElement.addClass(this.toThemeProperty('jqx-rc-all'));
                    }
                    spanElement[0].className = classNameBuilder;

                    if (this.renderer) {
                        if (!item.key) item.key = this.generatekey();
                        if (!this._cachedItemHtml) this._cachedItemHtml = new Array();
                        if (this._cachedItemHtml[item.key]) {
                            if (spanElement[0].innerHTML != this._cachedItemHtml[item.key]) {
                                spanElement[0].innerHTML = this._cachedItemHtml[item.key];
                            }
                        }
                        else {
                            var html = this.renderer(item.index, item.label, item.value);
                            spanElement[0].innerHTML = html;
                            this._cachedItemHtml[item.key] = spanElement[0].innerHTML;
                        }

                    }
                    else {
                        if (item.html != null && item.html.toString().length > 0) {
                            spanElement[0].innerHTML = item.html;
                        }
                        else if (item.label != null || item.value != null) {
                            if (item.label != null) {
                                if (spanElement[0].innerHTML !== item.label) {
                                    spanElement[0].innerHTML = item.label;
                                }
                                if (item.label == "") {
                                    spanElement[0].innerHTML = this.emptyString;
                                }
                            }
                            else {
                                if (spanElement[0].innerHTML !== item.value) {
                                    spanElement[0].innerHTML = item.value;
                                }
                                else if (item.label == "") {
                                    spanElement[0].innerHTML = " ";
                                }
                            }
                        }
                        else if (item.label == "" || item.label == null) {
                            spanElement[0].innerHTML = "";
                            spanElement[0].style.height = (item.height - 10) + 'px';
                        }
                    }

                    itemElement[0].style.left = item.left + 'px';
                    itemElement[0].style.top = item.initialTop - scrollValue + 'px';

                    item.element = spanElement[0];
                    //  $.data(spanElement[0], 'item', item);
                    if (item.title) {
                        spanElement[0].title = item.title;
                    }

                    if (this.equalItemsWidth && !item.isGroup) {
                        if (maxWidth == 0) {
                            var itemWidth = parseInt(width);
                            var diff = parseInt(spanElement.outerWidth()) - parseInt(spanElement.width());
                            itemWidth -= diff;
                            var borderSize = 1;
                            if (borderSize != null) {
                                borderSize = parseInt(borderSize);
                            }
                            else borderSize = 0;
                            itemWidth -= 2 * borderSize;
                            maxWidth = itemWidth;
                            if (this.checkboxes && this.host.jqxCheckBox && this.hScrollBar[0].style.visibility != 'visible') {
                                maxWidth -= 18;
                            }
                        }
                        if (contentWidth > this.virtualSize.width) {
                            spanElement[0].style.width = maxWidth + 'px';
                            item.width = maxWidth;
                        }
                        else {
                            spanElement[0].style.width = -4 + this.virtualSize.width + 'px';
                            item.width = this.virtualSize.width - 4;
                        }
                    }
                    else {
                        if (spanElement.width() < this.host.width()) {
                            spanElement.width(this.host.width() - 2);
                        }
                    }

                    if (this.rtl) {
                        spanElement[0].style.textAlign = 'right';
                    }

                    if (this.autoItemsHeight) {
                        spanElement[0].style.whiteSpace = 'normal';
                        spanElement.width(maxWidth);
                        item.width = maxWidth;
                    }
                    middle = 0;
                    if (this.checkboxes && this.host.jqxCheckBox && !item.isGroup) {
                        if (middle == 0) {
                            middle = (item.height - 16) / 2;
                            middle++;
                        }
                        var checkbox = $(itemElement.children()[0]);
                        checkbox[0].item = item;
                        if (spanElement[0].style.left != '18px') {
                            spanElement[0].style.left = '18px';
                        }
                        checkbox.css('top', middle + 'px');
                        checkbox.css({ 'display': 'block', 'visibility': 'inherit' });
                        var checked = checkbox.jqxCheckBox('checked');
                        if (checked != item.checked) {
                            checkbox.jqxCheckBox({ checked: item.checked, disabled: item.disabled });
                        }
                        else checkbox.jqxCheckBox({ disabled: item.disabled });

                    }
                    else if (this.checkboxes && this.host.jqxCheckBox) {
                        var checkbox = $(itemElement.children()[0]);
                        checkbox.css({ 'display': 'none', 'visibility': 'inherit' });
                    }

                    if (this.selectedIndexes[item.visibleIndex] >= 0 && !item.disabled) {
                        spanElement.addClass(this.toThemeProperty('jqx-listitem-state-selected'));
                        spanElement.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    }
                }
                else {
                    hideItem();
                }
            }
        },

        generatekey: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        },

        _calculateVirtualSize: function () {
            var width = 0;
            var height = 2;
            var currentItem = 0;
            var spanElement = $("<span></span>");
            var itemsPerPage = 0;
            var hostHeight = this.host.outerHeight();

            $(document.body).append(spanElement);
            var length = this.items.length;
            var w = this.host.width();
            if (this.autoItemsHeight) {
                w -= 10;
                if (this.vScrollBar.css('visibility') != 'hidden') w -= 20;
            }

            if (this.renderer || this.groups.length > 1 || (length > 0 && this.items[0].html != null)) {
                for (var currentItem = 0; currentItem < length; currentItem++) {
                    var item = this.items[currentItem];

                    if (item.isGroup && (item.label == '' && item.html == '')) {
                        continue;
                    }

                    if (!item.visible)
                        continue;

                    var className = "";

                    if (!item.isGroup) {
                        className += this.toThemeProperty('jqx-listitem-state-normal jqx-rc-all');
                    }
                    else {
                        className += this.toThemeProperty('jqx-listitem-state-group jqx-rc-all');
                    }
                    className += " " + this.toThemeProperty('jqx-fill-state-normal');
                    if (this.isTouchDevice()) {
                        className += " " + this.toThemeProperty('jqx-touch');
                    }
                    if (this.equalItemsWidth) {
                        spanElement.css('float', 'left');
                    }
                    spanElement[0].className = className;
                    if (this.autoItemsHeight) {
                        spanElement[0].style.whiteSpace = 'normal';
                        var checkWidth = this.checkboxes ? -20 : 0;
                        spanElement[0].style.width = (checkWidth + w) + 'px';
                    }

                    if (this.renderer) {
                        var html = this.renderer(item.index, item.label, item.value);
                        spanElement[0].innerHTML = html;
                    }
                    else {
                        if (item.html != null && item.html.toString().length > 0) {
                            spanElement[0].innerHTML = item.html;
                        }
                        else if (item.label != null || item.value != null) {
                            if (item.label != null) {
                                spanElement[0].innerHTML = item.label;
                                if (item.label == "") spanElement[0].innerHTML = "Empty";
                            }
                            else spanElement[0].innerHTML = item.value;
                        }
                    }

                    var spanHeight = spanElement.outerHeight();
                    var spanWidth = spanElement.outerWidth();

                    if (this.itemHeight > -1) {
                        spanHeight = this.itemHeight;
                    }

                    item.height = spanHeight;
                    item.width = spanWidth;
                    height += spanHeight;
                    width = Math.max(width, spanWidth);

                    if (height <= hostHeight) {
                        itemsPerPage++;
                    }
                }
            }
            else {
                var height = 0;
                var elementHeight = 0;
                var maxText = "";
                var maxTextLength = 0;
                var oldMaxTextLength = 0;
                for (var currentItem = 0; currentItem < length; currentItem++) {
                    var item = this.items[currentItem];

                    if (item.isGroup && (item.label == '' && item.html == '')) {
                        continue;
                    }

                    if (!item.visible)
                        continue;

                    var className = "";
                    if (currentItem == 0) {
                        className += this.toThemeProperty('jqx-listitem-state-normal jqx-rc-all');
                        className += " " + this.toThemeProperty('jqx-fill-state-normal');
                        className += " " + this.toThemeProperty('jqx-widget');
                        className += " " + this.toThemeProperty('jqx-listbox');
                        className += " " + this.toThemeProperty('jqx-widget-content');

                        if (this.isTouchDevice()) {
                            className += " " + this.toThemeProperty('jqx-touch');
                        }
                        if (this.equalItemsWidth) {
                            spanElement.css('float', 'left');
                        }
                        spanElement[0].className = className;
                        if (this.autoItemsHeight) {
                            spanElement[0].style.whiteSpace = 'normal';
                            var checkWidth = this.checkboxes ? -20 : 0;
                            spanElement[0].style.width = (checkWidth + w) + 'px';
                        }

                        if (item.html == null && (item.label == "" || item.label == null)) {
                            spanElement[0].innerHTML = "Item";
                        }
                        else {
                            if (item.html != null && item.html.toString().length > 0) {
                                spanElement[0].innerHTML = item.html;
                            }
                            else if (item.label != null || item.value != null) {
                                if (item.label != null) {
                                    spanElement[0].innerHTML = item.label;
                                }
                                else spanElement[0].innerHTML = item.value;
                            }
                        }

                        var spanHeight = spanElement.outerHeight();

                        if (this.itemHeight > -1) {
                            spanHeight = this.itemHeight;
                        }
                        elementHeight = spanHeight;
                    }

                    if (maxTextLength != undefined) {
                        oldMaxTextLength = maxTextLength;
                    }

                    if (item.html != null && item.html.toString().length > 0) {
                        maxTextLength = Math.max(maxTextLength, item.html.toString().length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.html;
                        }
                    }
                    else if (item.label != null) {
                        maxTextLength = Math.max(maxTextLength, item.label.length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.label;
                        }
                    }
                    else if (item.value != null) {
                        maxTextLength = Math.max(maxTextLength, item.value.length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.value;
                        }
                    }

                    item.height = elementHeight;
                    height += elementHeight;

                    if (height <= hostHeight) {
                        itemsPerPage++;
                    }
                }
                spanElement[0].innerHTML = maxText;
                width = spanElement.outerWidth();
            }

            height += 2;
            if (itemsPerPage < 10) itemsPerPage = 10;

            spanElement.remove();
            return { width: width, height: height, itemsPerPage: itemsPerPage };
        },

        _getVirtualItemsCount: function () {
            if (this.virtualItemsCount == 0) {
                var virtualItemsCount = parseInt(this.host.height()) / 5;
                if (virtualItemsCount > this.items.length) {
                    virtualItemsCount = this.items.length;
                }
                return virtualItemsCount;
            }
            else return this.virtualItemsCount;
        },

        _addItems: function (refreshUIItems) {
            if (this.updatingListBox == true)
                return;

            if (this.items == undefined || this.items.length == 0) {
                this.virtualSize = { width: 0, height: 0, itemsPerPage: 0 };
                this._updatescrollbars();
                this.renderedVisibleItems = new Array();
                if (this.itemswrapper) {
                    this.itemswrapper.children().remove();
                }
                return;
            }

            if (refreshUIItems == false) {
                var virtualSize = this._calculateVirtualSize();
                var virtualItemsCount = virtualSize.itemsPerPage * 2;
                if (this.autoHeight) {
                    virtualItemsCount = this.items.length;
                }

                this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                var me = this;
                var virtualWidth = virtualSize.width;
                this.virtualSize = virtualSize;
                this._updatescrollbars();
                return;
            }
            var self = this;
            var top = 0;
            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            this._removeHandlers();
            if (this.allowDrag && this._enableDragDrop) {
                this.itemswrapper = null;
            }
            if (this.itemswrapper == null) {
                this.content[0].innerHTML = '';
                this.itemswrapper = $('<div tabIndex=1 style="outline: 0 none; overflow:hidden; width:100%; position: relative;"></div>');
                this.itemswrapper.height(2 * this.host.height());
                this.content.append(this.itemswrapper);
            }

            var virtualSize = this._calculateVirtualSize();
            var virtualItemsCount = virtualSize.itemsPerPage * 2;
            if (this.autoHeight) {
                virtualItemsCount = this.items.length;
            }

            this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
            var me = this;
            var virtualWidth = virtualSize.width;
            this.virtualSize = virtualSize;
            this.itemswrapper.width(Math.max(this.host.width(), 17 + virtualSize.width));
            var startIndex = this.itemswrapper.children().length;
            for (var virtualItemIndex = startIndex; virtualItemIndex < this.virtualItemsCount; virtualItemIndex++) {
                var item = this.items[virtualItemIndex];
                var itemElement = $("<div style='border: none; tabIndex=0 width:100%; height: 100%; align:left; valign:top; position: absolute;'><span id='spanElement'></span></div>");

                itemElement[0].id = self._createID();
                if (this.allowDrag && this._enableDragDrop) {
                    itemElement.addClass('draggable');
                }

                itemElement.appendTo(this.itemswrapper);

                if (this.checkboxes && this.host.jqxCheckBox) {
                    var checkbox = $('<div tabIndex=1 style="background-color: transparent; padding: 0; margin: 0; position: absolute; float: left; width: 16px; height: 16px;" class="chkbox"/>');
                    itemElement.css('float', 'left');
                    var spanElement = $(itemElement[0].firstChild);
                    spanElement.css('float', 'left');
                    itemElement.prepend(checkbox);
                    checkbox.jqxCheckBox({hasInput: false, checked: item.checked, animationShowDelay: 0, animationHideDelay: 0, disabled: item.disabled, enableContainerClick: false, keyboardCheck: false, hasThreeStates: this.hasThreeStates, theme: this.theme });
                    item.checkBoxElement = checkbox[0];
                    var updated = function (event, checked) {
                        var checkItem = event.owner.element.item;
                        if (checkItem != null) {
                            var args = event.args;
                            if (checked) {
                                me.checkIndex(checkItem.index, true);
                            }
                            else if (checkItem.checked == false) {
                                me.uncheckIndex(checkItem.index, true);
                            }
                            else {
                                if (checkItem.hasThreeStates && me.hasThreeStates) {
                                    if (checked == false) {
                                        me.uncheckIndex(checkItem.index, true);
                                    }
                                    else {
                                        me.indeterminateIndex(checkItem.index, true);
                                    }
                                }
                                else {
                                    me.uncheckIndex(checkItem.index, true);
                                }
                            }
                        }
                        me.focused = true;
                    }
                    checkbox.jqxCheckBox('updated', updated);
                }

                itemElement[0].style.height = item.height + 'px';
                itemElement[0].style.top = top + 'px';

                top += item.height;
                this.visualItems[virtualItemIndex] = itemElement;
            };

            this._addHandlers();

            this._updatescrollbars();

            if (this.autoItemsHeight) {
                var virtualSize = this._calculateVirtualSize();
                var virtualItemsCount = virtualSize.itemsPerPage * 2;
                if (this.autoHeight) {
                    virtualItemsCount = this.items.length;
                }

                this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                var me = this;
                var virtualWidth = virtualSize.width;
                this.virtualSize = virtualSize;
                this._updatescrollbars();
            }

            if ($.browser.msie && $.browser.version < 8) {
                this.host.attr('hideFocus', true);
                this.host.find('div').attr('hideFocus', true);
            }
        },

        _updatescrollbars: function () {
            var virtualHeight = this.virtualSize.height;
            var virtualWidth = this.virtualSize.width;
            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            this._arrange();
            var hasChange = false;
            if (virtualHeight > this.host.outerHeight()) {
                var hScrollOffset = 0; //parseInt(this.hScrollBar.height());
                if (virtualWidth > this.host.outerWidth()) {
                    hScrollOffset = this.hScrollBar.outerHeight() + 2;
                }

                vScrollInstance.max = 2 + parseInt(virtualHeight) + hScrollOffset - parseInt(this.host.height());
                if (this.vScrollBar[0].style.visibility != 'inherit') {
                    this.vScrollBar[0].style.visibility = 'inherit';
                    hasChange = true;
                }
            }
            else {
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    this.vScrollBar[0].style.visibility = 'hidden';
                    hasChange = true;
                    vScrollInstance.setPosition(0);
                }
            }

            var scrollOffset = 0;
            if (this.vScrollBar[0].style.visibility != 'hidden') {
                scrollOffset = this.scrollBarSize + 6;
            }

            var checkboxes = this.checkboxes ? 20 : 0;

            if (this.autoItemsHeight) {
                this.hScrollBar[0].style.visibility = 'hidden';
            }
            else {
                if (virtualWidth >= this.host.outerWidth() - scrollOffset - checkboxes) {
                    var changedMax = hScrollInstance.max;
                    if (this.vScrollBar[0].style.visibility == 'inherit') {
                        hScrollInstance.max = checkboxes + scrollOffset + parseInt(virtualWidth) - this.host.width() + 4;
                    }
                    else {
                        hScrollInstance.max = checkboxes + parseInt(virtualWidth) - this.host.width() + 6;
                    }

                    if (this.hScrollBar[0].style.visibility != 'inherit') {
                        this.hScrollBar[0].style.visibility = 'inherit';
                        hasChange = true;
                    }
                    if (changedMax != hScrollInstance.max) {
                        hScrollInstance._arrange();
                    }
                    if (this.vScrollBar[0].style.visibility == 'inherit') {
                        vScrollInstance.max = 2 + parseInt(virtualHeight) + this.hScrollBar.outerHeight() + 2 - parseInt(this.host.height());
                    }
                }
                else {
                    if (this.hScrollBar[0].style.visibility != 'hidden') {
                        this.hScrollBar[0].style.visibility = 'hidden';
                        hasChange = true;
                    }
                }
            }

            hScrollInstance.setPosition(0);

            if (hasChange) this._arrange();

            if (this.itemswrapper) {
                this.itemswrapper.width(Math.max(this.host.width(), 17 + virtualWidth));
                this.itemswrapper.height(2 * this.host.height());
            }

            var isTouchDevice = this.isTouchDevice();
            if (isTouchDevice) {
                if (this.vScrollBar.css('visibility') != 'visible' && this.hScrollBar.css('visibility') != 'visible') {
                    $.jqx.mobile.setTouchScroll(false, this.element.id);
                }
                else {
                    $.jqx.mobile.setTouchScroll(true, this.element.id);
                }
            }
        },

        clear: function () {
            this.source = null;
            this.clearSelection();
            this.refresh();
        },

        // clears the selection.
        clearSelection: function (render) {
            for (indx = 0; indx < this.selectedIndexes.length; indx++) {
                this.selectedIndexes[indx] = -1;
            }
            this.selectedIndex = -1;
            if (render != false) {
                this._renderItems();
            }
        },

        // unselects item by index.
        unselectIndex: function (index, render) {
            if (isNaN(index))
                return;

            this.selectedIndexes[index] = -1;
            if (render == undefined || render == true) {
                this._renderItems();
                this._raiseEvent('1', { index: index, type: type });
            }
            this._updateInputSelection();

            this._raiseEvent('2', { index: index, item: this.getItem(index) });
        },

        // gets item's instance.
        getItem: function (index) {
            if (index == -1 || isNaN(index))
                return null;

            var result = null;
            var item = $.each(this.items, function () {
                if (this.index == index) {
                    result = this;
                    return false;
                }
            });

            return result;
        },

        getVisibleItem: function (index) {
            if (index == -1 || isNaN(index))
                return null;

            return this.visibleItems[index];
        },

        // checks a specific item by its index.
        checkIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = true;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }

            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { label: item.label, value: item.value, checked: true, item: item });
            }
        },

        getCheckedItems: function () {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return null;
            }

            var checkedItems = new Array();
            if (this.items == undefined) return;

            $.each(this.items, function () {
                if (this.checked) {
                    checkedItems[checkedItems.length] = this;
                }
            });
            return checkedItems;
        },

        checkAll: function (silentUpdate) {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return;
            }

            if (this.disabled)
                return;

            $.each(this.items, function () {
                this.checked = true;
            });

            this._updateCheckedItems();
            if (silentUpdate == undefined || silentUpdate == true) {
                this._raiseEvent(3, { checked: true });
            }
        },

        uncheckAll: function (silentUpdate) {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return;
            }

            if (this.disabled)
                return;

            $.each(this.items, function () {
                this.checked = false;
            });

            this._updateCheckedItems();

            if (silentUpdate == undefined || silentUpdate == true) {
                this._raiseEvent(3, { checked: false });
            }
        },

        // unchecks a specific item by its index.
        uncheckIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = false;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }
            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { label: item.label, value: item.value, checked: false, item: item });
            }
        },

        // sets a specific item's checked property to null.
        indeterminateIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes || !this.host.jqxCheckBox) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = null;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }
            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { checked: null });
            }
        },

        // gets the selected index.
        getSelectedIndex: function () {
            return this.selectedIndex;
        },

        // gets all selected items.
        getSelectedItems: function () {
            var items = this.getItems();
            var selectedIndexes = this.selectedIndexes;
            var selectedItems = [];
            // get selected items.
            for (var index in selectedIndexes) {
                if (selectedIndexes[index] != -1) {
                    selectedItems[selectedItems.length] = items[index];
                }
            }

            return selectedItems;
        },

        // gets the selected item.
        getSelectedItem: function () {
            return this.getItem(this.selectedIndex);
        },

        _updateCheckedItems: function () {
            var selectedIndex = this.selectedIndex;
            this.clearSelection(false);
            var items = this.getCheckedItems();
            this.selectedIndex = selectedIndex;

            this._renderItems();
            var selectedElement = $.data(this.element, 'hoveredItem');
            if (selectedElement != null) {
                $(selectedElement).addClass(this.toThemeProperty('jqx-listitem-state-hover'));
                $(selectedElement).addClass(this.toThemeProperty('jqx-fill-state-hover'));
            }

            this._updateInputSelection();
        },

        getItemByValue: function (value) {
            if (this.visibleItems == null) {
                return;
            }

            if (this.itemsByValue)
                return this.itemsByValue[value];

            var items = this.visibleItems;

            for (var i = 0; i < items.length; i++) {
                if (items[i].value == value) {
                    return items[i];
                    break;
                }
            }
        },

        checkItem: function (item) {
            if (item != null) {
                return this.checkIndex(item.index, true);
            }
            return false;
        },

        uncheckItem: function (item) {
            if (item != null) {
                return this.uncheckIndex(item.index, true);
            }
            return false;
        },

        indeterminateItem: function (item) {
            if (item != null) {
                return this.indeterminateIndex(item.index, true);
            }
            return false;
        },

        selectItem: function (item) {
            if (item != null) {
                return this.selectIndex(item.index, true);
            }
            return false;
        },

        unselectItem: function (item) {
            if (item != null) {
                return this.unselectIndex(item.index, true);
            }
            return false;
        },

        // selects an item.
        selectIndex: function (index, ensureVisible, render, forceSelect, type, originalEvent) {
            if (isNaN(index))
                return;

            if (index < -1 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            if (!this.multiple && !this.multipleextended && this.selectedIndex == index && !forceSelect)
                return;

            if (this.checkboxes) {
                this._updateCheckedItems();
                return;
            }

            this.focused = true;
            var newSelection = false;
            if (this.selectedIndex != index) newSelection = true;
            var oldIndex = this.selectedIndex;
            if (this.selectedIndex == index && !this.multiple) {
                oldIndex = -1;
            }

            if (type == undefined) {
                type = 'none';
            }

            var newItem = this.getItem(index);
            var oldItem = this.getItem(oldIndex);
            if (this.visibleItems && this.visibleItems.length != this.items.length) {
                newItem = this.getVisibleItem(index);
                oldItem = this.getVisibleItem(oldIndex);
            }

            if (forceSelect != undefined && forceSelect) {
                this._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                this.selectedIndex = index;
                this.selectedIndexes[oldIndex] = -1;
                this.selectedIndexes[index] = index;
                this._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
            }
            else {
                var me = this;
                var singleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {
                    me._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                    me.selectedIndex = index;
                    me.selectedIndexes[oldIndex] = -1;
                    oldIndex = index;
                    me.selectedIndexes[index] = index;
                    me._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
                }
                var multipleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {
                    if (me.selectedIndexes[index] == undefined || me.selectedIndexes[index] == -1) {
                        me.selectedIndexes[index] = index;
                        me.selectedIndex = index;
                        me._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
                    }
                    else {
                        oldIndex = me.selectedIndexes[index];
                        me.selectedIndexes[index] = -1;
                        me.selectedIndex = -1;
                        me._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                    }
                }

                if (this.multipleextended) {
                    if (!this._shiftKey && !this._ctrlKey) {
                        if (type != 'keyboard' && type != 'mouse') {
                            multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                            me._clickedIndex = index;
                        }
                        else {
                            this.clearSelection(false);
                            me._clickedIndex = index;
                            singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                        }
                    }
                    else if (this._ctrlKey) {
                        if (type == 'keyboard') this.clearSelection(false);
                        multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                    }
                    else if (this._shiftKey) {
                        if (me._clickedIndex == undefined) me._clickedIndex = oldIndex;
                        var min = Math.min(me._clickedIndex, index);
                        var max = Math.max(me._clickedIndex, index);
                        this.clearSelection(false);
                        for (var i = min; i <= max; i++) {
                            me.selectedIndexes[i] = i;
                            me._raiseEvent('0', { index: i, type: type, item: this.getVisibleItem(i), originalEvent: originalEvent });
                        }
                        if (type != 'keyboard') {
                            me.selectedIndex = me._clickedIndex;
                        }
                        else {
                            me.selectedIndex = index;
                        }
                    }
                }
                else if (this.multiple) {
                    multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                }
                else {
                    singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                }
            }

            if (render == undefined || render == true) {
                this._renderItems();
            }

            if (ensureVisible != undefined && ensureVisible != null && ensureVisible == true) {
                this.ensureVisible(index);
            }

            this._raiseEvent('2', { index: index, item: newItem, oldItem: oldItem });
            this._updateInputSelection();
            return newSelection;
        },

        _updateInputSelection: function () {
            if (this.input) {
                if (this.selectedIndex == -1) {
                    this.input.val("");
                }
                else {
                    if (this.items[this.selectedIndex] != undefined) {
                        this.input.val(this.items[this.selectedIndex].value);
                    }
                }
                if (this.multiple || this.multipleextended || this.checkboxes) {
                    var items = !this.checkboxes ? this.getSelectedItems() : this.getCheckedItems();
                    var str = "";
                    for (var i = 0; i < items.length; i++) {
                        if (i == items.length - 1) {
                            str += items[i].value;
                        }
                        else {
                            str += items[i].value + ",";
                        }
                    }
                    this.input.val(str);
                }
            }
        },

        // checks whether an item is in the visible view.
        isIndexInView: function (index) {
            if (isNaN(index)) {
                return false;
            }

            if (index < 0 || index >= this.items.length) {
                return false;
            }

            var scrollValue = this.vScrollInstance.value;
            var item = this.visibleItems[this.selectedIndex];
            if (item == undefined)
                return true;

            var itemTop = item.initialTop;
            var itemHeight = item.height;

            if (itemTop - scrollValue < 0 || itemTop - scrollValue + itemHeight >= this.host.outerHeight()) {
                return false;
            }

            return true;
        },

        //[optimize]
        _itemsInPage: function () {
            var itemsCount = 0;
            var me = this;

            $.each(this.items, function () {
                if ((this.initialTop + this.height) >= me.content.height()) {
                    return false;
                }
                itemsCount++;
            });

            return itemsCount;
        },

        _firstItemIndex: function () {
            if (this.visibleItems != null) {
                if (this.visibleItems[0].isGroup) {
                    return this._nextItemIndex(0);
                }
                else return 0;
            }

            return -1;
        },

        _lastItemIndex: function () {
            if (this.visibleItems != null) {
                if (this.visibleItems[this.visibleItems.length - 1].isGroup) {
                    return this._prevItemIndex(this.visibleItems.length - 1);
                }
                else return this.visibleItems.length - 1;
            }

            return -1;
        },

        _nextItemIndex: function (index) {
            for (indx = index + 1; indx < this.visibleItems.length; indx++) {
                if (this.visibleItems[indx]) {
                    if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {
                        return indx;
                    }
                }
            }

            return -1;
        },

        _prevItemIndex: function (index) {
            for (indx = index - 1; indx >= 0; indx--) {
                if (this.visibleItems[indx]) {
                    if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {
                        return indx;
                    }
                }
            }

            return -1;
        },

        // get all matches of a searched value.
        _getMatches: function (value, startindex) {
            if (value == undefined || value.length == 0)
                return -1;

            if (startindex == undefined) startindex = 0;

            var items = this.getItems();
            var me = this;
            var index = -1;
            var newItemsIndex = 0;

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label;
                    }
                    else if (this.value) {
                        itemValue = this.value;
                    }
                    else if (this.title) {
                        itemValue = this.title;
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (mathes && this.visibleIndex >= startindex) {
                        index = this.visibleIndex;
                        return false;
                    }
                }
            });

            return index;
        },

        // gets all items that match to a search value.
        findItems: function (value) {
            var items = this.getItems();
            var me = this;
            var index = 0;
            var matchItems = new Array();

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label;
                    }
                    else if (this.value) {
                        itemValue = this.value;
                    }
                    else if (this.title) {
                        itemValue = this.title;
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (mathes) {
                        matchItems[index++] = this;
                    }
                }
            });

            return matchItems;
        },

        _handleKeyDown: function (event) {
            var key = event.keyCode;
            var self = this;
            var index = self.selectedIndex;
            var selectedIndex = self.selectedIndex;
            var newSelection = false;

            if (!this.keyboardNavigation)
                return;

            var doClear = function () {
                if (self.multiple) {
                    self.clearSelection(false);
                }
            }

            if (event.altKey) key = -1;
            if (self.incrementalSearch) {
                var matchindex = -1;
                if (!self._searchString) {
                    self._searchString = "";
                }

                if ((key == 8 || key == 46) && self._searchString.length >= 1) {
                    self._searchString = self._searchString.substr(0, self._searchString.length - 1);
                }

                var letter = String.fromCharCode(key);

                var isDigit = (!isNaN(parseInt(letter)));
                if ((key >= 65 && key <= 97) || isDigit || key == 8 || key == 32 || key == 46) {
                    if (!event.shiftKey) {
                        letter = letter.toLocaleLowerCase();
                    }

                    var startIndex = 1 + self.selectedIndex;
                    if (key != 8 && key != 32 && key != 46) {
                        if (self._searchString.length > 0 && self._searchString.substr(0, 1) == letter) {
                            startIndex = 1 + self.selectedIndex;
                        }
                        else {
                            self._searchString += letter;
                        }
                    }

                    if (key == 32) {
                        self._searchString += " ";
                    }

                    var matches = this._getMatches(self._searchString, startIndex);
                    matchindex = matches;
                    if (matchindex == self._lastMatchIndex || matchindex == -1) {
                        var matches = this._getMatches(self._searchString, 0);
                        matchindex = matches;
                    }
                    self._lastMatchIndex = matchindex;

                    if (matchindex >= 0) {
                        doClear();
                        self.selectIndex(matchindex, false, false, false, 'keyboard', event);
                        var isInView = self.isIndexInView(matchindex);
                        if (!isInView) {
                            self.ensureVisible(matchindex);
                        }
                        else {
                            self._renderItems();
                        }
                    }
                }

                if (self._searchTimer != undefined) {
                    clearTimeout(self._searchTimer);
                }

                if (key == 27 || key == 13) {
                    self._searchString = "";
                }

                self._searchTimer = setTimeout(function () {
                    self._searchString = "";
                }, self.incrementalSearchDelay);
                if (matchindex >= 0) {
                    return;
                }
            }

            if (this.checkboxes)
                return true;

            if (key == 33) {
                var itemsInPage = self._itemsInPage();
                if (self.selectedIndex - itemsInPage >= 0) {
                    doClear();
                    self.selectIndex(selectedIndex - itemsInPage, false, false, false, 'keyboard', event);
                }
                else {
                    doClear();
                    self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);
                }
                self._searchString = "";
            }

            if (key == 32 && this.checkboxes) {
                var checkItem = this.getItem(index);
                if (checkItem != null) {
                    self._updateItemCheck(checkItem, index);
                    event.preventDefault();
                }
                self._searchString = "";
            }

            if (key == 36) {
                doClear();
                self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);
                self._searchString = "";
            }

            if (key == 35) {
                doClear();
                self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);
                self._searchString = "";
            }

            if (key == 34) {
                var itemsInPage = self._itemsInPage();
                if (self.selectedIndex + itemsInPage < self.visibleItems.length) {
                    doClear();
                    self.selectIndex(selectedIndex + itemsInPage, false, false, false, 'keyboard', event);
                }
                else {
                    doClear();
                    self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);
                }
                self._searchString = "";
            }

            if (key == 38) {
                self._searchString = "";
                if (self.selectedIndex > 0) {
                    var newIndex = self._prevItemIndex(self.selectedIndex);
                    if (newIndex != self.selectedIndex && newIndex != -1) {
                        doClear();
                        self.selectIndex(newIndex, false, false, false, 'keyboard', event);
                    }
                    else return true;
                }
                else return false;
            }
            else if (key == 40) {
                self._searchString = "";
                if (self.selectedIndex + 1 < self.visibleItems.length) {
                    var newIndex = self._nextItemIndex(self.selectedIndex);
                    if (newIndex != self.selectedIndex && newIndex != -1) {
                        doClear();
                        self.selectIndex(newIndex, false, false, false, 'keyboard', event);
                    }
                    else return true;
                }
                else return false;
            }

            if (key == 35 || key == 36 || key == 38 || key == 40 || key == 34 || key == 33) {
                var isInView = self.isIndexInView(self.selectedIndex);
                if (!isInView) {
                    self.ensureVisible(self.selectedIndex);
                }
                else {
                    self._renderItems();
                }

                return false;
            }

            return true;
        },

        _updateItemCheck: function (checkItem, index) {
            if (checkItem.checked == true) {
                checkItem.checked = (checkItem.hasThreeStates && this.hasThreeStates) ? null : false;
            }
            else {
                checkItem.checked = checkItem.checked != null;
            }

            switch (checkItem.checked) {
                case true:
                    this.checkIndex(index);
                    break;
                case false:
                    this.uncheckIndex(index);
                    break;
                default:
                    this.indeterminateIndex(index);
                    break;
            }
        },

        // performs mouse wheel.
        wheel: function (event, self) {
            if (self.autoHeight || !self.enableMouseWheel) {
                event.returnValue = true;
                return true;
            }

            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;

            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }

            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);
                if (result) {
                    if (event.preventDefault)
                        event.preventDefault();

                    if (event.originalEvent != null) {
                        event.originalEvent.mouseHandled = true;
                    }

                    if (event.stopPropagation != undefined) {
                        event.stopPropagation();
                    }
                }

                if (result) {
                    result = false;
                    event.returnValue = result;
                    return result;
                }
                else {
                    return false;
                }
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            var oldvalue = this.vScrollInstance.value;
            if (delta < 0) {
                this.scrollDown();
            }
            else this.scrollUp();
            var newvalue = this.vScrollInstance.value;
            if (oldvalue != newvalue) {
                return true;
            }

            return false;
        },

        getTouches: function (e) {
            if (e.originalEvent) {
                if (e.originalEvent.touches && e.originalEvent.touches.length) {
                    return e.originalEvent.touches;
                } else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
                    return e.originalEvent.changedTouches;
                }
            }

            if (!e.touches) {
                e.touches = new Array();
                e.touches[0] = e.originalEvent;
            }

            return e.touches;
        },

        focus: function () {
            this.focused = true;
            this.content.focus();
            var me = this;
            setTimeout(function () {
                me.content.focus();
            }, 10);
        },

        _removeHandlers: function () {
            var self = this;
            this.removeHandler($(document), 'keydown.listbox' + this.element.id);
            this.removeHandler($(document), 'keyup.listbox' + this.element.id);
            this.removeHandler(this.vScrollBar, 'valuechanged');
            this.removeHandler(this.hScrollBar, 'valuechanged');
            this.removeHandler(this.host, 'mousewheel');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.content, 'mouseleave');
            this.removeHandler(this.content, 'focus');
            this.removeHandler(this.content, 'blur');
            this.removeHandler(this.content, 'mouseenter');
            this.removeHandler(this.content, 'mouseup');
            this.removeHandler(this.content, 'mousedown');
            this.removeHandler(this.content, 'touchend');
            if (this._mousemovefunc) {
                this.removeHandler(this.content, 'mousemove', this._mousemovefunc);
                this._mousemovefunc = null;
            }
            else {
                this.removeHandler(this.content, 'mousemove');
            }
            if ($.browser.msie) {
                this.removeHandler(this.content, 'selectstart');
            }
            if (this.overlayContent) {
                this.removeHandler(this.overlayContent, 'touchend');
            }
        },

        _addHandlers: function () {
            var self = this;
            this.focused = false;
            var animating = false;
            var prevValue = 0;
            var object = null;
            var prevValue = 0;
            var newValue = 0;
            var lastScroll = new Date();
            var isTouchDevice = this.isTouchDevice();

            if ((this.width != null && this.width.toString().indexOf("%") != -1) ||
            (this.height != null && this.height.toString().indexOf("%") != -1)) {
                $(window).unbind('resize.' + this.element.id);
                $(window).bind('resize.' + this.element.id, function () {
                    self._arrange();
                    if (self.host.height() != self._oldheight || self.host.width() != self._oldwidth) {
                        var changedWidth = self.host.width() != self._oldwidth;
                        self._oldwidth = self.host.width();
                        self._oldheight = self.host.height();

                        if (self.autoItemsHeight) {
                            self._render(false);
                        }
                        else {
                            if (self.items) {
                                if (self.items.length > 0 && self.virtualItemsCount * self.items[0].height < self._oldheight) {
                                    self._render(false);
                                }
                                else {
                                    var _oldScrollValue = self.vScrollInstance.value;
                                    self._updatescrollbars();
                                    self._renderItems();
                                    if (_oldScrollValue < self.vScrollInstance.max) {
                                        self.vScrollInstance.setPosition(_oldScrollValue);
                                    }
                                    else {
                                        self.vScrollInstance.setPosition(self.vScrollInstance.max);
                                    }
                                }
                            }
                        }
                    }
                });
            }

            this.addHandler(this.vScrollBar, 'valuechanged', function (event) {
                //                if (isTouchDevice) {
                //                    prevValue = event.previousValue;
                //                    if (newValue == event.currentValue)
                //                        return;

                //                    newValue = event.currentValue;
                //                    if (self._vAnimation) self._vAnimation.stop();
                //                    self._vAnimation = $({ count: prevValue }).animate({ count: newValue }, {
                //                        duration: 200,
                //                        easing: 'easeInOutCirc',
                //                        step: function () {
                //                            self.vScrollInstance.value = this.count;
                //                            self._renderItems();
                //                            animating = true;
                //                        },
                //                        complete: function () {
                //                            animating = false;
                //                        }
                //                    });
                //                }
                //                else self._renderItems();
                if ($.browser.msie && $.browser.version > 9) {
                    setTimeout(function () {
                        self._renderItems();
                    }, 1);
                }
                else self._renderItems();
            });

            this.addHandler(this.hScrollBar, 'valuechanged', function () {
                self._renderItems();
            });

            this.addHandler(this.host, 'mousewheel', function (event) {
                self.wheel(event, self);
            });

            this.addHandler($(document), 'keydown.listbox' + this.element.id, function (event) {
                self._ctrlKey = event.ctrlKey;
                self._shiftKey = event.shiftKey;
            });
            this.addHandler($(document), 'keyup.listbox' + this.element.id, function (event) {
                self._ctrlKey = event.ctrlKey;
                self._shiftKey = event.shiftKey;
            });

            this.addHandler(this.host, 'keydown', function (event) {
                if (self.focused) {
                    return self._handleKeyDown(event);
                }
            });

            this.addHandler(this.content, 'mouseleave', function (event) {
                self.focused = false;
                var hoveredItem = $.data(self.element, 'hoveredItem');
                if (hoveredItem != null) {
                    $(hoveredItem).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));
                    $(hoveredItem).removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                    $.data(self.element, 'hoveredItem', null);
                }
            });

            this.addHandler(this.content, 'focus', function (event) {
                self.focused = true;
            });

            this.addHandler(this.content, 'blur', function (event) {
                self.focused = false;
            });

            this.addHandler(this.content, 'mouseenter', function (event) {
                self.focused = true;
            });
            var hasTransform = $.jqx.utilities.hasTransform(this.host);

            if (this.enableSelection) {
                var isTouch = self.isTouchDevice();
                var eventName = !isTouch ? 'mousedown' : 'touchend';

                if (this.overlayContent) {
                    this.addHandler(this.overlayContent, 'touchend', function (event) {
                        if (isTouch) {
                            self._newScroll = new Date();
                            if (self._newScroll - self._lastScroll < 500) {
                                return true;
                            }
                        }

                        var touches = self.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            var selfOffset = self.host.offset();
                            var left = parseInt(touch.pageX);
                            var top = parseInt(touch.pageY);
                            if (self.touchmode == true) {
                                left = parseInt(touch._pageX);
                                top = parseInt(touch._pageY);
                            }
                            left = left - selfOffset.left;
                            top = top - selfOffset.top;
                            var item = self._hitTest(left, top);
                            if (item != null && !item.isGroup) {
                                if (self.checkboxes) {
                                    var checkboxOffset = $(item.element).offset();
                                    var leftCheckOffset = parseInt(checkboxOffset.left);
                                    if (left <= leftCheckOffset + 20) {
                                        if (item.checked) {
                                            self.uncheckIndex(item.visibleIndex);
                                        }
                                        else self.checkIndex(item.visibleIndex);
                                    }
                                }

                                if (item.html.indexOf('href') != -1) {
                                    setTimeout(function () {
                                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                    }, 100);
                                }
                                else {
                                    self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                }
                            }
                        }
                    });
                }
                else {
                    this.addHandler(this.content, eventName, function (event) {
                        if (isTouch) {
                            self._newScroll = new Date();
                            if (self._newScroll - self._lastScroll < 500) {
                                return false;
                            }
                        }

                        self.focused = true;
                        if (!self.isTouchDevice()) {
                            self.content.focus();
                        }
                        if (event.target.id != ('listBoxContent' + self.element.id) && self.itemswrapper[0] != event.target) {
                            var target = event.target;
                            var targetOffset = $(target).offset();
                            var selfOffset = self.host.offset();
                            if (hasTransform) {
                                var left = $.jqx.mobile.getLeftPos(target);
                                var top = $.jqx.mobile.getTopPos(target);
                                targetOffset.left = left; targetOffset.top = top;

                                left = $.jqx.mobile.getLeftPos(self.element);
                                top = $.jqx.mobile.getTopPos(self.element);
                                selfOffset.left = left; selfOffset.top = top;
                            }

                            var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);
                            var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);
                            var item = self._hitTest(x, y);
                            if (item != null && !item.isGroup) {
                                var doSelection = function (item, event) {
                                    if (!self._shiftKey)
                                        self._clickedIndex = item.visibleIndex;
                                    if (!self.checkboxes) {
                                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                    } else {
                                        self.selectedIndex = item.visibleIndex;
                                        if (x + self.hScrollInstance.value >= 20) {
                                            self._updateItemCheck(item, item.visibleIndex);
                                        }
                                    }
                                }

                                if (!item.disabled) {
                                    if (item.html.indexOf('href') != -1) {
                                        setTimeout(function () {
                                            doSelection(item, event);
                                        }, 100);
                                    }
                                    else {
                                        doSelection(item, event);
                                    }
                                }
                            }
                            if (eventName == 'mousedown') {
                                var rightclick = false;
                                if (event.which) rightclick = (event.which == 3);
                                else if (event.button) rightclick = (event.button == 2);
                                if (rightclick) return true;
                                return false;
                            }
                        }

                        return true;
                    });
                }

                this.addHandler(this.content, 'mouseup', function (event) {
                    self.vScrollInstance.handlemouseup(self, event);
                });

                if ($.browser.msie) {
                    this.addHandler(this.content, 'selectstart', function (event) {
                        return false;
                    });
                }
            }
            // hover behavior.
            var isTouchDevice = this.isTouchDevice();
            if (this.enableHover && !isTouchDevice) {
                this._mousemovefunc = function (event) {
                    if (isTouchDevice)
                        return true;

                    if (!self.enableHover)
                        return true;

                    var which = $.browser.msie == true && $.browser.version < 9 ? 0 : 1;
                    if (event.target == null)
                        return true;

                    if (self.disabled)
                        return true;

                    self.focused = true;
                    var scrolling = self.vScrollInstance.isScrolling();
                    if (!scrolling && event.target.id != ('listBoxContent' + self.element.id)) {
                        if (self.itemswrapper[0] != event.target) {
                            var target = event.target;
                            var targetOffset = $(target).offset();
                            var selfOffset = self.host.offset();
                            if (hasTransform) {
                                var left = $.jqx.mobile.getLeftPos(target);
                                var top = $.jqx.mobile.getTopPos(target);
                                targetOffset.left = left; targetOffset.top = top;

                                left = $.jqx.mobile.getLeftPos(self.element);
                                top = $.jqx.mobile.getTopPos(self.element);
                                selfOffset.left = left; selfOffset.top = top;
                            }
                            var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);
                            var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);
                            var item = self._hitTest(x, y);
                            if (item != null && !item.isGroup && !item.disabled) {
                                var selectedElement = $.data(self.element, 'hoveredItem');
                                if (selectedElement != null) {
                                    $(selectedElement).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));
                                    $(selectedElement).removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                                }

                                $.data(self.element, 'hoveredItem', item.element);
                                var $element = $(item.element);
                                $element.addClass(self.toThemeProperty('jqx-listitem-state-hover'));
                                $element.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            }
                        }
                    }
                };

                this.addHandler(this.content, 'mousemove', this._mousemovefunc);
            }
        },

        _arrange: function () {
            var width = null;
            var height = null;
            var me = this;
            var _setHostHeight = function (height) {
                height = me.host.height();
                if (height == 0) {
                    height = 200;
                    me.host.height(height);
                }
                return height;
            }

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
                width = this.host.width();
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
                height = _setHostHeight(height);
            }

            var hostBorderSize = this.host.css('border-width');
            if (hostBorderSize == null) {
                hostBorderSize = 0;
            }

            if (width != null) {
                width = parseInt(width);
                if (parseInt(this.element.style.width) != parseInt(this.width)) {
                    this.host.width(this.width);
                }
            }

            if (!this.autoHeight) {
                if (height != null) {
                    height = parseInt(height);
                    if (parseInt(this.element.style.height) != parseInt(this.height)) {
                        this.host.height(this.height);
                        _setHostHeight(height);
                    }
                }
            }
            else {
                if (this.virtualSize) {
                    if (this.hScrollBar.css('visibility') != 'hidden') {
                        this.host.height(this.virtualSize.height + parseInt(this.scrollBarSize) + 3);
                        this.height = this.virtualSize.height + parseInt(this.scrollBarSize) + 3;
                    }
                    else {
                        this.host.height(this.virtualSize.height);
                        this.height = this.virtualSize.height;
                    }
                }
            }

            // scrollbar Size.
            var scrollSize = this.scrollBarSize;
            if (isNaN(scrollSize)) {
                scrollSize = parseInt(scrollSize);
                if (isNaN(scrollSize)) {
                    scrollSize = '17px';
                }
                else scrollSize = scrollSize + 'px';
            }

            scrollSize = parseInt(scrollSize);
            var scrollOffset = 4;
            var bottomSizeOffset = 2;
            var rightSizeOffset = 0;
            // right scroll offset. 
            if (this.vScrollBar) {
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    rightSizeOffset = scrollSize + scrollOffset;
                }
                else {
                    this.vScrollInstance.setPosition(0);
                }
            }
            else return;

            if (this.hScrollBar) {
                // bottom scroll offset.
                if (this.hScrollBar[0].style.visibility != 'hidden') {
                    bottomSizeOffset = scrollSize + scrollOffset;
                }
                else {
                    this.hScrollInstance.setPosition(0);
                }
            }
            else return;

            if (this.autoItemsHeight) {
                this.hScrollBar[0].style.visibility = 'hidden';
                bottomSizeOffset = 0;
            }

            var hScrollTop = parseInt(height) - scrollOffset - scrollSize;
            if (hScrollTop < 0) hScrollTop = 0;

            this.hScrollBar.height(scrollSize);
            this.hScrollBar.css({ top: hScrollTop + 'px', left: '0px' });
            this.hScrollBar.width(width - scrollSize - scrollOffset + 'px');

            if (rightSizeOffset == 0) {
                this.hScrollBar.width(width - 2);
            }

            if (scrollSize != parseInt(this.vScrollBar[0].style.width)) {
                this.vScrollBar.width(scrollSize);
            }
            if ((parseInt(height) - bottomSizeOffset) != parseInt(this.vScrollBar[0].style.height)) {
                this.vScrollBar.height(parseInt(height) - bottomSizeOffset + 'px');
            }

            this.vScrollBar.css({ left: parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px', top: '0px' });
            var vScrollInstance = this.vScrollInstance;
            vScrollInstance.disabled = this.disabled;
            vScrollInstance._arrange();

            var hScrollInstance = this.hScrollInstance;
            hScrollInstance.disabled = this.disabled;
            hScrollInstance._arrange();

            if ((this.vScrollBar[0].style.visibility != 'hidden') && (this.hScrollBar[0].style.visibility != 'hidden')) {
                this.bottomRight.css('visibility', 'inherit');
                this.bottomRight.css({ left: 1 + parseInt(this.vScrollBar.css('left')), top: 1 + parseInt(this.hScrollBar.css('top')) });
                if (this.rtl) {
                    this.bottomRight.css({ left: 0 });
                }
                this.bottomRight.width(parseInt(scrollSize) + 3);
                this.bottomRight.height(parseInt(scrollSize) + 3);
            }
            else this.bottomRight.css('visibility', 'hidden');

            if (parseInt(this.content[0].style.width) != (parseInt(width) - rightSizeOffset)) {
                this.content.width(parseInt(width) - rightSizeOffset);
            }

            if (this.rtl) {
                this.vScrollBar.css({ left: 0 + 'px', top: '0px' });
                this.hScrollBar.css({ left: this.vScrollBar.width() + 'px' });
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    this.content.css('margin-left', 4 + this.vScrollBar.width());
                }
                else {
                    this.content.css('margin-left', 0);
                    this.hScrollBar.css({ left: '0px' });
                }
            }

            if (parseInt(this.content[0].style.height) != (parseInt(height) - bottomSizeOffset)) {
                this.content.height(parseInt(height) - bottomSizeOffset);
            }
            if (this.overlayContent) {
                this.overlayContent.width(parseInt(width) - rightSizeOffset);
                this.overlayContent.height(parseInt(height) - bottomSizeOffset);
            }
        },

        // scrolls to a list box item.
        ensureVisible: function (index) {
            var isInView = this.isIndexInView(index);
            if (!isInView) {
                if (index < 0)
                    return;
                if (this.autoHeight) {
                    var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
                    vScrollInstance.setPosition(0);
                }
                else {
                    for (indx = 0; indx < this.visibleItems.length; indx++) {
                        var item = this.visibleItems[indx];
                        if (item.visibleIndex == index && !item.isGroup) {
                            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
                            vScrollInstance.setPosition(item.initialTop);
                            break;
                        }
                    }
                }
            }

            this._renderItems();
        },

        // scrolls down.
        scrollDown: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value + vScrollInstance.largestep <= vScrollInstance.max) {
                vScrollInstance.setPosition(vScrollInstance.value + vScrollInstance.largestep);
                return true;
            }
            else {
                vScrollInstance.setPosition(vScrollInstance.max);
                return true;
            }

            return false;
        },

        // scrolls up.
        scrollUp: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value - vScrollInstance.largestep >= vScrollInstance.min) {
                vScrollInstance.setPosition(vScrollInstance.value - vScrollInstance.largestep);
                return true;
            }
            else {
                if (vScrollInstance.value != vScrollInstance.min) {
                    vScrollInstance.setPosition(vScrollInstance.min);
                    return true;
                }
            }
            return false;
        },

        databind: function (source) {
            this.records = new Array();
            var isdataadapter = source._source ? true : false;
            var dataadapter = new $.jqx.dataAdapter(source,
                {
                    autoBind: false
                }
            );

            if (isdataadapter) {
                dataadapter = source;
                source = source._source;
            }

            var initadapter = function (me) {
                if (source.type != undefined) {
                    dataadapter._options.type = source.type;
                }
                if (source.formatdata != undefined) {
                    dataadapter._options.formatData = source.formatdata;
                }
                if (source.contenttype != undefined) {
                    dataadapter._options.contentType = source.contenttype;
                }
                if (source.async != undefined) {
                    dataadapter._options.async = source.async;
                }
            }

            var updatefromadapter = function (me, type) {
                var getItem = function (record) {
                    if (typeof record === 'string') {
                        var label = record;
                        var value = record;
                    }
                    else {
                        var value = record[me.valueMember];
                        var label = record[me.displayMember];
                    }
                    var listBoxItem = new $.jqx._jqxListBox.item();
                    listBoxItem.label = label;
                    listBoxItem.value = value;
                    listBoxItem.html = "";
                    listBoxItem.visible = true;
                    listBoxItem.originalItem = record;
                    listBoxItem.group = '';
                    listBoxItem.groupHtml = '';
                    listBoxItem.disabled = false;
                    listBoxItem.hasThreeStates = true;
                    return listBoxItem;
                }

                if (type != undefined) {
                    var dataItem = dataadapter._changedrecords[0];
                    if (dataItem) {
                        $.each(dataadapter._changedrecords, function () {
                            var index = this.index;
                            var item = this.record;
                            if (type != 'remove') {
                                var mapItem = getItem(item);
                            }

                            switch (type) {
                                case "update":
                                    me.updateAt(mapItem, index);
                                    break;
                                case "add":
                                    me.insertAt(mapItem, index);
                                    break;
                                case "remove":
                                    me.removeAt(index);
                                    break;
                            }
                        });
                        return;
                    }
                }

                me.records = dataadapter.records;
                var recordslength = me.records.length;
                me.items = new Array();
                me.itemsByValue = new Array();
                for (var i = 0; i < recordslength; i++) {
                    var record = me.records[i];
                    var listBoxItem = getItem(record);
                    listBoxItem.index = i;
                    me.items[i] = listBoxItem;

                    var key = listBoxItem.value;
                    if (listBoxItem.value == "" || listBoxItem.value == null) key = i;
                    me.itemsByValue[key] = listBoxItem;
                }
                me._render();
                me._raiseEvent('6');
            }

            initadapter(this);

            var me = this;
            switch (source.datatype) {
                case "local":
                case "array":
                default:
                    if (source.localdata != null) {
                        dataadapter.unbindBindingUpdate(this.element.id);
                        dataadapter.dataBind();
                        updatefromadapter(this);
                        dataadapter.bindBindingUpdate(this.element.id, function (updatetype) {
                            updatefromadapter(me, updatetype);
                        });
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                case "csv":
                case "tab":
                    {
                        if (source.localdata != null) {
                            dataadapter.unbindBindingUpdate(this.element.id);
                            dataadapter.dataBind();
                            updatefromadapter(this);
                            dataadapter.bindBindingUpdate(this.element.id, function () {
                                updatefromadapter(me);
                            });
                            return;
                        }

                        var postdata = {};
                        if (dataadapter._options.data) {
                            $.extend(dataadapter._options.data, postdata);
                        }
                        else {
                            if (source.data) {
                                $.extend(postdata, source.data);
                            }
                            dataadapter._options.data = postdata;
                        }
                        var updateFunc = function () {
                            updatefromadapter(me);
                        }

                        dataadapter.unbindDownloadComplete(me.element.id);
                        dataadapter.bindDownloadComplete(me.element.id, updateFunc);

                        dataadapter.dataBind();
                    }
            }
        },

        loadItems: function (items) {
            if (items == null) {
                this.groups = new Array();
                this.items = new Array();
                this.visualItems = new Array();
                return;
            }

            var self = this;
            var index = 0;
            var length = 0;
            var itemIndex = 0;
            this.groups = new Array();
            this.items = new Array();
            this.visualItems = new Array();
            var listItems = new Array();
            this.itemsByValue = new Array();

            $.map(items, function (item) {
                if (item == undefined)
                    return null;

                var listBoxItem = new $.jqx._jqxListBox.item();
                var group = item.group;
                var groupHtml = item.groupHtml;
                var title = item.title;

                if (title == null || title == undefined) {
                    title = '';
                }

                if (group == null || group == undefined) {
                    group = '';
                }

                if (groupHtml == null || groupHtml == undefined) {
                    groupHtml = '';
                }

                if (!self.groups[group]) {
                    self.groups[group] = { items: new Array(), index: -1, caption: group, captionHtml: groupHtml };
                    index++;

                    var groupID = index + 'jqxGroup';
                    self.groups[groupID] = self.groups[group];
                    length++;
                    self.groups.length = length;
                }

                var uniqueGroup = self.groups[group];
                uniqueGroup.index++;
                uniqueGroup.items[uniqueGroup.index] = listBoxItem;

                if (typeof item === "string") {
                    listBoxItem.label = item;
                    listBoxItem.value = item;
                }
                else if (item.label == null && item.value == null && item.html == null && item.group == null && item.groupHtml == null) {
                    listBoxItem.label = item.toString();
                    listBoxItem.value = item.toString();
                }
                else {
                    listBoxItem.label = item.label || item.value;
                    listBoxItem.value = item.value || item.label;
                }

                if (typeof item != "string") {
                    if (self.displayMember != "") {
                        if (item[self.displayMember]) {
                            listBoxItem.label = item[self.displayMember];
                        }
                    }

                    if (self.valueMember != "") {
                        listBoxItem.value = item[self.valueMember];
                    }
                }

                listBoxItem.hasThreeStates = item.hasThreeStates != undefined ? item.hasThreeStates : true;
                listBoxItem.originalItem = item;
                listBoxItem.title = title;
                listBoxItem.html = item.html || '';
                if (item.html && item.html != '') {
               //     listBoxItem.label = listBoxItem.value = item.html;
                    if (title && title != '') {
             //           listBoxItem.label = listBoxItem.value = title;
                    }
                }

                listBoxItem.group = group;
                listBoxItem.checked = item.checked || false;
                listBoxItem.groupHtml = item.groupHtml || '';
                listBoxItem.disabled = item.disabled || false;
                listBoxItem.visible = item.visible || true;
                listBoxItem.index = itemIndex;
                listItems[itemIndex] = listBoxItem;
                itemIndex++;
                return listBoxItem;
            });

            var itemsArray = new Array();
            var uniqueItemIndex = 0;

            if (this.fromSelect == undefined || this.fromSelect == false) {
                for (var indx = 0; indx < length; indx++) {
                    var index = indx + 1;
                    var groupID = index + 'jqxGroup';
                    var group = this.groups[groupID];
                    if (group == undefined || group == null)
                        break;

                    if (indx == 0 && group.caption == '' && group.captionHtml == '' && length <= 1) {
                        return group.items;
                    }
                    else {
                        var listBoxItem = new $.jqx._jqxListBox.item();
                        listBoxItem.isGroup = true;
                        listBoxItem.label = group.caption;
                        if (group.caption == '' && group.captionHtml == '') {
                            group.caption = this.emptyGroupText;
                            listBoxItem.label = group.caption;
                        }

                        listBoxItem.html = group.captionHtml;
                        itemsArray[uniqueItemIndex] = listBoxItem;
                        var key = listBoxItem.value;
                        if (listBoxItem.value == "" || listBoxItem.value == null) key = uniqueItemIndex;
                        self.itemsByValue[key] = listBoxItem;

                        uniqueItemIndex++;
                    }

                    for (var j = 0; j < group.items.length; j++) {
                        itemsArray[uniqueItemIndex] = group.items[j];
                        uniqueItemIndex++;
                    }
                }
            }
            else {
                var uniqueItemIndex = 0;
                var checkedGroups = new Array();

                $.each(listItems, function () {
                    if (!checkedGroups[this.group]) {
                        if (this.group != '') {
                            var listBoxItem = new $.jqx._jqxListBox.item();
                            listBoxItem.isGroup = true;
                            listBoxItem.label = this.group;
                            itemsArray[uniqueItemIndex] = listBoxItem;
                            uniqueItemIndex++;
                            checkedGroups[this.group] = true;
                        }
                    }

                    itemsArray[uniqueItemIndex] = this;
                    var key = this.value;
                    if (this.value == "" || this.value == null) key = uniqueItemIndex - 1;
                    self.itemsByValue[key] = this;

                    uniqueItemIndex++;
                });
            }

            return itemsArray;
        },

        _mapItem: function (item) {
            var listBoxItem = new $.jqx._jqxListBox.item();
            if (typeof item === "string") {
                listBoxItem.label = item;
                listBoxItem.value = item;
            }
            else if (typeof item === 'number') {
                listBoxItem.label = item.toString();
                listBoxItem.value = item.toString();
            }
            else {
                listBoxItem.label = item.label || item.value;
                listBoxItem.value = item.value || item.label;
            }
            if (listBoxItem.label == undefined && listBoxItem.value == undefined && listBoxItem.html == undefined) {
                listBoxItem.label = listBoxItem.value = item;
            }

            listBoxItem.html = item.html || '';
            listBoxItem.group = item.group || '';
            listBoxItem.title = item.title || '';
            listBoxItem.groupHtml = item.groupHtml || '';
            listBoxItem.disabled = item.disabled || false;
            listBoxItem.visible = item.visible || true;
            return listBoxItem;
        },

        // adds a new item.
        addItem: function (item) {
            if (this.items == undefined || this.items.length == 0) {
                this.source = new Array();
                this.source[0] = item;
                this.refresh();
                return;
            }

            return this.insertAt(item, this.items.length);
        },

        updateAt: function (item, index) {
            if (item != null) {
                var listBoxItem = this._mapItem(item);
                this.items[index].value = listBoxItem.value;
                this.items[index].label = listBoxItem.label;
                this.items[index].html = listBoxItem.html;
                this.items[index].disabled = listBoxItem.disabled;
            }
            this._cachedItemHtml = [];
            this._renderItems();
            if (this.rendered) {
                this.rendered();
            }
        },

        // inserts an item at a specific position.
        insertAt: function (item, index) {
            if (item == null)
                return false;

            this._cachedItemHtml = [];
            if (this.items == undefined || this.items.length == 0) {
                this.source = new Array();
                this.source[0] = item;
                this.refresh();
                if (this.rendered) {
                    this.rendered();
                }
                return false;
            }

            var listBoxItem = this._mapItem(item);
            if (index == -1 || index == undefined || index == null || index >= this.items.length) {
                listBoxItem.index = this.items.length;
                this.items[this.items.length] = listBoxItem;
            }
            else {
                var itemsArray = new Array();
                var currentItemIndex = 0;
                var inserted = false;
                var visualItemIndex = 0;
                for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {
                    if (this.items[itemIndex].isGroup == false) {
                        if (visualItemIndex >= index && !inserted) {
                            itemsArray[currentItemIndex++] = listBoxItem;
                            listBoxItem.index = index;
                            visualItemIndex++;
                            inserted = true;
                        }
                    }

                    itemsArray[currentItemIndex] = this.items[itemIndex];
                    if (!this.items[itemIndex].isGroup) {
                        itemsArray[currentItemIndex].index = visualItemIndex;
                        visualItemIndex++;
                    }
                    currentItemIndex++;
                }

                this.items = itemsArray;
            }

            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var value = vScrollInstance.value;
            vScrollInstance.setPosition(0);
            if ((this.allowDrag && this._enableDragDrop) || (this.virtualSize && this.virtualSize.height < 10 + this.host.height())) {
                this._addItems(true);
            }
            else {
                this._addItems(false);
            }
            this._renderItems();
            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
            }
            vScrollInstance.setPosition(value);
            if (this.rendered) {
                this.rendered();
            }
            return true;
        },

        // removes an item from a specific position.
        removeAt: function (index) {
            if (index < 0 || index > this.items.length - 1)
                return false;

            var itemHeight = this.items[index].height;
            this.items.splice(index, 1);
            var itemsArray = new Array();
            var currentItemIndex = 0;
            var inserted = false;
            var visualItemIndex = 0;
            for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {
                itemsArray[currentItemIndex] = this.items[itemIndex];
                if (!this.items[itemIndex].isGroup) {
                    itemsArray[currentItemIndex].index = visualItemIndex;
                    visualItemIndex++;
                }
                currentItemIndex++;
            }

            this.items = itemsArray;

            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var value = vScrollInstance.value;
            vScrollInstance.setPosition(0);

            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            if (this.items.length > 0) {
                if (this.virtualSize) {
                    this.virtualSize.height -= itemHeight;
                    var virtualItemsCount = this.virtualSize.itemsPerPage * 2;
                    if (this.autoHeight) {
                        virtualItemsCount = this.items.length;
                    }

                    this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                }

                this._updatescrollbars();
            }
            else {
                this._addItems();
            }
            this._renderItems();
            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
            }
            if (this.vScrollBar.css('visibility') != 'hidden') {
                vScrollInstance.setPosition(value);
            }
            else {
                vScrollInstance.setPosition(0);
            }
            if (this.rendered) {
                this.rendered();
            }

            return true;
        },

        removeItem: function (item) {
            this.removeAt(item.index);
        },

        // gets all items.
        getItems: function () {
            return this.items;
        },

        // disables an item at position.
        disableAt: function (index) {
            if (!this.items)
                return false;

            if (index < 0 || index > this.items.length - 1)
                return false;

            this.items[index].disabled = true;
            this._renderItems();
            return true;
        },

        // enables an item at position.
        enableAt: function (index) {
            if (!this.items)
                return false;

            if (index < 0 || index > this.items.length - 1)
                return false;

            this.items[index].disabled = false;
            this._renderItems();
            return true;
        },

        destroy: function () {
            this._removeHandlers();
            this.vScrollBar.jqxScrollBar('destroy');
            this.hScrollBar.jqxScrollBar('destroy');
            this.vScrollBar.remove();
            this.hScrollBar.remove();
            this.host
			.removeClass("jqx-listbox jqx-rc-all");
            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (this._stopEvents == true)
                return true;

            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;
            this._updateInputSelection();
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            if (this.host != null) {
                var result = this.host.trigger(event);
            }
            return result;
        }
    })
})(jQuery);

(function ($) {
    $.jqx._jqxListBox.item = function () {
        var result =
        {
            group: '',
            groupHtml: '',
            selected: false,
            isGroup: false,
            highlighted: false,
            value: null,
            label: '',
            html: null,
            visible: true,
            disabled: false,
            element: null,
            width: null,
            height: null,
            initialTop: null,
            top: null,
            left: null,
            title: '',
            index: -1,
            checkBoxElement: null,
            originalItem: null,
            checked: false,
            visibleIndex: -1
        }
        return result;
    }
})(jQuery);/*
*   Depends:
*       jqxcore.js
*       jqxbuttons.js
*       jqxpanel.js
*       jqxscrollbar.js
*       jqxcheckbox.js (optional to enable the checkboxes feature.)
*/

(function ($) {

    $.jqx.jqxWidget("jqxTree", "", {});

    $.extend($.jqx._jqxTree.prototype, {
        defineInstance: function () {
            //Type: Array
            //Gets the tree's items.
            this.items = new Array();
            //Type: Number.
            //Default: null.
            //Sets the width.
            this.width = null;
            //Type: Number.
            //Default: null.
            //Sets the height.
            this.height = null;
            //Type: String.
            //Default: easeInOutSine.
            //Gets or sets the animation's easing to one of the JQuery's supported easings.         
            this.easing = 'easeInOutCirc';
            //Type: Number.
            //Default: 'fast'.
            //Gets or sets the duration of the show animation.         
            this.animationShowDuration = 'fast';
            //Type: Number.
            //Default: 'fast'.
            //Gets or sets the duration of the hide animation.
            this.animationHideDuration = 'fast';
            //Type: Array.
            this.treeElements = new Array();
            //Type: Boolean.
            //Default: true.
            //Enables or disables the tree.
            this.disabled = false;
            // Type: Boolean
            // Default: true
            // enables or disables the hover state.
            this.enableHover = true;
            // Type: Boolean
            // Default: true
            // enables or disables the key navigation.
            this.keyboardNavigation = true;
            this.enableKeyboardNavigation = true;
            // Type: String
            // Default: click
            // Gets or sets user interaction used for expanding or collapsing any item. Possible values ['click', 'dblclick'].
            this.toggleMode = 'dblclick';
            // Type: Object
            // Default: null
            // data source.
            this.source = null;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the tree should display a checkbox next to each item.
            this.checkboxes = false;
            this.checkSize = 13;
            this.toggleIndicatorSize = 16;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the tree checkboxes have three states - checked, unchecked and indeterminate.           
            this.hasThreeStates = false;
            // Type: Object
            // Default: null
            // Private
            // gets the selected item. To select an item, use the selectItem function.
            this.selectedItem = null;
            this.touchMode = 'auto';
            // tree events.
            // expand is triggered when the user expands a tree item.
            // collapse is triggered when the user collapses a tree item.
            // select is triggered when the user selects a tree item.
            // add is triggered when the user adds a new tree item.
            // remove is triggered when the user removes a tree item.
            // checkchange is triggered when the user checks, unchecks or the checkbox is in indeterminate state.
            this.allowDrag = true;
            this.allowDrop = true;
            this.animationHideDelay = 0;
            this.submitCheckedItems = false;
            // Possible values: 'none, 'default', 'copy'
            this.dropAction = 'default';
            this.events =
		    [
                'expand', 'collapse', 'select', 'initialized', 'added', 'removed', 'checkChange', 'dragEnd', 'dragStart'
            ];
        },

        createInstance: function (args) {
            var self = this;

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (self.disabled) {
                    self.host.addClass(self.toThemeProperty('jqx-tree-disabled'));
                }
                else {
                    self.host.removeClass(self.toThemeProperty('jqx-tree-disabled'));
                }
            }

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
            }

            this.host.attr('tabIndex', 1);

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-tree-disabled'));
            }

            if (this.host.jqxDragDrop) {
                jqxTreeDragDrop();
            }

            this.originalInnerHTML = this.element.innerHTML;
            this.createdTree = false;
            if (this.element.innerHTML.indexOf('UL')) {
                var innerElement = this.host.find('ul:first');
                if (innerElement.length > 0) {
                    this.createTree(innerElement[0]);
                    this.createdTree = true;
                }
            }

            if (this.source != null) {
                var html = this.loadItems(this.source);
                this.element.innerHTML = html;
                var innerElement = this.host.find('ul:first');
                if (innerElement.length > 0) {
                    this.createTree(innerElement[0]);
                    this.createdTree = true;
                }
            }

            this._itemslength = this.items.length;

            if (!this.createdTree) {
                if (this.host.find('ul').length == 0) {
                    this.host.append($('<ul></ul>'));
                    var innerElement = this.host.find('ul:first');
                    if (innerElement.length > 0) {
                        this.createTree(innerElement[0]);
                        this.createdTree = true;
                    }

                    this.createdTree = true;
                }
            }

            if (this.createdTree == true) {
                this._render();
                this._handleKeys();
            }

            this._updateCheckLayout(0);
        },

        checkItems: function (item, baseItem) {
            var me = this;
            if (item != null) {
                var count = 0;
                var hasIndeterminate = false;
                var itemsCount = 0;

                var childItems = $(item.element).find('li');
                itemsCount = childItems.length;

                $.each(childItems, function (index) {
                    var child = me.itemMapping["id" + this.id].item;
                    if (child.checked != false) {
                        if (child.checked == null) {
                            hasIndeterminate = true;
                        }
                        count++;
                    }
                });

                if (item != baseItem) {
                    if (count == itemsCount) {
                        this.checkItem(item.element, true);
                    }
                    else {
                        if (count > 0) {
                            this.checkItem(item.element, null);
                        }
                        else this.checkItem(item.element, false);

                    }
                }
                else {
                    var checked = baseItem.checked;
                    var childItems = $(baseItem.element).find('li');
                    $.each(childItems, function () {
                        var child = me.itemMapping["id" + this.id].item;
                        me.checkItem(this, checked);
                    });
                }

                this.checkItems(this._parentItem(item), baseItem);
            }
            else {
                var checked = baseItem.checked;
                var childItems = $(baseItem.element).find('li');
                $.each(childItems, function () {
                    var child = me.itemMapping["id" + this.id].item;
                    me.checkItem(this, checked);
                });
            }
        },

        _handleKeys: function () {
            var self = this;
            this.addHandler(this.host, 'keydown', function (event) {
                var key = event.keyCode;
                if (self.keyboardNavigation || self.enableKeyboardNavigation) {
                    if (self.selectedItem != null) {
                        var element = self.selectedItem.element;
                        switch (key) {
                            case 32:
                                if (self.checkboxes) {
                                    self.fromKey = true;
                                    var checked = $(self.selectedItem.checkBoxElement).jqxCheckBox('checked');
                                    self.checkItem(self.selectedItem.element, !checked);
                                    if (self.hasThreeStates) {
                                        self.checkItems(self.selectedItem, self.selectedItem);
                                    }
                                }
                                return false;
                            case 33:
                                var itemsOnPage = self._getItemsOnPage();
                                var prevItem = self.selectedItem;
                                for (i = 0; i < itemsOnPage; i++) {
                                    prevItem = self._prevVisibleItem(prevItem);
                                }
                                if (prevItem != null) {
                                    self.selectItem(prevItem.element);
                                    self.ensureVisible(prevItem.element);
                                }
                                else {
                                    self.selectItem(self._firstItem().element);
                                    self.ensureVisible(self._firstItem().element);
                                }
                                return false;
                            case 34:
                                var itemsOnPage = self._getItemsOnPage();
                                var nextItem = self.selectedItem;
                                for (i = 0; i < itemsOnPage; i++) {
                                    nextItem = self._nextVisibleItem(nextItem);
                                }
                                if (nextItem != null) {
                                    self.selectItem(nextItem.element);
                                    self.ensureVisible(nextItem.element);
                                }
                                else {
                                    self.selectItem(self._lastItem().element);
                                    self.ensureVisible(self._lastItem().element);
                                }
                                return false;
                            case 37:
                                if (self.selectedItem.hasItems) {
                                    self.collapseItem(element);
                                }
                                return false;
                            case 39:
                                if (self.selectedItem.hasItems) {
                                    self.expandItem(element);
                                }
                                return false;
                            case 13:
                                if (self.selectedItem.hasItems) {
                                    if (self.selectedItem.isExpanded) {
                                        self.collapseItem(element);
                                    }
                                    else {
                                        self.expandItem(element);
                                    }
                                }
                                return false;
                            case 36:
                                self.selectItem(self._firstItem().element);
                                self.ensureVisible(self._firstItem().element);
                                return false;
                            case 35:
                                self.selectItem(self._lastItem().element);
                                self.ensureVisible(self._lastItem().element);
                                return false;
                            case 38:
                                var prevItem = self._prevVisibleItem(self.selectedItem);
                                if (prevItem != null) {
                                    self.selectItem(prevItem.element);
                                    self.ensureVisible(prevItem.element);
                                }
                                return false;
                            case 40:
                                var nextItem = self._nextVisibleItem(self.selectedItem);
                                if (nextItem != null) {
                                    self.selectItem(nextItem.element);
                                    self.ensureVisible(nextItem.element);
                                }
                                return false;
                        }
                    }
                }
            });
        },

        _firstItem: function () {
            var item = null;
            var me = this;
            var innerElement = this.host.find('ul:first');
            var liTags = $(innerElement).find('li');

            for (i = 0; i <= liTags.length - 1; i++) {
                var listTag = liTags[i];
                item = this.itemMapping["id" + listTag.id].item;
                if (me._isVisible(item)) {
                    return item;
                }
            }

            return null;
        },

        _lastItem: function () {
            var item = null;
            var me = this;
            var innerElement = this.host.find('ul:first');
            var liTags = $(innerElement).find('li');

            for (i = liTags.length - 1; i >= 0; i--) {
                var listTag = liTags[i];
                item = this.itemMapping["id" + listTag.id].item;
                if (me._isVisible(item)) {
                    return item;
                }
            }

            return null;
        },

        _parentItem: function (item) {
            if (item == null || item == undefined)
                return null;

            var parent = item.parentElement;
            var parentItem = null;

            $.each(this.items, function () {
                if (this.element == parent) {
                    parentItem = this;
                    return false;
                }
            });

            return parentItem;
        },

        _nextVisibleItem: function (item) {
            if (item == null || item == undefined)
                return null;

            var currentItem = item;
            while (currentItem != null) {
                currentItem = currentItem.nextItem;
                if (this._isVisible(currentItem) && !currentItem.disabled)
                    return currentItem;
            }

            return null;
        },

        _prevVisibleItem: function (item) {
            if (item == null || item == undefined)
                return null;

            var currentItem = item;
            while (currentItem != null) {
                currentItem = currentItem.prevItem;
                if (this._isVisible(currentItem) && !currentItem.disabled)
                    return currentItem;
            }

            return null;
        },

        _isVisible: function (item) {
            if (item == null || item == undefined)
                return false;

            if (!this._isElementVisible(item.element))
                return false;

            var currentItem = this._parentItem(item);

            if (currentItem == null)
                return true;

            if (currentItem != null) {
                if (!this._isElementVisible(currentItem.element)) {
                    return false;
                }

                if (currentItem.isExpanded) {
                    while (currentItem != null) {
                        currentItem = this._parentItem(currentItem);
                        if (currentItem != null && !this._isElementVisible(currentItem.element)) {
                            return false;
                        }

                        if (currentItem != null && !currentItem.isExpanded)
                            return false;
                    }
                }
                else {
                    return false;
                }
            }

            return true;
        },

        _getItemsOnPage: function () {
            var itemsCount = 0;
            var position = this.panel.jqxPanel('getVScrollPosition');
            var height = parseInt(this.host.height());
            var itemsHeight = 0;
            var firstItem = this._firstItem();

            if (parseInt($(firstItem.element).height()) > 0) {
                while (itemsHeight <= height) {
                    itemsHeight += parseInt($(firstItem.element).outerHeight());
                    itemsCount++;
                }
            }

            return itemsCount;
        },

        _isElementVisible: function (element) {
            if (element == null)
                return false;

            if ($(element).css('display') != 'none' && $(element).css('visibility') != 'hidden') {
                return true;
            }

            return false;
        },

        refresh: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            if (this.panel) {
                if (this.width != null && this.width.toString().indexOf("%") != -1) {
                    var me = this;
                    this.panel.jqxPanel('width', '100%');
                    $(window).resize(function () {
                        me._calculateWidth();
                    });
                }
                else {
                    this.panel.jqxPanel('width', this.host.width());
                }
                this.panel.jqxPanel('height', this.height);
                this.panel.jqxPanel('_arrange');
            }
            this._calculateWidth();
        },

        loadItems: function (items) {
            if (items == null) {
                return;
            }

            var self = this;
            this.items = new Array();
            var html = '<ul>';
            $.map(items, function (item) {
                if (item == undefined)
                    return null;

                html += self._parseItem(item);
            });

            html += '</ul>';
            return html;
        },

        _parseItem: function (item) {
            var html = "";

            if (item == undefined)
                return null;

            var label = item.label;
            if (!item.label && item.html) {
                label = item.html;
            }
            if (!label) {
                label = "Item";
            }

            if (typeof item === 'string') {
                label = item;
            }

            var expanded = false;
            if (item.expanded != undefined && item.expanded) {
                expanded = true;
            }

            var locked = false;
            if (item.locked != undefined && item.locked) {
                locked = true;
            }

            var selected = false;
            if (item.selected != undefined && item.selected) {
                selected = true;
            }

            var disabled = false;
            if (item.disabled != undefined && item.disabled) {
                disabled = true;
            }

            var checked = false;
            if (item.checked != undefined && item.checked) {
                checked = true;
            }

            var icon = item.icon;
            var iconsize = item.iconsize;

            html += '<li';
            if (expanded) {
                html += ' item-expanded="true" ';
            }

            if (locked) {
                html += ' item-locked="true" ';
            }

            if (disabled) {
                html += ' item-disabled="true" ';
            }

            if (selected) {
                html += ' item-selected="true" ';
            }

            if (iconsize) {
                html += ' item-iconsize="' + item.iconsize + '" ';
            }

            if (icon != null && icon != undefined) {
                html += ' item-icon="' + icon + '" ';
            }

            if (item.label && !item.html) {
                html += ' item-label="' + label + '" ';
            }

            if (item.value != null) {
                html += ' item-value="' + item.value + '" ';
            }

            if (item.checked != undefined) {
                html += ' item-checked="' + checked + '" ';
            }

            if (item.id != undefined) {
                html += ' id="' + item.id + '" ';
            }
            else {
                html += ' id="' + this.createID() + '" ';
            }

            html += '>' + label;

            if (item.items) {
                html += this.loadItems(item.items);
            }

            html += '</li>';
            return html;
        },

        // ensures the visibility of an element.
        // @ param element.
        ensureVisible: function (element) {
            if (element == null || element == undefined)
                return;

            var position = this.panel.jqxPanel('getVScrollPosition');
            var hposition = this.panel.jqxPanel('getHScrollPosition');
            var height = parseInt(this.host.height());
            var elementPosition = $(element).position().top;

            if (elementPosition <= position || elementPosition >= height + position) {
                this.panel.jqxPanel('scrollTo', hposition, elementPosition - height + $(element).outerHeight());
            }
        },

        hitTest: function (left, top) {
            var me = this;
            var treeInstance = this;
            var treeItem = null;
            if (treeInstance._visibleItems) {
                var hostLeft = parseInt(treeInstance.host.offset().left);
                var hostWidth = treeInstance.host.outerWidth();

                $.each(treeInstance._visibleItems, function (index) {
                    if (left >= hostLeft && left < hostLeft + hostWidth)
                        if (this.top + 5 < top && top < this.top + this.height) {
                            var parentElement = $(this.element).parents('li:first');
                            if (parentElement.length > 0) {
                                treeItem = treeInstance.getItem(parentElement[0]);
                                if (treeItem != null) {
                                    treeItem.height = this.height;
                                    treeItem.top = this.top;
                                    return false;
                                }
                            }
                        }
                });
            }
            return treeItem;
        },

        //// adds an element.
        //// @param Array of items
        //// @param id of parent item.
        //addTo: function (items, parentElement, refresh) {
        //    if (items == undefined || items == null) {
        //        return;
        //    }

        //    var me = this;
        //    var array = new Array();

        //    if (!$.isArray(items)) {
        //        array[0] = items;
        //    }
        //    else array = items;

        //    if (this.element.innerHTML.indexOf('UL')) {
        //        var innerElement = me.host.find('ul:first');
        //    }
        //    if (innerElement.length == 0)
        //        return;

        //    $.each(array, function () {
        //        var item = this;
        //        var html = me._parseItem(item);
        //        if (html.length > 0) {
        //            if (parentElement == undefined && parentElement == null) {
        //                var element = $(html);
        //                innerElement.append(element);
        //                me._createItem(element[0]);
        //            }
        //            else {
        //                parentElement = $(parentElement);
        //                var parentUL = parentElement.find('ul:first');
        //                var element = null;
        //                if (parentUL.length == 0) {
        //                    ulElement = $('<ul></ul>');
        //                    $(parentElement).append(ulElement);
        //                    element = $(html);
        //                    parentUL = parentElement.find('ul:first');
        //                    var item = me.itemMapping["id" + parentElement[0].id].item;
        //                    item.subtreeElement = parentUL[0];
        //                    item.hasItems = true;
        //                    parentUL.addClass(me.toThemeProperty('jqx-tree-dropdown'));
        //                    parentUL.append(element);
        //                    element = parentUL.find('li:first');
        //                }
        //                else {
        //                    element = $(html);
        //                    parentUL.append(element);
        //                    if (this.items != undefined) {
        //                        this.hasItems = true;
        //                        element.find('ul').addClass(me.toThemeProperty('jqx-tree-dropdown'));
        //                        this.subtreeElement = element.find('ul')[0];
        //                    }
        //                }
        //                me._createItem(element[0]);
        //            }
        //        }
        //    });

        //    if (refresh == false) {
        //        this._raiseEvent('4', { items: items });
        //        return;
        //    }

        //    me._updateItemsNavigation();
        //    me._render();
        //    this._raiseEvent('4', { items: items });
        //    if (this.allowDrag && this._enableDragDrop) {
        //        this._enableDragDrop();
        //    }
        //},

        addTo: function (items, parentElement, refresh) {
            var treeInstance = this;
        
            var array = new Array();

            if (!$.isArray(items)) {
                array[0] = items;
            }
            else array = items;

            var html = "";
            var me = this;
            $.each(array, function () {
                html += me._parseItem(this);
            });
            var el = $('<div>' + html + '</div>');
            if (treeInstance.element.innerHTML.indexOf('UL')) {
                var innerElement = treeInstance.host.find('ul:first');
            }

            if (parentElement == undefined && parentElement == null) {
                innerElement.append(el);
            }
            else {
                parentElement = $(parentElement);
                var parentUL = parentElement.find('ul:first');
                if (parentUL.length == 0) {
                    ulElement = $('<ul></ul>');
                    $(parentElement).append(ulElement);
                    parentUL = parentElement.find('ul:first');
                    var item = treeInstance.itemMapping["id" + parentElement[0].id].item;
                    item.subtreeElement = parentUL[0];
                    item.hasItems = true;
                    parentUL.addClass(treeInstance.toThemeProperty('jqx-tree-dropdown'));
                    parentUL.append(el);
                    var element = parentUL.find('li:first');
                    item.parentElement = element;
                }
                else {
                    parentUL.append(el);
                }
            }

            var liTags = $(el).find('li');
            for (var index = 0; index < liTags.length; index++) {
                this._createItem(liTags[index]);
            }

            var update = function (drag) {
                me._refreshMapping(false);
                me._updateItemsNavigation();
                if (drag && me.allowDrag && me._enableDragDrop) {
                    me._enableDragDrop();
                }
                if (me.selectedItem != null) {
                    $(me.selectedItem.titleElement).addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    $(me.selectedItem.titleElement).addClass(me.toThemeProperty('jqx-tree-item-selected'));
                }
            }

            if (refresh == false) {
                update(true);
                this._raiseEvent('4', { items: this.getItems() });
                return;
            }

            update(false);
            me._render();
            this._raiseEvent('4', { items: this.getItems() });
        },

        // removes an element.
        // @param element
        removeItem: function (element, refresh) {
            if (element == undefined || element == null) {
                return;
            }

            var me = this;
            var id = element.id;

            if (this.host.find('#' + element.id).length > 0) {
                $(element).remove();
            }

            if (refresh == false) {
                this._raiseEvent('5');
                return;
            }

            me._updateItemsNavigation();
            me._render();
            if (me.selectedItem != null) {
                if (me.selectedItem.element == element) {
                    $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-selected'));
                    me.selectedItem = null;
                }
            }
            this._raiseEvent('5');
        },

        clear: function () {
            this.items = new Array();
            this.itemMapping = new Array();
            var element = this.host.find('ul:first');
            if (element.length > 0) {
                element[0].innerHTML = "";
            }
            this.selectedItem = null;
        },

        // disables a tree item.
        // @param element
        disableItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.element == element) {
                    // me.collapseItem(item.element);
                    item.disabled = true;
                    //      $(item.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    //      $(item.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-selected'));
                    $(item.titleElement).addClass(me.toThemeProperty('jqx-fill-state-disabled'));
                    $(item.titleElement).addClass(me.toThemeProperty('jqx-tree-item-disabled'));
                    if (me.checkboxes && item.checkBoxElement) {
                        $(item.checkBoxElement).jqxCheckBox({ disabled: true });
                    }
                    return false;
                }
            });
        },

        _updateInputSelection: function () {
            if (this.input) {
                if (this.selectedItem == null) {
                    this.input.val("");
                }
                else {
                    var label = this.selectItem.value;
                    if (label == null) label = this.selectedItem.label;
                    this.input.val(label);
                }
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    if (this.submitCheckedItems) {
                        var str = "";
                        for (var i = 0; i < items.length; i++) {
                            var value = items[i].value;
                            if (value == null) value = items[i].label;
                            if (i == items.length - 1) {
                                str += value;
                            }
                            else {
                                str += value + ",";
                            }
                        }
                        this.input.val(str);
                    }
                }
            }
        },

        getCheckedItems: function()
        {
            var checkedItems = new Array();
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.checked) checkedItems.push(item);
            });
            return checkedItems;
        },

        getUncheckedItems: function () {
            var checkedItems = new Array();
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (!item.checked) checkedItems.push(item);
            });
            return checkedItems;
        },

        checkAll: function()
        {
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (!item.disabled) {
                    item.checked = true;
                    $(item.checkBoxElement).jqxCheckBox('_setState', true);
                 }
            });
            this._raiseEvent('6', { element: this, checked: true });
        },

        uncheckAll: function () {
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (!item.disabled) {
                    item.checked = false;
                    $(item.checkBoxElement).jqxCheckBox('_setState', false);
                }
            });
            this._raiseEvent('6', { element: this, checked: false });
        },

        // checks a tree item.
        // @param element
        // @param checked state - true, false or null
        checkItem: function (element, checked) {
            if (element == null)
                return false;

            var me = this;
            var stateChanged = false;
            $.each(me.items, function () {
                var item = this;
                if (item.element == element && !item.disabled) {
                    stateChanged = true;
                    item.checked = checked;
                    $(item.checkBoxElement).jqxCheckBox({ checked: checked });
                    return false;
                }
            });

            if (stateChanged) {
                this._raiseEvent('6', { element: element, checked: checked });
                this._updateInputSelection();
            }
        },

        uncheckItem: function(element)
        {
            this.checkItem(element, false);
        },

        // enables a tree item.
        // @param element
        enableItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.element == element) {
                    item.disabled = false;
                    $(item.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                    $(item.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-disabled'));
                    if (me.checkboxes && item.checkBoxElement) {
                        $(item.checkBoxElement).jqxCheckBox({ disabled: false });
                    }
                    return false;
                }
            });
        },

        // enables all items.
        enableAll: function () {
            var me = this;
            $.each(me.items, function () {
                var item = this;
                item.disabled = false;
                $(item.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-disabled'));
                $(item.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                if (me.checkboxes && item.checkBoxElement) {
                    $(item.checkBoxElement).jqxCheckBox({ disabled: false });
                }
            });
        },

        // locks a tree item.
        // @param element
        lockItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.element == element) {
                    item.locked = true;
                    return false;
                }
            });
        },

        // unlocks a tree item.
        // @param element
        unlockItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.element == element) {
                    item.locked = false;
                    return false;
                }
            });
        },

        // gets all tree items.
        getItems: function () {
            return this.items;
        },

        // gets item's instance.
        getItem: function (element) {
            if (element == null || element == undefined)
                return null;

            if (this.itemMapping["id" + element.id]) {
                var item = this.itemMapping["id" + element.id].item;
                return item;
            }

            return null;
        },

        // gets whether the element is expanded.
        isExpanded: function (element) {
            if (element == null || element == undefined)
                return false;

            var item = this.itemMapping["id" + element.id].item;
            if (item != null) {
                return item.isExpanded;
            }

            return false;
        },

        // gets whether the element is selected.
        isSelected: function (element) {
            if (element == null || element == undefined)
                return false;

            var item = this.itemMapping["id" + element.id].item;
            if (item != null) {
                return item == this.selectedItem;
            }

            return false;
        },

        getPrevItem: function (element) {
            var item = this.getItem(element);
            var prevItem = this._prevVisibleItem(item);
            return prevItem;
        },

        getNextItem: function (element) {
            var item = this.getItem(element);
            var nextItem = this._nextVisibleItem(item);
            return nextItem;
        },

        getSelectedItem: function (element) {
            return this.selectedItem;
        },

        // selects an item.
        // @param element
        selectItem: function (element) {
            if (this.disabled)
                return;

            var me = this;

            if (element == null || element == undefined) {
                if (me.selectedItem != null) {
                    $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-selected'));
                    me.selectedItem = null;
                }
                return;
            }

            if (this.selectedItem != null && this.selectedItem.element == element)
                return;

            var oldSelectedElement = this.selectedItem != null ? this.selectedItem.element : null;
            $.each(me.items, function () {
                var item = this;
                if (!item.disabled) {
                    if (item.element == element) {
                        if (me.selectedItem == null || (me.selectedItem != null && me.selectedItem.titleElement != item.titleElement)) {
                            if (me.selectedItem != null) {
                                $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                                $(me.selectedItem.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-selected'));
                            }

                            $(item.titleElement).addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $(item.titleElement).addClass(me.toThemeProperty('jqx-tree-item-selected'));
                            me.selectedItem = item;
                        }
                    }
                }
            });
            this._updateInputSelection();
            this._raiseEvent('2', { element: element, prevElement: oldSelectedElement });
        },

        // collapses all items.
        collapseAll: function () {
            var me = this;
            var items = me.items;
            $.each(items, function () {
                var item = this;
                if (item.isExpanded == true) {
                    me._collapseItem(me, item);
                }
            });
        },

        // expands all items.
        expandAll: function () {
            var me = this;

            $.each(this.items, function () {
                var item = this;
                if (item.hasItems) {
                    me._expandItem(me, item);
                }
            });
        },

        //  @param element
        //  expands a tree item by its html element.
        collapseItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(this.items, function () {
                var item = this;
                if (item.isExpanded == true && item.element == element) {
                    me._collapseItem(me, item);
                    return false;
                }
            });

            return true;
        },

        // @param element
        // expands a tree item by its html element.
        expandItem: function (element) {
            if (element == null)
                return false;

            var me = this;
            $.each(me.items, function () {
                var item = this;

                if (item.isExpanded == false && item.element == element && !item.disabled && !item.locked) {
                    me._expandItem(me, item);
                    if (item.parentElement) {
                        me.expandItem(item.parentElement);
                    }
                }
            });

            return true;
        },

        _getClosedSubtreeOffset: function (item) {
            var $subtree = $(item.subtreeElement);
            var top = -$subtree.outerHeight();
            var left = -$subtree.outerWidth();
            left = 0;
            return { left: left, top: top };
        },

        _collapseItem: function (me, item, subs, force) {
            if (me == null || item == null)
                return false;

            if (item.disabled)
                return false;

            if (me.disabled)
                return false;

            if (me.locked)
                return false;

            var $subtree = $(item.subtreeElement);

            var subtreeOffset = this._getClosedSubtreeOffset(item);
            var top = subtreeOffset.top;
            var left = subtreeOffset.left;

            $treeElement = $(item.element);
            var delay = me.animationHideDelay;
            delay = 0;

            if ($subtree.data('timer').show != null) {
                clearTimeout($subtree.data('timer').show);
                $subtree.data('timer').show = null;
            }

            var hideFunc = function () {
                item.isExpanded = false;

                if (me.checkboxes) {
                    var checkboxes = $subtree.find('.chkbox');
                    checkboxes.stop();
                    checkboxes.css('opacity', 1);
                    $subtree.find('.chkbox').animate({ opacity: 0 }, 50);
                }
                var $arrowSpan = $(item.arrow);
                if ($arrowSpan.length > 0) {
                    $arrowSpan.removeClass();
                    $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse'));
                }

                $subtree.slideUp(me.animationHideDuration, function () {
                    item.isCollapsing = false;
                    me._calculateWidth();
                    var $arrowSpan = $(item.arrow);
                    if ($arrowSpan.length > 0) {
                        $arrowSpan.removeClass();
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse'));
                    }
                    $subtree.hide();
                    me._raiseEvent('1', { element: item.element });
                })
            }

            if (delay > 0) {
                $subtree.data('timer').hide = setTimeout(function () {
                    hideFunc();
                }, delay);
            }
            else {
                hideFunc();
            }
        },

        _expandItem: function (me, item) {
            if (me == null || item == null)
                return false;

            if (item.isExpanded)
                return false;

            if (item.locked)
                return false;

            if (item.disabled)
                return false;

            if (me.disabled)
                return false;

            var $subtree = $(item.subtreeElement);
            // stop hiding process.
            if (($subtree.data('timer')) != null && $subtree.data('timer').hide != null) {
                clearTimeout($subtree.data('timer').hide);
            }

            var $treeElement = $(item.element);

            var top = 0;
            var left = 0;

            if (parseInt($subtree.css('top')) == top) {
                item.isExpanded = true;
                return;
            }

            var $arrowSpan = $(item.arrow);
            if ($arrowSpan.length > 0) {
                $arrowSpan.removeClass();
                $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand'));
            }

            if (me.checkboxes) {
                var checkboxes = $subtree.find('.chkbox');
                checkboxes.stop();
                checkboxes.css('opacity', 0);
                checkboxes.animate({ opacity: 1 }, me.animationShowDuration);
            }

            $subtree.slideDown(me.animationShowDuration, me.easing,
                        function () {
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0) {
                                $arrowSpan.removeClass();
                                $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand'));
                            }
                            item.isExpanded = true;
                            item.isExpanding = false;
                            me._raiseEvent('0', { element: item.element });
                            me._calculateWidth();
                        }) //animate subtree into view         
            //     }, 0);

            if (me.checkboxes) {
                me._updateCheckItemLayout(item);
                if (item.subtreeElement) {
                    var listTags = $(item.subtreeElement).find('li');
                    $.each(listTags, function () {
                        var subItem = me.getItem(this);
                        if (subItem != null) {
                            me._updateCheckItemLayout(subItem);
                        }
                    });
                }
            }
        },

        _calculateWidth: function () {
            var me = this;
            var checkboxOffset = this.checkboxes ? 20 : 0;
            var maxWidth = 0;

            $.each(this.items, function () {
                var height = $(this.element).height();
                if (height != 0) {
                    var titleWidth = this.titleElement.outerWidth() + 20 + checkboxOffset + (1 + this.level) * 25;
                    maxWidth = Math.max(maxWidth, titleWidth);
                    if (this.hasItems) {
                        var paddingOffset = parseInt($(this.titleElement).css('padding-top'));
                        if (isNaN(paddingOffset)) {
                            paddingOffset = 0;
                        }

                        paddingOffset = paddingOffset * 2;
                        paddingOffset += 2;

                        var offset = (paddingOffset + $(this.titleElement).height()) / 2 - 17 / 2;
                        if ($.browser.msie && $.browser.version < 9) {
                            $(this.arrow).css('margin-top', '3px');
                        }
                        else {
                            if (parseInt(offset) >= 0) {
                                $(this.arrow).css('margin-top', parseInt(offset) + 'px');
                            }
                        }
                    }
                }
            });

            if (this.toggleIndicatorSize > 16) {
                maxWidth = maxWidth + this.toggleIndicatorSize - 16;
            }

            if (maxWidth > this.host.width()) {
                var scrollWidth = maxWidth - this.host.width();
                me.panel.jqxPanel({ horizontalScrollBarMax: scrollWidth });
            }
            else {
                me.panel.jqxPanel({ horizontalScrollBarMax: null });
            }

            me.panel.jqxPanel('_arrange');
        },

        _initialize: function (mode, oldmode) {
            var me = this;
            var maxHeight = 0;
            this.host.removeClass();
            this.host.addClass(me.toThemeProperty('jqx-widget'));
            this.host.addClass(me.toThemeProperty('jqx-widget-content'));
            this.host.addClass(me.toThemeProperty('jqx-tree'));
            this._updateDisabledState();

            var ie7 = $.browser.msie && $.browser.version < 8;
            $.each(this.items, function () {
                var item = this;
                $element = $(item.element);
                var $arrowSpan = null;

                if (!ie7) {
                    if (!item.hasItems) {
                        item.element.style.marginLeft = parseInt(me.toggleIndicatorSize) + 'px';
                        var oldArrow = $(item.arrow);
                        if (oldArrow.length > 0) {
                            oldArrow.unbind('hover');
                            oldArrow.remove();
                            item.arrow = null;
                        }
                        return true;
                    }
                    else item.element.style.marginLeft = '0px';
                }
                else {
                    if (!item.hasItems && $(item.element).find('ul').length > 0) {
                        $(item.element).find('ul').remove();
                    }
                }

                var oldArrow = $(item.arrow);
                if (oldArrow.length > 0) {
                    oldArrow.unbind('hover');
                    oldArrow.remove();
                }

                $arrowSpan = $('<span style="height: 17px; border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');
                $arrowSpan.prependTo($element);
                $arrowSpan.css('float', 'left');
                $arrowSpan.width(me.toggleIndicatorSize);

                if (!item.isExpanded) {
                    $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse'));
                }
                else {
                    $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand'));
                }

                var paddingOffset = parseInt($(this.titleElement).css('padding-top'));
                if (isNaN(paddingOffset)) {
                    paddingOffset = 0;
                }

                paddingOffset = paddingOffset * 2;
                paddingOffset += 2;

                var offset = (paddingOffset + $(this.titleElement).height()) / 2 - 17 / 2;
                if ($.browser.msie && $.browser.version < 9) {
                    $arrowSpan.css('margin-top', '3px');
                }
                else {
                    if (parseInt(offset) >= 0) {
                        $arrowSpan.css('margin-top', parseInt(offset) + 'px');
                    }
                }
                $element.addClass(me.toThemeProperty('jqx-disableselect'));
                $arrowSpan.addClass(me.toThemeProperty('jqx-disableselect'));

                var eventName = 'click';
                var isTouchDevice = me.isTouchDevice();
                if (isTouchDevice) {
                    eventName = 'touchend';
                }
                $arrowSpan.bind(eventName, function () {
                    if (!item.isExpanded) {
                        me._expandItem(me, item);
                    }
                    else {
                        me._collapseItem(me, item);
                    }

                    return false;
                });

                me.addHandler($arrowSpan, 'selectstart', function () {
                    return false;
                });

                me.addHandler($arrowSpan, 'mouseup', function () {
                    if (!isTouchDevice) {
                        return false;
                    }
                });

                $arrowSpan.hover(function () {
                    $arrowSpan.removeClass();
                    if (item.isExpanded) {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand-hover'));
                    }
                    else {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse-hover'));
                    }

                }, function () {
                    $arrowSpan.removeClass();
                    if (item.isExpanded) {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand'));
                    }
                    else {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse'));
                    }
                });

                item.hasItems = $(item.element).find('li').length > 0;

                item.arrow = $arrowSpan[0];
                if (!item.hasItems) {
                    $arrowSpan.css('visibility', 'hidden');
                }

                $element.css('float', 'none');
            });
        },

        _getOffset: function (object) {
            var scrollTop = $(window).scrollTop();
            var scrollLeft = $(window).scrollLeft();
            var isSafari = $.jqx.mobile.isSafariMobileBrowser();
            var offset = $(object).offset();
            var top = offset.top;
            var left = offset.left;
            if (isSafari != null && isSafari) {
                return { left: left - scrollLeft, top: top - scrollTop };
            }
            else return $(object).offset();
        },

        _renderHover: function ($treeElement, item, isTouchDevice) {
            var me = this;
            if (!isTouchDevice) {
                var $titleElement = $(item.titleElement);
                me.addHandler($titleElement, 'mouseenter', function () {
                    if (!item.disabled && me.enableHover && !me.disabled) {
                        $titleElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                        $titleElement.addClass(me.toThemeProperty('jqx-tree-item-hover'));
                    }
                });
                me.addHandler($titleElement, 'mouseleave', function () {
                    if (!item.disabled && me.enableHover && !me.disabled) {
                        $titleElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                        $titleElement.removeClass(me.toThemeProperty('jqx-tree-item-hover'));
                    }
                });
            }
        },

        _updateDisabledState: function () {
            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
            else {
                this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
        },

        _addInput: function () {
            if (this.input == null) {
                var name = this.host.attr('name');
                if (!name) name = this.element.id;
                else {
                    this.host.attr('name', "");
                }

                this.input = $("<input type='hidden'/>");
                this.host.append(this.input);
                this.input.attr('name', name);
                this._updateInputSelection();
            }
        },

        render: function () {
            this._updateItemsNavigation();
            this._render();
        },

        _render: function (updateEvents, updateDrag) {
            if ($.browser.msie && $.browser.version < 8) {
                var me = this;
                $.each(this.items, function () {
                    var $element = $(this.element);
                    var $parent = $element.parent();
                    var totalWidth = parseInt(this.titleElement.css('margin-left')) + this.titleElement[0].scrollWidth + 13;

                    $element.css('min-width', totalWidth);

                    var parentWidth = parseInt($parent.css('min-width'));
                    if (isNaN(parentWidth)) parentWidth = 0;
                    var elementMinWidth = $element.css('min-width');

                    if (parentWidth < parseInt($element.css('min-width'))) {
                        $parent.css('min-width', elementMinWidth);
                    }
                    this.titleElement[0].style.width = null;
                });
            }

            var zIndex = 1000;
            var popupElementoffset = [5, 5];
            var me = this;
            $.data(me.element, 'animationHideDelay', me.animationHideDelay);
            $.data(document.body, 'treeel', this);
            this._initialize();

            var isTouchDevice = this.isTouchDevice();
            if (isTouchDevice && this.toggleMode == 'dblclick') {
                this.toggleMode = 'click';
            }

            if (updateEvents == undefined || updateEvents == true) {
                $.each(this.items, function () {
                    me._updateItemEvents(me, this);
                });
            }
            if (this.allowDrag && this._enableDragDrop && (updateDrag == undefined || updateDrag == true)) {
                this._enableDragDrop();
            }
            this._addInput();

            // add panel.
            if (this.host.jqxPanel) {
                if (this.host.find('#panel' + this.element.id).length > 0) {
                    this.panel.jqxPanel({ touchMode: this.touchMode });
                    return;
                }

                this.host.find('ul:first').wrap('<div style="background-color: transparent; overflow: hidden; width: 100%; height: 100%;" id="panel' + this.element.id + '"></div>');
                var panel = this.host.find('div:first');
                var sizeMode = 'fixed';
                if (this.height == null || this.height == 'auto') {
                    sizeMode = 'verticalwrap';
                }
                if (this.width == null || this.width == 'auto') {
                    if (sizeMode == 'fixed') {
                        sizeMode = 'horizontalwrap';
                    }
                    else sizeMode = 'wrap';
                }

                panel.jqxPanel({ theme: this.theme, width: this.width, height: this.height, autoUpdateInterval: 30, touchMode: this.touchMode, autoUpdate: true, sizeMode: sizeMode });
                if (this.height == null || (this.height != null && this.height.toString().indexOf('%') != -1)) {
                    if (this.isTouchDevice()) {                       
                        panel.unbind('touchend.touchScroll touchcancel.touchScroll');
                        panel.unbind('touchmove.touchScroll');
                        panel.unbind('touchstart.touchScroll');
                    }
                }

                var panelInstance = $.data(panel[0], 'jqxPanel').instance;
                if (panelInstance != null) {
                    this.vScrollInstance = panelInstance.vScrollInstance;
                    this.hScrollInstance = panelInstance.hScrollInstance;
                }
                this.panelInstance = panelInstance;
                if ($.browser.msie && $.browser.version < 8) {
                    this.host.attr('hideFocus', true);
                    this.host.find('div').attr('hideFocus', true);
                    this.host.find('ul').attr('hideFocus', true);
                }

                panel[0].className = '';
                this.panel = panel;
            }
            this._raiseEvent('3', this);
        },

        _updateItemEvents: function (me, item) {
            var isTouchDevice = this.isTouchDevice();
            if (isTouchDevice) {
                this.toggleMode = 'touchend';
            }

            var $treeElement = $(item.element);

            if (me.enableRoundedCorners) {
                $treeElement.addClass(me.toThemeProperty('jqx-rc-all'));
            }

            var checkEventName = !isTouchDevice ? 'click' : 'touchend';
            me.removeHandler($(item.checkBoxElement), checkEventName);
            me.addHandler($(item.checkBoxElement), checkEventName, function (event) {
                if (!me.disabled) {
                    if (!this.treeItem.disabled) {
                        this.treeItem.checked = !this.treeItem.checked;
                        me.checkItem(this.treeItem.element, this.treeItem.checked);
                        if (me.hasThreeStates) {
                            me.checkItems(this.treeItem, this.treeItem);
                        }
                    }
                }
                return false;
            });

            var $titleElement = $(item.titleElement);

            me.removeHandler($treeElement);

            var drag = this.allowDrag && this._enableDragDrop;
            if (!drag) {
                me.removeHandler($titleElement);
            }
            else {
                me.removeHandler($titleElement, 'mousedown.item');
                me.removeHandler($titleElement, 'click');
                me.removeHandler($titleElement, 'dblclick');
                me.removeHandler($titleElement, 'mouseenter');
                me.removeHandler($titleElement, 'mouseleave');
            }

            me._renderHover($treeElement, item, isTouchDevice);
            var $subtree = $(item.subtreeElement);
            if ($subtree.length > 0) {
                var display = item.isExpanded ? 'block' : 'none';
                $subtree.css({ overflow: 'hidden', display: display })
                $subtree.data('timer', {});
            }
      
            me.addHandler($titleElement, 'selectstart', function (event) {
                return false;
            });

            if ($.browser.opera) {
                me.addHandler($titleElement, 'mousedown.item', function (event) {
                    return false;
                });
            }

            if (me.toggleMode != 'click') {
                me.addHandler($titleElement, 'click', function (event) {
                    me.selectItem(item.element);

                    if (me.panel != null) {
                        me.panel.jqxPanel({ focused: true });
                    }
                    me.host.focus();
                });
            }

            me.addHandler($titleElement, me.toggleMode, function (event) {
                if ($subtree.length > 0) {
                    clearTimeout($subtree.data('timer').hide)
                }

                if (me.panel != null) {
                    me.panel.jqxPanel({ focused: true });
                }

                me.selectItem(item.element);
                if (item.isExpanding == undefined)
                    item.isExpanding = false;
                if (item.isCollapsing == undefined)
                    item.isCollapsing = false;

                me.panel.jqxPanel({ autoUpdate: false });
                if ($subtree.length > 0) {
                    if (!item.isExpanded) {
                        if (false == item.isExpanding) {
                            item.isExpanding = true;
                            me._expandItem(me, item);
                        }
                    }
                    else {
                        if (false == item.isCollapsing) {
                            item.isCollapsing = true;
                            me._collapseItem(me, item, true);
                        }
                    }
                }

                me.panel.jqxPanel({ autoUpdate: true });
            });
        },

        isTouchDevice: function () {
            if (this._isTouchDevice != undefined) return this._isTouchDevice;
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            this._isTouchDevice = isTouchDevice;
            return isTouchDevice;
        },

        createID: function () {
            var id = Math.random() + '';
            id = id.replace('.', '');
            id = '99' + id;
            id = id / 1;
            while (this.items[id]) {
                id = Math.random() + '';
                id = id.replace('.', '');
                id = id / 1;
            }
            return 'treeItem' + id;
        },

        // creates the tree.
        createTree: function (uiObject) {
            if (uiObject == null)
                return;

            var self = this;
            var liTags = $(uiObject).find('li');
            var k = 0;

            this.items = new Array();

            this.itemMapping = new Array();
            $(uiObject).addClass(self.toThemeProperty('jqx-tree-dropdown-root'));
            //$(uiObject).width(this.host.width());

            for (var index = 0; index < liTags.length; index++) {
                this._createItem(liTags[index]);
            }

            this._updateItemsNavigation();
            this._updateCheckStates();
        },

        _updateCheckLayout: function (level) {
            var me = this;
            $.each(this.items, function () {
                if (this.level == level || level == undefined) {
                    me._updateCheckItemLayout(this);
                }
            });
        },

        _updateCheckItemLayout: function (item) {
            if (this.checkboxes) {
                if ($(item.titleElement).css('display') != 'none') {
                    var checkbox = $(item.checkBoxElement);
                    var offset = $(item.titleElement).outerHeight() / 2 - 1 - parseInt(this.checkSize) / 2;
                    checkbox.css('margin-top', offset);
                    if ($.browser.msie && $.browser.version < 8) {
                        item.titleElement.css('margin-left', parseInt(this.checkSize) + 25);
                    }
                    else {
                        if (item.hasItems) {
                            checkbox.css('margin-left', this.toggleIndicatorSize);
                        }
                    }
                }
            }
        },

        _updateCheckStates: function () {
            var me = this;
            if (me.hasThreeStates) {
                $.each(this.items, function () {
                    me._updateCheckState(this);
                });
            }
            else {
                $.each(this.items, function () {
                    if (this.checked == null) {
                        me.checkItem(this.element, false);
                    }
                });
            }
        },

        _updateCheckState: function (item) {
            if (item == null || item == undefined)
                return;
            var me = this;
            var count = 0;
            var hasIndeterminate = false;
            var itemsCount = 0;

            var childItems = $(item.element).find('li');
            itemsCount = childItems.length;

            if (item.checked && itemsCount > 0) {
                $.each(childItems, function (index) {
                    var child = me.itemMapping["id" + this.id].item;
                    var checked = child.element.getAttribute('item-checked');
                    if (checked == undefined || checked == null || checked == 'true' || checked == true) {
                        me.checkItem(child.element, true);
                    }
                });
            }

            $.each(childItems, function (index) {
                var child = me.itemMapping["id" + this.id].item;
                if (child.checked != false) {
                    if (child.checked == null) {
                        hasIndeterminate = true;
                    }
                    count++;
                }
            });

            if (itemsCount > 0) {
                if (count == itemsCount) {
                    this.checkItem(item.element, true);
                }
                else {
                    if (count > 0) {
                        this.checkItem(item.element, null);
                    }
                    else this.checkItem(item.element, false);
                }
            }
        },

        _updateItemsNavigation: function () {
            var innerElement = this.host.find('ul:first');
            var liTags = $(innerElement).find('li');
            var k = 0;
            for (var i = 0; i < liTags.length; i++) {
                var listTag = liTags[i];
                if (this.itemMapping["id" + listTag.id]) {
                    var treeItem = this.itemMapping["id" + listTag.id].item;
                    if (!treeItem)
                        continue;

                    treeItem.prevItem = null;
                    treeItem.nextItem = null;
                    if (i > 0) {
                        if (this.itemMapping["id" + liTags[i - 1].id]) {
                            treeItem.prevItem = this.itemMapping["id" + liTags[i - 1].id].item;
                        }
                    }

                    if (i < liTags.length - 1) {
                        if (this.itemMapping["id" + liTags[i + 1].id]) {
                            treeItem.nextItem = this.itemMapping["id" + liTags[i + 1].id].item;
                        }
                    }
                }
            }
        },

        _applyTheme: function (oldTheme, newTheme) {
            var me = this;
            this.host.removeClass('jqx-tree-' + oldTheme);
            this.host.removeClass('jqx-widget-' + oldTheme);
            this.host.removeClass('jqx-widget-content-' + oldTheme);
            this.host.addClass(me.toThemeProperty('jqx-tree'));
            this.host.addClass(me.toThemeProperty('jqx-widget'));
            var uiObject = this.host.find('ul:first');
            $(uiObject).removeClass(me.toThemeProperty('jqx-tree-dropdown-root-' + oldTheme));
            $(uiObject).addClass(me.toThemeProperty('jqx-tree-dropdown-root'));

            var liTags = $(uiObject).find('li');
            for (var index = 0; index < liTags.length; index++) {
                var listTag = liTags[index];
                $(listTag).children().each(function () {
                    if (this.tagName == 'ul' || this.tagName == 'UL') {
                        $(this).removeClass(me.toThemeProperty('jqx-tree-dropdown-' + oldTheme));
                        $(this).addClass(me.toThemeProperty('jqx-tree-dropdown'));
                        return false;
                    }
                });
            }

            $.each(this.items, function () {
                var item = this;
                var $treeElement = $(item.element);

                $treeElement.removeClass(me.toThemeProperty('jqx-tree-item-li-' + oldTheme));
                $treeElement.addClass(me.toThemeProperty('jqx-tree-item-li'));

                $(item.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-' + oldTheme));
                $(item.titleElement).addClass(me.toThemeProperty('jqx-tree-item'));

                $(item.titleElement).removeClass('jqx-item-' + oldTheme);
                $(item.titleElement).addClass(me.toThemeProperty('jqx-item'));

                var $arrowSpan = $(item.arrow);
                if ($arrowSpan.length > 0) {
                    if (!item.isExpanded) {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-collapse'));
                    }
                    else {
                        $arrowSpan.addClass(me.toThemeProperty('jqx-tree-item-arrow-expand'));
                    }
                }

                if (item.checkBoxElement) {
                    $(item.checkBoxElement).jqxCheckBox({ theme: newTheme });
                }
                if (me.enableRoundedCorners) {
                    $treeElement.removeClass('jqx-rc-all-' + oldTheme);
                    $treeElement.addClass(me.toThemeProperty('jqx-rc-all'));
                }
            });

            if (this.host.jqxPanel) {
                this.panel.jqxPanel({ theme: newTheme });
            }
        },

        _refreshMapping: function (updateEvents, tags) {
            var liTags = this.host.find('li');
            var itemMapping = new Array();

            var newItems = new Array();
            var storage = $.data(document.body, 'treeItemsStorage');
            var me = this;
            for (var index = 0; index < liTags.length; index++) {
                var listTag = liTags[index];
                var $listTag = $(listTag);
                var item = storage[listTag.id];
                newItems[newItems.length] = item;
                if (updateEvents == undefined || updateEvents == true) {
                    this._updateItemEvents(this, item);
                }
                item.level = $listTag.parents('li').length;
                item.treeInstance = this;
                var parentElement = null;
                var parentId = null;
                if (item.titleElement[0].className.indexOf('jqx-fill-state-pressed') != -1) {
                    $(item.titleElement).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    $(item.titleElement).removeClass(me.toThemeProperty('jqx-tree-item-selected'));
                }

                var children = $listTag.children();
                children.each(function () {
                    if (this.tagName == 'ul' || this.tagName == 'UL') {
                        item.subtreeElement = this;
                        $(this).addClass(me.toThemeProperty('jqx-tree-dropdown'));
                        return false;
                    }
                });

                var parents = $listTag.parents();
                parents.each(function () {
                    if ((this.tagName == 'li' || this.tagName == 'LI')) {
                        parentId = this.id;
                        parentElement = this;
                        return false;
                    }
                });

                item.parentElement = parentElement;
                item.parentId = parentId;
                item.hasItems = $(item.element).find('li').length > 0;

                if (item != null) {
                    itemMapping[index] = { element: listTag, item: item };
                    itemMapping["id" + listTag.id] = itemMapping[index];
                }
            }

            this.itemMapping = itemMapping;
            this.items = newItems;
        },

        _createItem: function (element) {
            if (element == null || element == undefined)
                return;

            var id = element.id;
            if (!id) {
                id = this.createID();
            }

            var listTag = element;
            var $listTag = $(element);

            listTag.id = id;

            var treeItemsStorage = $.data(document.body, 'treeItemsStorage');
            if (treeItemsStorage == undefined) {
                treeItemsStorage = new Array();
            }

            var k = this.items.length;
            this.items[k] = new $.jqx._jqxTree.jqxTreeItem();
            this.treeElements[id] = this.items[k];
            treeItemsStorage[listTag.id] = this.items[k];
            $.data(document.body, 'treeItemsStorage', treeItemsStorage)
            k = this.items.length;
            var parentId = 0;
            var me = this;
            var parentElement = null;

            $listTag.children().each(function () {
                if (this.tagName == 'ul' || this.tagName == 'UL') {
                    me.items[k - 1].subtreeElement = this;
                    $(this).addClass(me.toThemeProperty('jqx-tree-dropdown'));
                    return false;
                }
            });

            $listTag.parents().each(function () {
                if ((this.tagName == 'li' || this.tagName == 'LI')) {
                    parentId = this.id;
                    parentElement = this;
                    return false;
                }
            });

            var expanded = element.getAttribute('item-expanded');
            if (expanded == null || expanded == undefined || (expanded != 'true' && expanded != true)) {
                expanded = false;
            }
            else expanded = true;
            listTag.removeAttribute('item-expanded');
        //    $listTag.removeAttr('item-expanded');

            var locked = element.getAttribute('item-locked');
            if (locked == null || locked == undefined || (locked != 'true' && locked != true)) {
                locked = false;
            }
            else locked = true;
            listTag.removeAttribute('item-locked');
       //     $listTag.removeAttr('item-locked');

            var selected = element.getAttribute('item-selected');
            if (selected == null || selected == undefined || (selected != 'true' && selected != true)) {
                selected = false;
            }
            else selected = true;
//            $listTag.removeAttr('item-selected');
            listTag.removeAttribute('item-selected');

            var disabled = element.getAttribute('item-disabled');
            if (disabled == null || disabled == undefined || (disabled != 'true' && disabled != true)) {
                disabled = false;
            }
            else disabled = true;
//            $listTag.removeAttr('item-disabled');
            listTag.removeAttribute('item-disabled');

            var checked = element.getAttribute('item-checked');
            if (checked == null || checked == undefined || (checked != 'true' && checked != true)) {
                checked = false;
            }
            else checked = true;
            //            $listTag.removeAttr('item-checked');

            var title = element.getAttribute('item-title');
            if (title == null || title == undefined || (title != 'true' && title != true)) {
                title = false;
            }
//            $listTag.removeAttr('item-title');
            listTag.removeAttribute('item-title');

            var icon = element.getAttribute('item-icon');
            var iconsize = element.getAttribute('item-iconsize');
            var label = element.getAttribute('item-label');
            var value = element.getAttribute('item-value');

            listTag.removeAttribute('item-icon');
            listTag.removeAttribute('item-iconsize');
            listTag.removeAttribute('item-label');
            listTag.removeAttribute('item-value');

            //$listTag.removeAttr('item-icon');
            //$listTag.removeAttr('item-iconsize');
            //$listTag.removeAttr('item-label');
            //$listTag.removeAttr('item-value');

            var treeItem = this.items[k - 1];
            treeItem.id = id;
            treeItem.value = value;
            treeItem.icon = icon;
            treeItem.iconsize = iconsize;
            treeItem.parentId = parentId;
            treeItem.disabled = disabled;
            treeItem.parentElement = parentElement;
            treeItem.element = element;
            treeItem.locked = locked;
            treeItem.selected = selected;
            treeItem.checked = checked;
            treeItem.isExpanded = expanded;
            treeItem.treeInstance = this;

            this.itemMapping[k - 1] = { element: listTag, item: treeItem };
            this.itemMapping["id" + listTag.id] = this.itemMapping[k - 1];
            var hasTitleAttribute = false;// $(element).find('[item-title="true"]').length > 0;
            var isSameLI = false; // $(listTag).find('[item-title="true"]').parents('li:first')[0] == listTag;
            hasTitleAttribute = false;
            if (!hasTitleAttribute || !isSameLI) {
                if ($(listTag.firstChild).length > 0) {
                    if (treeItem.icon) {
                        var iconsize = treeItem.iconsize;
                        if (!iconsize) iconsize = 16;

                        var icon = $('<img width="' + iconsize + '" height="' + iconsize + '" style="float: left;" class="itemicon" src="' + treeItem.icon + '"/>');
                        $(listTag).prepend(icon);
                        icon.css('margin-right', '4px');
                    }

                    var ulindex = listTag.innerHTML.indexOf('<ul');
                    if (ulindex == -1) {
                        ulindex = listTag.innerHTML.indexOf('<UL');
                    }

                    if (ulindex == -1) {
                        treeItem.originalTitle = listTag.innerHTML;
                        listTag.innerHTML = '<div style="display: inline-block;">' + listTag.innerHTML + '</div>';
               //         $listTag.wrapInner('<div style="display: inline-block;"/>');
                        treeItem.titleElement = $($(listTag)[0].firstChild);
                    }
                    else {
                        var listhtml = listTag.innerHTML.substring(0, ulindex);
                        listhtml = $.trim(listhtml);
                        treeItem.originalTitle = listhtml;
                        listhtml = $('<div style="display: inline-block;">' + listhtml + '</div>');

                        var ul = $(listTag).find('ul:first');
                        ul.remove();
                        listTag.innerHTML = "";
                        $(listTag).prepend(listhtml);
                        $(listTag).append(ul);

                        treeItem.titleElement = listhtml;
                    }

                    if ($.browser.msie && $.browser.version < 8) {
                        $($(listTag)[0].firstChild).css('display', 'inline-block');
                    }
                }
                else {
                    treeItem.originalTitle = "Item";
                    $(listTag).append($('<span>Item</span>'));
                    $(listTag.firstChild).wrap('<span/>');
                    treeItem.titleElement = $(listTag)[0].firstChild;
                    if ($.browser.msie && $.browser.version < 8) {
                        $(listTag.firstChild).css('display', 'inline-block');
                    }
                }
            }

            var $itemTitle = $(treeItem.titleElement);
            var itemTitleClassName = this.toThemeProperty('jqx-rc-all');

            if (this.allowDrag) {
                $itemTitle.addClass('draggable');
            }
            if (label == null || label == undefined) {
                label = treeItem.titleElement;
                treeItem.label = $.trim($itemTitle.text());
            }
            else treeItem.label = label;

            $(listTag).addClass(this.toThemeProperty('jqx-tree-item-li'));

            itemTitleClassName += " " + this.toThemeProperty('jqx-tree-item') + " " + this.toThemeProperty('jqx-item');
            $itemTitle[0].className = $itemTitle[0].className + " " + itemTitleClassName;

            treeItem.level = $(element).parents('li').length;

            treeItem.hasItems = $(element).find('li').length > 0;
            if (this.checkboxes) {
                if (this.host.jqxCheckBox) {
                    var checkbox = $('<div style="position: absolute; width: 18px; height: 18px;" tabIndex=0 class="chkbox"/>');
                    checkbox.width(parseInt(this.checkSize));
                    checkbox.height(parseInt(this.checkSize));
                    $(listTag).prepend(checkbox);

                    checkbox.jqxCheckBox({hasInput: false, checked: treeItem.checked, boxSize: this.checkSize, animationShowDelay: 0, animationHideDelay: 0, disabled: disabled, theme: this.theme });
                    $itemTitle.css('margin-left', parseInt(this.checkSize) + 6);
                    treeItem.checkBoxElement = checkbox[0];
                    checkbox[0].treeItem = treeItem;
                    var offset = $itemTitle.outerHeight() / 2 - 1 - parseInt(this.checkSize) / 2;
                    checkbox.css('margin-top', offset);
                    if ($.browser.msie && $.browser.version < 8) {
                        $itemTitle.css('width', '1%');
                        $itemTitle.css('margin-left', parseInt(this.checkSize) + 25);
                    }
                    else {
                        if (treeItem.hasItems) {
                            checkbox.css('margin-left', this.toggleIndicatorSize);
                        }
                    }
                }
                else {
                    alert('jqxcheckbox.js is not loaded.');
                }
            }
            else {
                if ($.browser.msie && $.browser.version < 8) {
                    $itemTitle.css('width', '1%');
                }
            }

            if (disabled) {
                this.disableItem(treeItem.element);
            }

            if (selected) {
                this.selectItem(treeItem.element);
            }

            if ($.browser.msie && $.browser.version < 8) {
                $(listTag).css('margin', '0px');
                $(listTag).css('padding', '0px');
            }
        },

        destroy: function () {
            this.host.removeClass();
            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;

            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'submitCheckedItems') {
                object._updateInputSelection();
            }

            if (key == 'disabled') {
                object._updateDisabledState();
            }

            if (key == 'theme') {
                object._applyTheme(oldvalue, value);
            }

            if (key == "keyboardNavigation") {
                object.enableKeyboardNavigation = value;
            }

            if (key == 'width' || key == 'height') {
                object.refresh();
                object._initialize();
                object._calculateWidth();

                if (object.host.jqxPanel) {
                    var sizeMode = 'fixed';
                    if (this.height == null || this.height == 'auto') {
                        sizeMode = 'verticalwrap';
                    }
                    if (this.width == null || this.width == 'auto') {
                        if (sizeMode == 'fixed') {
                            sizeMode = 'horizontalwrap';
                        }
                        else sizeMode = 'wrap';
                    }

                    this.panel.jqxPanel({ sizeMode: sizeMode });
                }
            }

            if (key == 'touchMode') {
                object._isTouchDevice = null;
                if (value) {
                    object.enableHover = false;
                }
                object._render();
            }

            if (key == 'source') {
                if (this.source != null) {
                    var expandedItems = [];
                    $.each(object.items, function () {
                        if (this.isExpanded) {
                            expandedItems[expandedItems.length] = { label: this.label, level: this.level };
                        }
                    });

                    var html = object.loadItems(object.source);
                    if (!object.host.jqxPanel) {
                        object.element.innerHTML = html;
                    }
                    else {
                        object.panel.jqxPanel('setcontent', html);
                        object.host.css('border', 'none');
                    }

                    var disabled = object.disabled;
                    var innerElement = object.host.find('ul:first');
                    if (innerElement.length > 0) {
                        object.createTree(innerElement[0]);
                        object._render(); 
                    }

                    var me = object;
                    var duration = me.animationShowDuration;
                    me.animationShowDuration = 0;
                    object.disabled = false;
                    if (expandedItems.length > 0) {
                        $.each(object.items, function () {
                            for (var m = 0; m < expandedItems.length; m++) {
                                if (expandedItems[m].label == this.label && expandedItems[m].level == this.level) {
                                    var item = me.getItem(this.element);
                                    me._expandItem(me, item);
                                }
                            }
                        });
                    }
                    object.disabled = disabled;
                    me.animationShowDuration = duration;
                }
            }

            if (key == 'hasThreeStates') {
                object._render();
                object._updateCheckStates();
            }

            if (key == 'toggleIndicatorSize') {
                object._updateCheckLayout();
                object._render();
            }
        }
    });
})(jQuery);

(function ($) {
    $.jqx._jqxTree.jqxTreeItem = function(id, parentId, type) {
        var treeItem =
        {
            // gets the item's label.
            label: null,
            // gets the id.
    	    id: id,
            // gets the parent id.
            parentId: parentId,
            // gets the parent element.
            parentElement: null,
            // gets the parent item instance.
            parentItem: null,
            // gets whether the item is disabled.
            disabled: false,
            // gets whether the item is selected.
            selected: false,
            // gets whether the item is locked.
            locked: false,
            // gets the checked state.
            checked: false,
            // gets the item's level.
            level: 0,
            // gets a value whether the item is opened.
            isExpanded: false,
            // has sub elements.
            hasItems: false,
            // li element
            element: null,
            // subtree element.
            subtreeElement: null,
            // checkbox element.
            checkBoxElement: null,
            // titleElement element.
            titleElement: null,
            // arrow element.
            arrow: null,
            // prev item.
            prevItem: null,
            // next item.
            nextItem: null
         }
        return treeItem;
    }; // 
})(jQuery);
(function ($) {

    $.jqx.jqxWidget('jqxDragDrop', '', {});

    $.extend($.jqx._jqxDragDrop.prototype, {
        defineInstance: function () {

            this.restricter = 'document';
            this.handle = false;
            this.feedback = 'clone';
            this.opacity = 0.6;
            this.revert = false;
            this.revertDuration = 400;
            this.distance = 5;
            this.disabled = false;
            this.tolerance = 'intersect';
            this.data = null;
            this.dropAction = 'default';
            this.dragZIndex = 99999;
            this.appendTo = 'parent';
            this.cursor = 'move';
            this.onDragEnd = null;
            this.onDrag = null;
            this.onDragStart = null;
            this.onTargetDrop = null;
            this.onDropTargetEnter = null;
            this.onDropTargetLeave = null;
            this.initFeedback = null;

            this._touchEvents = {
                'mousedown': 'touchstart',
                'click': 'touchstart',
                'mouseup': 'touchend',
                'mousemove': 'touchmove',
                'mouseenter': 'mouseenter',
                'mouseleave': 'mouseleave'
            };
            this._restricter = null;
            this._zIndexBackup = 0;
            this._targetEnterFired = false;
            this._oldOpacity = 1;
            this._feedbackType;
            this._isTouchDevice = false;
            this._events = [
                'dragStart', 'dragEnd', 'dragging', 'dropTargetEnter', 'dropTargetLeave'
            ];
        },

        createInstance: function () {
            this._createDragDrop();
        },

        _createDragDrop: function () {
            var count = $.data(document.body, 'jqx-draggables') || 1;
            this.appendTo = this._getParent();
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            if ((/(static|relative)/).test(this.host.css('position'))) {
                if (!this.feedback || this.feedback === 'original') {
                    var pos = this._getRelativeOffset(this.host);
                    var parentOffset = this.appendTo.offset();
                    if (this.appendTo.css('position') != 'static') {
                        parentOffset = { left: 0, top: 0 };
                    }

                    this.element.style.position = 'absolute';
                    this.element.style.left = parentOffset.left + pos.left + 'px';
                    this.element.style.top = parentOffset.top + pos.top + 'px';
                }
            }
            this._validateProperties();
            this._idHandler(count);
            if (this.disabled) {
                this.disable();
            }
            if (typeof this.dropTarget === 'string') {
                this.dropTarget = $(this.dropTarget);
            }
            this._refresh();
            count += 1;
            $.data(document.body, 'jqx-draggables', count);
            this.host.addClass('jqx-draggable');
            if (!this.disabled) {
                this.host.css('cursor', this.cursor);
            }
        },

        _getParent: function () {
            var parent = this.appendTo;
            if (typeof this.appendTo === 'string') {
                switch (this.appendTo) {
                    case 'parent':
                        parent = this.host.parent();
                        break;
                    case 'document':
                        parent = $(document);
                        break;
                    case 'body':
                        parent = $(document.body);
                        break;
                    default:
                        parent = $(this.appendTo);
                        break
                }
            }
            return parent;
        },

        _idHandler: function (count) {
            if (!this.element.id) {
                var id = 'jqx-draggable-' + count;
                this.element.id = id;
            }
        },

        _refresh: function () {
            this._removeEventHandlers();
            this._addEventHandlers();
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._touchEvents[event];
            } else {
                return event;
            }
        },

        _validateProperties: function () {
            if (this.feedback === 'clone') {
                this._feedbackType = 'clone';
            } else {
                this._feedbackType = 'original';
            }
            if (this.dropAction !== 'default') {
                this.dropAction = 'nothing';
            }
        },

        _removeEventHandlers: function () {
            this.removeHandler(this.host, 'dragstart');
            this.removeHandler(this.host, this._getEvent('mousedown') + '.draggable.' + this.element.id, this._mouseDown);
            this.removeHandler($(document), this._getEvent('mousemove') + '.draggable.' + this.element.id, this._mouseMove);
            this.removeHandler($(document), this._getEvent('mouseup') + '.draggable.' + this.element.id, this._mouseUp);
        },

        _addEventHandlers: function () {
            var self = this;
            this.addHandler(this.host, 'dragstart', function (event) {
                event.preventDefault();
                return false;
            });
            this.addHandler(this.host, this._getEvent('mousedown') + '.draggable.' + this.element.id, this._mouseDown, { self: this });
            this.addHandler($(document), this._getEvent('mousemove') + '.draggable.' + this.element.id, this._mouseMove, { self: this });
            this.addHandler($(document), this._getEvent('mouseup') + '.draggable.' + this.element.id, this._mouseUp, { self: this });
            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    var parentLocation = '';
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            self._mouseUp(self);
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mouseup', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }
                }
            }
        },

        _mouseDown: function (event) {
            var self = event.data.self,
                mouseCoordinates = self._getMouseCoordinates(event),
                mouseCapture = self._mouseCapture(event);
            self._originalPageX = mouseCoordinates.left;
            self._originalPageY = mouseCoordinates.top;

            if (!self._mouseStarted) {
                self._mouseUp(event);
            }
            if (mouseCapture) {
                self._mouseDownEvent = event;
            }
            if (event.which !== 1 || !mouseCapture) {
                return true;
            }
            event.preventDefault();
            //     return false;
        },

        _mouseMove: function (event) {
            var self = event.data.self;
            if (self._mouseStarted) {
                self._mouseDrag(event);
                return event.preventDefault();
            }
            if (self._mouseDownEvent && self._isMovedDistance(event)) {
                if (self._mouseStart(self._mouseDownEvent, event)) {
                    self._mouseStarted = true;
                } else {
                    self._mouseStarted = false;
                }
                if (self._mouseStarted) {
                    self._mouseDrag(event);
                } else {
                    self._mouseUp(event);
                }
            }
            return !self._mouseStarted;
        },

        _mouseUp: function (event) {
            var self;
            if (event.data && event.data.self) {
                self = event.data.self;
            } else {
                self = this;
            }
            self._mouseDownEvent = false;
            self._movedDistance = false;
            if (self._mouseStarted) {
                self._mouseStarted = false;
                self._mouseStop(event);
            }
            if (self.feedback && self.feedback[0] && self._feedbackType !== 'original' && typeof self.feedback.remove === 'function' && !self.revert) {
                self.feedback.remove();
            }
            return false;
        },

        cancelDrag: function () {
            var revertDuration = this.revertDuration;
            this.revertDuration = 0;
            this._mouseDownEvent = false;
            this._movedDistance = false;
            this._mouseStarted = false;
            this._mouseStop();
            this.feedback.remove();
            this.revertDuration = revertDuration;
        },

        _isMovedDistance: function (event) {
            var mc = this._getMouseCoordinates(event);
            if (this._movedDistance) {
                return true;
            }
            if (mc.left >= this._originalPageX + this.distance ||
                mc.left <= this._originalPageX - this.distance ||
                mc.top >= this._originalPageY + this.distance ||
                mc.top <= this._originalPageY - this.distance) {
                this._movedDistance = true;
                return true;
            }
            return false;
        },

        _getMouseCoordinates: function (event) {
            if (this._isTouchDevice) {
                return {
                    left: event.originalEvent.touches[0].pageX,
                    top: event.originalEvent.touches[0].pageY
                };
            } else {
                return {
                    left: event.pageX,
                    top: event.pageY
                };
            }
        },

        destroy: function () {
            this.host
            .removeData('draggable')
            .unbind('.draggable')
            .removeClass('jqx-draggable'
                + ' jqx-draggable-dragging'
                + ' jqx-draggable-disabled');
            this._removeEventHandlers();
            this.isDestroyed = true;
            return this;
        },

        _disableSelection: function (element) {
            element.each(function () {
                $(this).attr('unselectable', 'on')
                    .css({
                        '-ms-user-select': 'none',
                        '-moz-user-select': 'none',
                        '-webkit-user-select': 'none',
                        'user-select': 'none'
                    })
                    .each(function () {
                        this.onselectstart = function () { return false; };
                    });
            });
        },

        _enableSelection: function (element) {
            element.each(function () {
                $(this).attr('unselectable', 'off')
                .css({
                    '-ms-user-select': 'text',
                    '-moz-user-select': 'text',
                    '-webkit-user-select': 'text',
                    'user-select': 'text'
                })
                .each(function () {
                    this.onselectstart = null;
                });
            });
        },

        _mouseCapture: function (event) {
            if (this.disabled) {
                return false;
            }
            if (!this._getHandle(event)) {
                return false;
            }
            this._disableSelection(this.host);
            return true;
        },

        _getScrollParent: function (element) {
            var scrollParent;
            if (($.browser.msie && (/(static|relative)/).test(element.css('position'))) ||
            (/absolute/).test(element.css('position'))) {
                scrollParent = element.parents().filter(function () {
                    return (/(relative|absolute|fixed)/).test($.css(this, 'position', 1)) &&
                    (/(auto|scroll)/).test($.css(this, 'overflow', 1) + $.css(this, 'overflow-y', 1) + $.css(this, 'overflow-x', 1));
                }).eq(0);
            } else {
                scrollParent = element.parents().filter(function () {
                    return (/(auto|scroll)/).test($.css(this, 'overflow', 1) + $.css(this, 'overflow-y', 1) + $.css(this, 'overflow-x', 1));
                }).eq(0);
            }

            return (/fixed/).test(element.css('position')) || !scrollParent.length ? $(document) : scrollParent;
        },

        _mouseStart: function (event) {
            var mouseCoordinates = this._getMouseCoordinates(event),
                parentOffset = this._getParentOffset(this.host);
            this.feedback = this._createFeedback(event);
            this._zIndexBackup = this.feedback.css('z-index');
            this.feedback[0].style.zIndex = this.dragZIndex;
            this._backupFeedbackProportions();
            this._backupeMargins();
            this._positionType = this.feedback.css('position');
            this._scrollParent = this._getScrollParent(this.feedback);
            this._offset = this.positionAbs = this.host.offset();
            this._offset = {
                top: this._offset.top - this.margins.top,
                left: this._offset.left - this.margins.left
            };
            $.extend(this._offset, {
                click: {
                    left: mouseCoordinates.left - this._offset.left,
                    top: mouseCoordinates.top - this._offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset(),
                hostRelative: this._getRelativeOffset(this.host)
            });
            this.position = this._generatePosition(event);
            this.originalPosition = this._fixPosition();
            if (this.restricter) {
                this._setRestricter();
            }
            this.feedback.addClass(this.toThemeProperty('jqx-draggable-dragging'));
            this._raiseEvent(0, event);
            if (this.onDragStart && typeof this.onDragStart === 'function') {
                this.onDragStart(this.position);
            }
            this._mouseDrag(event, true);
            return true;
        },

        _fixPosition: function () {
            var parentOffset = this._getRelativeOffset(this.host),
                position = this.position;
            //if (this.feedback.parent()[0] !== this.host.parent()[0]) {
            position = {
                left: this.position.left + parentOffset.left,
                top: this.position.top + parentOffset.top
            }
            //}
            return position;
        },

        _mouseDrag: function (event, noPropagation) {
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo('absolute');
            this.feedback[0].style.left = this.position.left + 'px';
            this.feedback[0].style.top = this.position.top + 'px';
            this._raiseEvent(2, event);
            if (this.onDrag && typeof this.onDrag === 'function') {
                this.onDrag(this.data, this.position);
            }
            this._handleTarget();
            return false;
        },

        _over: function (position, dw, dh) {
            if (this.dropTarget) {
                var over = false, self = this;
                $.each(this.dropTarget, function (idx, droppable) {
                    over = self._overItem(droppable, position, dw, dh);
                    if (over.over) {
                        return false;
                    }
                });
            }
            return over;
        },

        _overItem: function (droppable, position, dw, dh) {
            droppable = $(droppable);
            var dropOffset = droppable.offset(),
                ch = droppable.outerHeight(),
                cw = droppable.outerWidth(),
                over;
            if (!droppable || droppable[0] === this.element) {
                return;
            }
            switch (this.tolerance) {
                case 'intersect':
                    if (position.left + dw > dropOffset.left &&
                        position.left < dropOffset.left + cw &&
                        position.top + dh > dropOffset.top &&
                        position.top < dropOffset.top + ch) {
                        over = true;
                    }
                    break;
                case 'fit':
                    if (dw + position.left <= dropOffset.left + cw &&
                        position.left >= dropOffset.left &&
                        dh + position.top <= dropOffset.top + ch &&
                        position.top >= dropOffset.top) {
                        over = true;
                    }
                    break;
            }
            return { over: over, target: droppable };
        },

        _handleTarget: function () {
            if (this.dropTarget) {
                var position = this.feedback.offset(),
                    dw = this.feedback.outerWidth(),
                    dh = this.feedback.outerWidth(),
                    over = this._over(position, dw, dh);
                if (over.over) {
                    if (!this._targetEnterFired) {
                        this._targetEnterFired = true;
                        this._raiseEvent(3, { target: over.target });
                        if (this.onDropTargetEnter && typeof this.onDropTargetEnter === 'function') {
                            this.onDropTargetEnter();
                        }
                    }
                } else {
                    if (this._targetEnterFired) {
                        this._targetEnterFired = false;
                        this._raiseEvent(4, { target: over.target });
                        if (this.onDropTargetLeave && typeof this.onDropTargetLeave === 'function') {
                            this.onDropTargetLeave();
                        }
                    }
                }
            }
        },

        _mouseStop: function (event) {
            var dropped = false,
                dropPosition = this._fixPosition(),
                size = {
                    width: this.host.outerWidth(),
                    height: this.host.outerHeight()
                };
            this.feedback[0].style.opacity = this._oldOpacity;
            if (!this.revert) {
                this.feedback[0].style.zIndex = this._zIndexBackup;
            }
            this._enableSelection(this.host);
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }
            if ((!this.element || !this.element.parentNode) && this.feedback === 'original') {
                return false;
            }
            this._dropElement(dropPosition);
            //   return;
            this.feedback.removeClass(this.toThemeProperty('jqx-draggable-dragging'));
            this._raiseEvent(1, event);
            if (this.onDragEnd && typeof this.onDragEnd === 'function') {
                this.onDragEnd(this.data);
            }
            if (this.onTargetDrop && typeof this.onTargetDrop === 'function' && this._over(dropPosition, size.width, size.height).over) {
                this.onTargetDrop(this.data);
            }
            this._revertHandler();
            return false;
        },

        _dropElement: function (dropPosition) {
            if (this.dropAction === 'default' &&
                this.feedback && this.feedback[0] !== this.element &&
                this.feedback !== 'original') {
                if (!this.revert) {
                    if (!(/(fixed|absolute)/).test(this.host.css('position'))) {
                        this.host.css('position', 'relative')
                        var offset = this._getRelativeOffset(this.host);
                        dropPosition = this.position;
                        dropPosition.left -= offset.left;
                        dropPosition.top -= offset.top;

                        this.element.style.left = dropPosition.left + 'px';
                        this.element.style.top = dropPosition.top + 'px';
                    }
                }
            }
        },

        _revertHandler: function () {
            if (this.revert || ($.isFunction(this.revert) && this.revert())) {
                var self = this;
                if (this._feedbackType != 'original') {
                    //          $(this.host).css('left', self.originalPosition.left - self._offset.hostRelative.left);
                    //          $(this.host).css('top', self.originalPosition.top - self._offset.hostRelative.top);
                    if (this.feedback != null) {
                        if (this.dropAction != 'none') {
                            $(this.feedback).animate({
                                left: self.originalPosition.left - self._offset.hostRelative.left,
                                top: self.originalPosition.top - self._offset.hostRelative.top
                            }, parseInt(this.revertDuration, 10), function () {
                                if (self.feedback && self.feedback[0] && self._feedbackType !== 'original' && typeof self.feedback.remove === 'function') {
                                    self.feedback.remove();
                                }
                            });
                        }
                        else {
                            if (self.feedback && self.feedback[0] && self._feedbackType !== 'original' && typeof self.feedback.remove === 'function') {
                                self.feedback.remove();
                            }
                        }
                    }
                }
                else {
                    this.element.style.zIndex = this.dragZIndex;
                    $(this.host).animate({
                        left: self.originalPosition.left - self._offset.hostRelative.left,
                        top: self.originalPosition.top - self._offset.hostRelative.top
                    }, parseInt(this.revertDuration, 10), function () {
                        self.element.style.zIndex = self._zIndexBackup;
                    });
                }
            }
        },

        _getHandle: function (event) {
            var handle;
            if (!this.handle) {
                handle = true;
            } else {
                $(this.handle, this.host).find('*').andSelf().each(function () {
                    if (this == event.target) handle = true;
                });
            }
            return handle;
        },

        _createFeedback: function (event) {
            var feedback;
            if (typeof this._feedbackType === 'function') {
                feedback = this._feedbackType();
            } else if (this._feedbackType === 'clone') {
                feedback = this.host.clone().removeAttr('id');
            } else {
                feedback = this.host;
            }
            if (!(/(absolute|fixed)/).test(feedback.css('position'))) {
                feedback.css('position', 'absolute');
            }
            if (this.appendTo[0] !== this.host.parent()[0] ||
                feedback[0] !== this.element) {
                var pos = {};
                feedback.css({
                    left: this.host.offset().left - this._getParentOffset(this.host).left + this._getParentOffset(feedback).left,
                    top: this.host.offset().top - this._getParentOffset(this.host).top + this._getParentOffset(feedback).top
                });
                feedback.appendTo(this.appendTo);
            }
            if (typeof this.initFeedback === 'function') {
                this.initFeedback(feedback);
            }
            return feedback;
        },

        _getParentOffset: function (element) {
            var element = element || this.feedback;
            this._offsetParent = element.offsetParent();
            var parentOffset = this._offsetParent.offset();
            if (this._positionType == 'absolute' && this._scrollParent[0] !== document && $.contains(this._scrollParent[0], this._offsetParent[0])) {
                parentOffset.left += this._scrollParent.scrollLeft();
                parentOffset.top += this._scrollParent.scrollTop();
            }
            if ((this._offsetParent[0] == document.body) ||
                (this._offsetParent[0].tagName && this._offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie)) {
                parentOffset = { top: 0, left: 0 };
            }
            return {
                top: parentOffset.top + (parseInt(this._offsetParent.css('border-top-width'), 10) || 0),
                left: parentOffset.left + (parseInt(this._offsetParent.css('border-left-width'), 10) || 0)
            };

        },

        _getRelativeOffset: function (element) {
            var parent = this._scrollParent || element.parent();
            element = element || this.feedback;
            if (element.css('position') === 'relative') {
                var position = this.host.position();
                return {
                    top: position.top - (parseInt(element.css('top'), 10) || 0),
                    left: position.left - (parseInt(element.css('left'), 10) || 0)
                };
            } else {
                return { top: 0, left: 0 };
            }
        },

        _backupeMargins: function () {
            this.margins = {
                left: (parseInt(this.host.css('margin-left'), 10) || 0),
                top: (parseInt(this.host.css('margin-top'), 10) || 0),
                right: (parseInt(this.host.css('margin-right'), 10) || 0),
                bottom: (parseInt(this.host.css('margin-bottom'), 10) || 0)
            };
        },

        _backupFeedbackProportions: function () {
            this.feedback[0].style.opacity = this.opacity;
            this._feedbackProportions = {
                width: this.feedback.outerWidth(),
                height: this.feedback.outerHeight()
            };
        },

        _setRestricter: function () {
            if (this.restricter == 'parent') {
                this.restricter = this.feedback[0].parentNode;
            }
            if (this.restricter == 'document' || this.restricter == 'window') {
                this._handleNativeRestricter();
            }
            if (typeof this.restricter.left !== 'undefined' && typeof this.restricter.top !== 'undefined' &&
                       typeof this.restricter.height !== 'undefined' && typeof this.restricter.width !== 'undefined') {
                this._restricter = [this.restricter.left, this.restricter.top, this.restricter.width, this.restricter.height];
            } else if (!(/^(document|window|parent)$/).test(this.restricter) && this.restricter.constructor != Array) {
                this._handleDOMParentRestricter();

            } else if (this.restricter.constructor == Array) {
                this._restricter = this.restricter;
            }

        },

        _handleNativeRestricter: function () {
            this._restricter = [
                    this.restricter === 'document' ? 0 : $(window).scrollLeft() - this._offset.relative.left - this._offset.parent.left,
                    this.restricter === 'document' ? 0 : $(window).scrollTop() - this._offset.relative.top - this._offset.parent.top,
                    (this.restricter === 'document' ? 0 : $(window).scrollLeft()) + $(this.restricter === 'document' ? document : window).width() - this._feedbackProportions.width - this.margins.left,
                    (this.restricter === 'document' ? 0 : $(window).scrollTop()) + ($(this.restricter === 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this._feedbackProportions.height - this.margins.top
                ];
        },

        _handleDOMParentRestricter: function () {
            var restricter = $(this.restricter),
                restricterElement = restricter[0];
            if (!restricterElement) {
                return;
            }
            var over = ($(restricterElement).css('overflow') !== 'hidden');
            this._restricter = [
                (parseInt($(restricterElement).css('borderLeftWidth'), 10) || 0) + (parseInt($(restricterElement).css('paddingLeft'), 10) || 0),
                (parseInt($(restricterElement).css('borderTopWidth'), 10) || 0) + (parseInt($(restricterElement).css('paddingTop'), 10) || 0),
                (over ? Math.max(restricterElement.scrollWidth, restricterElement.offsetWidth) : restricterElement.offsetWidth) - (parseInt($(restricterElement).css('borderLeftWidth'), 10) || 0) - (parseInt($(restricterElement).css('paddingRight'), 10) || 0) - this._feedbackProportions.width - this.margins.left - this.margins.right,
                (over ? Math.max(restricterElement.scrollHeight, restricterElement.offsetHeight) : restricterElement.offsetHeight) - (parseInt($(restricterElement).css('borderTopWidth'), 10) || 0) - (parseInt($(restricterElement).css('paddingBottom'), 10) || 0) - this._feedbackProportions.height - this.margins.top - this.margins.bottom
            ];
            this._restrictiveContainer = restricter;
        },

        _convertPositionTo: function (d, position) {
            if (!position) {
                position = this.position;
            }
            var mod, scroll, scrollIsRootNode;
            if (d === 'absolute') {
                mod = 1;
            } else {
                mod = -1;
            }
            if (this._positionType === 'absolute' && !(this._scrollParent[0] != document && $.contains(this._scrollParent[0], this._offsetParent[0]))) {
                scroll = this._offsetParent;
            } else {
                scroll = this._scrollParent;
            }
            scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
            return this._getPosition(position, mod, scrollIsRootNode, scroll);

        },

        _getPosition: function (position, mod, scrollIsRootNode, scroll) {
            return {
                top: (
                    position.top
                    + this._offset.relative.top * mod
                    + this._offset.parent.top * mod
                    - ($.browser.safari && $.browser.version < 526 && this._positionType == 'fixed' ? 0 : (this._positionType == 'fixed' ? -this._scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)
                ),
                left: (
                    position.left
                    + this._offset.relative.left * mod
                    + this._offset.parent.left * mod
                    - ($.browser.safari && $.browser.version < 526 && this._positionType == 'fixed' ? 0 : (this._positionType == 'fixed' ? -this._scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod)
                )
            };
        },

        _generatePosition: function (event) {
            var scroll =
                this._positionType == 'absolute' &&
                !(this._scrollParent[0] != document &&
                $.contains(this._scrollParent[0], this._offsetParent[0])) ?
                this._offsetParent :
                this._scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

            var mouseCoordinates = this._getMouseCoordinates(event),
                pageX = mouseCoordinates.left,
                pageY = mouseCoordinates.top;
            if (this.originalPosition) {
                var restricter;
                if (this.restricter) {
                    if (this._restrictiveContainer) {
                        var co = this._restrictiveContainer.offset();
                        restricter = [this._restricter[0] + co.left,
                             this._restricter[1] + co.top,
                             this._restricter[2] + co.left,
                             this._restricter[3] + co.top];
                    } else {
                        restricter = this._restricter;
                    }
                    if (mouseCoordinates.left - this._offset.click.left < restricter[0]) {
                        pageX = restricter[0] + this._offset.click.left;
                    }
                    if (mouseCoordinates.top - this._offset.click.top < restricter[1]) {
                        pageY = restricter[1] + this._offset.click.top;
                    }
                    if (mouseCoordinates.left - this._offset.click.left > restricter[2]) {
                        pageX = restricter[2] + this._offset.click.left;
                    }
                    if (mouseCoordinates.top - this._offset.click.top > restricter[3]) {
                        pageY = restricter[3] + this._offset.click.top;
                    }
                }
            }
            return {
                top: (
                    pageY - this._offset.click.top - this._offset.relative.top - this._offset.parent.top + ($.browser.safari && $.browser.version < 526 && this._positionType == 'fixed' ? 0 : (this._positionType == 'fixed' ? -this._scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))
                ),
                left: (
                    pageX - this._offset.click.left - this._offset.relative.left - this._offset.parent.left + ($.browser.safari && $.browser.version < 526 && this._positionType == 'fixed' ? 0 : (this._positionType == 'fixed' ? -this._scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()))
                )
            };
        },

        _raiseEvent: function (eventId, data) {
            if (this.triggerEvents != undefined && this.triggerEvents == false)
                return;

            var eventName = this._events[eventId],
            event = $.Event(eventName),
            data = data || {};
            data.position = this.position;
            data.element = this.element;
            this.data = this.data;
            $.extend(data, this.data);
            event.args = data;
            return this.host.trigger(event);
        },

        disable: function () {
            this.disabled = true;
            this.host.addClass(this.toThemeProperty('jqx-draggable-disabled'));
        },

        enable: function () {
            this.disabled = false;
            this.host.removeClass(this.toThemeProperty('jqx-draggable-disabled'));
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key === 'dropTarget') {
                if (typeof value === 'string') {
                    object.dropTarget = $(value);
                }
            }
            else if (key == 'cursor') {
                object.host.css('cursor', object.cursor);
            }
        }

    });

})(jQuery);
(function ($) {

jqxListBoxDragDrop = function () {
    $.extend($.jqx._jqxListBox.prototype,
    {
        _hitTestBounds: function (listBox, hitLeft, hitTop) {
            var selfOffset = listBox.host.offset();
            var y = hitTop - parseInt(selfOffset.top);
            var x = hitLeft - parseInt(selfOffset.left);
            var item = listBox._hitTest(x, y);

            if (y < 0)
                return null;

            if (item != null) {
                var left = parseInt(selfOffset.left);
                var right = left + listBox.host.width();
                if (left <= hitLeft + item.width / 2 && hitLeft <= right)
                    return item;

                return null;
            }


            if (listBox.items && listBox.items.length > 0) {
                var lastItem = listBox.items[listBox.items.length - 1];
                //        if (y - 20 <= lastItem.top)
                //            item = lastItem;
                if (lastItem.top + lastItem.height + 15 >= y) {
                    return lastItem;
                }
            }

            return null;
        },

        _handleDragStart: function (elements, me) {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (isTouchDevice) {
                if (me.allowDrag) {
                    elements.bind('touchstart', function () {
                        $.jqx.mobile.setTouchScroll(false, me.element.id);
                    });
                }
            }

            elements.unbind('dragStart');
            elements.bind('dragStart', function (event) {
                if (me.allowDrag && !me.disabled) {
                    me.feedbackElement = $("<div style='z-index: 99999; position: absolute;'></div>");
                    me.feedbackElement.addClass(me.toThemeProperty('jqx-listbox-feedback'));
                    me.feedbackElement.appendTo($(document.body));
                    me.feedbackElement.hide();
                    me.isDragging = true;
                    me._dragCancel = false;
                    var position = event.args.position;
                    var item = me._hitTestBounds(me, event.args.pageX, event.args.pageY);
                    var listBoxes = $.find('.jqx-listbox');
                    me._listBoxes = listBoxes;
                    $.each(me._listBoxes, function () {
                        var listBoxInstance = $.data(this, "jqxListBox").instance;
                        listBoxInstance._enableHover = listBoxInstance.enableHover;
                        listBoxInstance.enableHover = false;
                        $.jqx.mobile.setTouchScroll(false, me.element.id);
                    });

                    var stopDrag = function () {
                        me._dragCancel = true;
                        $(event.args.element).jqxDragDrop({ triggerEvents: false });
                        $(event.args.element).jqxDragDrop('cancelDrag');
                        clearInterval(me._autoScrollTimer);
                        $(event.args.element).jqxDragDrop({ triggerEvents: true });
                        $.each(me._listBoxes, function () {
                            var listBoxInstance = $.data(this, "jqxListBox").instance;
                            if (listBoxInstance._enableHover != undefined) {
                                listBoxInstance.enableHover = listBoxInstance._enableHover;
                                $.jqx.mobile.setTouchScroll(true, me.element.id);
                            }
                        });
                    }

                    if (item != null && !item.isGroup) {
                        me._dragItem = item;              
                        if (me.dragStart) {
                            var result = me.dragStart(item);
                            if (result == false) {
                                stopDrag();
                                return false;
                            }
                        }
                        if (item.disabled) {
                            stopDrag();
                        }
                        me._raiseEvent(4, { label: item.label, value: item.value, originalEvent: event.args });
                    }
                    else if (item == null) {
                        stopDrag();
                    }
                }
                return false;
            });
        },

        _handleDragging: function (elements, me) {
            elements.unbind('dragging');
            elements.bind('dragging', function (event) {
                var args = event.args;
                var position = { left: event.args.pageX, top: event.args.pageY };
                if (me._dragCancel)
                    return;

                var mousePosition = me._getMouseCoordinates(event);

                me._dragOverItem = null;
                me.feedbackElement.hide();
                $.each(me._listBoxes, function () {
                    var offset = $(this).offset();
                    var top = offset.top + 20;
                    var bottom = $(this).height() + top - 40;
                    var left = offset.left;
                    var width = $(this).width();
                    var right = left + width;
                    var listBoxInstance = $.data(this, "jqxListBox").instance;
                    var item = listBoxInstance._hitTestBounds(listBoxInstance, event.args.pageX, event.args.pageY);
                    var vScrollInstance = listBoxInstance.vScrollInstance;
                    if (item != null) {
                        if (listBoxInstance.allowDrop && !listBoxInstance.disabled) {
                            me._dragOverItem = item;
                            if (item.element) {
                                me.feedbackElement.show();
                                var itemTop = $(item.element).offset().top + 1;
                                if (position.top > itemTop + item.height / 2) {
                                    itemTop = itemTop + item.height;
                                }

                                me.feedbackElement.css('top', itemTop);
                                me.feedbackElement.css('left', left);
                                if (listBoxInstance.vScrollBar.css('visibility') != 'visible') {
                                    me.feedbackElement.width($(this).width());
                                }
                                else me.feedbackElement.width($(this).width() - 20);
                            }
                        }
                    }

                    if (mousePosition.left >= left && mousePosition.left < right) {
                        if (args.position.top < top && args.position.top >= top - 30) {
                            clearInterval(listBoxInstance._autoScrollTimer);
                            if (vScrollInstance.value != 0) {
                                me.feedbackElement.hide();
                            }
                            listBoxInstance._autoScrollTimer = setInterval(function () {
                                var scrolled = listBoxInstance.scrollUp();
                                if (!scrolled) clearInterval(listBoxInstance._autoScrollTimer);
                            }, 100);
                        }
                        else if (args.position.top > bottom && args.position.top < bottom + 30) {
                            clearInterval(listBoxInstance._autoScrollTimer);
                            if ((listBoxInstance.vScrollBar.css('visibility') != 'hidden') && vScrollInstance.value != vScrollInstance.max) {
                                me.feedbackElement.hide();
                            }

                            listBoxInstance._autoScrollTimer = setInterval(function () {
                                var scrolled = listBoxInstance.scrollDown();
                                if (!scrolled) clearInterval(listBoxInstance._autoScrollTimer);
                            }, 100);
                        }
                        else {
                            clearInterval(listBoxInstance._autoScrollTimer);
                        }
                    }
                    else {
                        if (me._dragOverItem == null) {
                            me.feedbackElement.hide();
                        }
                        clearInterval(listBoxInstance._autoScrollTimer);
                    }
                });
            });
        },

        _handleDragEnd: function (elements, me) {
            var listBoxes = $.find('.jqx-listbox');
            elements.unbind('dragEnd');
            elements.bind('dragEnd', function (event) {
                clearInterval(me._autoScrollTimer);
                var position = { left: event.args.pageX, top: event.args.pageY };
                var listBoxes = $.find('.jqx-listbox');
                var listBox = null;
                me.feedbackElement.remove();
                if (me._dragCancel)
                    return;

                $.each(listBoxes, function () {
                    var left = parseInt($(this).offset().left);
                    var right = left + $(this).width();
                    var listBoxInstance = $.data(this, "jqxListBox").instance;
                    clearInterval(listBoxInstance._autoScrollTimer);
                    if (listBoxInstance._enableHover != undefined) {
                        listBoxInstance.enableHover = listBoxInstance._enableHover;
                        $.jqx.mobile.setTouchScroll(true, me.element.id);
                    }

                    if (me._dragItem != null) {
                        if (position.left + me._dragItem.width / 2 >= left && position.left < right) {
                            var top = parseInt($(this).offset().top);
                            var bottom = top + $(this).height();
                            if (position.top >= top && position.top <= bottom) {
                                listBox = $(this);
                            }
                        }
                    }
                });
                var oldItem = me._dragItem;
                if (listBox != null && listBox.length > 0) {
                    var listBoxInstance = $.data(listBox[0], "jqxListBox").instance;
                    var allowDrop = listBoxInstance.allowDrop;

                    if (allowDrop && !listBoxInstance.disabled) {
                        var listBoxInstance = $.data(listBox[0], "jqxListBox").instance;
                        var item = listBoxInstance._hitTestBounds(listBoxInstance, position.left, position.top);
                        item = me._dragOverItem;

                        if (item != null && !item.isGroup) {
                            var result = true;
                            if (me.dragEnd) {
                                result = me.dragEnd(oldItem, item, event.args);
                                if (result == false) {
                                    $(event.args.element).jqxDragDrop({ triggerEvents: false });
                                    $(event.args.element).jqxDragDrop('cancelDrag');
                                    clearInterval(me._autoScrollTimer);
                                    $(event.args.element).jqxDragDrop({ triggerEvents: true });
                                    if (event.preventDefault) {
                                        event.preventDefault();
                                    }
                                    if (event.stopPropagation) {
                                        event.stopPropagation();
                                    }
                                    return false;
                                }
                                if (result == undefined) result = true;
                            }
                            if (result) {
                                var itemIndex = item.index;
                                var getCorrectIndexAfterDrop = function () {
                                    var index = item.index;
                                    for (var m = index - 2; m <= index + 2; m++) {
                                        if (listBoxInstance.items && listBoxInstance.items.length > m) {
                                            var currentItem = listBoxInstance.items[m];
                                            if (currentItem != null) {
                                                if (currentItem.label == oldItem.label && currentItem.value == oldItem.value)
                                                    return m;
                                            }
                                        }
                                    }
                                    return index;
                                }

                                if (listBoxInstance.dropAction != 'none') {
                                    var itemTop = $(item.element).offset().top + 1;
                                    listBoxInstance.content.find('.draggable').jqxDragDrop('destroy');
                                    if (position.top > itemTop + item.height / 2) {
                                        listBoxInstance.insertAt(me._dragItem, item.index + 1);
                                    }
                                    else {
                                        listBoxInstance.insertAt(me._dragItem, item.index);
                                    }

                                    if (me.dropAction == 'default') {
                                        if (oldItem.index > 0) {
                                            me.selectIndex(oldItem.index - 1);
                                        }
                                        me.removeItem(oldItem);
                                    }
                                    var index = getCorrectIndexAfterDrop();
                                    listBoxInstance.selectIndex(index);
                                }
                            }
                        }
                        else {
                            if (listBoxInstance.dropAction != 'none') {
                                listBoxInstance.content.find('.draggable').jqxDragDrop('destroy');
                                listBoxInstance.addItem(me._dragItem);
                                if (listBoxInstance.dropAction == 'default') {
                                    if (oldItem.index > 0) {
                                        me.selectIndex(oldItem.index - 1);
                                    }
                                    me.removeItem(oldItem);
                                }

                                listBoxInstance.selectIndex(0);
                            }
                        }
                    }
                }
                else {
                    if (me.dragEnd) {
                        var dragEnd = me.dragEnd(oldItem, event.args);
                        if (false == dragEnd) {
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            }
                            return false;
                        } 
                    }
                }
                if (oldItem != null) {
                    me._raiseEvent(5, { label: oldItem.label, value: oldItem.value, originalEvent: event.args });
                }
                return false;
            });
        },

        _enableDragDrop: function () {
            if (this.allowDrag && this.host.jqxDragDrop) {
                var elements = this.content.find('.draggable');
                if (elements.length > 0) {
                    var me = this;
                    elements.jqxDragDrop({
                        cursor: 'arrow', revertDuration: 0, appendTo: 'body', dragZIndex: 99999, revert: true,
                        initFeedback: function (feedback) {
                            var title = $('<span style="white-space: nowrap;" class="' + me.toThemeProperty('jqx-fill-state-normal') + '">' + feedback.text() + '</span>');
                            $(document.body).append(title);
                            var width = title.width();
                            title.remove();
                            feedback.width(width + 5);
                            feedback.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        }
                    });
                    this._autoScrollTimer = null;
                    me._dragItem = null;
                    me._handleDragStart(elements, me);
                    me._handleDragging(elements, me);
                    me._handleDragEnd(elements, me);
                }
            }
        },

        _getMouseCoordinates: function (event) {
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this._isTouchDevice) {
                return {
                    left: event.args.originalEvent.touches[0].pageX,
                    top: event.args.originalEvent.touches[0].pageY
                };
            } else {
                return {
                    left: event.args.pageX,
                    top: event.args.pageY
                };
            }
        }
    });
}

jqxTreeDragDrop = function () {
    $.extend($.jqx._jqxTree.prototype,
    {
        _syncItems: function (elements) {
            this._visibleItems = new Array();
            var me = this;
            $.each(elements, function () {
                var $element = $(this);
                if ($element.css('display') != 'none') {
                    var height = $element.outerHeight();
                    if ($element.height() > 0) {
                        var top = parseInt($element.offset().top);
                        me._visibleItems[me._visibleItems.length] = { element: this, top: top, height: height, bottom: top + height };
                    }
                }
            });
        },

        _hitTestBounds: function (treeInstance, left, top) {
            var me = this;
            var treeItem = null;
            if (treeInstance._visibleItems) {
                var hostLeft = parseInt(treeInstance.host.offset().left);
                var hostWidth = treeInstance.host.outerWidth();

                $.each(treeInstance._visibleItems, function (index) {
                    if (left >= hostLeft && left < hostLeft + hostWidth)
                        if (this.top + 5 < top && top < this.top + this.height) {
                            var parentElement = $(this.element).parents('li:first');
                            if (parentElement.length > 0) {
                                treeItem = treeInstance.getItem(parentElement[0]);
                                if (treeItem != null) {
                                    treeItem.height = this.height;
                                    treeItem.top = this.top;
                                    return false;
                                }
                            }
                        }
                });
            }
            return treeItem;
        },

        _handleDragStart: function (elements, me) {
            if (me._dragOverItem) {
                me._dragOverItem.titleElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
            }

            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (isTouchDevice) {
                if (me.allowDrag) {
                    elements.bind('touchstart', function () {
                        $.jqx.mobile.setTouchScroll(false, 'panel' + me.element.id);
                    });
                }
            }

            elements.unbind('dragStart');
            elements.bind('dragStart', function (event) {
                me.feedbackElement = $("<div style='z-index: 99999; position: absolute;'></div>");
                me.feedbackElement.addClass(me.toThemeProperty('jqx-listbox-feedback'));
                me.feedbackElement.appendTo($(document.body));
                me.feedbackElement.hide();
                me._dragCancel = false;
                var position = event.args.position;
                var trees = $.find('.jqx-tree');
                me._trees = trees;
                $.each(trees, function () {
                    var treeInstance = $.data(this, "jqxTree").instance;
                    var elements = treeInstance.host.find('.draggable');
                    treeInstance._syncItems(elements);
                    if (treeInstance.allowDrag && !treeInstance.disabled) {
                        var parentElement = $(event.target).parents('li:first');
                        if (parentElement.length > 0) {
                            var item = treeInstance.getItem(parentElement[0]);
                            if (item) {
                                me._dragItem = item;
                                if (treeInstance.dragStart) {
                                    var result = treeInstance.dragStart(item);
                                    if (result == false) {
                                        me._dragCancel = true;
                                        $(event.args.element).jqxDragDrop({ triggerEvents: false });
                                        $(event.args.element).jqxDragDrop('cancelDrag');
                                        clearInterval(me._autoScrollTimer);
                                        $(event.args.element).jqxDragDrop({ triggerEvents: treeInstance });
                                        return false;
                                    }
                                }
                                treeInstance._raiseEvent(8, { label: item.label, value: item.value, originalEvent: event.args })
                            }
                        }
                    }
                });

                return false;
            });
        },

        _getMouseCoordinates: function (event) {
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this._isTouchDevice) {
                return {
                    left: event.args.originalEvent.touches[0].pageX,
                    top: event.args.originalEvent.touches[0].pageY
                };
            } else {
                return {
                    left: event.args.pageX,
                    top: event.args.pageY
                };
            }
        },

        _handleDragging: function (elements, me) {
            var elements = this.host.find('.draggable');
            elements.unbind('dragging');
            elements.bind('dragging', function (event) {
                var args = event.args;
                var position = args.position;
                var trees = me._trees;
                if (me._dragCancel)
                    return;

                if (me._dragOverItem) {
                    me._dragOverItem.titleElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                }

                var outsideTree = true;
                var mouseCoordinates = me._getMouseCoordinates(event);
                me._lastDraggingPosition = mouseCoordinates;
                $.each(trees, function () {
                    var offset = $(this).offset();
                    var top = offset.top + 20;
                    var bottom = $(this).height() + top - 40;
                    var left = offset.left;
                    var width = $(this).width();
                    var right = left + width;
                    var treeInstance = $.data(this, "jqxTree").instance;

                    if (treeInstance.disabled || !treeInstance.allowDrop)
                        return;

                    var vScrollInstance = treeInstance.vScrollInstance;
                    var item = treeInstance._hitTestBounds(treeInstance, mouseCoordinates.left, mouseCoordinates.top);
                    if (item != null) {
                        if (me._dragOverItem) {
                            me._dragOverItem.titleElement.removeClass(treeInstance.toThemeProperty('jqx-fill-state-hover'));
                        }
                        me._dragOverItem = item;
                        if (item.element) {
                            me.feedbackElement.show();
                            var itemTop = item.top;
                            var topPos = mouseCoordinates.top;
                            me._dropPosition = 'before';
                            if (topPos > itemTop + item.height / 3) {
                                itemTop = item.top + item.height / 2;
                                me._dragOverItem.titleElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                                me.feedbackElement.hide();
                                me._dropPosition = 'inside';
                            }
                            if (topPos > (item.top + item.height) - item.height / 3) {
                                itemTop = item.top + item.height;
                                me._dragOverItem.titleElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                                me.feedbackElement.show();
                                me._dropPosition = 'after';
                            }

                            me.feedbackElement.css('top', itemTop);
                            var left = -2 + parseInt(item.titleElement.offset().left);
                            me.feedbackElement.css('left', left);
                            me.feedbackElement.width($(item.titleElement).width() + 12);
                        }
                    }

                    if (mouseCoordinates.left >= left && mouseCoordinates.left < right) {
                        if (mouseCoordinates.top + 20 >= top && mouseCoordinates.top <= top + treeInstance.host.height()) {
                            outsideTree = false;
                        }

                        if (mouseCoordinates.top < top && mouseCoordinates.top >= top - 30) {
                            clearInterval(treeInstance._autoScrollTimer);
                            if (vScrollInstance.value != 0) {
                                me.feedbackElement.hide();
                            }
                            treeInstance._autoScrollTimer = setInterval(function () {
                                var scrolled = treeInstance.panelInstance.scrollUp();
                                var treeElements = treeInstance.host.find('.draggable');
                                treeInstance._syncItems(treeElements);
                                if (!scrolled) clearInterval(treeInstance._autoScrollTimer);
                            }, 100);
                        }
                        else if (mouseCoordinates.top > bottom && mouseCoordinates.top < bottom + 30) {
                            clearInterval(treeInstance._autoScrollTimer);
                            if (vScrollInstance.value != vScrollInstance.max) {
                                me.feedbackElement.hide();
                            }

                            treeInstance._autoScrollTimer = setInterval(function () {
                                var scrolled = treeInstance.panelInstance.scrollDown();
                                var treeElements = treeInstance.host.find('.draggable');
                                treeInstance._syncItems(treeElements);
                                if (!scrolled) clearInterval(treeInstance._autoScrollTimer);
                            }, 100);
                        }
                        else {
                            clearInterval(treeInstance._autoScrollTimer);
                        }
                    }
                    else {
                        clearInterval(treeInstance._autoScrollTimer);
                    }
                });
                if (outsideTree) {
                    if (me.feedbackElement) {
                        me.feedbackElement.hide();
                    }
                }
            });
        },

        _handleDragEnd: function (elements, me) {
            elements.unbind('dragEnd');
            elements.bind('dragEnd', function (event) {
                var elements = me.host.find('.draggable');
                clearInterval(me._autoScrollTimer);
                var position = event.args.position;
                var trees = me._trees;
                var tree = null;
                var _isTouchDevice = $.jqx.mobile.isTouchDevice();
                var mouseCoordinates = _isTouchDevice ? me._lastDraggingPosition : me._getMouseCoordinates(event);

                me.feedbackElement.remove();
                if (me._dragCancel)
                    return false;

                if (me._dragOverItem) {
                    me._dragOverItem.titleElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                }

                $.each(trees, function () {
                    var left = parseInt($(this).offset().left);
                    var right = left + $(this).width();
                    var treeInstance = $.data(this, "jqxTree").instance;
                    clearInterval(treeInstance._autoScrollTimer);
                    if (me._dragItem != null) {
                        if (mouseCoordinates.left >= left && mouseCoordinates.left < right) {
                            var top = parseInt($(this).offset().top);
                            var bottom = top + $(this).height();
                            if (mouseCoordinates.top >= top && mouseCoordinates.top <= bottom) {
                                tree = $(this);
                            }
                        }
                    }
                });
                var oldItem = me._dragItem;
                if (tree != null && tree.length > 0) {
                    var allowDrop = tree.jqxTree('allowDrop');
                    if (allowDrop) {
                        var treeInstance = $.data(tree[0], "jqxTree").instance;
                        var item = me._dragOverItem;
                        if (item != null && me._dragOverItem.treeInstance.element.id == treeInstance.element.id) {
                            var result = true;
                            if (me.dragEnd) {
                                result = me.dragEnd(oldItem, item, event.args, me._dropPosition, tree);
                                if (result == false) {
                                    $(event.args.element).jqxDragDrop({ triggerEvents: false });
                                    $(event.args.element).jqxDragDrop('cancelDrag');
                                    clearInterval(me._autoScrollTimer);
                                    $(event.args.element).jqxDragDrop({ triggerEvents: true });
                                }
                                if (undefined == result) result = true;
                            }
                            if (result) {
                                var updateSourceTree = function () {
                                    var oldTreeInstance = me._dragItem.treeInstance;
                                    oldTreeInstance._refreshMapping();
                                    oldTreeInstance._updateItemsNavigation();
                                    oldTreeInstance._render(true, false);
                                    if (oldTreeInstance.checkboxes) {
                                        oldTreeInstance._updateCheckStates();
                                    }
                                    me._dragItem.treeInstance = treeInstance;
                                    me._syncItems(me._dragItem.treeInstance.host.find('.draggable'));
                             //       oldTreeInstance._enableDragDrop();
                                }

                                if (treeInstance.dropAction != 'none') {
                                    if (me._dragItem.id != me._dragOverItem.id) {
                                        if (me._dropPosition == 'inside') {
                                            treeInstance._drop(me._dragItem.element, me._dragOverItem.element, -1, treeInstance);
                                            updateSourceTree();
                                        }
                                        else {
                                            var offset = 0;
                                            if (me._dropPosition == 'after') offset++;
                                            treeInstance._drop(me._dragItem.element, me._dragOverItem.parentElement, offset + $(me._dragOverItem.element).index(), treeInstance);
                                            updateSourceTree();
                                        }
                                    }
                                }

                                treeInstance._render(true, false);
                                var treeElements = treeInstance.host.find('.draggable');
                                me._syncItems(treeElements);
                                me._dragOverItem = null;
                                me._dragItem = null;
                                treeInstance._refreshMapping();
                                treeInstance._updateItemsNavigation();
                                treeInstance.selectedItem = null;
                                treeInstance.selectItem(oldItem.element);
                                if (treeInstance.checkboxes) {
                                    treeInstance._updateCheckStates();
                                }
                                treeInstance._render(true, false);
                                //      treeInstance._enableDragDrop();
                            }
                        }
                        else {
                            if (treeInstance.dropAction != 'none') {
                                if (treeInstance.allowDrop) {
                                    me._dragItem.parentElement = null;
                                    treeInstance._drop(me._dragItem.element, null, -1, treeInstance);
                                    var oldInstance = me._dragItem.treeInstance;
                                    oldInstance._refreshMapping();
                                    oldInstance._updateItemsNavigation();
                                    if (oldInstance.checkboxes) {
                                        oldInstance._updateCheckStates();
                                    }
                                    var treeElements = oldInstance.host.find('.draggable');
                                    me._syncItems(treeElements);
                                    me._dragItem.treeInstance = treeInstance;
                                    treeInstance.items[treeInstance.items.length] = me._dragItem;
                                    treeInstance._render(true, false);
                                    treeInstance.selectItem(oldItem.element);
                                    treeInstance._refreshMapping();
                                    treeInstance._updateItemsNavigation();
                                    var treeElements = treeInstance.host.find('.draggable');
                                    treeInstance._syncItems(treeElements);
                                    if (treeInstance.checkboxes) {
                                        treeInstance._updateCheckStates();
                                    }
                                    me._dragOverItem = null;
                                    me._dragItem = null;
                          //          treeInstance._enableDragDrop();
                                }
                            }
                        }
                    }
                }
                else {
                    if (me.dragEnd) {
                        var dropResult = me.dragEnd(oldItem, event.args);
                        if (false == dropResult) {
                            return false;
                        }
                    }
                }
                if (oldItem != null) {
                    me._raiseEvent(7, { label: oldItem.label, value: oldItem.value, originalEvent: event.args });
                }
                return false;
            });
        },

        _drop: function (element, parentElement, index, treeInstance) {
            if ($(parentElement).parents('#' + element.id).length > 0)
                return;

            if (parentElement != null) {
                if (parentElement.id == element.id)
                    return;
            }

            var me = this;
            if (treeInstance.element.innerHTML.indexOf('UL')) {
                var innerElement = treeInstance.host.find('ul:first');
            }

            if (parentElement == undefined && parentElement == null) {
                if (index == undefined || index == -1) {
                    innerElement.append(element);
                }
                else {
                    if (innerElement.children('li').eq(index).length == 0) {
                        innerElement.children('li').eq(index - 1).after(element);
                    }
                    else {
                        if (innerElement.children('li').eq(index)[0].id != element.id) {
                            innerElement.children('li').eq(index).before(element);
                        }
                    }
                }
            }
            else if (index == undefined || index == -1) {
                parentElement = $(parentElement);
                var parentUL = parentElement.find('ul:first');
                if (parentUL.length == 0) {
                    ulElement = $('<ul></ul>');
                    $(parentElement).append(ulElement);
                    parentUL = parentElement.find('ul:first');
                    var item = treeInstance.itemMapping["id" + parentElement[0].id].item;
                    item.subtreeElement = parentUL[0];
                    item.hasItems = true;
                    parentUL.addClass(treeInstance.toThemeProperty('jqx-tree-dropdown'));
                    parentUL.append(element);
                    element = parentUL.find('li:first');
                    item.parentElement = element;
                }
                else {
                    parentUL.append(element);
                }
            }
            else {
                parentElement = $(parentElement);
                var parentUL = parentElement.find('ul:first');
                if (parentUL.length == 0) {
                    ulElement = $('<ul></ul>');
                    $(parentElement).append(ulElement);
                    parentUL = parentElement.find('ul:first');
                    if (parentElement) {
                        var item = treeInstance.itemMapping["id" + parentElement[0].id].item;
                        item.subtreeElement = parentUL[0];
                        item.hasItems = true;
                    }

                    parentUL.addClass(treeInstance.toThemeProperty('jqx-tree-dropdown'));
                    parentUL.append(element);
                    element = parentUL.find('li:first');
                    item.parentElement = element;
                }
                else {
                    if (parentUL.children('li').eq(index).length == 0) {
                        parentUL.children('li').eq(index - 1).after(element);
                    }
                    else {
                        if (parentUL.children('li').eq(index)[0].id != element.id) {
                            parentUL.children('li').eq(index).before(element);
                        }
                    }
                }
            }
        },

        _enableDragDrop: function () {
            if (this.allowDrag && this.host.jqxDragDrop) {
                var elements = this.host.find('.draggable');
                var me = this;

                if (elements.length > 0) {
                    elements.jqxDragDrop({ cursor: 'arrow', revertDuration: 0, appendTo: 'body', dragZIndex: 99999, revert: true,
                        initFeedback: function (feedback) {
                            var title = $('<span style="white-space: nowrap;" class="' + me.toThemeProperty('jqx-fill-state-normal') + '">' + feedback.text() + '</span>');
                            $(document.body).append(title);
                            var width = title.width();
                            title.remove();
                            feedback.width(width + 5);
                            feedback.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        }
                    });
                    var destroyed = elements.jqxDragDrop('isDestroyed');
                    if (destroyed) {
                        elements.jqxDragDrop('_createDragDrop');
                    }

                    this._autoScrollTimer = null;
                    me._dragItem = null;
                    me._handleDragStart(elements, me);
                    me._handleDragging(elements, me);
                    me._handleDragEnd(elements, me);
                }
            }
        }
    });
}
})(jQuery);

(function ($) {

    $.jqx.jqxWidget("jqxComboBox", "", {});

    $.extend($.jqx._jqxComboBox.prototype, {
        defineInstance: function () {
            // enables/disables the combobox.
            this.disabled = false;
            // gets or sets the listbox width.
            this.width = null;
            // gets or sets the listbox height.
            this.height = null;
            // Represents the collection of list items.
            this.items = new Array();
            // Gets or sets the selected index.
            this.selectedIndex = -1;
            // data source.
            this.source = null;
            // gets or sets the scrollbars size.
            this.scrollBarSize = 15;
            // gets or sets the scrollbars size.
            this.arrowSize = 18;
            // enables/disables the hover state.
            this.enableHover = true;
            // enables/disables the selection.
            this.enableSelection = true;
            // gets the visible items. // this property is internal for the combobox.
            this.visualItems = new Array();
            // gets the groups. // this property is internal for the combobox.
            this.groups = new Array();
            // gets or sets whether the items width should be equal to the combobox's width.
            this.equalItemsWidth = true;
            // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.
            this.itemHeight = -1;
            // represents the combobox's events.
            this.visibleItems = new Array();
            // emptry group's text.
            this.emptyGroupText = 'Group';
            // Type: Number
            // Default: 100
            // Showing Popup Animation's delay.
            if (this.openDelay == undefined) {
                this.openDelay = 350;
            }
            // Type: Number
            // Default: 200
            // Hiding Popup Animation's delay.
            if (this.closeDelay == undefined) {
                this.closeDelay = 400;
            }
            // default, none
            // Type: String.
            // enables or disables the animation.
            this.animationType = 'default';
            // Type: String
            // Default: auto ( the drop down takes the combobox's width.)
            // Sets the popup's width.
            this.dropDownWidth = 'auto';
            // Type: String
            // Default: 200px ( the height is 200px )
            // Sets the popup's height.
            this.dropDownHeight = '200px';
            // Type: Boolean
            // Default: false
            // Sets the popup's height to be equal to the items summary height;            
            this.autoDropDownHeight = false;
            // Type: Boolean
            // Default: false
            // Enables or disables the browser detection.
            this.enableBrowserBoundsDetection = false;
            this.dropDownHorizontalAlignment = 'left';
            // Type: String
            // Default: startswithignorecase
            // Possible Values: 'none, 'contains', 'containsignorecase', 'equals', 'equalsignorecase', 'startswithignorecase', 'startswith', 'endswithignorecase', 'endswith'
            this.searchMode = 'startswithignorecase';
            this.autoComplete = false;
            this.remoteAutoComplete = false;
            this.remoteAutoCompleteDelay = 500;
            this.minLength = 2;
            this.displayMember = "";
            this.valueMember = "";
            this.keyboardSelection = true;
            this.renderer = null;
            this.autoOpen = false;
            this.checkboxes = false;
            this.promptText = "";
            this.events =
	   	    [
            // occurs when the combobox is opened.
		      'open',
            // occurs when the combobox is closed.
              'close',
            // occurs when an item is selected.
              'select',
            // occurs when an item is unselected.
              'unselect',
            // occurs when the selection is changed.
              'change',
              // triggered when the user checks or unchecks an item. 
              'checkChange',
              // triggered when the binding is completed.
              'bindingComplete'
        ];
        },

        createInstance: function (args) {
            this.render();
        },

        render: function()
        {
            this.removeHandlers();
            this.isanimating = false;
            this.element.innerHTML = "";
            var comboStructure = $("<div style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>" +
                "<div id='dropdownlistWrapper' style='padding: 0; margin: 0; border: none; background-color: transparent; float: left; width:100%; height: 100%; position: relative;'>" +
                "<div id='dropdownlistContent' style='padding: 0; margin: 0; border-left: none; border-top: none; border-bottom: none; float: left; position: absolute;'/>" +
                "<div id='dropdownlistArrow' style='padding: 0; margin: 0; border-left-width: 1px; border-bottom-width: 0px; border-top-width: 0px; border-right-width: 0px; float: right; position: absolute;'/>" +
                "</div>" +
                "</div>");
            this.comboStructure = comboStructure;
            if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {
                throw "jqxListBox is not loaded.";
            }

            this.touch = $.jqx.mobile.isTouchDevice();

            this.host.append(comboStructure);

            this.dropdownlistWrapper = this.host.find('#dropdownlistWrapper');
            this.dropdownlistArrow = this.host.find('#dropdownlistArrow');
            this.dropdownlistContent = this.host.find('#dropdownlistContent');
            this.dropdownlistContent.addClass(this.toThemeProperty('jqx-combobox-content'));
            this.dropdownlistContent.addClass(this.toThemeProperty('jqx-widget-content'));
            this.dropdownlistWrapper[0].id = "dropdownlistWrapper" + this.element.id;
            this.dropdownlistArrow[0].id = "dropdownlistArrow" + this.element.id;
            this.dropdownlistContent[0].id = "dropdownlistContent" + this.element.id;

            this.dropdownlistContent.append($('<input autocomplete="off" style="margin: 0; padding: 0; border: 0;" type="textarea"/>'));
            this.input = this.dropdownlistContent.find('input');
            this.input.addClass(this.toThemeProperty('jqx-combobox-input'));
            this.input.addClass(this.toThemeProperty('jqx-widget-content'));
            this._addInput();

            try {
                var listBoxID = 'listBox' + this.element.id;
                var oldContainer = $($.find('#' + listBoxID));
                if (oldContainer.length > 0) {
                    oldContainer.remove();
                }

                var container = $("<div style='overflow: hidden; border: none; background-color: transparent; position: absolute;' id='listBox" + this.element.id + "'><div id='innerListBox" + this.element.id + "'></div></div>");
                container.hide();
                container.appendTo(document.body);
                this.container = container;
                this.listBoxContainer = $($.find('#innerListBox' + this.element.id));

                var width = this.width;
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }

                if (this.dropDownHeight == null) {
                    this.dropDownHeight = 200;
                }

                var me = this;
                this.container.width(parseInt(width) + 25);
                this.container.height(parseInt(this.dropDownHeight) + 25);
                this.addHandler(this.listBoxContainer, 'bindingComplete', function (event) {
                    me._raiseEvent('6');
                });

                this.listBoxContainer.jqxListBox({
                    checkboxes: this.checkboxes,
                    renderer: this.renderer, itemHeight: this.itemHeight, incrementalSearch: false, width: width, scrollBarSize: this.scrollBarSize, autoHeight: this.autoDropDownHeight, height: this.dropDownHeight, displayMember: this.displayMember, valueMember: this.valueMember, source: this.source, theme: this.theme,
                    rendered: function () {
                        me.listBox = $.data(me.listBoxContainer[0], "jqxListBox").instance;
                        if (!me.autoComplete && !me.remoteAutoComplete) {
                            me.listBoxContainer.jqxListBox('selectIndex', me.selectedIndex);
                        }
                        if (me.autoComplete && !me.remoteAutoComplete) {
                            me.clearSelection();
                        }
                        if (me.remoteAutoComplete) {
                            me.container.height(me.listBox.virtualSize.height + 25);
                            me.listBoxContainer.height(me.listBox.virtualSize.height);
                            if (me.searchString != undefined) {
                                var items = me.listBoxContainer.jqxListBox('items');
                                if (items) {
                                    if (items.length > 0) {
                                        if (!me.isOpened()) {
                                            me.open();
                                        }
                                    }
                                    else me.close();
                                } else me.close();
                            }
                        }
                        else {
                            me.renderSelection('mouse');
                        }

                        if (me.rendered) {
                            me.rendered();
                        }
                    }
                });
                this.listBoxContainer.css({ position: 'absolute', zIndex: 100000, top: 0, left: 0 });
                this.listBoxContainer.css('border-top-width', '1px');
                this.listBox = $.data(this.listBoxContainer[0], "jqxListBox").instance;
                this.listBox.enableSelection = this.enableSelection;
                this.listBox.enableHover = this.enableHover;
                this.listBox.equalItemsWidth = this.equalItemsWidth;
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox._arrange();
                this.addHandler(this.host, 'loadContent', function (event) {
                    me._arrange();
                });
                this.addHandler(this.listBoxContainer, 'unselect', function (event) {
                    me._raiseEvent('3', { index: event.args.index, type: event.args.type, item: event.args.item });
                });

                this.addHandler(this.listBoxContainer, 'change', function (event) {
                    me._raiseEvent('4', { index: event.args.index, type: event.args.type, item: event.args.item });
                });
          
                if (this.animationType == 'none') {
                    this.container.css('display', 'none');
                }
                else {
                    this.container.hide();
                }
            }
            catch (e) {

            }

            var self = this;
            self.input.attr('disabled', self.disabled);
            var ie7 = $.browser.msie && $.browser.version < 8;
            if (!ie7) {
                self.input.attr('placeholder', self.promptText);
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(self.toThemeProperty('jqx-combobox-state-disabled'));
                    instance.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.addClass(self.toThemeProperty('jqx-combobox-content-disabled'));
                }
                else {
                    instance.host.removeClass(self.toThemeProperty('jqx-combobox-state-disabled'));
                    instance.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.removeClass(self.toThemeProperty('jqx-combobox-content-disabled'));
                }
                instance.input.attr('disabled', self.disabled);
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-combobox-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.dropdownlistContent.addClass(this.toThemeProperty('jqx-combobox-content-disabled'));
            }

            this.host.addClass(this.toThemeProperty('jqx-combobox-state-normal'));
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));
            this.dropdownlistArrowIcon = $("<div></div>");
            this.dropdownlistArrowIcon.addClass(this.toThemeProperty('icon-arrow-down'));
            this.dropdownlistArrowIcon.addClass(this.toThemeProperty('icon'));
            this.dropdownlistArrow.append(this.dropdownlistArrowIcon);
            this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-combobox-arrow-normal'));
            this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-rc-r'));

            this._setSize();
            this._updateHandlers();

            this.addHandler(this.input, 'keyup.textchange', function (event) {
                var foundMatch = me._search(event);
            });

            // fix for IE7
            if ($.browser.msie && $.browser.version < 8) {
                if (this.host.parents('.jqx-window').length > 0) {
                    var zIndex = this.host.parents('.jqx-window').css('z-index');
                    container.css('z-index', zIndex + 10);
                    this.listBoxContainer.css('z-index', zIndex + 10);
                }
            }

            if (this.checkboxes) {
                this.input.attr('readonly', true);
            }
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.cinput = $("<input type='hidden'/>");
            this.host.append(this.cinput);
            this.cinput.attr('name', name);
        },

        _updateInputSelection: function () {
            if (this.cinput) {
                if (this.selectedIndex == -1) {
                    this.cinput.val("");
                }
                else {
                    var selectedItem = this.getSelectedItem();
                    if (selectedItem != null) {
                        this.cinput.val(selectedItem.value);
                    }
                    else {
                        this.cinput.val(this.dropdownlistContent.text());
                    }
                }
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    var str = "";
                    if (items != null) {
                        for (var i = 0; i < items.length; i++) {
                            if (i == items.length - 1) {
                                str += items[i].value;
                            }
                            else {
                                str += items[i].value + ",";
                            }
                        }
                    }
                    this.cinput.val(str);
                }
            }
        },

        _search: function (event) {
            if (event.keyCode == 9)
                return;

            if (this.searchMode == 'none' || this.searchMode == null || this.searchMode == 'undefined') {
                return;
            }

            if (event.keyCode == 16 || event.keyCode == 17 || event.keyCode == 20)
                return false;

            if (this.checkboxes) {
                return false;
            }

            if (!this.isanimating) {
                if (event.altKey && event.keyCode == 38) {
                    this.hideListBox();
                    return false;
                }

                if (event.altKey && event.keyCode == 40) {
                    if (!this.isOpened()) {
                        this.showListBox();
                    }
                    return false;
                }
            }

            if (event.keyCode == 37 || event.keyCode == 39)
                return false;

            if (event.altKey || event.keyCode == 18)
                return;

            if (event.keyCode >= 33 && event.keyCode <= 40) {
                return;
            }

            var value = this.input.val();
            if (value.length == 0 && !this.autoComplete) {
                this.hideListBox();
                this.listBox.selectIndex(-1, true);
                return;
            }

            if (this.remoteAutoComplete) {
                var me = this;
                var clearListSelection = function () {
                    me.listBox.vScrollInstance.value = 0;
                    me.selectedIndex = -1;
                    me.listBox.selectedIndex = -1;
                    me.listBox.clearSelection();
                }

                if (value.length >= me.minLength) {
                    if (!event.ctrlKey && !event.shiftKey && !event.altKey) {
                        if (me.searchString != value) {
                            if (this._searchTimer) clearTimeout(this._searchTimer);
                            if (event.keyCode != 13 && event.keyCode != 27) {
                                this._searchTimer = setTimeout(function () {
                                    clearListSelection();
                                    me.listBox.autoHeight = true;
                                    me.searchString = me.input.val();
                                    me.search(me.input.val());
                                }, this.remoteAutoCompleteDelay);
                            }
                        }
                        me.searchString = value;
                    }
                }
                else {
                    if (this._searchTimer) clearTimeout(this._searchTimer);
                    clearListSelection();
                    me.searchString = me.input.val();
                    me.listBoxContainer.jqxListBox({ source: null });
                }
                return;
            }

            var me = this;
            var matches = this._getMatches(value);
            var matchItems = matches.matchItems;
            var index = matches.index;

            if (me.autoComplete) {
                if (matchItems != undefined || value == '') {
                    this.listBox.vScrollInstance.value = 0;
                    this.listBox._addItems();
                    this.listBox.autoHeight = false;
                    if (this.listBox.virtualSize.height < parseInt(this.dropDownHeight)) {
                        this.listBox.autoHeight = true;
                        this.container.height(this.listBox.virtualSize.height + 25);
                        this.listBoxContainer.height(this.listBox.virtualSize.height);
                        this.listBox._arrange();
                    }
                    else {
                        this.listBox.height = this.dropDownHeight;
                        this.container.height(parseInt(this.dropDownHeight) + 25);
                        this.listBoxContainer.height(parseInt(this.dropDownHeight));
                        this.listBox._arrange();
                    }

                    this.listBox._addItems();
                    this.listBox._renderItems();

                    index = 0;
                }
                else index = -1;

                if (index == -1) {
                    this.hideListBox();
                }
            }

            if (event.keyCode == '13') {
                var isOpen = this.container.css('display') == 'block';
                if (isOpen && !this.isanimating) {
                    this.hideListBox();
                    return;
                }
            }
            else if (event.keyCode == '27') {
                var isOpen = this.container.css('display') == 'block';
                if (isOpen && !this.isanimating) {
                    this.hideListBox();
                    event.preventDefault();
                    return false;
                }
            }
            else {
                if (index > -1) {
                    var _oldindex = this.listBox.selectedIndex;
                    if (!this.isOpened() && !this.opening && !event.ctrlKey) {
                        if (this.listBox.visibleItems && this.listBox.visibleItems.length > 0) {
                            if (this.input.val() != this.searchString && this.searchString != undefined) {
                                this.showListBox();
                            }
                        }
                    }
                    this.searchString = this.input.val();
                    this.listBox.clearSelection();
                    var item = this.listBox.getVisibleItem(index);

                    if (item != undefined && (this.searchMode == 'startswith' || this.searchMode == 'startswithignorecase')) {
                        this.listBox.selectIndex(index, true);
                        var currentInput = this.input.val();
                        var me = this;
                        if (!event.ctrlKey && parseInt(event.keyCode) != 8 && parseInt(event.keyCode) != 46) {
                            if (item.label != me.input.val()) {
                                if (item.label != undefined) {
                                    me.input.val(item.label);
                                    me.input.focus();
                                    me._setSelection(currentInput.length, item.label.length);
                                }
                            }
                        }
                    }
                }
                else if (index == -1) {
                    this.listBox.clearSelection();
                }
            }
        },
        
        val: function(value)
        {
            if (!this.input) return "";
            if (typeof value === 'object') {
                return this.input.val();
            }
            else {
                this.input.val(value);
                return this.input.val();
            }

        },

        focus: function()
        {
            var me = this;
            var doFocus = function () {
                me.input.focus();
                var val = me.input.val();
                me._setSelection(0, val.length);
            }
            doFocus();
            setTimeout(function () {
                doFocus();
            }, 10);
        },

        _setSelection: function (start, end) {
            try {
                if ('selectionStart' in this.input[0]) {
                    this.input[0].focus();
                    this.input[0].setSelectionRange(start, end);
                }
                else {
                    var range = this.input[0].createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', start);
                    range.select();
                }
            }
            catch (error) {
            }
        },

        setContent: function (value) {
            this.input.val(value);
        },

        // get all matches of a searched value.
        _getMatches: function (value) {
            var items = this.getItems();
            if (items == undefined) {
                return { index: -1, mathItem: new Array() }
            }

            var me = this;
            var index = -1;
            var matchItems = new Array();
            var newItemsIndex = 0;

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label;
                    }
                    else if (this.value) {
                        itemValue = this.value;
                    }
                    else if (this.title) {
                        itemValue = this.title;
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (me.autoComplete && !mathes) {
                        this.visible = false;
                    }

                    if (mathes && me.autoComplete) {
                        matchItems[newItemsIndex++] = this;
                        this.visible = true;
                    }

                    if (value == '' && me.autoComplete) {
                        this.visible = true;
                        mathes = false;
                    }

                    if (mathes && !me.autoComplete) {
                        index = this.visibleIndex;
                        return false;
                    }
                }
            });

            return { index: index, matchItems: matchItems };
        },

        // gets all items that match to a search value.
        findItems: function (value) {
            var items = this.getItems();
            var me = this;
            var index = 0;
            var matchItems = new Array();

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label;
                    }
                    else if (this.value) {
                        itemValue = this.value;
                    }
                    else if (this.title) {
                        itemValue = this.title;
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (mathes) {
                        matchItems[index++] = this;
                    }
                }
            });

            return matchItems;
        },

        //[optimize]
        _resetautocomplete: function () {
            $.each(this.listBox.items, function (i) {
                this.visible = true;
            });
            this.listBox.vScrollInstance.value = 0;
            this.listBox._addItems();
            this.listBox.autoHeight = false;

            this.listBox.height = this.dropDownHeight;
            this.container.height(parseInt(this.dropDownHeight) + 25);
            this.listBoxContainer.height(parseInt(this.dropDownHeight));
            this.listBox._arrange();

            this.listBox._addItems();
            this.listBox._renderItems();
        },

        // gets all items.
        getItems: function () {
            var item = this.listBox.items;
            return item;
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.height(this.height);
            }

            if (isPercentage) {
                me._arrange();
                var me = this;
                var width = this.host.width();
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }
                this.listBoxContainer.jqxListBox({ width: width });
                this.container.width(parseInt(width) + 25);

                var resizeFunc = function () {
                    me._arrange();
                    if (me.dropDownWidth == 'auto') {
                        var width = me.host.width();
                        me.listBoxContainer.jqxListBox({ width: width });
                        me.container.width(parseInt(width) + 25);
                    }
                }

                $(window).unbind('resize.' + this.element.id);
                $(window).bind('resize.' + this.element.id, function () {
                    resizeFunc();
                });
            }
        },

        // returns true when the listbox is opened, otherwise returns false.
        isOpened: function () {
            var me = this;
            var openedListBox = $.data(document.body, "openedComboJQXListBox");

            if (this.container.css('display') != 'block')
                return false;

            if (openedListBox != null && openedListBox == me.listBoxContainer) {
                return true;
            }

            return false;
        },

        _updateHandlers: function () {
            var self = this;
            var hovered = false;
            this.removeHandlers();

            if (!this.touch) {
                this.host.hover(function () {
                    if (!self.disabled && self.enableHover) {
                        hovered = true;
                        self.host.addClass(self.toThemeProperty('jqx-combobox-state-hover'));
                        self.dropdownlistArrowIcon.addClass(self.toThemeProperty('icon-arrow-down-hover'));
                        self.dropdownlistArrow.addClass(self.toThemeProperty('jqx-combobox-arrow-hover'));
                        self.dropdownlistArrow.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                    }
                }, function () {
                    if (!self.disabled && self.enableHover) {
                        self.host.removeClass(self.toThemeProperty('jqx-combobox-state-hover'));
                        self.dropdownlistArrowIcon.removeClass(self.toThemeProperty('icon-arrow-down-hover'));
                        self.dropdownlistArrow.removeClass(self.toThemeProperty('jqx-combobox-arrow-hover'));
                        self.dropdownlistArrow.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        hovered = false;
                    }
                });
            }

            if (self.autoOpen) {
                this.addHandler(this.host, 'mouseenter', function () {
                    var isOpened = self.isOpened();
                    if (!isOpened && self.autoOpen) {
                        self.open();
                        self.host.focus();
                    }
                });

                $(document).bind('mousemove.' + self.element.id, function (event) {
                    var isOpened = self.isOpened();
                    if (isOpened && self.autoOpen) {
                        var offset = self.host.offset();
                        var top = offset.top;
                        var left = offset.left;
                        var popupOffset = self.container.offset();
                        var popupLeft = popupOffset.left;
                        var popupTop = popupOffset.top;

                        canClose = true;

                        if (event.pageY >= top && event.pageY <= top + self.host.height() + 2) {
                            if (event.pageX >= left && event.pageX < left + self.host.width())
                                canClose = false;
                        }
                        if (event.pageY >= popupTop && event.pageY <= popupTop + self.container.height() - 20) {
                            if (event.pageX >= popupLeft && event.pageX < popupLeft + self.container.width())
                                canClose = false;
                        }

                        if (canClose) {
                            self.close();
                        }
                    }
                });
            }

            var eventName = 'mousedown';
            if (this.touch) eventName = 'touchstart';

            this.addHandler(this.dropdownlistArrow, eventName,
            function (event) {
                if (!self.disabled) {
                    var isOpen = self.container.css('display') == 'block';
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.hideListBox();
                            self.input.focus();
                            setTimeout(function () {
                                self.input.focus();
                            }, 10);
                        }
                        else {
                            if (self.autoComplete) {
                             //   self._resetautocomplete();
                            }
                            if (self.autoDropDownHeight) {
                                self.container.height(self.listBoxContainer.height() + 25);
                                var autoheight = self.listBoxContainer.jqxListBox('autoHeight');
                                if (!autoheight) {
                                    self.listBoxContainer.jqxListBox({ autoHeight: self.autoDropDownHeight })
                                    self.listBox._arrange();
                                    self.listBox.ensureVisible(0);
                                    self.listBox._renderItems();
                                    self.container.height(self.listBoxContainer.height() + 25);
                                }
                            }
                            self.showListBox();
                            self.input.focus();
                            setTimeout(function () {
                                self.input.focus();
                            }, 10);
                        }
                    }
                }
            });

            this.addHandler(this.input, 'focus', function () {
                self.focused = true;
                self.host.addClass(self.toThemeProperty('jqx-combobox-state-focus'));
                self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                self.dropdownlistContent.addClass(self.toThemeProperty('jqx-combobox-content-focus'));
            });
            this.addHandler(this.input, 'blur', function () {
                self.focused = false;
                if (!self.isOpened() && !self.opening) {
                    self.host.removeClass(self.toThemeProperty('jqx-combobox-state-focus'));
                    self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
                    self.dropdownlistContent.removeClass(self.toThemeProperty('jqx-combobox-content-focus'));
                }
                if (self._searchTimer) clearTimeout(self._searchTimer);
            });
            this.addHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.element.id });
            if (this.touch) {
                this.addHandler($(document), 'touchstart.' + this.element.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.element.id });
            }
            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            if (self.isOpened()) {
                                var data = { me: self, listbox: self.listBox, id: self.element.id };
                                event.data = data;
                                //self.closeOpenedListBox(event);
                            }
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mousedown', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mousedown', eventHandle);
                        }
                    }
                }
            }

            this.addHandler(this.host, 'keydown', function (event) {
                var isOpen = self.container.css('display') == 'block';

                if (self.host.css('display') == 'none') {
                    return true;
                }

                if (event.keyCode == '13') {
                    if (isOpen && !self.isanimating) {
                        self.renderSelection('mouse');
                        var index = self.listBox.selectedIndex;
                        self._setSelection(self.input.val().length, self.input.val().length);
                        self.hideListBox();
                        if (!self.keyboardSelection) {
                            self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.getItem(self.selectedIndex) });
                        }
                        else if (self.autoComplete) {
                            self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.listBox.getVisibleItem(self.selectedIndex) });
                        }
                        return false;
                    }
                }

                if (event.keyCode == 115) {
                    if (!self.isanimating) {
                        if (!self.isOpened()) {
                            self.showListBox();
                        }
                        else if (self.isOpened()) {
                            self.hideListBox();
                        }
                    }
                    return false;
                }

                if (event.altKey) {
                    if (self.host.css('display') == 'block') {
                        if (!self.isanimating) {
                            if (event.keyCode == 38) {
                                if (self.isOpened()) {
                                    self.hideListBox();
                                }
                            }
                            else if (event.keyCode == 40) {
                                if (!self.isOpened()) {
                                    self.showListBox();
                                }
                            }
                        }
                    }
                }

                if (event.keyCode == '27') {
                    if (self.isOpened() && !self.isanimating) {
                        self.hideListBox();
                        event.preventDefault();

                        return false;
                    }
                }

                if (isOpen && !self.disabled) {
                    return self.listBox._handleKeyDown(event);
                }
                else if (!self.disabled && !isOpen) {
                    var key = event.keyCode;
                    // arrow keys.
                    if (key == 33 || key == 34 || key == 35 || key == 36 || key == 38 || key == 40) {
                        return self.listBox._handleKeyDown(event);
                    }
                }
            });

            this.addHandler(this.listBoxContainer, 'checkChange', function (event) {
                self.renderSelection('mouse');
                self._updateInputSelection();
                self._raiseEvent(5, { label: event.args.label, value: event.args.value, checked: event.args.checked, item: event.args.item });
            });
            
            this.addHandler(this.listBoxContainer, 'select', function (event) {
                if (!self.disabled) {
                    if (event.args.type != 'keyboard' || self.keyboardSelection) {
                        self.renderSelection(event.args.type);
                        self._raiseEvent('2', { index: event.args.index, type: event.args.type, item: event.args.item });
                        if (event.args.type == 'mouse') {
                            if (event.args.item != undefined) {
                                self.tempSelectedValue = event.args.item.value;
                            }
                            if (!self.checkboxes) {
                                self.hideListBox();
                                self.input.focus();
                            }
                        }
                    }
                }
            });
            if (this.listBox != null && this.listBox.content != null) {
                this.addHandler(this.listBox.content, 'click', function (event) {
                    if (!self.disabled) {
                        if (event.target === self.listBox.itemswrapper[0])
                            return true;

                        self.renderSelection('mouse');
                        if (!self.touch && !self.ishiding) {
                            if (!self.checkboxes) {
                                self.hideListBox();
                                self.input.focus();
                            }
                        }    
                    }
                });
            }
        },

        removeHandlers: function () {
            var self = this;
            if (this.dropdownlistWrapper != null) {
                this.removeHandler(this.dropdownlistWrapper, 'mousedown');
            }

            this.removeHandler(this.host, 'keydown');
            this.host.unbind('hover');
            if (this.input != null) {
                this.removeHandler(this.input, 'focus');
                this.removeHandler(this.input, 'blur');
            }
            this.removeHandler(this.host, 'mouseenter');
            $(document).unbind('mousemove.' + self.element.id);
        },

        // gets an item by index.
        getItem: function (index) {
            var item = this.listBox.getItem(index);
            return item;
        },

        getItemByValue: function (value) {
            var item = this.listBox.getItemByValue(value);
            return item;
        },

        getVisibleItem: function(index)
        {
            var item = this.listBox.getVisibleItem(index);
            return item;
        },

        // renders the selection.
        renderSelection: function (type) {
            if (type == undefined || type == 'none') {
                return;
            }

            if (this.listBox == null)
                return;

            var item = this.listBox.visibleItems[this.listBox.selectedIndex];
            if (this.checkboxes) {
                var checkedItems = this.getCheckedItems();
                if (checkedItems != null && checkedItems.length > 0) {
                    item = checkedItems[0];
                }
                else item = null;
            }
            if (item == null) {
                var ie7 = $.browser.msie && $.browser.version < 8;
                if (!ie7) {
                    this.input.attr('placeholder', this.promptText);
                }
                this._updateInputSelection();
                return;
            }

            this.selectedIndex = this.listBox.selectedIndex;
            var spanElement = $('<span></span>');
           
            if (item.label != undefined && item.label != null && item.label.toString().length > 0) {
                spanElement.html(item.label);
            }
            else if (item.value != undefined && item.value != null && item.value.toString().length > 0) {
                spanElement.html(item.value);
            }
            else if (item.title != undefined && item.title != null && item.title.toString().length > 0) {
                spanElement.html(item.title);
            }
            else spanElement.html('jqxItem');

            var spanHeight = spanElement.outerHeight();
            if (this.checkboxes) {
                var items = this.getCheckedItems();
                var str = "";
                for (var i = 0; i < items.length; i++) {
                    if (i == items.length - 1) {
                        str += items[i].label;
                    }
                    else {
                        str += items[i].label + ",";
                    }
                }
                this.input.val(str);
            }
            else {
                this.input.val(spanElement.text());
            }
            spanElement.remove();
            if (this.renderSelectedItem) {
                var result = this.renderSelectedItem(this.listBox.selectedIndex, item);
                if (result != undefined) {
                    this.input.val(result);
                }
            }
            this._updateInputSelection();
        },

        dataBind: function () {
            this.listBoxContainer.jqxListBox({ source: this.source });
            this.renderSelection('mouse');
            if (this.source == null) {
                this.clearSelection();
            }
        },

        clear: function () {
            this.listBoxContainer.jqxListBox({ source: null });
            this.clearSelection();
        },

        // clears the selection.
        clearSelection: function (render) {
            this.selectedIndex = -1;
            this.listBox.clearSelection();
            this.input.val("");
        },

        // unselects an item at specific index.
        // @param Number
        unselectIndex: function (index, render) {
            if (isNaN(index))
                return;

            this.listBox.unselectIndex(index, render);
            this.renderSelection('mouse');
        },

        // selects an item at specific index.
        // @param Number
        selectIndex: function (index, ensureVisible, render, forceSelect) {
            this.listBox.selectIndex(index, ensureVisible, render, forceSelect);
            this.renderSelection('mouse');
            this.selectedIndex = index;
        },

        selectItem: function(item)
        {
            if (this.listBox != undefined) {
                this.listBox.selectItem(item);
                this.selectedIndex = this.listBox.selectedIndex;
                this.renderSelection('mouse');
            }
        },

        unselectItem: function(item)
        {
            if (this.listBox != undefined) {
                this.listBox.unselectItem(item);
                this.renderSelection('mouse');
            }
        },

        checkItem: function(item)
        {
            if (this.listBox != undefined) {
                this.listBox.checkItem(item);
            }
        },

        uncheckItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.uncheckItem(item);
            }
        },

        indeteterminateItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.indeteterminateItem(item);
            }
        },

        getSelectedValue: function()
        {
            return this.listBox.selectedValue;
        },

        // gets the selected index.
        getSelectedIndex: function () {
            return this.selectedIndex;
        },

        // gets the selected item.
        getSelectedItem: function () {
            return this.getItem(this.selectedIndex);
        },

        getCheckedItems: function () {
            return this.listBox.getCheckedItems();
        },

        checkIndex: function (index) {
            this.listBox.checkIndex(index);
        },

        uncheckIndex: function (index) {
            this.listBox.uncheckIndex(index);
        },

        indeterminateIndex: function (index) {
            this.listBox.indeterminateIndex(index);
        },
        checkAll: function () {
            this.listBox.checkAll();
        },

        uncheckAll: function () {
            this.listBox.uncheckAll();
        },

        // inserts an item at specific index.
        // @param Number
        insertAt: function (item, index) {
            if (item == null)
                return false;

            return this.listBox.insertAt(item, index);
        },

        // adds a new item.
        addItem: function (item) {
            return this.listBox.addItem(item);
        },

        // removes an item at specific index.
        // @param Number
        removeAt: function (index) {
            var result = this.listBox.removeAt(index);
            this.renderSelection('mouse');
            return result;
        },

        // ensures that an item is visible.
        // @param Number
        ensureVisible: function (index) {
            this.listBox.ensureVisible(index);
        },

        // disables an item at specific index.
        // @param Number
        disableAt: function (index) {
            this.listBox.disableAt(index);
        },

        // enables an item at specific index.
        // @param Number
        enableAt: function (index) {
            this.listBox.enableAt(index);
        },

        _findPos: function (obj) {
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj['nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },

        testOffset: function (element, offset, inputHeight) {
            var dpWidth = element.outerWidth();
            var dpHeight = element.outerHeight();
            var viewWidth = $(window).width() + $(window).scrollLeft();
            var viewHeight = $(window).height() + $(window).scrollTop();

            if (offset.left + dpWidth > viewWidth) {
                if (dpWidth > this.host.width()) {
                    var hostLeft = this.host.offset().left;
                    var hOffset = dpWidth - this.host.width();
                    offset.left = hostLeft - hOffset + 2;
                }
            }
            if (offset.left < 0) {
                offset.left = parseInt(this.host.offset().left) + 'px'
            }

            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight + 23) : 0);

            return offset;
        },

        open: function () {
            this.showListBox();
        },

        close: function () {
            this.hideListBox();
        },

        //OBSOLETE use close instead. 
        hide: function () {
            this.close();
        },

        //OBSOLETE use open instead. 
        show: function () {
            this.open();
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        // shows the listbox.
        showListBox: function () {
            if (this.listBox.items && this.listBox.items.length == 0)
                return;

            var self = this;
            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var scrollPosition = $(window).scrollTop();
            var scrollLeftPosition = $(window).scrollLeft();
            var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) + 'px';
            var left = parseInt(this.host.offset().left) + 'px';
            if ($.browser.mozilla) {
                //     var left = parseInt(this.host.offset().left) + 1 + 'px';
            }

            if (!this.keyboardSelection) {
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox.ensureVisible(this.selectedIndex);
            }
            if (this.autoComplete && !this.isOpened() && !this.opening) {
                this.listBox.clearSelection();
                this._updateSearch();
            }

            var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser();
            this.ishiding = false;

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top + 'px';
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left + 'px';
            }

            var hasTransform = $.jqx.utilities.hasTransform(this.host);

            if (hasTransform || (isMobileBrowser != null && isMobileBrowser)) {
                left = $.jqx.mobile.getLeftPos(this.element);
                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());
            }

            this.host.addClass(this.toThemeProperty('jqx-combobox-state-selected'));
            this.dropdownlistArrowIcon.addClass(this.toThemeProperty('icon-arrow-down-selected'));
            this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-combobox-arrow-selected'));
            this.dropdownlistArrow.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.host.addClass(this.toThemeProperty('jqx-combobox-state-focus'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-focus'));
            this.dropdownlistContent.addClass(this.toThemeProperty('jqx-combobox-content-focus'));

            this.container.css('left', left);
            this.container.css('top', top);
            listBoxInstance._arrange();

            var closeAfterSelection = true;

            var positionChanged = false;

            if (this.dropDownHorizontalAlignment == 'right') {
                var containerWidth = this.container.width();
                var containerLeftOffset = Math.abs(containerWidth - this.host.width());
                if (containerWidth > this.host.width()) {
                    this.container.css('left', 25 + parseInt(left) - containerLeftOffset + "px");
                }
                else this.container.css('left', 25 + parseInt(left) + containerLeftOffset + "px");
            }

            if (this.enableBrowserBoundsDetection) {
                var newOffset = this.testOffset(listBox, { left: parseInt(this.container.css('left')), top: parseInt(top) }, parseInt(this.host.outerHeight()));
                if (parseInt(this.container.css('top')) != newOffset.top) {
                    positionChanged = true;
                    listBox.css('top', 23);
                }
                else listBox.css('top', 0);

                this.container.css('top', newOffset.top);
                this.container.css('top', newOffset.top);
                if (parseInt(this.container.css('left')) != newOffset.left) {
                    this.container.css('left', newOffset.left);
                }
            }

            if (this.animationType == 'none') {
                this.container.css('display', 'block');
                $.data(document.body, "openedComboJQXListBoxParent", self);
                $.data(document.body, "openedComboJQXListBox", listBox);
                listBox.css('margin-top', 0);
                listBox.css('opacity', 1);
            }
            else {
                this.container.css('display', 'block');
                var height = listBox.outerHeight();
                listBox.stop();
                if (this.animationType == 'fade') {
                    listBox.css('margin-top', 0);
                    listBox.css('opacity', 0);
                    listBox.animate({ 'opacity': 1 }, this.openDelay, function () {
                        self.isanimating = false;
                        self.opening = false;
                        $.data(document.body, "openedComboJQXListBoxParent", self);
                        $.data(document.body, "openedComboJQXListBox", listBox);
                    });
                }
                else {
                    listBox.css('opacity', 1);
                    if (positionChanged) {
                        listBox.css('margin-top', height);
                    }
                    else {
                        listBox.css('margin-top', -height);
                    }
                    this.isanimating = true;
                    this.opening = true;
                    listBox.animate({ 'margin-top': 0 }, this.openDelay, function () {
                        self.isanimating = false;
                        self.opening = false;
                        $.data(document.body, "openedComboJQXListBoxParent", self);
                        $.data(document.body, "openedComboJQXListBox", listBox);
                    });
                }
            }
            listBoxInstance._renderItems();

            this._raiseEvent('0', listBoxInstance);
        },

        _updateSearch: function()
        {
            var me = this;
            if (me.autoComplete && !me.remoteAutoComplete) {
                var value = this.input.val();
                var matches = this._getMatches(value);
                var matchItems = matches.matchItems;
                var index = matches.index;

                if (matchItems.length > 0 || value == '') {
                    this.listBox.vScrollInstance.value = 0;
                    this.listBox._addItems();
                    this.listBox.autoHeight = false;
                    if (this.listBox.virtualSize.height < parseInt(this.dropDownHeight)) {
                        this.listBox.autoHeight = true;
                        this.container.height(this.listBox.virtualSize.height + 25);
                        this.listBoxContainer.height(this.listBox.virtualSize.height);
                        this.listBox._arrange();
                    }
                    else {
                        this.listBox.height = this.dropDownHeight;
                        this.container.height(parseInt(this.dropDownHeight) + 25);
                        this.listBoxContainer.height(parseInt(this.dropDownHeight));
                        this.listBox._arrange();
                    }

                    this.listBox._addItems();
                    this.listBox._renderItems();

                    index = 0;
                }
            }
        },

        // hides the listbox.
        hideListBox: function () {
            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var container = this.container;
            if (this.container.css('display') == 'none')
                return;

            var me = this;
            $.data(document.body, "openedComboJQXListBox", null);
            if (this.animationType == 'none') {
                this.container.css('display', 'none');
            }
            else {
                if (!this.ishiding) {
                    var height = listBox.outerHeight();
                    listBox.css('margin-top', 0);
                    listBox.stop();
                    this.isanimating = true;
                    var animationValue = -height;
                    if (parseInt(this.container.offset().top) < parseInt(this.host.offset().top)) {
                        animationValue = height;
                    }
                    if (this.animationType == 'fade') {
                        listBox.css({ 'opacity': 1 });
                        listBox.animate({ 'opacity': 0 }, this.closeDelay, function () {
                            me.isanimating = false;
                            container.css('display', 'none');
                            me.ishiding = false;
                        });
                    }
                    else {
                        listBox.animate({ 'margin-top': animationValue }, this.closeDelay, function () {
                            me.isanimating = false;
                            container.css('display', 'none'); me.ishiding = false;
                        });
                    }
                }
            }

            this.ishiding = true;
            this.host.removeClass(this.toThemeProperty('jqx-combobox-state-selected'));
            this.dropdownlistArrowIcon.removeClass(this.toThemeProperty('icon-arrow-down-selected'));
            this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-combobox-arrow-selected'));
            this.dropdownlistArrow.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            if (!this.focused) {
                this.host.removeClass(this.toThemeProperty('jqx-combobox-state-focus'));
                this.host.removeClass(this.toThemeProperty('jqx-fill-state-focus'));
                this.dropdownlistContent.removeClass(this.toThemeProperty('jqx-combobox-content-focus'));
            }
            this._raiseEvent('1', listBoxInstance);
        },

        /* Close popup if clicked elsewhere. */
        closeOpenedListBox: function (event) {
            var self = event.data.me;
            var $target = $(event.target);
            var openedListBox = event.data.listbox;
            if (openedListBox == null)
                return true;

            if ($(event.target).ischildof(event.data.me.host)) {
                return;
            }

            var dropdownlistInstance = self;

            var isListBox = false;
            $.each($target.parents(), function () {
                if (this.className != 'undefined') {
                    if (this.className.indexOf) {
                        if (this.className.indexOf('jqx-listbox') != -1) {
                            isListBox = true;
                            return false;
                        }
                        if (this.className.indexOf('jqx-combobox') != -1) {
                            if (self.element.id == this.id) {
                                isListBox = true;
                            }
                            return false;
                        }
                    }
                }
            });

            if (openedListBox != null && !isListBox) {
                self.hideListBox();
            }

            return true;
        },

        loadFromSelect: function (id) {
            this.listBox.loadFromSelect(id);
        },

        refresh: function (initialRefresh) {
            this._setSize();
            this._arrange();
            if (this.listBox) {
                this.renderSelection();
            }
        },

        _arrange: function () {
            var width = parseInt(this.host.width());
            var height = parseInt(this.host.height());

            var arrowHeight = this.arrowSize;
            var arrowWidth = this.arrowSize;
            var rightOffset = 1;
            var contentWidth = width - arrowWidth - 1 * rightOffset;
            if (contentWidth > 0) {
                this.dropdownlistContent.width(contentWidth + 'px');
            }

            this.dropdownlistContent.height(height);
            this.dropdownlistContent.css('left', 0);
            this.dropdownlistContent.css('top', 0);

            this.dropdownlistArrow.width(arrowWidth);
            this.dropdownlistArrow.height(height);
            this.dropdownlistArrow.css('left', 1 + contentWidth + 'px');
            this.input.css('width', '100%');
            var inputHeight = this.input.height();
            if (inputHeight == 0) {
                inputHeight = parseInt(this.input.css('font-size')) + 3;
            }

            this.input.addClass(this.toThemeProperty('jqx-rc-all'));
            var top = parseInt(height) / 2 - parseInt(inputHeight) / 2;
            if (top > 0) {
                this.input.css('margin-top', top);
            }
        },

        destroy: function () {
            this.listBoxContainer.remove();
            this.host.removeClass();
            this.removeHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedListBox);
        },

        //[optimize]
        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            if (id == 2 || id == 3 || id == 4 || id == 5) {
                event.args = arg;
            }

            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (object.isInitialized == undefined || object.isInitialized == false)
                return;

            if (key == 'autoOpen') {
                object._updateHandlers();
            }

            if (key == 'renderer') {
                object.listBox.renderer = object.renderer;
            }
            if (key == 'itemHeight') {
                object.listBox.itemHeight = value;
            }

            if (key == 'source') {
                object.input.val("");
                object.listBoxContainer.jqxListBox({ source: object.source });
                object.renderSelection('mouse');
                if (object.source == null) {
                    object.clearSelection();
                }
            }

            if (key == "displayMember" || key == "valueMember") {
                object.listBoxContainer.jqxListBox({ displayMember: object.displayMember, valueMember: object.valueMember });
                object.renderSelection('mouse');
            }

            if (key == "autoDropDownHeight") {
                object.listBoxContainer.jqxListBox({ autoHeight: object.autoDropDownHeight });
                if (object.autoDropDownHeight) {
                    object.container.height(object.listBoxContainer.height() + 25);
                }
                else {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }
            }

            if (key == "dropDownHeight") {
                if (!object.autoDropDownHeight) {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }
            }

            if (key == "dropDownWidth" || key == "scrollBarSize") {
                var width = object.width;
                if (object.dropDownWidth != 'auto') {
                    width = object.dropDownWidth;
                }

                object.listBoxContainer.jqxListBox({ width: width, scrollBarSize: object.scrollBarSize });
                object.container.width(parseInt(width) + 25);
            }

            if (key == 'autoComplete') {
                object._resetautocomplete();
            }

            if (key == "checkboxes") {
                object.listBoxContainer.jqxListBox({ checkboxes: object.checkboxes });
                if (object.checkboxes) {
                    object.input.attr('readonly', true);
                }
            }

            if (key == 'theme' && value != null) {
                object.listBoxContainer.jqxListBox({ theme: value });
                object.dropdownlistContent.removeClass();
                object.dropdownlistContent.addClass(object.toThemeProperty('jqx-combobox-content'));
                object.dropdownlistContent.addClass(object.toThemeProperty('jqx-widget-content'));
                object.input.removeClass();
                object.input.addClass(object.toThemeProperty('jqx-combobox-input'));
                object.input.addClass(this.toThemeProperty('jqx-widget-content'));
                object.host.removeClass();
                object.host.addClass(object.toThemeProperty('jqx-combobox-state-normal'));
                object.host.addClass(object.toThemeProperty('jqx-rc-all'));
                object.host.addClass(object.toThemeProperty('jqx-widget'));
                object.host.addClass(object.toThemeProperty('jqx-widget-content'));
                object.dropdownlistArrow.removeClass();
                object.dropdownlistArrowIcon.addClass(object.toThemeProperty('icon-arrow-down'));
                object.dropdownlistArrow.addClass(object.toThemeProperty('jqx-combobox-arrow-normal'));
                object.dropdownlistArrow.addClass(object.toThemeProperty('jqx-fill-state-normal'));
            }

            if (key == 'width' || key == 'height') {
                object._setSize();
                if (key == 'width') {
                    if (object.dropDownWidth == 'auto') {
                        var width = object.host.width();
                        object.listBoxContainer.jqxListBox({ width: width });
                        object.container.width(parseInt(width) + 25);
                    }
                }
                object._arrange();
            }

            if (key == 'selectedIndex') {
                object.listBox.selectIndex(value);
                object.renderSelection('mouse');
            }
        }
    });
})(jQuery);


(function ($) {

    $.jqx.jqxWidget("jqxDropDownList", "", {});

    $.extend($.jqx._jqxDropDownList.prototype, {
        defineInstance: function () {
            // enables/disables the dropdownlist.
            this.disabled = false;
            // gets or sets the listbox width.
            this.width = null;
            // gets or sets the listbox height.
            this.height = null;
            // Represents the collection of list items.
            this.items = new Array();
            // Gets or sets the selected index.
            this.selectedIndex = -1;
            // data source.
            this.source = null;
            // gets or sets the scrollbars size.
            this.scrollBarSize = 15;
            // gets or sets the scrollbars size.
            this.arrowSize = 19;
            // enables/disables the hover state.
            this.enableHover = true;
            // enables/disables the selection.
            this.enableSelection = true;
            // gets the visible items. // this property is internal for the dropdownlist.
            this.visualItems = new Array();
            // gets the groups. // this property is internal for the dropdownlist.
            this.groups = new Array();
            // gets or sets whether the items width should be equal to the dropdownlist's width.
            this.equalItemsWidth = true;
            // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.
            this.itemHeight = -1;
            // represents the dropdownlist's events.
            this.visibleItems = new Array();
            // emptry group's text.
            this.emptyGroupText = 'Group';
            this.checkboxes = false;
            // Type: Number
            // Default: 100
            // Showing Popup Animation's delay.
            if (this.openDelay == undefined) {
                this.openDelay = 350;
            }
            // Type: Number
            // Default: 200
            // Hiding Popup Animation's delay.
            if (this.closeDelay == undefined) {
                this.closeDelay = 400;
            }
            // default, none
            // Type: String.
            // enables or disables the animation.
            this.animationType = 'default';
            this.autoOpen = false;
            // Type: String
            // Default: auto ( the drop down takes the dropdownlist's width.)
            // Sets the popup's width.
            this.dropDownWidth = 'auto';
            // Type: String
            // Default: 200px ( the height is 200px )
            // Sets the popup's height.
            this.dropDownHeight = '200px';
            // Type: Boolean
            // Default: false
            // Sets the popup's height to be equal to the items summary height;            
            this.autoDropDownHeight = false;
            this.keyboardSelection = true;

            // Type: Boolean
            // Default: false
            // Enables or disables the browser detection.
            this.enableBrowserBoundsDetection = false;
            this.dropDownHorizontalAlignment = 'left';
            this.displayMember = "";
            this.valueMember = "";
            this.searchMode = 'startswithignorecase';
            this.incrementalSearch = true;
            this.incrementalSearchDelay = 700;
            this.renderer = null;
            this.promptText = "Please Choose:";
            this.events =
	   	    [
            // occurs when the dropdownlist is opened.
		      'open',
            // occurs when the dropdownlist is closed.
              'close',
            // occurs when an item is selected.
              'select',
            // occurs when an item is unselected.
              'unselect',
            // occurs when the selection is changed.
              'change',
            // triggered when the user checks or unchecks an item. 
              'checkChange',
              // triggered when the binding operation is completed.
              'bindingComplete'
           ];
        },

        createInstance: function (args) {
            this.render();
        },

        render: function()
        {
            this.element.innerHTML = "";
            this.isanimating = false;

            var comboStructure = $("<div tabIndex=0 style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>" +
                "<div id='dropdownlistWrapper' style='outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'>" +
                "<div id='dropdownlistContent' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'/>" +
                "<div id='dropdownlistArrow' style='background-color: transparent; border: none; float: right; position: relative;'><div></div></div>" +
                "</div>" +
                "</div>");
            this._addInput();

            if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {
                alert("jqxListBox is not loaded.");
            }
            var me = this;

            this.touch = $.jqx.mobile.isTouchDevice();
            this.comboStructure = comboStructure;
            this.host.append(comboStructure);

            this.dropdownlistWrapper = this.host.find('#dropdownlistWrapper');
            this.dropdownlistArrow = this.host.find('#dropdownlistArrow');
            this.arrow = $(this.dropdownlistArrow.children()[0]);
            this.dropdownlistContent = this.host.find('#dropdownlistContent');
            this.dropdownlistContent.addClass(this.toThemeProperty('jqx-dropdownlist-content'));
            this.dropdownlistWrapper.addClass(this.toThemeProperty('jqx-disableselect'));
            this.addHandler(this.dropdownlistWrapper, 'selectstart', function () { return false; });
            this.dropdownlistWrapper[0].id = "dropdownlistWrapper" + this.element.id;
            this.dropdownlistArrow[0].id = "dropdownlistArrow" + this.element.id;
            this.dropdownlistContent[0].id = "dropdownlistContent" + this.element.id;

            var hostClassName = this.toThemeProperty('jqx-widget') + " " + this.toThemeProperty('jqx-widget-content') + " " + this.toThemeProperty('jqx-dropdownlist-state-normal') + " " + this.toThemeProperty('jqx-rc-all') + " " + this.toThemeProperty('jqx-fill-state-normal');
            this.element.className += " " + hostClassName;
            this._firstDiv = this.host.find('div:first');

            try {
                var listBoxID = 'listBox' + this.element.id;
                var oldContainer = $($.find('#' + listBoxID));
                if (oldContainer.length > 0) {
                    oldContainer.remove();
                }

                var container = $("<div style='overflow: hidden; background-color: transparent; border: none; position: absolute;' id='listBox" + this.element.id + "'><div id='innerListBox" + this.element.id + "'></div></div>");
                container.hide();

                container.appendTo(document.body);
                this.container = container;
                this.listBoxContainer = $($.find('#innerListBox' + this.element.id));

                var width = this.width;
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }

                if (this.dropDownHeight == null) {
                    this.dropDownHeight = 200;
                }
                var me = this;
                this.container.width(parseInt(width) + 25);
                this.container.height(parseInt(this.dropDownHeight) + 25);
                this.addHandler(this.listBoxContainer, 'bindingComplete', function (event) {
                    me._raiseEvent('6');
                });

                this.listBoxContainer.jqxListBox({
                    checkboxes: this.checkboxes, itemHeight: this.itemHeight, width: width, searchMode: this.searchMode, incrementalSearch: this.incrementalSearch, incrementalSearchDelay: this.incrementalSearchDelay, displayMember: this.displayMember, valueMember: this.valueMember, height: this.dropDownHeight, autoHeight: this.autoDropDownHeight, scrollBarSize: this.scrollBarSize, selectedIndex: this.selectedIndex, source: this.source, theme: this.theme,
                    rendered: function () {
                        if (me.selectedIndex != me.listBoxContainer.jqxListBox('selectedIndex')) {
                            me.listBox = $.data(me.listBoxContainer[0], "jqxListBox").instance;
                            me.listBoxContainer.jqxListBox({ selectedIndex: me.selectedIndex });
                            me.renderSelection('mouse');
                        } else{
                            me.renderSelection('mouse');
                        }
                    }, renderer: this.renderer
                });
                this.listBoxContainer.css({ position: 'absolute', zIndex: 9999999999999, top: 0, left: 0 });
                this.listBox = $.data(this.listBoxContainer[0], "jqxListBox").instance;
                this.listBox.enableSelection = this.enableSelection;
                this.listBox.enableHover = this.enableHover;
                this.listBox.equalItemsWidth = this.equalItemsWidth;
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox._arrange();

                this.addHandler(this.listBoxContainer, 'unselect', function (event) {
                    me._raiseEvent('3', { index: event.args.index, type: event.args.type, item: event.args.item });
                });

                this.addHandler(this.listBoxContainer, 'change', function (event) {
                    me._raiseEvent('4', { index: event.args.index, type: event.args.type, item: event.args.item });
                });

                if (this.animationType == 'none') {
                    this.container.css('display', 'none');
                }
                else {
                    this.container.hide();
                }
            }
            catch (e) {

            }

            var self = this;
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.addClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
                else {
                    instance.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.removeClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.dropdownlistContent.addClass(this.toThemeProperty('jqx-dropdownlist-content-disabled'));
            }        

            this.arrow.addClass(this.toThemeProperty('icon-arrow-down'));
            this.arrow.addClass(this.toThemeProperty('icon'));

            this._setSize();
            this._updateHandlers();
            // fix for IE7
            if ($.browser.msie && $.browser.version < 8) {
                if (this.host.parents('.jqx-window').length > 0) {
                    var zIndex = this.host.parents('.jqx-window').css('z-index');
                    container.css('z-index', zIndex + 10);
                    this.listBoxContainer.css('z-index', zIndex + 10);
                }
            }
        },

        val: function () {
            if (!this.dropdownlistContent) return "";
            return this.dropdownlistContent.html();
        },

        focus: function () {
            var me = this;
            var doFocus = function () {
                me.host.focus();
                if (me._firstDiv) {
                    me._firstDiv.focus();
                }
            }
            doFocus();
            setTimeout(function () {
                doFocus();
            }, 10);
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
        },

        getItems: function () {
            if (!this.listBox) {
                return new Array();
            }

            return this.listBox.items;
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.height(this.height);
            }

            if (isPercentage) {
                var me = this;
                var width = this.host.width();
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }
                this.listBoxContainer.jqxListBox({ width: width });
                this.container.width(parseInt(width) + 25);

                var resizeFunc = function () {
                    me._arrange();
                    if (me.dropDownWidth == 'auto') {
                        var width = me.host.width();
                        me.listBoxContainer.jqxListBox({ width: width });
                        me.container.width(parseInt(width) + 25);
                    }
                }

                $(window).unbind('resize.' + this.element.id);
                $(window).bind('resize.' + this.element.id, function () {
                    resizeFunc();
                });
            }
        },

        // returns true when the listbox is opened, otherwise returns false.
        isOpened: function () {
            var me = this;
            var openedListBox = $.data(document.body, "openedJQXListBox" + this.element.id);
            if (openedListBox != null && openedListBox == me.listBoxContainer) {
                return true;
            }

            return false;
        },

        _updateHandlers: function () {
            var self = this;
            var hovered = false;
            this.removeHandlers();
            if (!this.touch) {
                this.host.hover(function () {
                    if (!self.disabled && self.enableHover) {
                        hovered = true;
                        self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.arrow.addClass(self.toThemeProperty('icon-arrow-down-hover'));
                        self.host.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                    }
                }, function () {
                    if (!self.disabled && self.enableHover) {
                        self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.host.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        self.arrow.removeClass(self.toThemeProperty('icon-arrow-down-hover'));
                        hovered = false;
                    }
                });
            }

            var eventName = 'mousedown';
            if (this.touch) eventName = 'touchstart';
            this.addHandler(this.dropdownlistWrapper, eventName,
            function (event) {
                if (!self.disabled) {
                    var isOpen = self.container.css('display') == 'block';
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.hideListBox();
                            if (self._firstDiv) {
                                self._firstDiv.focus();
                            }
                        }
                        else {
                            self.showListBox();
                            if (self._firstDiv) {
                                self._firstDiv.focus();
                            }
                        }
                    }
                }
            });

            if (self.autoOpen) {
                this.addHandler(this.host, 'mouseenter', function () {
                    var isOpened = self.isOpened();
                    if (!isOpened && self.autoOpen) {
                        self.open();
                        self.host.focus();
                    }
                });

                $(document).bind('mousemove.' + self.element.id, function (event) {
                    var isOpened = self.isOpened();
                    if (isOpened && self.autoOpen) {
                        var offset = self.host.offset();
                        var top = offset.top;
                        var left = offset.left;
                        var popupOffset = self.container.offset();
                        var popupLeft = popupOffset.left;
                        var popupTop = popupOffset.top;

                        canClose = true;

                        if (event.pageY >= top && event.pageY <= top + self.host.height()) {
                            if (event.pageX >= left && event.pageX < left + self.host.width())
                                canClose = false;
                        }
                        if (event.pageY >= popupTop && event.pageY <= popupTop + self.container.height()) {
                            if (event.pageX >= popupLeft && event.pageX < popupLeft + self.container.width())
                                canClose = false;
                        }

                        if (canClose) {
                            self.close();
                        }
                    }
                });
            }

            if (this.touch) {
                this.addHandler($(document), 'touchstart.' + this.element.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.element.id });
            }
            else this.addHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.element.id });

            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            if (self.isOpened()) {
                                var data = { me: self, listbox: self.listBox, id: self.element.id };
                                event.data = data;
                                //self.closeOpenedListBox(event);
                            }
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mousedown', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mousedown', eventHandle);
                        }
                    }
                }
            }

            this.addHandler(this.host, 'keydown', function (event) {
                var isOpen = self.container.css('display') == 'block';

                if (self.host.css('display') == 'none') {
                    return true;
                }

                if (event.keyCode == '13') {
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.renderSelection();
                            self.hideListBox();
                            if (!self.keyboardSelection) {
                                self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.getItem(self.selectedIndex) });
                            }
                        }
                        else {
                            self.showListBox();
                        }
                        if (isOpen) {
                            return false;
                        }
                    }
                }

                if (event.keyCode == 115) {
                    if (!self.isanimating) {
                        if (!self.isOpened()) {
                            self.showListBox();
                        }
                        else if (self.isOpened()) {
                            self.hideListBox();
                        }
                    }
                    return false;
                }

                if (event.altKey) {
                    if (self.host.css('display') == 'block') {
                        if (event.keyCode == 38) {
                            if (self.isOpened()) {
                                self.hideListBox();
                            }
                        }
                        else if (event.keyCode == 40) {
                            if (!self.isOpened()) {
                                self.showListBox();
                            }
                        }
                    }
                }

                if (event.keyCode == '27') {
                    if (!self.ishiding) {
                        self.hideListBox();
                        if (self.tempSelectedIndex != undefined) {
                            self.selectIndex(self.tempSelectedIndex);
                        }
                    }
                }

                if (isOpen && !self.disabled) {
                    return self.listBox._handleKeyDown(event);
                }
            });
            this.addHandler(this.listBoxContainer, 'checkChange', function (event) {
                self.renderSelection();
                self._updateInputSelection();
                self._raiseEvent(5, { label: event.args.label, value: event.args.value, checked: event.args.checked, item: event.args.item });
            });

            this.addHandler(this.listBoxContainer, 'select', function (event) {
                if (!self.disabled) {
                    if (event.args.type != 'keyboard' || self.keyboardSelection) {
                        self.renderSelection();
                        self._raiseEvent('2', { index: event.args.index, type: event.args.type, item: event.args.item, originalEvent: event.args.originalEvent });
                        if (event.args.type == 'mouse') {
                            if (!self.checkboxes) {
                                self.hideListBox();
                                if (self._firstDiv) {
                                    self._firstDiv.focus();
                                }
                            }
                        }
                    }
                }
            });
            if (this.listBox) {
                if (this.listBox.content) {
                    this.addHandler(this.listBox.content, 'click', function (event) {
                        if (!self.disabled) {
                            if (event.target === self.listBox.itemswrapper[0])
                                return true;

                            self.renderSelection('mouse');
                            if (!self.touch) {
                                if (!self.ishiding) {
                                    if (!self.checkboxes) {
                                        self.hideListBox();
                                        if (self._firstDiv) {
                                            self._firstDiv.focus();
                                        }
                                    }
                                }
                            }
                            if (!self.keyboardSelection) {
                                if (self._oldSelectedInd == undefined) self._oldSelectedIndx = self.selectedIndex;

                                if (self.selectedIndex != self._oldSelectedIndx) {
                                    self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.getItem(self.selectedIndex) });
                                    self._oldSelectedIndx = self.selectedIndex;
                                }
                            }
                        }
                    });
                }
            }

            this.addHandler(this._firstDiv, 'focus', function () {
                self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
            });
            this.addHandler(this._firstDiv, 'blur', function () {
                self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
            });
        },

        removeHandlers: function () {
            var self = this;
            var eventName = 'mousedown';
            if (this.touch) eventName = 'touchstart';
            this.removeHandler(this.dropdownlistWrapper, eventName);
            if (this.listBox) {
                if (this.listBox.content) {
                    this.removeHandler(this.listBox.content, 'click');
                }
            }

            this.removeHandler(this.host, 'loadContent');
            this.removeHandler(this.listBoxContainer, 'checkChange');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this._firstDiv, 'focus');
            this.removeHandler(this._firstDiv, 'blur');
            this.host.unbind('hover');
            this.removeHandler(this.host, 'mouseenter');
            $(document).unbind('mousemove.' + self.element.id);
        },

        // gets an item by index.
        getItem: function (index) {
            var item = this.listBox.getItem(index);
            return item;
        },

        getItemByValue: function (value) {
            var item = this.listBox.getItemByValue(value);
            return item;
        },

        selectItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.selectItem(item);
                this.selectedIndex = this.listBox.selectedIndex;
                this.renderSelection('mouse');
            }
        },

        unselectItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.unselectItem(item);
                this.renderSelection('mouse');
            }
        },

        checkItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.checkItem(item);
            }
        },

        uncheckItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.uncheckItem(item);
            }
        },

        indeteterminateItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.indeteterminateItem(item);
            }
        },


        // renders the selection.
        renderSelection: function () {
            if (this.listBox == null)
                return;

            var item = this.listBox.getItem(this.listBox.selectedIndex);
            var me = this;
            if (this.checkboxes) {
                var checkedItems = this.getCheckedItems();
                if (checkedItems != null && checkedItems.length > 0) {
                    item = checkedItems[0];
                }
                else item = null;
            }

            if (item == null) {
                var spanElement = $('<span style="color: inherit; border: none; background-color: transparent;"></span>');
                spanElement.appendTo($(document.body));
                spanElement.addClass(this.toThemeProperty('jqx-widget'));
                spanElement.addClass(this.toThemeProperty('jqx-listitem-state-normal'));
                spanElement.addClass(this.toThemeProperty('jqx-item'));
                spanElement.html(this.promptText);
                var topPadding = this.dropdownlistContent.css('padding-top');
                var bottomPadding = this.dropdownlistContent.css('padding-bottom');
                spanElement.css('padding-top', topPadding);
                spanElement.css('padding-bottom', bottomPadding);
                var spanHeight = spanElement.outerHeight();
                spanElement.remove();
                spanElement.removeClass();
                this.dropdownlistContent.html(spanElement);
                var height = this.host.height();
                if (this.height != null && this.height != undefined) {
                    height = parseInt(this.height);
                }

                var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);

                if (top > 0) {
                    this.dropdownlistContent.css('margin-top', top + 'px');
                    this.dropdownlistContent.css('margin-bottom', top + 'px');
                }
                if (this.selectionRenderer) {
                    this.dropdownlistContent.html(this.selectionRenderer());
                    this._updateInputSelection();
                }
                this.selectedIndex = this.listBox.selectedIndex;
                return;
            }

            this.selectedIndex = this.listBox.selectedIndex;
            var spanElement = $('<span style="color: inherit; border: none; background-color: transparent;"></span>');
            spanElement.appendTo($(document.body));
            spanElement.addClass(this.toThemeProperty('jqx-widget'));
            spanElement.addClass(this.toThemeProperty('jqx-listitem-state-normal'));
            spanElement.addClass(this.toThemeProperty('jqx-item'));
            var emptyItem = false;
            try {
                if (item.html != undefined && item.html != null && item.html.toString().length > 0) {
                    spanElement.html(item.html);
                }
                else if (item.label != undefined && item.label != null && item.label.toString().length > 0) {
                    spanElement.html(item.label);
                }
                else if (item.value != undefined && item.value != null && item.value.toString().length > 0) {
                    spanElement.html(item.value);
                }
                else if (item.title != undefined && item.title != null && item.title.toString().length > 0) {
                    spanElement.html(item.title);
                }
                else if (item.label == "" || item.label == null) {
                    emptyItem = true;
                    spanElement.html("Item");
                }
            }
            catch (error) {
                var errorMessage = error;
            }

            var topPadding = this.dropdownlistContent.css('padding-top');
            var bottomPadding = this.dropdownlistContent.css('padding-bottom');

            spanElement.css('padding-top', topPadding);
            spanElement.css('padding-bottom', bottomPadding);

            var spanHeight = spanElement.outerHeight();
            if ((item.label == "" || item.label == null) && emptyItem) {
                spanElement.html("");
            }

            spanElement.remove();
            spanElement.removeClass();
            if (this.selectionRenderer) {
                this.dropdownlistContent.html(this.selectionRenderer(spanElement, item.index, item.label, item.value));
            }
            else {
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    var str = "";
                    for (var i = 0; i < items.length; i++) {
                        if (i == items.length - 1) {
                            str += items[i].label;
                        }
                        else {
                            str += items[i].label + ",";
                        }
                    }
                    spanElement.text(str);
                    spanElement.css('max-width', this.host.width() - 30);
                    spanElement.css('overflow', 'hidden');
                    spanElement.css('display', 'block');
                    spanElement.css('width', this.host.width() - 30);
                    spanElement.css('text-overflow', 'ellipsis');
                    this.dropdownlistContent.html(spanElement);
                }
                else {
                    this.dropdownlistContent.html(spanElement);
                }
            }

            var height = this.host.height();
            if (this.height != null && this.height != undefined) {
                height = parseInt(this.height);
            }

            var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);

            if (top > 0) {
                this.dropdownlistContent.css('margin-top', top + 'px');
                this.dropdownlistContent.css('margin-bottom', top + 'px');
            }
            if (this.dropdownlistContent && this.input) {
                this._updateInputSelection();
            }
        },

        _updateInputSelection: function () {
            if (this.input) {
                if (this.selectedIndex == -1) {
                    this.input.val("");
                }
                else {
                    var selectedItem = this.getSelectedItem();
                    if (selectedItem != null) {
                        this.input.val(selectedItem.value);
                    }
                    else {
                        this.input.val(this.dropdownlistContent.text());
                    }
                }
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    var str = "";
                    if (items != null) {
                        for (var i = 0; i < items.length; i++) {
                            if (i == items.length - 1) {
                                str += items[i].value;
                            }
                            else {
                                str += items[i].value + ",";
                            }
                        }
                    }
                    this.input.val(str);
                }
            }
        },

        setContent: function (content) {
            this.dropdownlistContent.html(content);
            this._updateInputSelection();
        },

        dataBind: function () {
            this.listBoxContainer.jqxListBox({ source: this.source });
            this.renderSelection('mouse');
            if (this.source == null) {
                this.clearSelection();
            }
        },

        clear: function () {
            this.listBoxContainer.jqxListBox({ source: null });
            this.clearSelection();
        },

        // clears the selection.
        clearSelection: function (render) {
            this.selectedIndex = -1;
            this.listBox.clearSelection();
            this.renderSelection();
            this.dropdownlistContent.html("");
        },

        // unselects an item at specific index.
        // @param Number
        unselectIndex: function (index, render) {
            if (isNaN(index))
                return;

            this.listBox.unselectIndex(index, render);
            this.renderSelection();
        },

        // selects an item at specific index.
        // @param Number
        selectIndex: function (index, ensureVisible, render, forceSelect) {
            this.listBox.selectIndex(index, ensureVisible, render, forceSelect);
            this.renderSelection();
        },

        // gets the selected index.
        getSelectedIndex: function () {
            return this.selectedIndex;
        },

        // gets the selected item.
        getSelectedItem: function () {
            return this.getItem(this.selectedIndex);
        },

        getCheckedItems: function () {
            return this.listBox.getCheckedItems();
        },

        checkIndex: function (index) {
            this.listBox.checkIndex(index);
        },

        uncheckIndex: function (index) {
            this.listBox.uncheckIndex(index);
        },

        indeterminateIndex: function (index) {
            this.listBox.indeterminateIndex(index);
        },
        checkAll: function () {
            this.listBox.checkAll();
        },

        uncheckAll: function () {
            this.listBox.uncheckAll();
        },

        // inserts an item at specific index.
        // @param Number
        insertAt: function (item, index) {
            if (item == null)
                return false;

            return this.listBox.insertAt(item, index);
        },

        // adds a new item.
        addItem: function (item) {
            return this.listBox.addItem(item);
        },

        // removes an item at specific index.
        // @param Number
        removeAt: function (index) {
            var result = this.listBox.removeAt(index);
            this.renderSelection('mouse');
            return result;
        },

        // ensures that an item is visible.
        // @param Number
        ensureVisible: function (index) {
            this.listBox.ensureVisible(index);
        },

        // disables an item at specific index.
        // @param Number
        disableAt: function (index) {
            this.listBox.disableAt(index);
        },

        // enables an item at specific index.
        // @param Number
        enableAt: function (index) {
            this.listBox.enableAt(index);
        },

        _findPos: function (obj) {
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj['nextSibling'];
            }
            var position = $(obj).offset();
            return [position.left, position.top];
        },

        testOffset: function (element, offset, inputHeight) {
            var dpWidth = element.outerWidth();
            var dpHeight = element.outerHeight();
            var viewWidth = $(window).width() + $(window).scrollLeft();
            var viewHeight = $(window).height() + $(window).scrollTop();

            if (offset.left + dpWidth > viewWidth) {
                if (dpWidth > this.host.width()) {
                    var hostLeft = this.host.offset().left;
                    var hOffset = dpWidth - this.host.width();
                    offset.left = hostLeft - hOffset + 2;
                }
            }
            if (offset.left < 0) {
                offset.left = parseInt(this.host.offset().left) + 'px'
            }

            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight + 22) : 0);

            return offset;
        },

        open: function () {
            this.showListBox();
        },

        close: function () {
            this.hideListBox();
        },

        //OBSOLETE use close instead. 
        hide: function () {
            this.close();
        },

        //OBSOLETE use open instead. 
        show: function () {
            this.open();
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        // shows the listbox.
        showListBox: function () {
            var self = this;
            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var scrollPosition = $(window).scrollTop();
            var scrollLeftPosition = $(window).scrollLeft();
            var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';
            var left = parseInt(this.host.offset().left) + 'px';
            var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser();

            if (this.listBox == null)
                return;

            var hasTransform = $.jqx.utilities.hasTransform(this.host);
            this.ishiding = false;
            if (!this.keyboardSelection) {
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox.ensureVisible(this.selectedIndex);
            }

            this.tempSelectedIndex = this.selectedIndex;

            if (this.autoDropDownHeight) {
                this.container.height(this.listBoxContainer.height() + 25);
            }

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top + 'px';
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left + 'px';
            }

            if (hasTransform || (isMobileBrowser != null && isMobileBrowser)) {
                left = $.jqx.mobile.getLeftPos(this.element);
                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());
            }

            listBox.stop();
            this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.arrow.addClass(this.toThemeProperty('icon-arrow-down-selected'));

            this.container.css('left', left);
            this.container.css('top', top);
            listBoxInstance._arrange();

            var closeAfterSelection = true;
            var positionChanged = false;

            if (this.dropDownHorizontalAlignment == 'right') {
                var containerWidth = this.container.width();
                var containerLeftOffset = Math.abs(containerWidth - this.host.width());
                if (containerWidth > this.host.width()) {
                    this.container.css('left', 25 + parseInt(left) - containerLeftOffset + "px");
                }
                else this.container.css('left', 25 + parseInt(left) + containerLeftOffset + "px");
            }

            if (this.enableBrowserBoundsDetection) {
                var newOffset = this.testOffset(listBox, { left: parseInt(this.container.css('left')), top: parseInt(top) }, parseInt(this.host.outerHeight()));
                if (parseInt(this.container.css('top')) != newOffset.top) {
                    positionChanged = true;
                    listBox.css('top', 23);
                }
                else listBox.css('top', 0);

                this.container.css('top', newOffset.top);
                if (parseInt(this.container.css('left')) != newOffset.left) {
                    this.container.css('left', newOffset.left);
                }
            }

            if (this.animationType == 'none') {
                this.container.css('display', 'block');
                $.data(document.body, "openedJQXListBoxParent", self);
                $.data(document.body, "openedJQXListBox" + this.element.id, listBox);
                listBox.css('margin-top', 0);
                listBox.css('opacity', 1);
            }
            else {
                this.container.css('display', 'block');
                self.isanimating = true;
                if (this.animationType == 'fade') {
                    listBox.css('margin-top', 0);
                    listBox.css('opacity', 0);
                    listBox.animate({ 'opacity': 1 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXListBoxParent", self);
                        $.data(document.body, "openedJQXListBox" + self.element.id, listBox);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
                else {
                    listBox.css('opacity', 1);
                    var height = listBox.outerHeight();
                    if (positionChanged) {
                        listBox.css('margin-top', height);
                    }
                    else {
                        listBox.css('margin-top', -height);
                    }

                    listBox.animate({ 'margin-top': 0 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXListBoxParent", self);
                        $.data(document.body, "openedJQXListBox" + self.element.id, listBox);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
            }
            listBoxInstance._renderItems();
            this._raiseEvent('0', listBoxInstance);
        },

        // hides the listbox.
        hideListBox: function () {
            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var container = this.container;
            var me = this;
            $.data(document.body, "openedJQXListBox" + this.element.id, null);
            if (this.animationType == 'none') {
                this.container.css('display', 'none');
            }
            else {
                if (!me.ishiding) {
                    listBox.stop();
                    var height = listBox.outerHeight();
                    listBox.css('margin-top', 0);
                    me.isanimating = true;

                    var animationValue = -height;
                    if (parseInt(this.container.offset().top) < parseInt(this.host.offset().top)) {
                        animationValue = height;
                    }

                    if (this.animationType == 'fade') {
                        listBox.css({ 'opacity': 1 });
                        listBox.animate({ 'opacity': 0 }, this.closeDelay, function () {
                            container.css('display', 'none');
                            me.isanimating = false;
                            me.ishiding = false;
                        });
                    }
                    else {
                        listBox.animate({ 'margin-top': animationValue }, this.closeDelay, function () {
                            container.css('display', 'none');
                            me.isanimating = false;
                            me.ishiding = false;
                        });
                    }
                }
            }

            this.ishiding = true;
            this.host.removeClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.arrow.removeClass(this.toThemeProperty('icon-arrow-down-selected'));
            this._raiseEvent('1', listBoxInstance);
        },

        /* Close popup if clicked elsewhere. */
        closeOpenedListBox: function (event) {
            var self = event.data.me;
            var $target = $(event.target);
            var openedListBox = event.data.listbox;
            if (openedListBox == null)
                return true;

            if ($(event.target).ischildof(event.data.me.host)) {
                return true;
            }

            if (!self.isOpened()) {
                return true;
            }

            var dropdownlistInstance = self;

            var isListBox = false;
            $.each($target.parents(), function () {
                if (this.className != 'undefined') {
                    if (this.className.indexOf) {
                        if (this.className.indexOf('jqx-listbox') != -1) {
                            isListBox = true;
                            return false;
                        }
                        if (this.className.indexOf('jqx-dropdownlist') != -1) {
                            if (self.element.id == this.id) {
                                isListBox = true;
                            }
                            return false;
                        }
                    }
                }
            });

            if (openedListBox != null && !isListBox && self.isOpened()) {
                self.hideListBox();
            }

            return true;
        },

        loadFromSelect: function (id) {
            this.listBox.loadFromSelect(id);
        },

        refresh: function (initialRefresh) {
            this._setSize();
            this._arrange();
            if (this.listBox) {
                this.renderSelection();
            }
        },

        _arrange: function () {
            var width = parseInt(this.host.width());
            var height = parseInt(this.host.height());
            var arrowHeight = this.arrowSize;
            var arrowWidth = this.arrowSize;
            var rightOffset = 3;
            var contentWidth = width - arrowWidth - 2 * rightOffset;
            if (contentWidth > 0) {
                this.dropdownlistContent.width(contentWidth + 'px');
            }

            this.dropdownlistContent.height(height);
            this.dropdownlistContent.css('left', 0);
            this.dropdownlistContent.css('top', 0);

            this.dropdownlistArrow.width(arrowWidth);
            this.dropdownlistArrow.height(height);
        },

        destroy: function () {
            this.removeHandler(this.listBoxContainer, 'select');
            this.removeHandler(this.listBoxContainer, 'unselect');
            this.removeHandler(this.listBoxContainer, 'change');
            this.removeHandler(this.dropdownlistWrapper, 'selectstart');
            this.removeHandler(this.dropdownlistWrapper, 'mousedown');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.listBoxContainer, 'select');
            this.removeHandler(this.listBox.content, 'click');
            this.removeHandlers();

            this.listBoxContainer.jqxListBox('destroy');
            this.listBoxContainer.remove();
            this.host.removeClass();
            this.removeHandler($(document), 'mousedown.' + this.element.id, self.closeOpenedListBox);
            if (this.touch) {
                this.removeHandler($(document), 'touchstart.' + this.element.id);
            }

            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            if (id == 2 || id == 3 || id == 4 || id == 5) {
                event.args = arg;
            }

            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (object.isInitialized == undefined || object.isInitialized == false)
                return;

            if (key == 'autoOpen') {
                object._updateHandlers();
            }

            if (key == 'renderer') {
                object.listBox.renderer = object.renderer;
            }
            if (key == 'itemHeight') {
                object.listBox.itemHeight = value;
            }
            if (key == 'source') {
                object.listBoxContainer.jqxListBox({ source: object.source });
                object.listBox.selectedIndex = -1;
                object.listBox.selectIndex(this.selectedIndex);
                object.renderSelection();
                if (value == null) {
                    object.clear();
                }
            }

            if (key == "displayMember" || key == "valueMember") {
                object.listBoxContainer.jqxListBox({ displayMember: object.displayMember, valueMember: object.valueMember });
                object.renderSelection();
            }

            if (key == 'theme' && value != null) {
                object.listBoxContainer.jqxListBox({ theme: value });
                object.dropdownlistContent.removeClass();
                object.dropdownlistContent.addClass(object.toThemeProperty('jqx-dropdownlist-content'));
                object.dropdownlistWrapper.removeClass();
                object.dropdownlistWrapper.addClass(object.toThemeProperty('jqx-disableselect'));
                object.host.removeClass();
                object.host.addClass(object.toThemeProperty('jqx-fill-state-normal'));
                object.host.addClass(object.toThemeProperty('jqx-dropdownlist-state-normal'));
                object.host.addClass(object.toThemeProperty('jqx-rc-all'));
                object.host.addClass(object.toThemeProperty('jqx-widget'));
                object.host.addClass(object.toThemeProperty('jqx-widget-content'));
                object.arrow.removeClass();
                object.arrow.addClass(object.toThemeProperty('icon-arrow-down'));
                object.arrow.addClass(object.toThemeProperty('icon'));
            }

            if (key == "autoDropDownHeight") {
                object.listBoxContainer.jqxListBox({ autoHeight: object.autoDropDownHeight });
                if (object.autoDropDownHeight) {
                    object.container.height(object.listBoxContainer.height() + 25);
                }
                else {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }
            }

            if (key == "searchMode") {
                object.listBoxContainer.jqxListBox({ searchMode: object.searchMode });
            }

            if (key == "incrementalSearch") {
                object.listBoxContainer.jqxListBox({ incrementalSearch: object.incrementalSearch });
            }

            if (key == "incrementalSearchDelay") {
                object.listBoxContainer.jqxListBox({ incrementalSearchDelay: object.incrementalSearchDelay });
            }

            if (key == "dropDownHeight") {
                if (!object.autoDropDownHeight) {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }
            }

            if (key == "dropDownWidth" || key == "scrollBarSize") {
                var width = object.width;
                if (object.dropDownWidth != 'auto') {
                    width = object.dropDownWidth;
                }

                object.listBoxContainer.jqxListBox({ width: width, scrollBarSize: object.scrollBarSize });
                object.container.width(parseInt(width) + 25);
            }

            if (key == 'width' || key == 'height') {
                if (value != oldvalue) {
                    this.refresh();
                    if (key == 'width') {
                        if (object.dropDownWidth == 'auto') {
                            var width = object.host.width();
                            object.listBoxContainer.jqxListBox({ width: width });
                            object.container.width(parseInt(width) + 25);
                        }
                    }
                }
            }

            if (key == "checkboxes") {
                object.listBoxContainer.jqxListBox({ checkboxes: object.checkboxes });
            }

            if (key == 'selectedIndex') {
                if (object.listBox != null) {
                    object.listBox.selectIndex(value);
                    object.renderSelection();
                }
            }
        }
    });
})(jQuery);
(function ($) {

    $.jqx.jqxWidget('jqxWindow', '', {});

    $.extend($.jqx._jqxWindow.prototype, {

        defineInstance: function () {
            // Type: String, Number
            // Default: auto
            // Sets or gets window's height.
            this.height = 'auto';
            // Type: Number
            // Default: 200
            // Sets or gets window's width.
            this.width = 200;
            // Type: Number
            // Default: 50
            // Gets or sets window's minimum height.
            this.minHeight = 50;
            // Type: Number
            // Default: 600
            // Gets or sets window's maximum height.
            this.maxHeight = 600;
            // Type: Number
            // Default: 50
            // Gets or sets window's minimum height.
            this.minWidth = 50;
            // Type: Number
            // Default: 600
            // Gets or sets window's maximum width.
            this.maxWidth = 800;
            // Type: Bool
            // Default: true
            // Gets or sets whether the close button will be shown.
            this.showCloseButton = true;
            // Type: Bool
            // Default: false
            // Gets or sets whether the window is disabled.
            this.disabled = false;
            // Type: Bool
            // Default: true
            // Sets or gets whether the window will be shown after it's creation.
            this.autoOpen = true;
            // Type: Bool
            // Default: true
            // Sets or gets whether the window could be closed with Escape or another keyboard key.
            this.keyboardCloseKey = 'esc';
            // Type: String
            // Default: ''
            // Sets or gets window's title.
            this.title = '';
            // Type: String
            // Default: ''
            // Sets or gets window's content.
            this.content = '';
            // Type: Bool
            // Default: true
            // Sets or gets whether the window is draggale.
            this.draggable = true;
            // Type: Bool
            // Default: true
            // Sets or gets whether the window is resizable.
            this.resizable = true;
            // Type: Bool
            // Default: 'fade'
            // Sets or gets window's animation type. Possible values ['none', 'fade', 'slide', 'combined']
            this.animationType = 'fade';
            // Type: Number
            // Default: 250
            // Sets or gets window's hide animation duration.
            this.closeAnimationDuration = 250;
            // Type: Number
            // Default: 250
            // Sets or gets window's show animation duration.
            this.showAnimationDuration = 250;
            // Type: Bool
            // Default: false
            // Sets or gets whether the window is modal.
            this.isModal = false;
            // Type: String, Array, Object
            // Default: 'center'
            // Sets or gets window's position. Possible values - 'center', 'bottom, left', [232, 45], { x: 42, y: 34 }.
            this.position = 'center';
            // Type: Number
            // Default: 16
            // Sets or gets close button's size.
            this.closeButtonSize = 16;
            // Type: String
            // Default: hide
            // Sets or gets close button action. Possible values ['hide', 'close']. When closeButtonAction is close we are removing the widget.
            this.closeButtonAction = 'hide';
            // Type: Number
            // Default: 0.5
            // Sets or gets modal background's opacity
            this.modalOpacity = 0.3;
            // Type: Object
            // Default: null
            // Sets or gets the dragging area. Example { left: 300, top: 300, width: 600, height: 600 }
            this.dragArea = null;
            // Type: Object
            // Default: null
            // Sets or gets submit button
            this.okButton = null;
            // Type: Object
            // Default: null
            // Sets or gets the cancel button
            this.cancelButton = null;
            // Type: Object
            // Default: { OK: false, Cancel: false, None: true }
            // Sets or gets the dialog result
            this.dialogResult = { OK: false, Cancel: false, None: true };
            // Type: Bool
            // Default: false
            // Sets or gets whether the window is collapsed
            this.collapsed = false;
            // Type: Bool
            // Default: true
            // Sets or gets whether the collapse button is going to be shown
            this.showCollapseButton = false;
            // Type: Number
            // Default: 150
            // Sets or gets the collapse animation duration
            this.collapseAnimationDuration = 150;
            // Type: Number
            // Default: 16
            // Sets or gets the collapse button size
            this.collapseButtonSize = 16;

            //To move show into 4th place into the array and to remove open
            this._events = ['created', 'closed', 'moving', 'moved', 'open', 'collapse', 'expand', 'open', 'close', 'resize'];

            this._invalidArgumentExceptions = {
                'invalidHeight': 'Invalid height!',
                'invalidWidth': 'Invalid width!',
                'invalidMinHeight': 'Invalid minHeight!',
                'invalidMaxHeight': 'Invalid maxHeight!',
                'invalidMinWidth': 'Invalid minWidth!',
                'invalidMaxWidth': 'Invalid maxWidth',
                'invalidKeyCode': 'Invalid keyCode!',
                'invalidAnimationType': 'Invalid animationType!',
                'invalidCloseAnimationDuration': 'Invalid closeAnimationDuration!',
                'invalidShowAnimationDuration': 'Invalid showAnimationDuration!',
                'invalidPosition': 'Invalid position!',
                'invalidCloseButtonSize': 'Invalid closeButtonSize!',
                'invalidCollapseButtonSize': 'Invalid collapseButtonSize!',
                'invalidCloseButtonAction': 'Invalid cluseButtonAction!',
                'invalidModalOpacity': 'Invalid modalOpacity!',
                'invalidDragArea': 'Invalid dragArea!',
                'invalidDialogResult': 'Invalid dialogResult!',
                'invalidIsModal': 'You can have just one modal window!'
            };

            this._enableResizeCollapseBackup;
            this._enableResizeBackup;
            this._heightBeforeCollapse;
            this._minHeightBeforeCollapse;
            this._mouseDown = false;
            this._isDragging = false;
            this._rightContentWrapper = null;
            this._leftContentWrapper = null;
            this._headerContentWrapper = null;
            this._closeButton = null;
            this._collapseButton = null;
            this._title = null;
            this._content = null;
            this._mousePosition = {};
            this._windowPosition = {}
            this._modalBackground = null;
            this._SCROLL_WIDTH = 21;
            this._visible = true;
            this._touchEvents = {
                'mousedown': 'touchstart',
                'mouseup': 'touchend',
                'mousemove': 'touchmove',
                'mouseenter': 'mouseenter',
                'mouseleave': 'mouseleave',
                'click': 'touchstart'
            };
        },

        createInstance: function () {
            this.host.detach();
            $(document.body).append(this.host);
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this._validateProperties();
            this._createStructure();
            this._refresh();
            if (!this.autoOpen) {
                this.host.css('display', 'none');
            }
            this._fixWindowZIndex();
            this._setStartupSettings();
            this._positionWindow();
            this._raiseEvent(0);

            if (this.autoOpen) {
                this._performLayout();
                var self = this;
                if (self.initContent) {
                    self.initContent();
                }
                setTimeout(function () {
                    self._performLayout();
                }, 250);
            }
        },

        refresh: function () {
            this._performLayout();
        },

        _setStartupSettings: function () {
            if (this.disabled) {
                this.disable();
            }
            if (this.collapsed) {
                this.collapsed = false;
                this.collapse(0);
            }
            if (!this.autoOpen) {
                this.hide(null, 0.001, true);
                this._visible = false;
            }
            if (this.title !== null && this.title !== '') {
                this.setTitle(this.title);
            }
            if (this.content !== null && this.content !== '') {
                this.setContent(this.content);
            }
            this.title = this._headerContentWrapper.html();
            this.content = this._content.html();
        },

        //Fixing window's z-index and adding it to the collection of all windows
        //saved in $.data. In the end of the method we are sorting the window list in ascending z-index order.
        _fixWindowZIndex: function () {
            var windowsList = $.data(document.body, 'jqxwindows-list') || [], zIndex = 9001, tempZIndex;
            if (!this.isModal) {
                if (this._indexOf(this.host, windowsList) < 0) {
                    windowsList.push(this.host);
                }
                $.data(document.body, 'jqxwindows-list', windowsList);
                if (windowsList.length > 1) {
                    var upperWindow = windowsList[windowsList.length - 2];
                    zIndex = parseInt(upperWindow.css('z-index'), 10) + 1;
                }
            } else {
                if (windowsList) {
                    windowsList = this._removeFromArray(this.host, windowsList);
                    $.data(document.body, 'jqxwindows-list', windowsList);
                }

                zIndex = 18000;
                var modalZindex = 12990;

                var me = this;
                $.each($('.jqx-window-modal'), function (p) {
                    zIndex++;
                    if (this == me._modalBackground[0]) {
                        me._modalBackground.css('z-index', 18000 + p);
                        return false;
                    }
                });


                $.data(document.body, 'jqxwindow-modal', this.host);
            }
            this.host.css('z-index', zIndex);
            this._sortByStyle('z-index', windowsList);
        },

        _validateProperties: function () {
            try {
                this._validateSize();
                this._validateAnimationProperties();
                this._validateInteractionProperties();
                this._validateModalProperties();
                if (!this.position) {
                    throw new Error(this._invalidArgumentExceptions['invalidPosition']);
                }
                if (isNaN(this.closeButtonSize) || parseInt(this.closeButtonSize) < 0) {
                    throw new Error(this._invalidArgumentExceptions['invalidCloseButtonSize']);
                }
                if (isNaN(this.collapseButtonSize) || parseInt(this.collapseButtonSize) < 0) {
                    throw new Error(this._invalidArgumentExceptions['invalidCollapseButtonSize']);
                }
            } catch (exception) {
                alert(exception);
            }
        },

        _validateModalProperties: function () {
            if (this.modalOpacity < 0 || this.modalOpacity > 1) {
                throw new Error(this._invalidArgumentExceptions['invalidModalOpacity']);
            }
            if (this.isModal && !this._singleModalCheck()) {
                throw new Error(this._invalidArgumentExceptions['invalidIsModal']);
            }
        },

        //If window's height is less than minHeight we are stting height to minHeight the same when the width is less than minWidth.
        //If window's height is greater than maxHeight we are setting height to maxHeight the same with the width.
        _validateSize: function () {
            this._validateSizeLimits();
            if (this.height !== 'auto' && isNaN(parseInt(this.height))) {
                throw new Error(this._invalidArgumentExceptions['invalidHeight']);
            }
            if (this.width !== 'auto' && isNaN(parseInt(this.width))) {
                throw new Error(this._invalidArgumentExceptions['invalidWidth']);
            }
            if (this.height !== 'auto' && this.height < this.minHeight) {
                this.height = this.minHeight;
            }
            if (this.width < this.minWidth) {
                this.width = this.minWidth;
            }
            if (this.height !== 'auto' && this.height > this.maxHeight) {
                this.height = this.maxHeight;
            }
            if (this.width > this.maxWidth) {
                this.width = this.maxWidth;
            }
            if (this.dragArea === null) return;
            if (this.dragArea && ((this.dragArea.height !== null && this.host.height() > this.dragArea.height) ||
                (parseInt(this.height, 10) > this.dragArea.height)) ||
                (this.dragArea.width !== null && this.width > this.dragArea.width) ||
                (this.maxHeight > this.dragArea.height || this.maxWidth > this.dragArea.width)) {
                //throw new Error(this._invalidArgumentExceptions['invalidDragArea']);
            }
        },

        _validateSizeLimits: function () {
            if (isNaN(parseInt(this.minHeight))) {
                throw new Error(this._invalidArgumentExceptions['invalidMinHeight']);
            }
            if (isNaN(parseInt(this.maxHeight))) {
                throw new Error(this._invalidArgumentExceptions['invalidMaxHeight']);
            }
            if (isNaN(parseInt(this.minWidth))) {
                throw new Error(this._invalidArgumentExceptions['invalidMinWidth']);
            }
            if (isNaN(parseInt(this.maxWidth))) {
                throw new Error(this._invalidArgumentExceptions['invalidMaxWidth']);
            }
            if (this.minHeight > this.maxHeight) {
                throw new Error(this._invalidArgumentExceptions['invalidMinHeight']);
            }
            if (this.minWidth > this.maxWidth) {
                throw new Error(this._invalidArgumentExceptions['invalidMinWidth']);
            }
        },

        _validateAnimationProperties: function () {
            if (this.animationType !== 'fade' && this.animationType !== 'slide' && this.animationType !== 'combined' && this.animationType !== 'none') {
                throw new Error(this._invalidArgumentExceptions['invalidAnimationType']);
            }
            if (isNaN(parseInt(this.closeAnimationDuration), 10) || this.closeAnimationDuration < 0) {
                throw new Error(this._invalidArgumentExceptions['invalidCloseAnimationDuration']);
            }
            if (isNaN(parseInt(this.showAnimationDuration), 10) || this.showAnimationDuration < 0) {
                throw new Error(this._invalidArgumentExceptions['invalidShowAnimationDuration']);
            }
        },

        _validateInteractionProperties: function () {
            if (parseInt(this.keyCode, 10) < 0 || parseInt(this.keyCode, 10) > 130 && this.keyCode !== 'esc') {
                throw new Error(this._invalidArgumentExceptions['invalidKeyCode']);
            }
            if (this.dragArea !== null && (typeof this.dragArea.width === 'undefined' ||
                typeof this.dragArea.height === 'undefined' || typeof this.dragArea.left === 'undefined' || typeof this.dragArea.top === 'undefined')) {
                throw new Error(this._invalidArgumentExceptions['invalidDragArea']);
            }
            if (!this.dialogResult || (!this.dialogResult.OK && !this.dialogResult.Cancel && !this.dialogResult.None)) {
                throw new Error(this._invalidArgumentExceptions['invalidDialogResult']);
            }
            if (this.closeButtonAction !== 'hide' && this.closeButtonAction !== 'close') {
                throw new Error(this._invalidArgumentExceptions['invalidCloseButtonAction']);
            }
        },

        _singleModalCheck: function () {
            var windowsList = $.data(document.body, 'jqxwindows-list') || [],
                count = windowsList.length;
            while (count) {
                count -= 1;
                if ($(windowsList[count].attr('id')).jqxWindow('isModal')) {
                    return false;
                }
            }
            return true;
        },

        //This method is constructing the window from two type's of structures.
        //The first one is containing two divs. The first one is window's host and contain 'caption' attribute. The second
        //div is window's content.
        //The second one is containing three divs. The first one is representing the window. Second one (first inner)
        //window's header and the third one window's content.
        _createStructure: function () {
            var children = this.host.children('DIV');
            if (children.length === 1) {
                this._header = $('<div>' + this.host.attr('caption') + '</div>');
                this.host.prepend(this._header);
                this.host.attr('caption', '');
                this._content = $(children[0]);
            } else if (children.length === 2) {
                this._header = $(children[0]);
                this._content = $(children[1]);
            } else {
                throw new Error('Invalid structure!');
            }
        },

        _refresh: function () {
            this._render();
            this._addStyles();
            this._performLayout();
            this._removeEventHandlers();
            this._addEventHandlers();
            this._initializeResize();
        },

        _render: function () {
            this._addHeaderWrapper();
            this._addCloseButton();
            this._addCollapseButton();
            this._removeModal();
            this._makeModal();
        },

        _addHeaderWrapper: function () {
            if (!this._headerContentWrapper) {
                this._header.wrapInner('<div style="float:left;"></div>');
                this._headerContentWrapper = this._header.children(0);
            }
        },

        _addCloseButton: function () {
            if (!this._closeButton) {
                // the wrapper's purpose is to be a background of the close button's image.  
                this._closeButtonWrapper = $('<div class="' + this.toThemeProperty('jqx-window-close-button-background') + '"></div>');
                this._closeButton = $('<div style="width: 100%; height: 100%;" class="' + this.toThemeProperty('jqx-window-close-button') + '"></div>');
                this._closeButtonWrapper.append(this._closeButton);
                this._header.append(this._closeButtonWrapper);
            }
        },

        _addCollapseButton: function () {
            if (!this._collapseButton) {
                // the wrapper's purpose is to be a background of the close button's image.  
                this._collapseButtonWrapper = $('<div class="' + this.toThemeProperty('jqx-window-collapse-button-background') + '"></div>');
                this._collapseButton = $('<div style="width: 100%; height: 100%;" class="' + this.toThemeProperty('jqx-window-collapse-button') + '"></div>');
                this._collapseButtonWrapper.append(this._collapseButton);
                this._header.append(this._collapseButtonWrapper);
            }
        },

        _removeModal: function () {
            if (!this.isModal && typeof this._modalBackground === 'object' &&
                this._modalBackground !== null && this._modalBackground.length >= 1) {
                $('.' + this.toThemeProperty('jqx-window-modal')).remove();
                this._modalBackground = null;
            }
        },

        _makeModal: function () {
            if (this.isModal && (!this._modalBackground || this._modalBackground.length < 1)) {
                var windows = $.data(document.body, 'jqxwindows-list');
                if (windows) {
                    this._removeFromArray(this.host, windows);
                    $.data(document.body, 'jqxwindows-list', windows);
                }
                this._modalBackground = $('<div></div>');
                this._modalBackground.addClass(this.toThemeProperty('jqx-window-modal'));
                this._setModalBackgroundStyles();
                $(document.body).append(this._modalBackground);
                this.addHandler(this._modalBackground, this._getEvent('click'), function () {
                    return false;
                });
                var me = this;
                var ischildof = function (element, filter_string) {
                    var parents = $(element).parents().get();

                    for (j = 0; j < parents.length; j++) {
                        if ($(parents[j]).is(filter_string)) {
                            return true;
                        }
                    }

                    return false;
                }

                this.addHandler(this._modalBackground, 'mouseup', function (event) {
                    me._stopResizing(me);
                    event.preventDefault();
               //     return false;
                });
                this.addHandler(this._modalBackground, 'mousedown', function (event) {
                    var tabbables = me._getTabbables();
                    if (tabbables.length > 0) {
                        tabbables[0].focus(1);
                        setTimeout(function () {
                            tabbables[0].focus(1);
                        }, 100);
                    }

                    event.preventDefault();
                    return false;
                });

                this.addHandler($(document), 'keydown.window' + this.element.id, function (event) {
                    if (event.keyCode !== 9) {
                        return;
                    }

                    var tabbables = me._getTabbables();
                    var first = null;
                    var last = null;

                    if (tabbables.length > 0) {
                        first = tabbables[0];
                        last = tabbables[tabbables.length - 1];
                    }

                    if (event.target == me.element)
                        return;

                    if (first == null)
                        return;

                    if (!ischildof(event.target, me.host)) {
                        first.focus(1);
                        return false;
                    }

                    if (event.target === last && !event.shiftKey) {
                        first.focus(1);
                        return false;
                    } else if (event.target === first && event.shiftKey) {
                        last.focus(1);
                        return false;
                    }
                });
            }
        },

        _addStyles: function () {
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-window'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));
            this._header.addClass(this.toThemeProperty('jqx-window-header'));
            this._content.addClass(this.toThemeProperty('jqx-window-content'));
            this._header.addClass(this.toThemeProperty('jqx-widget-header'));
            this._content.addClass(this.toThemeProperty('jqx-widget-content'));
            this._header.addClass(this.toThemeProperty('jqx-disableselect'));
            this._header.addClass(this.toThemeProperty('jqx-rc-t'));
            this._content.addClass(this.toThemeProperty('jqx-rc-b'));
            this.element.tabIndex = 0;
            this.host.find('DIV').css('tab-index', 0);
            this.host.attr("hideFocus", "true").css("outline", "none");
        },

        _performHeaderLayout: function () {
            this._handleHeaderButtons();
            //The position of _header is changed from static to relative in order
            //to prevent from bugs with the close button when the jqxWindow's position is static.
            this._header.css('position', 'relative');
            this._performHeaderCloseButtonLayout();
            this._performHeaderCollapseButtonLayout();
            this._centerElement(this._headerContentWrapper, this._header, 'y', 'margin');
   //         this._centerElement(this._closeButtonWrapper, this._header, 'y', 'margin');
   //         this._centerElement(this._collapseButtonWrapper, this._header, 'y', 'margin');
        },

        _handleHeaderButtons: function () {
            if (!this.showCloseButton) {
                this._closeButtonWrapper.css('visibility', 'hidden');
            } else {
                this._closeButtonWrapper.css('visibility', 'visible');
                this._closeButtonWrapper.width(this.closeButtonSize);
                this._closeButtonWrapper.height(this.closeButtonSize);
            }
            if (!this.showCollapseButton) {
                this._collapseButtonWrapper.css('visibility', 'hidden');
            } else {
                this._collapseButtonWrapper.css('visibility', 'visible');
                this._collapseButtonWrapper.width(this.collapseButtonSize);
                this._collapseButtonWrapper.height(this.collapseButtonSize);
            }
        },

        _performHeaderCloseButtonLayout: function () {
            var paddingRight = parseInt(this._header.css('padding-right'), 10);
            if (!isNaN(paddingRight)) {
                this._closeButtonWrapper.width(this._closeButton.width());
                this._closeButtonWrapper.css('margin-right', paddingRight);
            }
            this._closeButtonWrapper.css({
                'position': 'absolute',
                'right': '0px'
            });
        //    this._centerElement(this._closeButton, this._closeButton.parent(), 'y');
        },

        _performHeaderCollapseButtonLayout: function () {
            var paddingRight = parseInt(this._header.css('padding-right'), 10);
            if (!isNaN(paddingRight)) {
                this._collapseButtonWrapper.width(this.collapseButtonSize);
                this._collapseButtonWrapper.height(this.collapseButtonSize);
                this._collapseButtonWrapper.css('margin-right', paddingRight);
            }
            this._collapseButtonWrapper.css({
                'position': 'absolute',
                'right': (this.showCloseButton) ? this._closeButton.outerWidth(true) : 0
            });
            this._centerElement(this._collapseButton, this._collapseButton.parent(), 'y');
        },

        _performWidgetLayout: function () {
            var isValid;
            if (this.width !== 'auto') {
                this.host.css('width', this.width);
            }
            if (!this.collapsed) {
                if (this.height !== 'auto') {
                    this.host.height(this.height);
                } else {
                    this.host.height(this.host.height());
                }
                this.host.css('min-height', this.minHeight);
            }
            this._setChildrenLayout();
            isValid = this._validateMinSize();
            this.host.css({
                'max-height': this.maxHeight,
                'min-width': this.minWidth,
                'max-width': this.maxWidth
            });
            if (!isValid) {
                this._setChildrenLayout();
            }
        },

        _setChildrenLayout: function () {
            this._header.width(this.host.width() - (this._header.outerWidth(true) - this._header.width()));
            this._content.width(this.host.width() - (this._content.outerWidth(true) - this._content.width()));
            this._content.height(this.host.height() - this._header.outerHeight(true) - (this._content.outerHeight(true) - this._content.height()));
        },

        _validateMinSize: function () {
            var returnValue = true;
            if (this.minHeight < this._header.height()) {
                this.minHeight = this._header.height();
                returnValue = false;
            }
            var headerContentWidth = this._header.children(0).outerWidth(true),
                closeButtonWidth = this._header.children(1).outerWidth(true),
                headerInnerWidth = headerContentWidth + closeButtonWidth;
            if (this.minWidth < 100) {
                this.minWidth = Math.min(headerInnerWidth, 100);
                returnValue = false;
            }
            return returnValue;
        },

        _centerElement: function (child, parent, axis, attribute) {
            if (typeof parent.left === 'number' && typeof parent.top === 'number' &&
                typeof parent.height === 'number' && typeof parent.width === 'number') {
                this._centerElementInArea(child, parent, axis);
            } else {
                this._centerElementInParent(child, parent, axis, attribute);
            }
        },

        _centerElementInParent: function (child, parent, axis, attribute) {
            axis = axis.toLowerCase();
            if (attribute) {
                attribute += '-';
            } else {
                attribute = '';
            }
            if (axis.indexOf('y') >= 0) {
                var childHeight = child.outerHeight(true),
                    parentHeight = parent.height(),
                    verticalDisplacement = (parentHeight - childHeight) / 2;
                child.css(attribute + 'top', verticalDisplacement + 'px');
            }
            if (axis.indexOf('x') >= 0) {
                var childWidth = child.outerWidth(true);
                var parentWidth = parent.width();
                var horizontalDisplacement = (parentWidth - childWidth) / 2;
                child.css(attribute + 'left', horizontalDisplacement + 'px');
            }
        },

        _centerElementInArea: function (child, area, axis) {
            axis = axis.toLowerCase();
            if (axis.indexOf('y') >= 0) {
                var childHeight = child.outerHeight(true);
                var parentHeight = area.height;
                var verticalDisplacement = (parentHeight - childHeight) / 2;
                child.css('top', verticalDisplacement + area.top + 'px');
            }
            if (axis.indexOf('x') >= 0) {
                var childWidth = child.outerWidth(true);
                var parentWidth = area.width;
                var horizontalDisplacement = (parentWidth - childWidth) / 2;
                child.css('left', horizontalDisplacement + area.left + 'px');
            }
        },

        _removeEventHandlers: function () {
            this.removeHandler(this._header, this._getEvent('mousedown'));
            this.removeHandler(this._header, this._getEvent('mousemove'));
            this.removeHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'));
            this.removeHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'));
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this._closeButton, this._getEvent('click'));
            this.removeHandler(this._closeButton, this._getEvent('mouseenter'));
            this.removeHandler(this._closeButton, this._getEvent('mouseleave'));
            this.removeHandler(this._collapseButton, this._getEvent('click'));
            this.removeHandler(this._collapseButton, this._getEvent('mouseenter'));
            this.removeHandler(this._collapseButton, this._getEvent('mouseleave'));
            this.removeHandler(this.host, this._getEvent('mousedown'));
            this.removeHandler($(this.okButton), this._getEvent('click'), this._setDialogResultHandler);
            this.removeHandler($(this.cancelButton), this._getEvent('click'), this._setDialogResultHandler);
            this.removeHandler(this._header, this._getEvent('mouseenter'));
            this.removeHandler(this._header, this._getEvent('mouseleave'));
            this.removeHandler(this.host, 'resizing', this._windowResizeHandler);
        },

        _removeFromArray: function (element, array) {
            var indexOfElement = this._indexOf(element, array);
            if (indexOfElement >= 0) {
                return array.splice(this._indexOf(element, array), 1);
            } else {
                return array;
            }
        },

        _sortByStyle: function (attr, collection) {
            for (var i = 0; i < collection.length; i++) {
                for (var j = collection.length - 1; j > i; j--) {
                    var itemOne = collection[j], itemTwo = collection[j - 1], tmp;
                    if (parseInt(itemOne.css(attr), 10) < parseInt(itemTwo.css(attr), 10)) {
                        tmp = itemOne;
                        collection[j] = itemTwo;
                        collection[j - 1] = tmp;
                    }
                }
            }
        },

        _initializeResize: function () {
            if (this.resizable) {
                var self = this;
                this.initResize({
                    target: this.host,
                    alsoResize: self._content,
                    maxWidth: self.maxWidth,
                    minWidth: self.minWidth,
                    maxHeight: self.maxHeight,
                    minHeight: self.minHeight,
                    indicatorSize: 10,
                    resizeParent: self.dragArea
                });
            }
        },

        _removeResize: function () {
            this.removeResize();
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._touchEvents[event];
            } else {
                return event;
            }
        },

        _addEventHandlers: function () {
            this._addDragDropHandlers();
            this._addCloseHandlers();
            this._addCollapseHandlers();
            this._addFocusHandlers();
            this._documentResizeHandlers();
            this._closeButtonHover();
            this._collapseButtonHover();
            this._addDialogButtonsHandlers();
            this._addHeaderHoverEffect();
            this._addResizeHandlers();
            this.addHandler(this._header, this._getEvent('mousemove'), this._addHeaderCursorHandlers, { self: this });
        },

        _addResizeHandlers: function () {
            var self = this;
            this.addHandler(this.host, 'resizing', this._windowResizeHandler, { self: this });
        },

        _windowResizeHandler: function (event) {
            var self = event.data.self;
            self._header.width(self.host.width() - (self._header.outerWidth(true) - self._header.width()));
            self.width = event.args.width;
            self.height = event.args.height;
        },

        _addHeaderHoverEffect: function () {
            var self = this;
            this.addHandler(this._header, this._getEvent('mouseenter'), function () {
                $(this).addClass(self.toThemeProperty('jqx-window-header-hover'));
            });
            this.addHandler(this._header, this._getEvent('mouseleave'), function () {
                $(this).removeClass(self.toThemeProperty('jqx-window-header-hover'));
            });
        },

        _addDialogButtonsHandlers: function () {
            if (this.okButton) {
                this.addHandler($(this.okButton), this._getEvent('click'), this._setDialogResultHandler, { self: this, result: 'ok' });
            }
            if (this.cancelButton) {
                this.addHandler($(this.cancelButton), this._getEvent('click'), this._setDialogResultHandler, { self: this, result: 'cancel' });
            }
        },

        _documentResizeHandlers: function () {
            var self = this;
            if (this.isModal) {
                $(window).resize(function () {
                    if (typeof self._modalBackground === 'object' && self._modalBackground !== null) {
                        self._modalBackground.width(self._getDocumentSize().width);
                        self._modalBackground.height(self._getDocumentSize().height);
                    }
                });
            }
        },

        _setDialogResultHandler: function (event) {
            var self = event.data.self;
            self._setDialogResult(event.data.result);
            self.closeWindow();
        },

        _setDialogResult: function (result) {
            this.dialogResult.OK = false;
            this.dialogResult.None = false;
            this.dialogResult.Cancel = false;
            result = result.toLowerCase();
            switch (result) {
                case 'ok':
                    this.dialogResult.OK = true;
                    break;
                case 'cancel':
                    this.dialogResult.Cancel = true;
                    break;
                default:
                    this.dialogResult.None = true;
            }
        },

        _getDocumentSize: function () {
            var scrollTop = ($.browser.msie && $.browser.version < 9) ? 4 : 0, scrollLeft = ($.browser.msie && $.browser.version < 9) ? 4 : 0;
            if (document.body.scrollHeight > document.body.clientHeight && ($.browser.msie && $.browser.version < 9)) {
                scrollTop = this._SCROLL_WIDTH;
            }
            if (document.body.scrollWidth > document.body.clientWidth && ($.browser.msie && $.browser.version < 9)) {
                scrollLeft = this._SCROLL_WIDTH;
            }
            return { width: $(document).width() - scrollTop, height: $(document).height() - scrollLeft };
        },

        _closeButtonHover: function () {
            var self = this;
            this.addHandler(this._closeButton, this._getEvent('mouseenter'), function () {
                self._closeButton.addClass(self.toThemeProperty('jqx-window-close-button-hover'));
            });
            this.addHandler(this._closeButton, this._getEvent('mouseleave'), function () {
                self._closeButton.removeClass(self.toThemeProperty('jqx-window-close-button-hover'));
            });
        },

        _collapseButtonHover: function () {
            var self = this;
            this.addHandler(this._collapseButton, this._getEvent('mouseenter'), function () {
                self._collapseButton.addClass(self.toThemeProperty('jqx-window-collapse-button-hover'));
            });
            this.addHandler(this._collapseButton, this._getEvent('mouseleave'), function () {
                self._collapseButton.removeClass(self.toThemeProperty('jqx-window-collapse-button-hover'));
            });
        },

        _setModalBackgroundStyles: function () {
            if (this.isModal) {
                this._modalBackground.fadeTo(0, this.modalOpacity);
                this._modalBackground.css({
                    'position': 'absolute',
                    'top': '0px',
                    'left': '0px',
                    'width': this._getDocumentSize().width,
                    'height': this._getDocumentSize().height,
                    'z-index': 12990
                });
                if (!this.autoOpen) {
                    this._modalBackground.css('display', 'none');
                }
            }
        },

        _addFocusHandlers: function () {
            var self = this;
            this.addHandler(this.host, this._getEvent('mousedown'), function () {
                if (!self.isModal) {
                    self.bringToFront();
                }
            });
        },

        _indexOf: function (host, collection) {
            for (var i = 0; i < collection.length; i++) {
                if (collection[i][0] === host[0]) {
                    return i;
                }
            }
            return -1;
        },

        _addCloseHandlers: function () {
            var self = this;
            this.addHandler(this._closeButton, this._getEvent('click'), this._closeWindow, { self: this });
            if (this.keyboardCloseKey !== 'none') {
                if (typeof this.keyboardCloseKey !== 'number' && this.keyboardCloseKey.toLowerCase() === 'esc') {
                    this.keyboardCloseKey = 27;
                }
                this.addHandler(this.host, 'keydown', function (event) {
                    if (event.keyCode === self.keyboardCloseKey) {
                        self._closeWindow(event);
                    }
                }, { self: this });
            }
        },

        _addCollapseHandlers: function () {
            var self = this;
            this.addHandler(this._collapseButton, this._getEvent('click'), function () {
                if (!self.collapsed) {
                    self.collapse();
                } else {
                    self.expand();
                }
            });
        },

        _closeWindow: function (event) {
            var self = event.data.self.closeWindow();
        },

        _addHeaderCursorHandlers: function (event) {
            var self = event.data.self;
            if (self.resizeArea && self.resizable) {
                self._header.css('cursor', self._resizeWrapper.css('cursor'));
                return;
            } else if (self.draggable) {
                self._header.css('cursor', 'move');
                return;
            }
            self._header.css('cursor', 'default');
            if (self._resizeWrapper && self._resizeWrapper.length > 0) {
                self._resizeWrapper.css('cursor', 'default')
            }
        },

        _addDragDropHandlers: function () {
            if (this.draggable) {
                var self = this;
                this.addHandler(this._header, this._getEvent('mousedown'), function (event) {
                    self._headerMouseDownHandler(self, event);
                    return true;
                });

                this.addHandler(this._header, 'dragstart', function (event) {
                    if (event.preventDefault) {
                        event.preventDefault();
                    }
                    return false;
                });

                this.addHandler(this._header, this._getEvent('mousemove'), function (event) {
                    return self._headerMouseMoveHandler(self, event);
                });

                this.addHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'), function (event) {
                    return self._dragHandler(self, event);
                });
                this.addHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'), function (event) {
                    return self._dropHandler(self, event);
                });

                try
                {
                    if (document.referrer != "" || window.frameElement) {
                        if (window.top != null) {
                            if (window.parent && document.referrer) {
                                parentLocation = document.referrer;
                            }
                        }

                        if (parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                self._dropHandler(self, event);
                            };

                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }                      
                    }
                }
                catch (error) {
                }
            }
        },

        _headerMouseDownHandler: function (self, event) {
            if (!self.isModal) {
                self.bringToFront();
            }

            if (self._resizeDirection == null) {
                self._mousePosition.x = (self._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX;
                self._mousePosition.y = (self._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY;
                self._mouseDown = true;
                self._isDragging = false;
            }
        },

        _headerMouseMoveHandler: function (self, event) {
            if (self._mouseDown && !self._isDragging) {
                var pageX = (self._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX,
                    pageY = (self._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY;
                if ((pageX + 3 < self._mousePosition.x || pageX - 3 > self._mousePosition.x) ||
                    (pageY + 3 < self._mousePosition.y || pageY - 3 > self._mousePosition.y)) {
                    self._isDragging = true;
                    self._mousePosition = { x: pageX, y: pageY };
                    //self._windowPosition = { x: parseInt(self.host.css('left'), 10), y: parseInt(self.host.css('top'), 10) };
                    self._windowPosition = { x: self.host.offset().left, y: self.host.offset().top };
                    $(document.body).addClass(self.toThemeProperty('jqx-disableselect'));
                }
                return false;
            }
            return true;
        },

        _dropHandler: function (self, event) {
            var result = true;
            if (self._isDragging && !self.isResizing && !self._resizeDirection) {
                var x = parseInt(self.host.css('left'), 10),
                    y = parseInt(self.host.css('top'), 10),
                    pageX = (self._isTouchDevice) ? 0 : event.pageX,
                    pageY = (self._isTouchDevice) ? 0 : event.pageY;
                self.enableResize = self._enableResizeBackup;
                self._enableResizeBackup = 'undefined';
                self._raiseEvent(3, x, y, pageX, pageY);
                result = false;

                if (event.preventDefault != 'undefined') {
                    event.preventDefault();
                }

                if (event.originalEvent != null) {
                    event.originalEvent.mouseHandled = true;
                }

                if (event.stopPropagation != 'undefined') {
                    event.stopPropagation();
                }
            }
            self._isDragging = false;
            self._mouseDown = false;
            $(document.body).removeClass(self.toThemeProperty('jqx-disableselect'));
            return result;
        },

        _dragHandler: function (self, event) {
            if (self._isDragging && !self.isResizing && !self._resizeDirection) {
                var eventWhich = (self._isTouchDevice) ? event.originalEvent.which : event.which;
                if (typeof self._enableResizeBackup === 'undefined') {
                    self._enableResizeBackup = self.enableResize;
                }
                self.enableResize = false;
                if (eventWhich === 0 && $.browser.msie && $.browser.version < 8) {
                    return self._dropHandler(self, event);
                }
                var pageX = (self._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX,
                    pageY = (self._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY,
                    displacementX = pageX - self._mousePosition.x,
                    displacementY = pageY - self._mousePosition.y,
                    newX = self._windowPosition.x + displacementX,
                    newY = self._windowPosition.y + displacementY;
                self.move(newX, newY, event);
                event.preventDefault();
                return false;
            }
            return true;
        },

        _validateCoordinates: function (x, y, scrollTop, scrollLeft) {
            var dragArea = this._getDraggingArea();
            x = (x < dragArea.left) ? dragArea.left : x;
            y = (y < dragArea.top) ? dragArea.top : y;
            var hostwidth = this.host.outerWidth(true);
            var hostheight = this.host.outerHeight(true);
            if (x + hostwidth >= dragArea.width + dragArea.left - 2 * scrollLeft) {
                x = dragArea.width + dragArea.left - hostwidth - scrollLeft;
            }
            if (y + hostheight >= dragArea.height + dragArea.top - scrollTop) {
                y = dragArea.height + dragArea.top - hostheight - scrollTop;
            }
            return { x: x, y: y };
        },

        _performLayout: function () {
            this._performHeaderLayout();
            this._performWidgetLayout();
        },

        _parseDragAreaAttributes: function () {
            if (this.dragArea !== null) {
                this.dragArea.height = parseInt(this.dragArea.height, 10);
                this.dragArea.width = parseInt(this.dragArea.width, 10);
                this.dragArea.top = parseInt(this.dragArea.top, 10);
                this.dragArea.left = parseInt(this.dragArea.left, 10);
            }
        },

        _positionWindow: function () {
            this._parseDragAreaAttributes();
            if (this.position instanceof Array && this.position.length === 2 &&
                typeof this.position[0] === 'number' &&
                typeof this.position[1] === 'number') {
                this.host.css({
                    'left': this.position[0],
                    'top': this.position[1]
                });
            } else if (this.position instanceof Object && this.position.x !== 'undefined' && this.position.y != 'undefined') {
                this.host.css({
                    'left': this.position.x,
                    'top': this.position.y
                });
            } else {
                this._positionFromLiteral();
            }
        },

        _getDraggingArea: function () {
            var draggingArea = {};
            draggingArea.left = ((this.dragArea && this.dragArea.left) ? this.dragArea.left : 0);
            draggingArea.top = ((this.dragArea && this.dragArea.top) ? this.dragArea.top : 0);
            draggingArea.width = ((this.dragArea && this.dragArea.width) ? this.dragArea.width : this._getDocumentSize().width);
            draggingArea.height = ((this.dragArea && this.dragArea.height) ? this.dragArea.height : this._getDocumentSize().height);
            return draggingArea;
        },

        _positionFromLiteral: function () {
            if (!(this.position instanceof Array)) {
                this.position = this.position.split(',');
            }
            var count = this.position.length, dragArea = this._getDraggingArea();
            while (count) {
                count -= 1;
                this.position[count] = this.position[count].replace(/ /g, '');
                switch (this.position[count]) {
                    case 'top':
                        this.host.css('top', dragArea.top);
                        break;
                    case 'left':
                        this.host.css('left', dragArea.left);
                        break;
                    case 'bottom':
                        this.host.css('top', dragArea.height - this.host.height() + dragArea.top);
                        break;
                    case 'right':
                        this.host.css('left', dragArea.left + dragArea.width - this.host.width());
                        break;
                    default:
                        if (!this.dragArea) dragArea = $(window);
                        this._centerElement(this.host, dragArea, 'xy');
                        break;
                }
            }
        },

        _raiseEvent: function (eventId) {
            var eventType = this._events[eventId], event = $.Event(eventType), args = {};
            if (eventId === 2 || eventId === 3) {
                args.x = arguments[1];
                args.y = arguments[2];
                args.pageX = arguments[3];
                args.pageY = arguments[4];
            }
            if (eventType === 'closed' || eventType === 'close') {
                args.dialogResult = this.dialogResult;
            }
            event.args = args;
            return this.host.trigger(event);
        },

        _destroy: function () {
            this.host.remove();
            if (this._modalBackground !== null) {
                this._modalBackground.remove();
            }
        },

        _toClose: function (closeCurrent, target) {
            return ((closeCurrent && target[0] === this.element) ||
                (target[0] !== this.element && typeof target[0] === 'object'));
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            this._validateProperties();
            switch (key) {
                case 'dragArea':
                    this._positionWindow();
                    break;
                case 'collapseButtonSize':
                    this._performLayout();
                    break;
                case 'closeButtonSize':
                    this._performLayout();
                    break;
                case 'isModal':
                    this._refresh();
                    this._fixWindowZIndex();
                    break;
                case 'keyboardCloseKey':
                    this._removeEventHandlers();
                    this._addEventHandlers();
                    break;
                case 'disabled':
                    if (value) {
                        this.disable();
                    } else {
                        this.disabled = true;
                        this.enable();
                    }
                    break;
                case 'showCloseButton':
                case 'showCollapseButton':
                    this._performLayout();
                    break;
                case 'height':
                    this._performLayout();
                    break;
                case 'width':
                    this._performLayout();
                    break;
                case 'title':
                    this.setTitle(value);
                    break;
                case 'content':
                    this.setContent(value);
                    break;
                case 'draggable':
                    this._removeEventHandlers();
                    this._addEventHandlers();
                    this._initializeResize();
                    break;
                case 'resizable':
                    if (this.collapsed && value) {
                        this.resizable = oldvalue;
                    }
                    else {
                        if (value) {
                            this._initializeResize();
                        } else {
                            this._removeResize();
                        }
                    }
                    break;
                case 'position':
                    this._positionWindow();
                    break;
                case 'modalOpacity':
                    this._setModalBackgroundStyles();
                    break;
                case 'okButton':
                    if (value) {
                        this._addDialogButtonsHandlers();
                    } else {
                        this.removeHandler(this.okButton);
                    }
                    break;
                case 'cancelButton':
                    if (value) {
                        this._addDialogButtonsHandlers();
                    } else {
                        this.removeHandler(this.cancelButton);
                    }
                    break;
                case 'collapsed':
                    if (value) {
                        if (!oldvalue) {
                            this.collapsed = false;
                            this.collapse(0);
                        }
                    } else {
                        if (oldvalue) {
                            this.collapsed = true;
                            this.expand(0);
                        }
                    }
                case 'theme':
                    $.jqx.utilities.setTheme(oldvalue, value, this.host);
                    break;
                case 'enableResize':
                    return;
                default:
                    return;
            }
        },

        collapse: function (duration) {
            if (!this.collapsed && !this.host.is(':animated')) {
                if (this.enableResize) {
                    this._enableResizeCollapseBackup = true;
                    this.enableResize = false;
                }

                var self = this,
                    collapseHeight = this._header.outerHeight(true),
                    bottomBorder = parseInt(this._header.css('border-bottom-width'), 10),
                    bottomMargin = parseInt(this._header.css('margin-bottom'), 10),
                    duration = !isNaN(parseInt(duration)) ? duration : this.collapseAnimationDuration;
                if (!isNaN(bottomBorder)) {
                    collapseHeight -= 2 * bottomBorder;
                }
                if (!isNaN(bottomMargin)) {
                    collapseHeight += bottomMargin;
                }
                this._heightBeforeCollapse = this.host.height();
                this._minHeightBeforeCollapse = this.host.css('min-height');
                this.host.css('min-height', collapseHeight);
                this.host.animate({ height: collapseHeight }, duration, function () {
                    self.collapsed = true;
                    self._collapseButton.addClass(self.toThemeProperty('jqx-window-collapse-button-collapsed'));
                    self._content.css('display', 'none');
                    self._raiseEvent(5);
                    self._raiseEvent(9);
                });
            }
        },

        expand: function (duration) {
            if (this.collapsed && !this.host.is(':animated')) {

                var self = this,
                    duration = !isNaN(parseInt(duration)) ? duration : this.collapseAnimationDuration;
                this.host.animate({ 'height': this._heightBeforeCollapse }, duration, function () {
                    self.collapsed = false;
                    self.host.css('min-height', self._minHeightBeforeCollapse);
                    self._collapseButton.removeClass(self.toThemeProperty('jqx-window-collapse-button-collapsed'));
                    if (self._enableResizeCollapseBackup) {
                        self.enableResize = true;
                    }
                    self._content.css('display', 'block');
                    self._raiseEvent(6);
                    self._performWidgetLayout();
                    self._raiseEvent(9);
                });
            }
        },

        //Closing all open windows which are not modal
        closeAll: function (closeCurrent) {
            closeCurrent = (typeof closeCurrent === 'object') ? false : closeCurrent;
            var windows = $.data(document.body, 'jqxwindows-list'),
                count = windows.length, modal = $.data(document.body, 'jqxwindow-modal') || [];
            while (count) {
                count -= 1;
                if (this._toClose(closeCurrent, windows[count])) {
                    windows[count].jqxWindow('closeWindow', 'close');
                    windows.splice(count, 1);
                }
            }
            if (this._toClose(closeCurrent, modal)) {
                modal.jqxWindow('closeWindow', 'close');
                $.data(document.body, 'jqxwindow-modal', [])
            }
            $.data(document.body, 'jqxwindows-list', windows);
        },

        //Setting window's title
        setTitle: function (title) {
            this._headerContentWrapper.html(title);
            this._performLayout();
        },

        //Setting window's content
        setContent: function (content) {
            this._contentInitialized = false;

            var parent = this._content,
                finished = false;
            while (!finished) {
                parent.css('height', 'auto');
                parent.css('width', 'auto');
                if (parent.is('.jqx-window')) {
                    finished = true;
                } else {
                    parent = parent.parent();
                }
            }
            this._content.html(content);
            this._performLayout();
        },

        //Disabling the window
        disable: function () {
            this.disabled = true;
            this._removeEventHandlers();
            this._header.addClass(this.toThemeProperty('jqx-window-header-disabled'));
            this._closeButton.addClass(this.toThemeProperty('jqx-window-close-button-disabled'));
            this._collapseButton.addClass(this.toThemeProperty('jqx-window-collapse-button-disabled'));
            this._content.addClass(this.toThemeProperty('jqx-window-content-disabled'));
            this.host.addClass(this.toThemeProperty('jqx-window-disabled'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this._removeResize();
        },

        //Enabling the window
        enable: function () {
            if (this.disabled) {
                this._addEventHandlers();
                this._header.removeClass(this.toThemeProperty('jqx-window-header-disabled'));
                this._content.removeClass(this.toThemeProperty('jqx-window-content-disabled'));
                this._closeButton.removeClass(this.toThemeProperty('jqx-window-close-button-disabled'));
                this._collapseButton.removeClass(this.toThemeProperty('jqx-window-collapse-button-disabled'));
                this.host.removeClass(this.toThemeProperty('jqx-window-disabled'));
                this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.disabled = false;
                this._initializeResize();
            }
        },

        //Returning true if the window is open (not hidden) and false if it is closed (hidden)
        isOpen: function () {
            return this._visible;
        },

        //Closing the window
        closeWindow: function (action) {
            var self = this;
            action = (typeof action === 'undefined') ? this.closeButtonAction : action;
            this.hide(function () {
                if (action === 'close') {
                    self._destroy();
                }
            });
        },

        //Bringing the window to the front
        bringToFront: function () {
            var windows = $.data(document.body, 'jqxwindows-list'),
                upperWindow = windows[windows.length - 1],
                zIndex = parseInt(upperWindow.css('z-index'), 10),
                currentElementIndex = this._indexOf(this.host, windows);
            for (var i = windows.length - 1; i > currentElementIndex; i -= 1) {
                var currentZIndex = parseInt(windows[i].css('z-index'), 10) - 1;
                windows[i].css('z-index', currentZIndex);
            }
            this.host.css('z-index', zIndex);
            this._sortByStyle('z-index', windows);
        },

        //Hiding/closing the current window
        hide: function (callback, duration, notRaiseEvent) {
            duration = duration || this.closeAnimationDuration;
            switch (this.animationType) {
                case 'none':
                    this.host.css('display', 'none');
                    break;
                case 'fade':
                    this.host.fadeOut(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
                case 'slide':
                    this.host.slideUp(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
                case 'combined':
                    this.host.hide(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
            }
            this._visible = false;
            if (this.isModal) {
                this._modalBackground.hide();
            }
            if (notRaiseEvent !== true) {
                this._raiseEvent(1);
                this._raiseEvent(8);
            }
        },

        open: function (callback, duration) {
            this.show(callback, duration);
        },

        close: function (callback, duration, notRaiseEvent) {
            this.hide(callback, duration, notRaiseEvent);
        },

        //Opening/showing the current window
        show: function (callback, duration) {
            this._setDialogResult('none');
            duration = duration || this.showAnimationDuration;
            switch (this.animationType) {
                case 'none':
                    this.host.css('display', 'block');
                    break;
                case 'fade':
                    this.host.fadeIn(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
                case 'slide':
                    this.host.slideDown(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
                case 'combined':
                    this.host.show(duration, function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    });
            }
            if (this.isModal) {
                this._modalBackground.show();
            }
            var me = this;
            if (!this._visible) {
                //To remove this._raiseEvent(4); in the next version
                //  this._raiseEvent(4);
                if (duration > 150 && this.animationType != 'none') {
                    setTimeout(function () {
                        if (!me._contentInitialized) {
                            if (me.initContent) {
                                me.initContent();
                            }
                        }
                        me._raiseEvent(7);
                        me._raiseEvent(9);
                    }, duration - 150);
                }
                else {
                    if (!me._contentInitialized) {
                        if (me.initContent) {
                            me.initContent();
                        }
                    }
                    this._raiseEvent(7);
                    me._raiseEvent(9);
                }
            }
            this._visible = true;
            this._performLayout();
            // focus the displayed window.
            var focusContent = function () {
                me._content.focus();
            }
            focusContent();
            setTimeout(function () {
                focusContent();
            }, 100);
        },

        _getTabbables: function () {
            var elements = this._content.find('*');
            var tabbables = new Array();
            $.each(elements, function () {
                if (tabbable(this)) {
                    tabbables[tabbables.length] = this;
                }
            });
            return tabbables;
        },

        //Moving the current window
        move: function (x, y, event, raiseEvent) {
            var scrollLeft = 0, scrollTop = 0, position, pageX, pageY, x = parseInt(x, 10), y = parseInt(y, 10);
            if ($.browser.msie) {
                if ($(window).width() > $(document).width() && !this.dragArea) {
                    scrollTop = this._SCROLL_WIDTH;
                }
                if ($(window).height() < $(document).height() &&
                 document.documentElement.clientWidth > document.documentElement.scrollWidth && !this.dragArea) {
                    scrollLeft = this._SCROLL_WIDTH;
                }
            }
            position = this._validateCoordinates(x, y, scrollTop, scrollLeft);
            if (parseInt(this.host.css('left'), 10) !== position.x || parseInt(this.host.css('top'), 10) !== position.y) {
                if (event) {
                    pageX = (this._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX;
                    pageY = (this._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY;
                }
                if (raiseEvent !== false) {
                    this._raiseEvent(2, position.x, position.y, pageX, pageY);
                }
            }
            this.element.style.left = position.x + 'px';
            this.element.style.top = position.y + 'px';
        }
    });

    function focusable(element, isTabIndexNotNaN) {
        var nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            var map = element.parentNode,
			mapName = map.name,
			img;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName)
		? !element.disabled
		: "a" == nodeName
			? element.href || isTabIndexNotNaN
			: isTabIndexNotNaN)
        // the element and all of its ancestors must be visible
		&& visible(element);
    }

    function visible(element) {
        return !$(element).parents().andSelf().filter(function () {
            return $.css(this, "visibility") === "hidden" ||
			$.expr.filters.hidden(this);
        }).length;
    }

    function tabbable(element) {
        var tabIndex = $.attr(element, "tabindex"),
			isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
    }

} (jQuery));


var resizeModule = (function ($) {
    return {

        resizeConfig: function () {
            // Resize target
            this.resizeTarget = null;
            // Indicator's size
            this.resizeIndicatorSize = 10;
            // All children are saved here
            this.resizeTargetChildren = null;
            // Indicates if it's resizing
            this.isResizing = false;
            // Indicates if the cursor is in the resize area. It is usefull when you are using different cursors in your resize target
            this.resizeArea = false;
            // Setting target's minimal width
            this.minWidth = 1;
            // Setting target's max width
            this.maxWidth = 100;
            // Setting target's min height
            this.minHeight = 1;
            // Setting target's max height
            this.maxHeight = 100;
            // Setting target's parent
            this.resizeParent = null;
            // Setting whether the resize is disabled
            this.enableResize = true;

            this._cursorBackup;
            this._resizeEvents = ['resizing', 'resized', 'resize'];

            //Private variables
            this._resizeMouseDown = false;
            this._resizeCurrentMode = null;
            this._mouseResizePosition = {};
            this._resizeMethods = null;
            this._SCROLL_WIDTH = 21;
        },

        _resizeExceptions: {
            'invalidTarget': 'Invalid target!',
            'invalidMinHeight': 'Invalid minimal height!',
            'invalidMaxHeight': 'Invalid maximum height!',
            'invalidMinWidth': 'Invalid minimum width!',
            'invalidMaxWidth': 'Invalid maximum width!',
            'invalidIndicatorSize': 'Invalid indicator size!',
            'invalidSize': 'Invalid size!'
        },

        removeResize: function () {
            if (this.resizeTarget) {
                var resizer = $(this.resizeTarget.children('.jqx-resize'));
                resizer.detach();
                var content = resizer.children();
                this._removeResizeEventListeners();
                for (var i = 0; i < content.length; i += 1) {
                    $(content[i]).detach();
                    this.resizeTarget.append(content[i]);
                }
                resizer.remove();
            }
            //resizer.remove();
        },

        //Initializing all variables
        initResize: function (config) {
            this.resizeConfig();
            this.resizeTarget = $(config.target);
            this.resizeIndicatorSize = config.indicatorSize || 10;
            if (this.resizeTarget.is('textarea')) {
                var textarea = this._resizableTextArea();
                this.resizeIndicatorSize = ((this.resizeIndicatorSize >= 10) ? this.resizeIndicatorSize : 10);
            }
            this.maxWidth = config.maxWidth || 100;
            this.minWidth = config.minWidth || 1;
            this.maxHeight = config.maxHeight || 100;
            this.minHeight = config.minHeight || 1;
            this.resizeParent = config.resizeParent;
            this._parseResizeParentProperties();
            this._validateResizeProperties();
            this._validateResizeTargetDimensions();
            this._getChildren(this.resizeTarget.maxWidth, this.resizeTarget.minWidth,
                              this.resizeTarget.maxHeight, this.resizeTarget.minHeight, config.alsoResize, textarea);
            this._refreshResize();
            this._cursorBackup = this.resizeTarget.css('cursor');
            if (this._cursorBackup === 'auto') {
                this._cursorBackup = 'default';
            }
        },

        _validateResizeTargetDimensions: function () {
            this.resizeTarget.maxWidth = this.maxWidth;
            this.resizeTarget.minWidth = ((3 * this.resizeIndicatorSize > this.minWidth) ? 3 * this.resizeIndicatorSize : this.minWidth);
            this.resizeTarget.maxHeight = this.maxHeight;
            this.resizeTarget.minHeight = ((3 * this.resizeIndicatorSize > this.minHeight) ? 3 * this.resizeIndicatorSize : this.minHeight);
        },

        _parseResizeParentProperties: function () {
            if (this.resizeParent) {
                this.resizeParent.left = parseInt(this.resizeParent.left, 10);
                this.resizeParent.top = parseInt(this.resizeParent.top, 10);
                this.resizeParent.width = parseInt(this.resizeParent.width, 10);
                this.resizeParent.height = parseInt(this.resizeParent.height, 10);
            }
        },

        //If the current resize target is a textarea we are creating wrapper and addig it as resize target.
        //In this case the textarea is going to be resize target's child.
        _resizableTextArea: function () {
            var textarea = this.resizeTarget;
            textarea.wrap($('<div></div>'));
            this.resizeTarget = textarea.parent();
            this.resizeTarget.css({
                'position': 'absolute',
                'left': textarea.offset().left,
                'top': textarea.offset().top,
                'margin': '5px'
            });
            textarea.css({ 'z-index': 0,
                'position': 'relative',
                'top': '0px',
                'left': '0px',
                'margin': this.resizeIndicatorSize + 'px',
                'resize': 'none'
            });
            return textarea;
        },

        //Getting all children and setting their max and min height/width. First we are calculating their ratio
        //to the main container which we are going to modify to be resizable.
        _getChildren: function (maxWidth, minWidth, maxHeight, minHeight, selector, textarea) {
            this.resizeTargetChildren = $(selector);
            this.resizeTargetChildren.toArray();
            this.resizeTargetChildren.push(textarea);
            var count = this.resizeTargetChildren.length;
            while (count) {
                count -= 1;
                this.resizeTargetChildren[count] = $(this.resizeTargetChildren[count]);
            }
        },

        _refreshResize: function () {
            this._renderResize();
            this._performResizeLayout();
            this._removeResizeEventListeners();
            this._addResizeEventHandlers();
        },

        //Creating inner wrapper which is going to be our resize helper
        _renderResize: function () {
            this.resizeTarget.wrapInner($('<div></div>'));
            this._resizeWrapper = this.resizeTarget.children(0);
            this._resizeWrapper.addClass('jqx-resize');
            this._resizeWrapper.addClass('jqx-rc-all');
            this._resizeWrapper.css('z-index', 8000);
        },

        _performResizeLayout: function () {
            this._resizeWrapper.height(this.resizeTarget.height());
            this._resizeWrapper.width(this.resizeTarget.width());
        },

        _removeResizeEventListeners: function () {
            var resizetargetid = this.resizeTarget.attr('id');

            this._resizeWrapper.unbind('mousemove.resize' + resizetargetid);
            this._resizeWrapper.unbind('mousedown.resize' + resizetargetid);
            $(document).unbind('mousemove.resize' + resizetargetid);
            $(document).unbind('mouseup.resize' + resizetargetid);
        },

        _addResizeEventHandlers: function () {
            var resizetargetid = this.resizeTarget.attr('id');
            var self = this;
            this._resizeWrapper.bind('mousemove.resize.' + resizetargetid, { self: this }, function (event) {
                self._resizeCursorChangeHandler(self, event);
            });
            this._resizeWrapper.bind('mousedown.resize.' + resizetargetid, { self: this }, function (event) {
                self._resizeMouseDownHandler(self, event);
            });
            $(document).bind('mousemove.resize.' + resizetargetid, { self: this }, function (event) {
                self._resizeHandler(self, event);
            });
            $(document).bind('mouseup.resize.' + resizetargetid, { self: this }, function (event) {
                self._stopResizing(self, event);
            });

            try
            {
                if (document.referrer != "" || window.frameElement) {
                    var eventHandle = function (event) {
                        self._stopResizing(self, event);
                    };

                    if (window.top.document.addEventListener) {
                        window.top.document.addEventListener('mouseup', eventHandle, false);

                    } else if (window.top.document.attachEvent) {
                        window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                    }
                }
            }
            catch (error) {
            }
        },

        _stopResizing: function (self, event) {
            if (self.enableResize) {
                if (self.isResizing) {
                    self._raiseResizeEvent(1);
                }
                self._resizeMouseDown = false;
                self.isResizing = false;
                self._resizeDirection = null;
                if (self.resizeTarget) {
                    self.resizeTarget.removeClass('jqx-disableselect');
                }
            }

            if (self._cursorBackup == 'undefined') {
                self._cursorBackup = 'default';
            }

            if (self._resizeWrapper) {
                self._resizeWrapper.css('cursor', self._cursorBackup);
            }
        },

        _resizeHandler: function (self, event) {
            if (self.enableResize) {
                if (self.isResizing && self._resizeDirection) {
                    if (event.which === 0 && $.browser.msie && $.browser.version < 9) {
                        self._stopResizing(event);
                    }
                    self._performResize(event.pageX, event.pageY);
                    return false;
                } else {
                    return self._resizeCaptureCursor(event.pageX, event.pageY);
                }
            }
        },

        _resizeCaptureCursor: function (mouseX, mouseY) {
            if (this._resizeMouseDown && !this.isResizing && this._resizeDirection) {
                if ((mouseX + 3 < this._mouseResizePosition.x || mouseX - 3 > this._mouseResizePosition.x) ||
                    (mouseY + 3 < this._mouseResizePosition.y || mouseY - 3 > this._mouseResizePosition.y)) {
                    this._changeCursor(mouseX - parseInt(this.resizeTarget.css('left')), mouseY - parseInt(this.resizeTarget.css('top')));
                    this._mouseResizePosition = { x: mouseX, y: mouseY };
                    this._prepareResizeMethods(this._resizeDirection);
                    this._resizeBackupData();
                    this.isResizing = true;
                    this.resizeTarget.addClass('jqx-disableselect');
                    return false;
                }
            }
        },

        _resizeBackupData: function () {
            this.resizeTarget.lastWidth = this.resizeTarget.width();
            this.resizeTarget.lastHeight = this.resizeTarget.height();
            this.resizeTarget.x = parseInt(this.resizeTarget.css('left'), 10);
            this.resizeTarget.y = parseInt(this.resizeTarget.css('top'), 10);
            this._resizeBackupChildrenSize();
        },

        _resizeBackupChildrenSize: function () {
            var count = this.resizeTargetChildren.length, child;
            while (count) {
                count -= 1;
                child = this.resizeTargetChildren[count];
                this.resizeTargetChildren[count].lastWidth = child.width();
                this.resizeTargetChildren[count].lastHeight = child.height();
            }
        },

        _performResize: function (mouseX, mouseY) {
            var differenceX = mouseX - this._mouseResizePosition.x,
                differenceY = mouseY - this._mouseResizePosition.y;
            if (this._resizeDirection) {
                this._resize(this.resizeTarget, differenceX, differenceY);
            }
        },

        _resizeCursorChangeHandler: function (self, event) {
            if (self.enableResize) {
                if (!self.isResizing) {
                    self._changeCursor(event.pageX - parseInt(self.resizeTarget.css('left')),
                                   event.pageY - parseInt(self.resizeTarget.css('top')));
                }
            }
        },

        _resizeMouseDownHandler: function (self, event) {
            if (self.enableResize) {
                if (self._resizeDirection !== null) {
                    self._resizeMouseDown = true;
                    self._mouseResizePosition.x = event.pageX;
                    self._mouseResizePosition.y = event.pageY;
                    event.preventDefault();
                }
            }
        },

        _validateResizeProperties: function () {
            try {
                if (!this.resizeTarget || this.resizeTarget.length !== 1) {
                    throw new Error(this._resizeExceptions['invalidTarget']);
                }
                if (this.minHeight < 0 || isNaN(parseInt(this.minHeight))) {
                    throw new Error(this._resizeExceptions['invalidMinHeight']);
                }
                if (this.maxHeight <= 0 || isNaN(parseInt(this.maxHeight))) {
                    throw new Error(this._resizeExceptions['invalidMaxHeight']);
                }
                if (this.minWidth < 0 || isNaN(parseInt(this.minWidth))) {
                    throw new Error(this._resizeExceptions['invalidMinWidth']);
                }
                if (this.maxWidth < 0 || isNaN(parseInt(this.maxWidth))) {
                    throw new Error(this._resizeExceptions['invalidMaxWidth']);
                }
                if (this.resizeIndicatorSize < 0 || isNaN(parseInt(this.resizeIndicatorSize))) {
                    throw new Error(this._resizeExceptions['invalidIndicatorSize']);
                }
                if (this.minHeight > this.maxHeight ||
                    this.minWidth > this.maxWidth) {
                    throw new Error(this._resizeExceptions['invalidSize']);
                }
                if (this.resizeParent && this.resizeParent.width && this.resizeParent.height && this.resizeParent.left &&
                    this.resizeParent.top && ((this.resizeParent.width < this.resizeTarget.width() || this.resizeParent.width < this.maxWidth) ||
                    (this.resizeParent.height < this.resizeTarget.height() || this.resizeParent.height < this.maxHeight))) {
                    throw new Error(this._resizeExceptions['invalidSize']);
                }
            } catch (exception) {
                alert(exception);
            }
        },

        //This method is checking cursor's position and setting specific pointer depending on mouse coordinates.
        //It's also detecting resize direction and creating string with it. For example for top-left resize the string is going to be 'topleft'.
        _changeCursor: function (x, y) {
            if (this.isResizing || this._resizeMouseDown) {
                return;
            }
            this.resizeArea = true;
            if (x <= this.resizeIndicatorSize && x >= 0 && y <= this.resizeIndicatorSize && y > 0) {    //top left
                this._resizeWrapper.css('cursor', 'nw-resize');
                this._resizeDirection = 'topleft';
            } else if (y <= this.resizeIndicatorSize && y > 0 && x >= this.resizeTarget.width() - this.resizeIndicatorSize) { //top right
                this._resizeWrapper.css('cursor', 'ne-resize');
                this._resizeDirection = 'topright';
            } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize && //bottom left
                       y < this.resizeTarget.height() &&
                       x <= this.resizeIndicatorSize && x >= 0) {
                this._resizeWrapper.css('cursor', 'sw-resize');
                this._resizeDirection = 'bottomleft';
            } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize && //bottom right
                       y < this.resizeTarget.height() &&
                       x >= this.resizeTarget.width() - this.resizeIndicatorSize &&
                       x < this.resizeTarget.width()) {
                this._resizeWrapper.css('cursor', 'se-resize');
                this._resizeDirection = 'bottomright';
            } else if (x <= this.resizeIndicatorSize && x >= 0) { //left
                this._resizeWrapper.css('cursor', 'e-resize');
                this._resizeDirection = 'left';
            } else if (y <= this.resizeIndicatorSize && y > 0) { //top
                this._resizeWrapper.css('cursor', 'n-resize');
                this._resizeDirection = 'top';
            } else if (y >= this.resizeTarget.height() - this.resizeIndicatorSize && //bottom
                       y < this.resizeTarget.height()) {
                this._resizeWrapper.css('cursor', 'n-resize');
                this._resizeDirection = 'bottom';
            } else if (x >= this.resizeTarget.width() - this.resizeIndicatorSize &&  //right
                       x < this.resizeTarget.width()) {
                this._resizeWrapper.css('cursor', 'e-resize');
                this._resizeDirection = 'right';
            } else {
                this._resizeWrapper.css('cursor', this._cursorBackup);
                this._resizeDirection = null;
                this.resizeArea = false;
            }
        },

        //Putting all methods which are going to be used along the resize action (for example _resizeRight, _resizeTop) into an array.
        //We are performing this because if we are checking and calling the right methods along the resizing (on mousemove)
        //we should make more checks.
        _prepareResizeMethods: function (direction) {
            this._resizeMethods = [];
            if (direction.indexOf('left') >= 0) { this._resizeMethods.push(this._resizeLeft); }
            if (direction.indexOf('top') >= 0) { this._resizeMethods.push(this._resizeTop); }
            if (direction.indexOf('right') >= 0) { this._resizeMethods.push(this._resizeRight); }
            if (direction.indexOf('bottom') >= 0) { this._resizeMethods.push(this._resizeBottom); }
        },

        _validateResize: function (newWidth, newHeight, direction, element, side) {
            if (direction === 'horizontal' || direction === 'both') {
                return this._validateWidth(newWidth, element, side);
            } else if (direction === 'vertical' || direction === 'both') {
                return this._validateHeight(newHeight, element, side);
            }
            return { result: false, fix: 0 };
        },

        _getParent: function () {
            if (this.resizeParent !== null && this.resizeParent !== 'undefined' && this.resizeParent.height && this.resizeParent.width &&
                this.resizeParent.top && this.resizeParent.left) {
                return this.resizeParent;
            }
            return { left: 0, top: 0,
                width: $(document).width(), height: $(document).height()
            };
        },

        _validateHeight: function (newHeight, element, side) {
            var scrollTop = 0,
            heightDisplacement = 2,
            result = false,
            size = newHeight,
            resizeParent = this._getParent();

            if ($(window).width() > $(document).width() && $.browser.msie && resizeParent.height === $(document).height()) {
                scrollTop = this._SCROLL_WIDTH;
            }
            if (side === 'bottom' && (newHeight + element.position().top + scrollTop + heightDisplacement > resizeParent.height + resizeParent.top)) {   //fixing if user is trying to resize it more than the window
                return { fix: resizeParent.height - element.position().top - scrollTop - heightDisplacement + resizeParent.top, result: false };
            }
            if (side === 'top' && element.lastHeight - newHeight + element.y < resizeParent.top) { //check if the user is trying to drag it in the window's top
                return { fix: newHeight + (element.lastHeight - newHeight + element.y) - resizeParent.top, result: false };
            }
            if (newHeight < element.minHeight) {
                return { fix: element.minHeight, result: false };
            }
            if (newHeight > element.maxHeight) {
                return { fix: element.maxHeight, result: false };
            }
            return { result: true, fix: newHeight };
        },

        _validateWidth: function (newWidth, element, side) {
            var scrollLeft = 0, widthDisplacement = 2, result = false, size = newWidth, resizeParent = this._getParent();
            if ($(window).height() < $(document).height() && $.browser.msie &&
                document.documentElement.clientWidth >= document.documentElement.scrollWidth &&
                resizeParent.width === $(document).width()) {    //check if there is a right but there is not a bottom one 
                scrollLeft = this._SCROLL_WIDTH;
            }
            if (side === 'right' && (newWidth + element.position().left + scrollLeft + widthDisplacement > resizeParent.width + resizeParent.left)) {
                return { fix: resizeParent.width - element.position().left - scrollLeft - widthDisplacement + resizeParent.left, result: false };
            }
            if (side === 'left' && (element.lastWidth - newWidth + element.x < resizeParent.left)) { //check if the user is trying to drag it in the window's left
                return { fix: newWidth + (element.lastWidth - newWidth + element.x) - resizeParent.left, result: false };
            }
            if (newWidth < element.minWidth) {
                return { fix: element.minWidth, result: false };
            }
            if (newWidth > element.maxWidth) {
                return { fix: element.maxWidth, result: false };
            }
            return { result: true, fix: newWidth };
        },

        _resize: function (element, differenceX, differenceY) {
            var direction = this._resizeDirection;
            for (method in this._resizeMethods) {
                if (this._resizeMethods[method] instanceof Function) {
                    var properties = { element: element, x: differenceX, y: differenceY, self: this };
                    this._resizeMethods[method](properties);
                }
            }
            this._performResizeLayout();
        },

        _setResizeChildrenSize: function (size, dimention) {
            var count = this.resizeTargetChildren.length;
            while (count) {
                count--;
                if (dimention === 'width') {
                    var newWidth = this.resizeTargetChildren[count].lastWidth - (this.resizeTarget.lastWidth - size);
                    if (newWidth < this.resizeTarget.maxWidth && newWidth > 0) {
                        this.resizeTargetChildren[count].width(newWidth);
                    }
                } else {
                    var newHeight = this.resizeTargetChildren[count].lastHeight - (this.resizeTarget.lastHeight - size);
                    if (newHeight < this.resizeTarget.maxHeight && newHeight > 0) {
                        this.resizeTargetChildren[count].height(newHeight);
                    }
                }
            }
        },

        _resizeRight: function (properties) {
            var width = properties.element.lastWidth + properties.x,
                result = properties.self._validateResize(width, 0, 'horizontal', properties.element, 'right');
            if (!result.result) {
                width = result.fix;
            }
            if (properties.element.width() !== width) {
                properties.self._setResizeChildrenSize(width, 'width');
                properties.element.width(width);
                properties.self._raiseResizeEvent(0);
            }
            return width;
        },

        _resizeLeft: function (properties) {
            var width = properties.element.lastWidth - properties.x,
                result = properties.self._validateResize(width, 0, 'horizontal', properties.element, 'left'),
                x = properties.element.x + properties.x;
            if (!result.result) {
                x = properties.element.x + (properties.element.lastWidth - result.fix);
                width = result.fix;
                return;
            }
            if (properties.element.width() !== width) {
                properties.self._setResizeChildrenSize(width, 'width');
                properties.element.width(width);
                properties.element.css('left', x);
                properties.self._raiseResizeEvent(0);
            }
            return width;
        },

        _resizeBottom: function (properties) {
            var height = properties.element.lastHeight + properties.y,
                result = properties.self._validateResize(0, height, 'vertical', properties.element, 'bottom');
            if (!result.result) {
                height = result.fix;
            }
            if (properties.element.height() !== height) {
                properties.self._setResizeChildrenSize(height, 'height');
                properties.element.height(height);
                properties.self._raiseResizeEvent(0);
            }
            return height;
        },

        _resizeTop: function (properties) {
            var height = properties.element.lastHeight - properties.y,
                result = properties.self._validateResize(0, height, 'vertical', properties.element, 'top'),
                y = properties.element.y + properties.y;
            if (!result.result) {
                y = properties.element.y + (properties.element.lastHeight - result.fix);
                height = result.fix;
                return;
            }
            if (properties.element.height() !== height) {
                properties.self._setResizeChildrenSize(height, 'height');
                properties.element.height(height);
                properties.element.css('top', y);
                properties.self._raiseResizeEvent(0);
            }
            return height;
        },

        _raiseResizeEvent: function (eventId) {
            var eventType = this._resizeEvents[eventId],
                event = $.Event(eventType),
                args = {};
            args.width = this.resizeTarget.width();
            args.height = this.resizeTarget.height();
            event.args = args;
            if (eventId == 0) {
                var eventType = this._resizeEvents[2],
                resizeEvent = $.Event(eventType);
                resizeEvent.args = args;
                this.resizeTarget.trigger(resizeEvent);
            }

            return this.resizeTarget.trigger(event);
        }
    };
} (jQuery));

$.extend($.jqx._jqxWindow.prototype, resizeModule);/*
    1) Bug in importing the layout is fixed.
*/


(function ($) {

    $.jqx.jqxWidget("jqxDocking", "", {});

    $.extend($.jqx._jqxDocking.prototype, {

        defineInstance: function () {
            // Type: String
            // Default: 'horizontal'
            // Sets or gets docking's orientation
            this.orientation = 'horizontal';
            // Type: String
            // Default: default
            // Sets or gets docking's mode. Possible values - default, floating, docked
            this.mode = 'default';
            // Type: Number
            // Default: 0.3
            // Sets or gets docking's floating window's opacity
            this.floatingWindowOpacity = 0.3;
            // Type: Bool
            // Default: true
            // Sets or gets whether the panel's corners are rounded
            this.panelsRoundedCorners = true;
            // Type: Bool
            // Default: false
            // Sets or gets whether the dicking is disabled
            this.disabled = false;
            // Type: String/Number
            // Default: auto
            // Sets or gets docking's width
            this.width = 'auto';
            // Type: String/Number
            // Default: auto
            // Sets or gets docking's height
            this.height = 'auto';
            // Type: Object
            // Default: null
            // Sets or gets docking window's modes (each one could be in floating or default mode)
            this.windowsMode = null;
            // Type: Bool
            // Default: true
            // Sets or gets whether the current layout would be saved into cookies
            this.cookies = false;
            // Type: Object
            // Default: {}
            // Sets or gets cookie options
            this.cookieOptions = {};
            // Type: Number
            // Default: 5
            // Sets or gets window's offset
            this.windowsOffset = 5;

            this._windowOptions = {};
            this._draggedFired = false;
            this._dragging = false;
            this._draggingItem = null;
            this._panels = [];
            this._windows = [];
            this._indicator = null;
            this._events = ['dragEnd', 'dragStart'];
        },

        createInstance: function () {
            this._refresh(true);
            if (this.disabled) {
                this.disabled = false;
                this.disable();
            }
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this._performLayout();
            }
        },

        _refresh: function (startup) {
            this._render();
            this._removeClasses();
            this._addClasses();
            this._setWindowsOptions(true);
            this._performLayout();
            this._cookieHandler();
            this._cookieExporter();
            this._removeEventListeners();
            this._addEventListeners();
        },

        _addClasses: function () {
            this.host.addClass('jqx-docking');
            for (var i = 0; i < this._panels.length; i += 1) {
                this._panels[i].addClass(this.toThemeProperty('jqx-docking-panel'));
                if (this.panelsRoundedCorners) {
                    this._panels[i].addClass(this.toThemeProperty('jqx-rc-all'));
                }
            }
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].addClass(this.toThemeProperty('jqx-docking-window'));
            }
        },

        _removeClasses: function () {
            this.host.removeClass('jqx-docking');
            for (var i = 0; i < this._panels.length; i += 1) {
                this._panels[i].removeClass(this.toThemeProperty('jqx-docking-panel'));
                this._panels[i].removeClass(this.toThemeProperty('jqx-rc-all'));
            }
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].removeClass(this.toThemeProperty('jqx-docking-window'));
            }
        },

        _render: function () {
            var panels = this.host.children('div'), windows;
            for (var i = 0; i < panels.length; i += 1) {
                this._panels.push($(panels[i]));
                this._renderWindows($(panels[i]));
            }
        },

        _renderWindows: function (panel) {
            var windows = panel.children('div');
            for (var j = 0; j < windows.length; j += 1) {
                this._windows.push($(windows[j]));
                $(windows[j]).jqxWindow({ theme: this.theme, enableResize: false, width: $(windows[j]).css('width'), maxWidth: Number.MAX_VALUE });
                $(windows[j]).detach();
                panel.append($(windows[j]));
            }
            panel.append('<div class="spacer" style="clear: both;"></div>');
        },

        _performLayout: function () {
            this.host.css('width', this.width);
            this.host.css('height', this.height);
            this._performWindowsLayout();
            this._performPanelsLayout();
            this._performWindowsLayout();
        },

        _performPanelsLayout: function () {
            var panel, hostWidth = this.host.width(), sizeSum = 0;
            for (var i = 0; i < this._panels.length; i += 1) {
                panel = this._panels[i];
                panel.css('height', 'auto');
                panel.css('min-width', 'auto');
                if (this.orientation === 'vertical') {
                    panel.css('width', 'auto');
                    panel.css('float', 'none');
                } else {
                    sizeSum += this._handleHorizontalSize(panel, sizeSum, hostWidth);
                    if (i > 0)
                        panel.css('margin-left', -this.windowsOffset);
                }
                panel.css('min-width', panel.width());
            }
            if (this.orientation === 'horizontal') {
                if (sizeSum < hostWidth) {
                    this._fillContainer(hostWidth, sizeSum);
                }
            }
        },

        _handleHorizontalSize: function (panel, sizeSum, hostWidth) {
            var midWidth = hostWidth / this._panels.length,
                size,
                difference = (panel.outerWidth() - panel.width());
            panel.css('float', 'left');
            if (panel.css('width') === 'auto' || parseInt(panel.css('width'), 10) === 0) {
                panel.width(midWidth - difference);
            }
            if (sizeSum + panel.outerWidth() >= hostWidth) {
                if (sizeSum + midWidth < hostWidth) {
                    size = midWidth - difference;
                    panel.css('min-width', size);
                    panel.width(size);
                } else {
                    size = panel.width() - ((sizeSum + panel.outerWidth()) - hostWidth);
                    panel.css('min-width', size);
                    panel.width(size);
                }
            }
            return panel.outerWidth();
        },

        _fillContainer: function (hostWidth, sizeSum) {
            var count = this._panels.length, lastPanel = this._panels[count - 1],
                size = hostWidth - sizeSum + lastPanel.width();
            if ($.browser.msie && $.browser.version < 9) {
                size -= this._panels.length;
            }
            lastPanel.width(size);
        },

        _performWindowsLayout: function () {
            var options;
            for (var i = 0; i < this._windows.length; i += 1) {
                options = this._getWindowOptions(this._windows[i]);
                if (this._windows[i].ischildof(this.host)) {
                    if (options) {
                        if (options.mode !== 'floating') {
                            this._windows[i].css('margin', this.windowsOffset);
                            this._windows[i].css('position', 'static');
                        }
                    } else {
                        if (this.mode !== 'floating') {
                            this._windows[i].css('position', 'static');
                            this._windows[i].css('margin', this.windowsOffset);
                        }
                    }
                }
                this._setWindowSize(this._windows[i], options);
            }
        },

        _setWindowSize: function (window, options) {
            if (options.mode !== 'floating') {
                if (window.ischildof(this.host)) {
                    var newSize = window.parent().width() - (window.outerWidth() - window.width()) - 2 * this.windowsOffset;
                    if (this.orientation === 'vertical') {
                        window.jqxWindow('width', newSize);
                    } else {
                        window.jqxWindow('width', newSize);
                    }
                }
            }
            this._setWindowOption(window, 'size', {
                width: window.width(),
                height: window.height()
            });
        },

        _setWindowsOptions: function (fullOptions) {
            for (var i = 0; i < this._windows.length; i += 1) {
                var mode,
                    windowId = this._windows[i].attr('id'),
                    options = this._getWindowOptions(windowId);
                if (!fullOptions) {
                    var t = 'TEDX';
                }

                mode = null;
                if (this.windowsMode && this.windowsMode.hasOwnProperty(windowId)) {
                    mode = this.windowsMode[windowId];
                    this._setWindowOption(this._windows[i], 'mode', mode);
                } else if (typeof options !== 'undefined' && typeof options['mode'] === 'undefined') {
                    mode = this.mode;
                    this._setWindowOption(this._windows[i], 'mode', mode);
                }
                if (fullOptions) {
                    this._setWindowOption(this._windows[i], 'resizable', true);
                    if (mode == 'floating') {
                        this._windows[i].jqxWindow({ enableResize: true });
                    }
                    else {
                        this._windows[i].jqxWindow({ enableResize: false });
                    }

                    this._setWindowOption(this._windows[i], 'size', { height: this._windows[i].height(), width: this._windows[i].width() });
                }
            }
        },

        _removeEventListeners: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this.removeHandler(this._windows[i], 'moving', this._itemDragging);
                this.removeHandler(this._windows[i], 'moved', this._itemDrop);
                this.removeHandler(this._windows[i], 'resized', this._itemResized);
                this.removeHandler(this._windows[i], 'collapse', this._collapsed);
                this.removeHandler(this._windows[i], 'expand', this._expanded);
            }
        },

        _addEventListeners: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this._addEventListenersTo(this._windows[i]);
            }

            var me = this;
            $(window).bind('resize.' + this.element.id, function (event) {
                me._performLayout();
            });
        },

        _addEventListenersTo: function (window) {
            this.addHandler(window, 'moving', this._itemDragging, { self: this });
            this.addHandler(window, 'moved', this._itemDrop, { self: this });
            this.addHandler(window, 'resized', this._itemResized, { self: this });
            this.addHandler(window, 'collapse', this._collapsed, { self: this });
            this.addHandler(window, 'expand', this._expanded, { self: this });
        },

        _itemDragging: function (event) {
            var self = event.data.self,
                window = $(event.target),
                options = self._getWindowOptions(window);
            window.removeClass(self.toThemeProperty('jqx-docking-window'));
            window.css('margin', '0px');
            if (!self._dragging) {
                self._prepareForDragging(window);
            }
            if (options.mode === 'floating') {
                return;
            }
            var position = { x: event.args.pageX, y: event.args.pageY },
                panel = self._getMouseOverPanel(position);
            if (panel) {
                self._mouseOverPanel(panel, position);
            } else {
                self._mouseLeavePanel();
            }
            if (!self._draggedFired) {
                self._raiseEvent(1, { window: $(window).attr('id') });
                self._draggedFired = true;
            }
            return event.preventDefault();
        },

        _prepareForDragging: function (window) {
            this._dragging = true;
            var lastPosition = {
                parent: window.parent(),
                next: window.next(),
                prev: window.prev()
            };
            this._setWindowOption(window, 'lastPosition', lastPosition);
            window.detach();
            $(document.body).append(window);
            this._setDraggingStyles(window);
            this._draggingItem = window;
        },

        _setDraggingStyles: function (window) {
            window.css({
                'position': 'absolute',
                'left': window.offset().left,
                'top': window.offset().top
            });
            window.fadeTo(0, this.floatingWindowOpacity);
        },

        _getMouseOverPanel: function (cursorPosition) {
            var width, height, top, left;
            for (var i = 0; i < this._panels.length; i += 1) {
                if (this._isMouseOverItem(this._panels[i], cursorPosition, false)) {
                    return this._panels[i];
                }
            }
            return null;
        },

        _mouseOverPanel: function (panel, position) {
            if (this._dragging) {
                var windows = panel.children('div'),
                    window = this._getHoverWindow(position, windows);
                if (window === 'indicator') {
                    return;
                }
                var indicatorPosition = this._centerOffset(window, position);
                this._handleIndicator(panel, window, indicatorPosition);
            }
        },

        _getHoverWindow: function (position, windows) {
            var width, height, left, top;
            if (this._isMouseOverItem(this._indicator, position, true)) {
                return 'indicator';
            }
            for (var i = 0; i < windows.length; i += 1) {
                if (this._isMouseOverItem($(windows[i]), position, true)) {
                    return $(windows[i]);
                }
            }
            return null;
        },

        _centerOffset: function (window, position) {
            if (window) {
                var windowPosition = { x: window.offset().left, y: window.offset().top },
                    windowHeight = window.height(),
                    windowWidth = window.width(), middle;
                middle = windowPosition.y + windowHeight / 2;
                if (position.y > middle) {
                    return 'next';
                }
                return 'prev';
            }
            return 'all';
        },

        _handleIndicator: function (panel, window, indicatorPosition) {
            var indicator = this._getIndicator(window);
            if (indicatorPosition === 'all') {
                if (this.orientation === 'vertical') {
                    indicator.insertBefore(panel.children('.spacer'));
                } else {
                    panel.append(indicator);
                }
            } else {
                if (indicatorPosition === 'prev') {
                    indicator.insertBefore(window);
                } else {
                    indicator.insertAfter(window);
                }
            }
            this._resizeIndicator(indicator, panel);
        },

        _getIndicator: function () {
            var indicator = this._indicator;
            if (!indicator) {
                indicator = $('<div class="' + this.toThemeProperty('jqx-docking-drop-indicator') + '"></div>');
            }
            this._indicator = indicator;
            this._indicator.css('margin', this.windowsOffset);
            if (this.orientation === 'vertical') {
                this._indicator.css('float', 'left');
            }
            return indicator;
        },

        _resizeIndicator: function (indicator, panel) {
            if (this.orientation === 'horizontal') {
                indicator.width(panel.width() - (indicator.outerWidth(true) - indicator.width()));
                indicator.height(this._draggingItem.height());
            } else {
                indicator.width(this._draggingItem.width());
                indicator.height(this._draggingItem.height());
            }
        },

        _mouseLeavePanel: function (event) {
            if (this._indicator) {
                this._indicator.remove();
                this._indicator = null;
            }
        },

        _itemDrop: function (event) {
            var self = event.data.self,
                window = $(event.currentTarget);
            self._dragging = false;
            if (self._indicator) {
                window.detach();
                window.insertAfter(self._indicator);
                self._indicator.remove();
                self._dropFixer(window);
            } else {
                self._dropHandler(window);
            }
            window.fadeTo(0, 1);
            self._indicator = null;
            self._cookieExporter();
            self._draggedFired = false;
            self._raiseEvent(0, { window: window.attr('id') });
        },

        _dropFixer: function (window) {
            window.css('position', 'static');
            window.addClass(this.toThemeProperty('jqx-docking-window'));
            window.css('margin', this.windowsOffset);
            window.jqxWindow('enableResize', false);
            if (this.orientation === 'horizontal') {
                this._fixWindowSize(window);
            }
        },

        _dropHandler: function (window) {
            var options = this._getWindowOptions(window);
            if (options.mode === 'docked') {
                this._dropDocked(window);
            } else {
                this._dropFloating(window);
            }
        },

        _dropDocked: function (window) {
            var options = this._getWindowOptions(window),
                lastPosition = options.lastPosition;
            window.detach();
            if (lastPosition.next[0]) {
                window.insertBefore(lastPosition.next);
            } else if (lastPosition.prev[0]) {
                window.insertAfter(lastPosition.prev);
            } else {
                lastPosition.parent.append(window);
            }
            this._dropFixer(window);
        },

        _fixWindowSize: function (window) {
            $(window).jqxWindow({
                width: window.parent().width() - (window.outerWidth() - window.width()) - 2 * parseInt(this.windowsOffset, 10)
            });
        },

        _itemResized: function (event) {
            var self = event.data.self,
                window = $(event.currentTarget);
            self._setWindowOption(window, 'size', { width: event.args.width, height: event.args.height });
            self._cookieExporter();
        },

        _dropFloating: function (window) {
            var options;
            if (!$(window).jqxWindow('collapsed')) {
                options = this._getWindowOptions(window);
                $(window).jqxWindow('enableResize', options.resizable);
            }
            $(document.body).append(window);
            this._restoreWindowSize(window);
        },

        _restoreWindowSize: function (window) {
            var options = this._getWindowOptions(window);
            $(window).jqxWindow({ width: options.size.width });
        },

        _isMouseOverItem: function (item, position, outerSize) {
            if (!item) {
                return false;
            }
            var outerWidth = item.outerWidth(true), outerHeight = item.outerHeight(true),
                width = item.width(), height = item.height(),
                top = item.offset().top, left = item.offset().left;
            if (outerSize) {
                top -= (outerHeight - height) / 2;
                left -= (outerWidth - width) / 2;
                width = outerWidth;
                height = outerHeight;
            }
            if ((left <= position.x && left + width >= position.x) &&
                (top <= position.y && top + height + 2 * this._draggingItem.height() / 3 >= position.y)) {
                return true;
            }
            return false;
        },

        _cookieHandler: function () {
            if (this.cookies) {
                var layout = $.jqx.cookie.cookie("jqxDocking" + this.element.id);
                if (layout !== null) {
                    this.importLayout(layout);
                    layoutImported = true;
                }
            }
        },

        _cookieExporter: function () {
            if (this.cookies) {
                $.jqx.cookie.cookie("jqxDocking" + this.element.id, this.exportLayout(), this.cookieOptions);
            }
        },

        _indexOf: function (item, collection) {
            for (var i = 0; i < collection.length; i += 1) {
                if (item[0] === collection[i][0]) {
                    return i;
                }
            }
            return -1;
        },

        _exportFixed: function () {
            var children = [], JSON = '', currentChildren, currentChild;
            for (var i = 0; i < this._panels.length; i += 1) {
                JSON += '"panel' + i + '": {';
                currentChildren = this._panels[i].children();
                for (var j = 0; j < currentChildren.length; j += 1) {
                    currentChild = $(currentChildren[j]);
                    if (currentChild.attr('id')) {
                        children.push(currentChild);
                        JSON += '"' + currentChild.attr('id') + '":{"collapsed":' + currentChild.jqxWindow('collapsed') + '},';
                    }
                }
                if (currentChildren.length > 1) {
                    JSON = JSON.substring(0, JSON.length - 1);
                }
                JSON += '},';
            }
            JSON = JSON.substring(0, JSON.length - 1);
            return { JSON: JSON, children: children };
        },

        _exportFloating: function (children) {
            var JSON = '', currentWindow;
            JSON += '"floating":{'
            for (var i = 0; i < this._windows.length; i += 1) {
                currentWindow = $(this._windows[i]);
                if (this._indexOf(currentWindow, children) === -1) {
                    JSON += '"' + currentWindow.attr('id') +
                        '":{"x":"' + currentWindow.css('left') + '","y":"' + currentWindow.css('top') + '",' +
                        '"width":"' + currentWindow.jqxWindow('width') + '","height":' + '"' + currentWindow.jqxWindow('height') + '",' +
                        '"collapsed":' + currentWindow.jqxWindow('collapsed') + '},';
                }
            }
            if (JSON.substring(JSON.length - 1, JSON.length) === ',') {
                JSON = JSON.substring(0, JSON.length - 1);
            }
            JSON += '}';
            return JSON;
        },

        _importFixed: function (imported) {
            for (var child in imported) {
                if (child !== 'orientation' && child !== 'floating' && imported.hasOwnProperty(child)) {
                    order = child.substring(child.length - 1, child.length);
                    order = parseInt(order, 10);
                    children = imported[child];
                    for (var child in children) {
                        $('#' + child).css('position', 'static');
                        if (children[child].collapsed) {
                            (function (child) {
                                setTimeout(function () {
                                    $('#' + child).jqxWindow('collapsed', true);
                                }, 0);
                            } (child));
                        }
                        this._panels[order].append($('#' + child));
                        if (this.orientation === 'horizontal') {
                            this._fixWindowSize($('#' + child));
                        }
                    }
                }
            }
        },

        _importFloating: function (imported) {
            var floating = imported['floating'],
                currentWindow,
                temp;
            for (var id in floating) {
                if (floating.hasOwnProperty(id)) {
                    $('#' + id).css('position', 'absolute');
                    $(document.body).append($('#' + id));
                    temp = this._dragging;
                    $('#' + id).jqxWindow('move', floating[id].x, floating[id].y);
                    this._dragging = temp;
                    $('#' + id).jqxWindow('width', floating[id].width);
                    $('#' + id).jqxWindow('height', floating[id].height);
                    $('#' + id).jqxWindow('enableResize', true);
                    this._setWindowsOptions(true);
                    (function (id) {
                        setTimeout(function () {
                            $('#' + id).jqxWindow('collapsed', floating[id].collapsed);
                        }, 0);
                    } (id));
                    $('#' + id).fadeTo(0, 1);
                }
            }
        },

        _getWindowOptions: function (window) {
            if (typeof window === 'object' && window !== null) {
                if (window.length > 0) {
                    window = window.attr('id');
                } else {
                    window = window.id;
                }
            }
            return this._windowOptions[window];
        },

        _setWindowOption: function (window, option, value) {
            if (typeof window === 'object' && window !== null) {
                if (window.length > 0) {
                    window = window.attr('id');
                } else {
                    window = window.id;
                }
            }
            if (typeof this._windowOptions[window] === 'undefined') {
                this._windowOptions[window] = {};
            }
            this._windowOptions[window][option] = value;
            if (option === 'mode') {
                this.setWindowMode(window, value);
            }
        },

        _expanded: function (event) {
            var self = event.data.self;
            self._cookieExporter();
        },

        _collapsed: function (event) {
            var self = event.data.self;
            self._cookieExporter();
        },

        _raiseEvent: function (eventId) {
            var event = $.Event(this._events[eventId]);
            event.args = arguments[1];
            return this.host.trigger(event);
        },

        _moveWindow: function (window, panel, position) {
            var children = panel.children();
            var child = null;
            var pos = 0;
            $.each(children, function (i) {
                if ($(this).css('position') == 'static') {
                    if (pos == position && this != window[0]) {
                        child = this;
                    }
                    pos++;
                }
            });

            if (pos <= position) {
                window.appendTo(panel);
            }
            else if (child != null) {
                window.insertBefore(child);
            }

            window.css('position', 'static');
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            switch (key) {
                case 'theme':
                    $.each(object._windows, function () {
                        this.jqxWindow({ theme: value });
                    });
                    break;
                case 'orientation':
                case 'height':
                case 'width':
                    object._performLayout();
                    object._cookieExporter();
                    break;
                case 'panelsRoundedCorners':
                    object._removeClasses();
                    object._addClasses();
                    break;
                case 'disabled':
                    if (value) {
                        object.disabled = false;
                        object.disable();
                    } else {
                        object.disabled = true;
                        object.enable();
                    }
                    break;
                case 'windowsMode':
                case 'mode':
                    object._setWindowsOptions(false);
                    break;
                case 'cookies':
                    object._cookieExporter();
                    break;
                case 'windowsOffset':
                    object._performLayout();
                    break;
            }
        },

        destroy: function () {
            this._removeEventListeners();
            this.host.remove();
            this.windowsMode = null;
            this.cookieOptions = null;
            this._windowOptions = null;
            this._panels = null;
            this._windows = null;
            this._events = null;
        },

        disable: function () {
            if (!this.disabled) {
                this.disabled = true;
                this._removeEventListeners();
                for (var i = 0; i < this._windows.length; i += 1) {
                    this._windows[i][0].style.opacity = "";
                    $(this._windows[i]).jqxWindow('disable');
                }
            }
        },

        enable: function () {
            if (this.disabled) {
                this.disabled = false;
                this._addEventListeners();
                for (var i = 0; i < this._windows.length; i += 1) {
                    $(this._windows[i]).jqxWindow('enable');
                }
            }
        },

        move: function (window, panel, position) {
            var panel = this._panels[panel];
            if (!panel) {
                return;
            }
            var spacer = $(panel.children('.spacer')), options;
            spacer.detach();
            window = $('#' + window);
            options = this._getWindowOptions(window);
            if (options.mode === 'floating') {
                return;
            } else {
                this._moveWindow(window, panel, position);
            }
            panel.append(spacer);
            this._cookieExporter();
            this._dropFixer(window);
        },

        exportLayout: function () {
            var JSON = '{', fixed = this._exportFixed();
            JSON += fixed.JSON + ',' + this._exportFloating(fixed.children) + ',' + '"orientation": ' + '"' + this.orientation + '"';
            JSON += '}';
            return JSON;
        },

        importLayout: function (JSON) {
            try {
                var imported = $.parseJSON(JSON), order, children;
                this.orientation = imported['orientation'];
                this._performLayout();
                this._importFixed(imported);
                this._importFloating(imported);
            } catch (e) {
                alert('Invalid JSON string.');
            }
        },

        setWindowMode: function (window, mode) {
            var window = $('#' + window),
                options = this._getWindowOptions(window);
            if (mode === 'floating') {
                window.css('position', 'absolute');
                this._windowOptions[window.attr('id')]['mode'] = mode;
            } else {
                if (options.mode === 'floating' &&
                window.css('position') === 'absolute') {
                    if (options.lastPosition) {
                        this._dropDocked(window);
                    } else {
                        this._panels[0].append(window);
                        this._dropFixer(window);
                    }
                }
            }
            this._windowOptions[window.attr('id')]['mode'] = mode;
        },

        hideCloseButton: function (window) {
            $('#' + window).jqxWindow('showCloseButton', false);
        },

        showCloseButton: function (window) {
            $('#' + window).jqxWindow('showCloseButton', true);
        },

        hideCollapseButton: function (window) {
            $('#' + window).jqxWindow('showCollapseButton', false);
        },

        showCollapseButton: function (window) {
            $('#' + window).jqxWindow('showCollapseButton', true);
        },

        expandWindow: function (window, duration) {
            $('#' + window).jqxWindow('expand', duration);
        },

        collapseWindow: function (window, duration) {
            $('#' + window).jqxWindow('collapse', duration);
        },

        setWindowProperty: function (window, propertyName, value) {
            $('#' + window).jqxWindow(propertyName, value);
        },

        getWindowProperty: function (window, propertyName) {
            return $('#' + window).jqxWindow(propertyName);
        },

        setWindowPosition: function (window, x, y) {
            var window = $('#' + window),
                options = this._getWindowOptions(window);
            if (options.mode === 'floating') {
                window.css('position', 'absolute');
                $(window).jqxWindow('move', x, y, null, false);
            }
        },

        hideAllCloseButtons: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].jqxWindow('showCloseButton', false);
            }
        },

        hideAllCollapseButtons: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].jqxWindow('showCollapseButton', false);
            }
        },

        showAllCloseButtons: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].jqxWindow('showCloseButton', true);
            }
        },

        showAllCollapseButtons: function () {
            for (var i = 0; i < this._windows.length; i += 1) {
                this._windows[i].jqxWindow('showCollapseButton', true);
            }
        },

        pinWindow: function (window) {
            $('#' + window).jqxWindow('draggable', false);
        },

        unpinWindow: function (window) {
            $('#' + window).jqxWindow('draggable', true);
        },

        setDraggingMode: function (window) {
            var dockingWindow = $('#' + window);
            this._prepareForDragging(dockingWindow);
            dockingWindow.fadeTo(0, 1);
        },

        enableWindowResize: function (window) {
            window = $('#' + window);
            if (window.css('position') === 'absolute') {
                this._setWindowOption(window, 'resizable', true);
                window.jqxWindow('enableResize', true);
            }
        },

        disableWindowResize: function (window) {
            window = $('#' + window);
            this._setWindowOption(window, 'resizable', false);
            window.jqxWindow('enableResize', false);
        },

        addWindow: function (window, mode, panel, position) {
            var selector = '#' + window;
            $(selector).jqxWindow({ theme: this.theme, enableResize: false, width: $(selector).css('width'), maxWidth: Number.MAX_VALUE });
            this._panels[0].append($(selector));
            this._windows.push($(selector));
            if (mode) {
                this._setWindowOption($(selector), 'mode', mode);
            } else {
                this._setWindowOption($(selector), 'mode', this.mode);
            }
            this._setWindowOption($(selector), 'size', { width: $(selector).width(), height: $(selector).height() });
            this._addEventListenersTo($(selector));
            if (typeof panel !== 'undefined' && typeof position !== 'undefined') {
                this.move(window, panel, position);
            }
            this._dropFixer($(selector));
        },

        closeWindow: function (window) {
            $('#' + window).jqxWindow('closeWindow');
        }
    });
})(jQuery);/*
* jqxDockPanel.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/*
* Depends:
*   jqxcore.js*/


(function ($) {

    $.jqx.jqxWidget("jqxDockPanel", "", {});

    $.extend($.jqx._jqxDockPanel.prototype, {

        defineInstance: function () {
            //Type: String.
            //Default: null.
            //Sets the dockpanel width.
            this.width = null;
            //Type: String.
            //Default: null.
            //Sets the dockpanel height.
            this.height = null;
            //Type: Boolean.
            //Default: true.
            this.lastchildfill = true;
            // gets or sets whether the progress bar is disabled.
            this.disabled = false;
            // Progress Bar events.
            this.events =
			[
            // occurs when the layout is performed.
		  	   'layout',
     		];
        },

        // creates a new jqxDockPanel instance.
        createInstance: function (args) {
            var self = this;
            this.host
			.addClass(this.toThemeProperty("jqx-progressbar"));
            this.host
            .addClass(this.toThemeProperty("jqx-rc-all"));

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            this.childrenCount = $(this.host).children().length;
            this.host.wrapInner('<div style="overflow: hidden; width: 100%; height: 100%;" class="innerContainer"></div>');
            this.$wrapper = this.host.find('.innerContainer');
            this.$wrapper.css('position', 'relative');
            this.sizeCache = new Array();

            this.performLayout();
            $(window).resize(function () {
                self.refresh();
            });
        },

        // clears cache and performs layout.
        render: function () {
            this.sizeCache = new Array();
            this.performLayout();
        },

        performLayout: function () {
            if (this.disabled) return;
            var childrenCount = this.childrenCount;
            var num5 = 0;
            var num6 = 0;
            var x = 0;
            var y = 0;
            var me = this;
            var arrangeSize = { width: this.host.width(), height: this.host.height() };

            if (this.sizeCache.length < this.$wrapper.children().length) {
                $.each(this.$wrapper.children(), function (index) {
                    var element = $(this);
                    element.css('position', 'absolute');
                    var size = { width: element.css('width'), height: element.css('height') };
                    me.sizeCache[index] = size;
                });
            }

            $.each(this.$wrapper.children(), function (index) {
                var dock = this.getAttribute('dock');
                if (dock == undefined) dock = 'left';
                if (index == childrenCount - 1 && me.lastchildfill) dock = 'fill';
                var element = $(this);
                element.css('position', 'absolute');
                element.css('width', me.sizeCache[index].width);
                element.css('height', me.sizeCache[index].height);
                var desiredSize = { width: element.outerWidth(), height: element.outerHeight() };
                var finalRect = { x: x, y: y, width: Math.max(0, arrangeSize.width - (x + num5)), height: Math.max(0, arrangeSize.height - (y + num6)) };
                if (index < childrenCount) {
                    switch (dock) {
                        case 'left':
                            x += desiredSize.width;
                            finalRect.width = desiredSize.width;
                            break;
                        case 'top':
                            y += desiredSize.height;
                            finalRect.height = desiredSize.height;
                            break;
                        case 'right':
                            num5 += desiredSize.width;
                            finalRect.x = Math.max(0, (arrangeSize.width - num5));
                            finalRect.width = desiredSize.width;
                            break;
                        case 'bottom':
                            num6 += desiredSize.height;
                            finalRect.y = Math.max(0, (arrangeSize.height - num6));
                            finalRect.height = desiredSize.height;
                            break;
                    }
                }

                element.css('left', finalRect.x);
                element.css('top', finalRect.y);
                element.css('width', finalRect.width);
                element.css('height', finalRect.height);
            });

            this._raiseevent(0);
        },

        destroy: function () {
            this.host.remove();
        },

        _raiseevent: function (id, oldValue, newValue) {
            if (this.isInitialized != undefined && this.isInitialized == true) {
                var evt = this.events[id];
                var event = new jQuery.Event(evt);
                event.previousValue = oldValue;
                event.currentValue = newValue;
                event.owner = this;
                var result = this.host.trigger(event);
                return result;
            }
        },

        propertyChangedHandler: function (object, key, oldValue, value) {
            if (!this.isInitialized)
                return;
        },

        refresh: function () {
            this.performLayout();
        }
    });
})(jQuery);

/*
* jqxmaskedinput.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/* Depends:
*   jqxcore.js*/

// Creating a new instance
// $("#maskedInput").jqxMaskedInput();

// Subscribing to an event
// $('#maskedInput').bind('valuechanged', function (event) {
//      // TO DO
// });

// Calling a method
// $("#maskedInput").jqxMaskedInput('inputValue', '100')

// Calling a property
//  $("#maskedInput").jqxMaskedInput({ value: 100 })

//Type: Number.
//Default: 0.
//Sets the masked input's value.
//Property: value

//Type: String.
//Default: '99999'.
//Sets the input format string.
//Property: mask

//Type: Number.
//Default: null.
//Sets the progress bar width.
//Property: width

//Type: Number.
//Default: null.
//Sets the progress height width.
//Property: height

// Type: String
// Default 'left'
// Sets the text alignment.
// Property: textAlign

// Type: Bool
// Default: false
// Sets the readOnly state of the input.
// Property: readOnly

// Type: Char
// Default: "_"
// Sets the prompt char displayed when an editable char is empty.
// Property: promptChar

// Events:

// This event is triggered after value is changed.
// Event: valuechanged 
// This event is triggered when the user entered entered a text. 
// Event: textchanged
// This event is triggered when the mouse is pressed down.
// Event: mousedown
// This event is triggered when the mouse is released.
// Event: mouseup
// This event is triggered when a key is pressed down.
// Event: keydown
// This event is triggered when a key is pressed down.
// Event: keyup
// This event is triggered when a key is pressed down.
// Event: keypress
		

(function ($) {

    $.jqx.jqxWidget("jqxMaskedInput", "", {});

    $.extend($.jqx._jqxMaskedInput.prototype, {

        defineInstance: function () {
            //Type: String
            //Default: null
            //Sets the masked input's value.
            this.value = null;
            //Type: String.
            //Default: null.
            //Sets the masked input's mask.
            this.mask = "99999";
            //Type: Number.
            //Default: 0.
            //Sets width of the masked input in pixels. Only positive values have effect.
            this.width = null;
            //Type: Number.
            //Default: 0.
            //Sets height of the masked input in pixels. 
            this.height = 25;
            // Type: String
            // Sets the text alignment.
            this.textAlign = "left";
            // Type: Bool
            // Default: false
            // Sets the readOnly state of the input.
            this.readOnly = false,
            // Type: Char
            // Default: "_"
            // Sets the prompt char displayed when an editable char is empty.
            this.promptChar = "_";
            // Type: String
            // Default: advanced
            // Gets or sets the input mode. When the mode is simple, the text is formatted after editing. When the mode is advanced, the text is formatted while the user is in edit mode.
            // Available values: [simple, advanced]
            this.inputMode = 'advanced';

            this.events =
			[
		  	   'valuechanged', 'textchanged', 'mousedown', 'mouseup', 'keydown', 'keyup', 'keypress'
			];
        },

        // creates the masked input's instance. 
        createInstance: function (args) {
            this.render();
        },

        render: function()
        {
            this.element.innerHTML = "";
            this.host
	        .attr({
	            role: "maskedinput"
	        });

            this.host.addClass(this.toThemeProperty('jqx-input'));
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));

            maskEditor = this;
            this.maskbox = $("<input autocomplete='off' type='textarea'/>").appendTo(this.host);
            this.maskbox.addClass(this.toThemeProperty('jqx-reset'));
            this.maskbox.addClass(this.toThemeProperty('jqx-input-content'));
            this.maskbox.addClass(this.toThemeProperty('jqx-widget-content'));
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.maskbox.attr('name', name);

            var me = this;
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.maskbox.addClass(me.toThemeProperty('jqx-input-disabled'));
                }
                else {
                    instance.maskbox.removeClass(me.toThemeProperty('jqx-input-disabled'));
                }
            }

            if (this.disabled) {
                this.maskbox.addClass(this.toThemeProperty('jqx-input-disabled'));
                this.maskbox.attr("disabled", true);
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }

            this.selectedText = "";
            this._addHandlers();
            this.self = this;
            this.oldValue = this._value();
            this.items = new Array();
            this._initializeLiterals();
            this._render();

            if (this.value != null) {
                this.inputValue(this.value.toString());
            }

            var me = this;
            var isOperaMini = $.jqx.mobile.isOperaMiniMobileBrowser();
            if (isOperaMini) {
                this.inputMode = 'simple';
                this.addHandler($(document), 'click', me._exitSimpleInputMode, me);
            }

            this.addHandler(this.maskbox, 'blur',
            function (event) {
                if (me.inputMode == 'simple') {
                    me._exitSimpleInputMode(event, me, false);
                    return false;
                }
                me.host.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
            });

            this.addHandler(this.maskbox, 'focus',
            function (event) {
                if (me.inputMode == 'simple') {
                    me.maskbox.val(me._getEditValue());
                    $.data(me.maskbox, "simpleInputMode", true);
                    return false;
                }
                me.host.addClass(me.toThemeProperty('jqx-fill-state-focus'));
            });

            var me = this;
            if (this.host.parents('form').length > 0) {
                this.host.parents('form').bind('reset', function () {
                    setTimeout(function () {
                        me.clearValue();
                    }, 10);
                });
            }

            if ($.jqx.mobile.isChromeMobileBrowser() && !isOperaMini) {
                var oldText = '';
                var timer = setInterval(function () {
                    var text = $(me.maskbox).val();
                    var selection = me._selection();

                    // delete
                    if (text.length < oldText.length) {
                        var start = selection.start;
                        if (start < me.items.length && me.items[start].canEdit && me.items[start].character != me.promptChar) {
                            me.items[start].character = me.promptChar;
                        }

                        var text = me._getString();
                        me.maskedValue(text);
                        me._setSelectionStart(start);

                    }

                    if (text != oldText) {
                        oldText = text;
                    }
                }, 10);
            }
        },

        _exitSimpleInputMode: function (event, self, checkbounds) {
            if (self == undefined) {
                self = event.data;
            }

            if (self == null) return;

            if (checkbounds == undefined) {
                if (event.target != null && self.element != null) {
                    if ((event.target.id != undefined && event.target.id.toString().length > 0 && self.host.find('#' + event.target.id).length > 0) || event.target == self.element) {
                        return;
                    }
                }

                var offset = self.host.offset();
                var left = offset.left;
                var top = offset.top;
                var width = self.host.width();
                var height = self.host.height();

                var targetOffset = $(event.target).offset();
                if (targetOffset.left >= left && targetOffset.left <= left + width)
                    if (targetOffset.top >= top && targetOffset.top <= top + height) {
                        return;
                    }
            }

            if (self.disabled || self.readOnly)
                return;

            var enteredMode = $.data(self.maskbox, "simpleInputMode");
            if (enteredMode == null) return;

            var currentValue = self.maskbox.val();
            self.inputValue(currentValue, true);

            $.data(self.maskbox, "simpleInputMode", null);
            return false;
        },

        _addHandlers: function () {
            var self = this;

            this.addHandler(this.maskbox, 'mousedown',
            function (event) {
                return self._raiseEvent(2, event)
            });

            this.addHandler(this.maskbox, 'mouseup',
            function (event) {
                return self._raiseEvent(3, event)
            });

            this.addHandler(this.maskbox, 'keydown',
            function (event) {
                return self._raiseEvent(4, event)
            });

            this.addHandler(this.maskbox, 'keyup',
            function (event) {
                return self._raiseEvent(5, event)
            });

            this.addHandler(this.maskbox, 'keypress',
            function (event) {
                return self._raiseEvent(6, event)
            });
        },

        _getString: function () {
            var s = "";
            for (i = 0; i < this.items.length; i++) {
                var character = this.items[i].character;
                if ((this.items[i].character == this.promptChar) && (this.promptChar != this.items[i].defaultCharacter)) {
                    s += this.items[i].defaultCharacter;
                }
                else {
                    s += character;
                }
            }

            return s;
        },

        _initializeLiterals: function () {
            if (this.mask == undefined || this.mask == null) {
                this.items = new Array();
                return;
            }

            this.mask = this.mask.toString();
            var length = this.mask.length;
            for (i = 0; i < length; i++) {
                var character = this.mask.substring(i, i + 1);
                var regex = "";
                var canEdit = false;

                if (character == "#") {
                    regex = "(\\d|[+]|[-])";
                    canEdit = true;
                }
                else if (character == "9" || character == "0") {
                    regex = "\\d";
                    canEdit = true;
                }
                else if (character == "$") {
                    canEdit = false;
                }
                else if (character == "/" || character == ":") {
                    canEdit = false;
                }
                else if (character == "A" || character == "a") {
                    regex = "\\w";
                    canEdit = true;
                }
                else if (character == "c" || character == "C") {
                    regex = ".";
                    canEdit = true;
                }
                else if (character == "L" || character == "l") {
                    regex = "\\p{L}";
                    canEdit = true;
                }

                var self = this;
                var literal = function (character, regex, canEdit) {
                    literal.character = character;
                    literal.regex = regex;
                    literal.canEdit = canEdit;
                    literal.defaultCharacter = self.promptChar;
                }

                if (canEdit) {
                    literal(this.promptChar, regex, canEdit);
                }
                else {
                    literal(character, regex, canEdit);
                }

                this.items[i] = literal;
            }
        },

        setRegex: function (index, regex, canEdit, defaultCharacter) {
            if ((index == null || index == undefined) || (regex == null || regex == undefined))
                return;

            if (index < this.items.length) {
                this.items[index].regex = regex;
                if (canEdit != null && canEdit != undefined) {
                    this.items[index].canEdit = canEdit;
                }

                if (defaultCharacter != null && defaultCharacter != undefined) {
                    this.items[index].defaultCharacter = defaultCharacter;
                }
            }
        },

        //[optimize]
        _match: function (character, regex) {
            var regExpr = new RegExp(regex, "i");
            return regExpr.test(character);
        },

        //[optimize]
        _raiseEvent: function (id, arg) {
            var evt = this.events[id];
            var args = {};
            args.owner = this;

            var key = arg.charCode ? arg.charCode : arg.keyCode ? arg.keyCode : 0;
            var result = true;
            var isreadOnly = this.readOnly;
            var event = new jQuery.Event(evt);
            event.owner = this;
            args.value = this.inputValue();
            args.text = this.maskedValue();
            event.args = args;
            result = this.host.trigger(event);

            if (this.inputMode != 'simple') {
                // key down
                if (id == 4) {
                    if (isreadOnly || this.disabled) {
                        return false;
                    }
                    var me = this;
                    if ($.jqx.mobile.isChromeMobileBrowser()) {
                        var selection = me._selection();
                        window.setTimeout(function () {
                            var savedSelection = $.data(me.maskbox, "selectionstart");
                            if (savedSelection != null && savedSelection != selection.start) {
                                $.data(me.maskbox, "selectionstart", selection.start);
                            }
                            result = me._handleKeyDown(arg, key);
                        }, 25);
                    }
                    else {
                        result = this._handleKeyDown(arg, key);
                    }
                }
                // key up
                else if (id == 5) {
                    if (isreadOnly || this.disabled) {
                        result = false;
                    }
                }
                else if (id == 6) {
                    if (isreadOnly || this.disabled) {
                        return false;
                    }

                    result = this._handleKeyPress(arg, key)
                }
            }
            else {
                if (id == 4 || id == 5 || id == 6) {
                    if (isreadOnly || this.disabled) {
                        return false;
                    }

                    var letter = String.fromCharCode(key);
                    var digit = parseInt(letter);
                    var allowInput = true;

                    if (!isNaN(digit)) {
                        allowInput = true;
                        var maxLength = this.maskbox.val().toString().length;
                        if (maxLength >= this._getEditStringLength() && this._selection().length == 0) {
                            allowInput = false;
                        }
                    }

                    if (!arg.ctrlKey && !arg.shiftKey) {
                        if (key >= 65 && key <= 90) {
                            allowInput = false;
                        }
                    }

                    return allowInput;
                }
            }

            return result;
        },

        //[optimize]
        _handleKeyPress: function (e, key) {
            var selection = this._selection();
            var rootElement = this;
            if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */) {
                return true;
            }

            if (key == 8) {
                if (selection.start > 0) {
                    rootElement._setSelectionStart(selection.start);
                }
                return false;
            }

            if (key == 46) {
                if (selection.start < this.items.length) {
                    rootElement._setSelectionStart(selection.start);
                }

                return false;
            }

            if ($.browser.msie) {
                this._insertKey(key);
            }

            var specialKey = this._isSpecialKey(key);
            return specialKey;
        },

        //[optimize]
        _insertKey: function (key) {
            var selection = this._selection();
            var rootElement = this;

            if (selection.start >= 0 && selection.start < this.items.length) {
                var letter = String.fromCharCode(key);
                var selectedTextDeleted = false
                $.each(this.items, function (i, value) {
                    if (i < selection.start) {
                        return;
                    }

                    var item = rootElement.items[i];
                    if (!item.canEdit) {
                        return;
                    }

                    if (rootElement._match(letter, item.regex)) {
                        if (!selectedTextDeleted && selection.length > 0) {
                            for (j = selection.start; j < selection.end; j++) {
                                if (rootElement.items[j].canEdit) {
                                    rootElement.items[j].character = rootElement.promptChar;
                                }
                            }

                            var text = rootElement._getString();
                            rootElement.maskedValue(text);
                            selectedTextDeleted = true;
                        }

                        item.character = letter;
                        var text = rootElement._getString();
                        rootElement.maskedValue(text);

                        if (selection.start < rootElement.items.length) {
                            rootElement._setSelectionStart(i + 1);
                        }

                        return false;
                    }
                    else return false;
                });
            }
        },

        //[optimize]
        _deleteSelectedText: function () {
            var selection = this._selection();
            var deleted = false;

            if (selection.start > 0 || selection.length > 0) {
                for (i = selection.start; i < selection.end; i++) {
                    if (i < this.items.length && this.items[i].canEdit && this.items[i].character != this.promptChar) {
                        this.items[i].character = this.promptChar;
                        deleted = true;
                    }
                }

                var text = this._getString();
                this.maskedValue(text);
                return deleted;
            }
        },

        //[optimize]
        _saveSelectedText: function () {
            var selection = this._selection();
            var text = "";
            if (selection.start > 0 || selection.length > 0) {
                for (i = selection.start; i < selection.end; i++) {
                    if (this.items[i].canEdit) {
                        text += this.items[i].character;
                    }
                }
            }
            window.clipboardData.setData("Text", text);
            return text;
        },

        //[optimize]
        _pasteSelectedText: function () {
            var selection = this._selection();
            var text = "";
            var k = 0;
            var newSelection = selection.start;
            var clipboardText = window.clipboardData.getData("Text");
            if (clipboardText != this.selectedText && clipboardText.length > 0) {
                this.selectedText = clipboardText;
                if (this.selectedText == null || this.selectedText == undefined)
                    return;
            }

            if (selection.start >= 0 || selection.length > 0) {
                for (i = selection.start; i < this.items.length; i++) {
                    if (this.items[i].canEdit) {
                        if (k < this.selectedText.length) {
                            this.items[i].character = this.selectedText[k];
                            k++;
                            newSelection = 1 + i;
                        }
                    }
                }
            }

            var text = this._getString();
            this.maskedValue(text);

            if (newSelection < this.items.length) {
                this._setSelectionStart(newSelection);
            }
            else this._setSelectionStart(this.items.length);

        },

        //[optimize]
        _handleKeyDown: function (e, key) {
            var selection = this._selection();
            if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */) {
                return true;
            } // allow Ctrl+X (cut)
            if ((e.ctrlKey && key == 120 /* firefox */) || (e.ctrlKey && key == 88) /* opera */) {
                this.selectedText = this._saveSelectedText(e);
                this._deleteSelectedText(e);
                return false;
            }
            // allow Ctrl+C (copy)
            if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */) {
                this.selectedText = this._saveSelectedText(e);
                return false;
            }
            // allow Ctrl+Z (undo)
            if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */) return false;
            // allow or deny Ctrl+V (paste), Shift+Ins
            if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
            || (e.shiftKey && key == 45)) {
                this._pasteSelectedText();
                return false;
            }
            if (selection.start >= 0 && selection.start < this.items.length) {
                var letter = String.fromCharCode(key);
                var item = this.items[selection.start];

            }

            // handle backspace.
            if (key == 8) {
                if (selection.length == 0) {
                    for (i = this.items.length - 1; i >= 0; i--) {
                        if (this.items[i].canEdit && i < selection.end && this.items[i].character != this.promptChar) {
                            this._setSelection(i, i + 1);
                            break;
                        }
                    }
                }

                selection = this._selection();
                var deletedText = this._deleteSelectedText();

                if (selection.start > 0 || selection.length > 0) {
                    if (selection.start <= this.items.length) {
                        if (deletedText) {
                            this._setSelectionStart(selection.start);
                        }
                        else this._setSelectionStart(selection.start - 1);
                    }
                }
                return false;
            }

            if (key == 190) {
                for (i = 0; i < this.items.length; i++) {
                    if (this.items[i].character == '.') {
                        this._setSelectionStart(i + 1);
                        break;
                    }
                }
            }

            // handle del.
            if (key == 46) {
                if (selection.length == 0) {
                    for (i = 0; i < this.items.length; i++) {
                        if (this.items[i].canEdit && i >= selection.start && this.items[i].character != this.promptChar) {
                            this._setSelection(i, i + 1);
                            break;
                        }
                    }
                }

                var oldSelection = selection;
                selection = this._selection();
                var deleted = this._deleteSelectedText();
                if (selection.start >= 0 || selection.length >= 0) {
                    if (selection.start < this.items.length) {
                        if (selection.length <= 1) {
                            if (oldSelection.end != selection.end) {
                                this._setSelectionStart(selection.end);
                            }
                            else this._setSelectionStart(selection.end + 1);
                        }
                        else this._setSelectionStart(selection.start)
                    }
                }
                return false;
            }

            if ($.browser.msie == null) {
                var oldVal = this.maskbox.val();
                var me = this;
                if (key >= 96 && key <= 105) {
                    key = key - 48;
                }

                me._insertKey(key);
                var newVal = this.maskbox.val();

                if (oldVal.toString() != newVal.toString()) {
                    return false;
                }
            }

            var specialKey = this._isSpecialKey(key);

            if (key == 189)
                return false;

            if (!$.browser.mozilla)
                return true;

            return specialKey;
        },

        //[optimize]
        _isSpecialKey: function (key) {
            if (key != 8 /* backspace */ &&
			key != 9 /* tab */ &&
			key != 13 /* enter */ &&
			key != 35 /* end */ &&
			key != 36 /* home */ &&
			key != 37 /* left */ &&
			key != 39 /* right */ &&
			key != 46 /* del */
		    ) {
                return false;
            }

            return true;
        },

        //[optimize]
        _selection: function () {
            if ('selectionStart' in this.maskbox[0]) {
                var e = this.maskbox[0];
                var selectionLength = e.selectionEnd - e.selectionStart;
                return { start: e.selectionStart, end: e.selectionEnd, length: selectionLength, text: e.value };
            }
            else {
                var r = document.selection.createRange();
                if (r == null) {
                    return { start: 0, end: e.value.length, length: 0 }
                }

                var re = this.maskbox[0].createTextRange();
                var rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);
                var selectionLength = r.text.length;

                return { start: rc.text.length, end: rc.text.length + r.text.length, length: selectionLength, text: r.text };
            }
        },

        //[optimize]
        _setSelection: function (start, end) {
            if ('selectionStart' in this.maskbox[0]) {
                this.maskbox[0].focus();
                this.maskbox[0].setSelectionRange(start, end);
            }
            else {
                var range = this.maskbox[0].createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        },

        //[optimize]
        _setSelectionStart: function (start) {
            this._setSelection(start, start);
        },

        refresh: function (internalRefresh) {
            if (!internalRefresh) {
                this._render();
            }
        },

        //[optimize]
        _render: function () {
            var leftBorder = parseInt(this.host.css("border-left-width"));
            var rightBorder = parseInt(this.host.css("border-left-width"));
            var topBorder = parseInt(this.host.css("border-left-width"));
            var bottomBorder = parseInt(this.host.css("border-left-width"));

            var height = parseInt(this.host.css("height")) - topBorder - bottomBorder;
            var width = parseInt(this.host.css("width")) - leftBorder - rightBorder;
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            width = parseInt(width);
            height = parseInt(height);

            this.maskbox.css({
                "border-left-width": 0,
                "border-right-width": 0,
                "border-bottom-width": 0,
                "border-top-width": 0
            });

            this.maskbox.css("text-align", this.textAlign);
            var fontSize = this.maskbox.css("font-size");

            if (!isNaN(height)) {
                this.maskbox.css('height', parseInt(fontSize) + 4 + 'px');
            }

            if (!isNaN(width)) {
                this.maskbox.css('width', width - 2);
            }

            var top = parseInt(height) - 2 * parseInt(topBorder) - 2 * parseInt(bottomBorder) - parseInt(fontSize);
            if (isNaN(top)) top = 0;

            if (!isNaN(height)) {
                this.host.height(height);
            }
            if (!isNaN(width)) {
                this.host.width(width);
            }

            var topPadding = top / 2;

            // fix for MSIE 6 and 7. These browsers double the top padding for some reason...
            if ($.browser.msie && $.browser.version < 8) {
                topPadding = top / 4;
            }

            this.maskbox.css("padding-right", '0px');
            this.maskbox.css("padding-left", '0px');
            this.maskbox.css("padding-top", topPadding);
            this.maskbox.css("padding-bottom", top / 2);
            this.maskbox.val(this._getString())
        },

        destroy: function () {
            this.element
			.removeClass("jqx-rc-all")
			;

            this.maskbox.remove();
            this.element.remove();
        },

        // gets or sets the input's value.
        maskedValue: function (newValue) {
            if (newValue === undefined) {
                return this._value();
            }

            this.value = newValue;
            this._refreshValue();

            if (this.oldValue !== newValue) {
                this._raiseEvent(1, newValue);
                this.oldValue = newValue;
                this._raiseEvent(0, newValue);
            }

            return this;
        },

        // sets the input's value.
        _value: function () {
            var value = this.maskbox.val();
            return value;
        },

        // sets a property.
        propertyChangedHandler: function (object, key, oldValue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key === "value") {
                if (value == undefined || value == null) value = '';
                value = value.toString();
                this.inputValue(value);
            }

            if (key === 'theme') {
                $.jqx.utilities.setTheme(oldValue, value, this.host);
            }

            if (key == 'disabled') {
                if (value) {
                    object.maskbox.addClass(object.toThemeProperty('jqx-input-disabled'));
                    object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));
                    object.maskbox.attr("disabled", true);
                }
                else {
                    object.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
                    object.host.removeClass(this.toThemeProperty('jqx-input-disabled'));
                    object.maskbox.attr("disabled", false);
                }
            }

            if (key == "readOnly") {
                this.readOnly = value;
            }

            if (key == "promptChar") {
                for (i = 0; i < object.items.length; i++) {
                    if (object.items[i].character == object.promptChar) {
                        object.items[i].character = value;
                        object.items[i].defaultCharacter = value;
                    }
                }

                object.promptChar = value;
            }

            if (key == "textAlign") {
                object.maskbox.css("text-align", value);
                object.textAlign = value;
            }

            if (key == "mask") {
                object.mask = value;
                object.items = new Array();
                object._initializeLiterals();
                object.value = object._getString();
                object._refreshValue();
            }
            if (key == "width") {
                object.width = value;
                object._render();
            }
            else if (key == "height") {
                object.height = value;
                object._render();
            }
        },

        // gets the input's value.
        _value: function () {
            var val = this.value;
            return val;
        },

        //[optimize]
        _getEditStringLength: function () {
            var value = '';
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit) {
                    value += this.items[i].character;
                }
            }

            return value.length;
        },

        //[optimize]
        _getEditValue: function () {
            var value = '';
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit && this.items[i].character != this.promptChar) {
                    value += this.items[i].character;
                }
            }

            return value;
        },

        //[optimize]
        parseValue: function (value) {
            if (value == undefined || value == null)
                return null;

            var input = value.toString();
            var newValue = '';
            var x = 0;
            for (m = 0; m < input.length; m++) {
                var data = input.substring(m, m + 1);

                for (i = x; i < this.items.length; i++) {
                    if (this.items[i].canEdit && this._match(data, this.items[i].regex)) {
                        newValue += data;
                        x = i;
                        break;
                    }
                }
            }

            return newValue;
        },

        // clears the entered value.
        clearValue: function () {
            this.inputValue("", true);
        },

        val: function (data) {
            if (data != undefined && typeof data != 'object') {
                this.inputValue(data);
            }

            return this.maskbox.val();
        },

        // gets or sets the editable input value.
        inputValue: function (data, fullRefresh) {
            if (data == undefined || data == null) {
                var value = "";
                for (i = 0; i < this.items.length; i++) {
                    if (this.items[i].canEdit) {
                        value += this.items[i].character;
                    }
                }

                return value;
            }
            else {
                var k = 0;
                if (typeof data == 'number') {
                    data = data.toString();
                }

                for (i = 0; i < this.items.length; i++) {
                    if (this.items[i].canEdit) {
                        if (this._match(data.substring(k, k + 1), this.items[i].regex)) {
                            this.items[i].character = data.substring(k, k + 1);
                            k++;
                        }
                        else if (fullRefresh) {
                            this.items[i].character = this.promptChar;
                        }
                    }
                }

                var newString = this._getString();
                this.maskedValue(newString);

                return this.inputValue();
            }
        },

        // applies the value to the input.
        _refreshValue: function () {
            var value = this.maskedValue();
            var k = 0;
            for (i = 0; i < this.items.length; i++) {
                if (value.length > k) {
                    if (this.items[i].canEdit && this.items[i].character != value[k]) {
                        if (this._match(value[k], this.items[i].regex) && value[k].length == 1) {
                            this.items[i].character = value[k];
                        }
                    }
                    k++;
                }
            }

            this.value = this._getString();
            value = this.value;
            this.maskbox.val(value);
        }
    });
})(jQuery);
﻿/*
* jqxMenu.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/*
* Depends:
*   jqxcore.js*/


(function ($) {

    $.jqx.jqxWidget("jqxMenu", "", {});

    $.extend($.jqx._jqxMenu.prototype, {
        defineInstance: function () {
            //Type: Array
            //Gets the menu's items.
            this.items = new Array();
            //Type: String.
            //Default: 'horizontal'.
            //Gets or sets the menu's display mode. 
            //Possible Values: 'horizontal', 'vertical', 'popup' 
            this.mode = 'horizontal';
            //Type: Number.
            //Default: null.
            //Sets the width.
            this.width = null;
            //Type: Number.
            //Default: null.
            //Sets the height.
            this.height = null;
            //Type: String.
            //Default: easeInOutSine.
            //Gets or sets the animation's easing to one of the JQuery's supported easings.         
            this.easing = 'easeInOutSine';
            //Type: Number.
            //Default: 500.
            //Gets or sets the duration of the show animation.         
            this.animationShowDuration = 200;
            //Type: Number.
            //Default: 'fast'.
            //Gets or sets the duration of the hide animation.
            this.animationHideDuration = 200;
            // Type: Number
            // Default: 0
            // Gets or sets whether the menu is automatically closed after a period of time.
            this.autoCloseInterval = 0;
            //Type: Number.
            //Default: 500.
            //Gets or sets the delay before the start of the hide animation.
            this.animationHideDelay = 100;
            //Type: Number.
            //Default: 200.
            //Gets or sets the delay before the start of the show animation.            
            this.animationShowDelay = 100;
            //Type: Array.
            this.menuElements = new Array();
            //Type: Boolean.
            //Default: true.
            //Auto-Sizes the Menu's main items when the menu's mode is 'horizontal'.
            this.autoSizeMainItems = false;
            //Type: Boolean.
            //Default: true.
            //Automatically closes the opened popups after a click.
            this.autoCloseOnClick = true;
            //Type: Boolean.
            //Default: true.
            //Automatically closes the opened popups after mouse leave.
            this.autoCloseOnMouseLeave = true;
            //Type: Boolean.
            //Default: true.
            //Enables or disables the rounded corners.
            this.enableRoundedCorners = true;
            //Type: Boolean.
            //Default: true.
            //Enables or disables the Menu.
            this.disabled = false;
            //Type: Boolean.
            //Default: true.
            //Opens the Context Menu when the right-mouse button is pressed.
            //When this property is set to false, the Open and Close functions can be used to open and close 
            //the Context Menu.
            this.autoOpenPopup = true;
            // Type: Boolean
            // Default: true
            // enables or disables the hover state.
            this.enableHover = true;
            // Type: Boolean
            // Default: true
            // opens the top level menu items when the user hovers them.
            this.autoOpen = true;
            // Type: Boolean
            // Default: false
            // When this property is true, the menu is auto generated using all of ul and li tags inside the host.
            this.autoGenerate = true;
            // Type: Boolean
            // Default: false
            // opens an item after a click by the user.
            this.clickToOpen = false;
            // Type: Boolean
            // Default: false
            // shows the top-level item arrows in the default horizontal menu mode.
            this.showTopLevelArrows = false;
            // Sets whether the menu is on touch device.
            this.touchMode = 'auto';
            // Sets menu's source.
            this.source = null;
            // Menu events.
            this.events =
		    [
                'shown', 'closed', 'itemclick', 'initialized'
            ];
        },

        createInstance: function (args) {
            var self = this;
            //    this.host.css('visibility', 'hidden');
            this.host.css('display', 'block');

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (self.disabled) {
                    self.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    self.host.addClass(self.toThemeProperty('jqx-menu-disabled'));
                }
                else {
                    self.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    self.host.removeClass(self.toThemeProperty('jqx-menu-disabled'));
                }
            }

            this.setSize();

            var percentageSize = false;
            var me = this;
            if (me.width != null && me.width.toString().indexOf("%") != -1) {
                percentageSize = true;
            }

            if (me.height != null && me.height.toString().indexOf("%") != -1) {
                percentageSize = true;
            }

            $(window).bind('resize.menu' + this.element.id, function () {
                if (percentageSize) {
                    if (me.refreshTimer) {
                        clearTimeout(me.refreshTimer);
                    }

                    me.refreshTimer = setTimeout(function () {
                        me.refresh();
                    }, 1);
                }
            });

            if (percentageSize) {
                setInterval(function () {
                    var width = me.host.width();
                    var height = me.host.height();
                    if (me._lastWidth != width || me._lastHeight != height) {
                        me.refresh();
                    }
                    me._lastWidth = width;
                    me._lastHeight = height;
                }, 100);
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-menu-disabled'));
            }

            this.host.attr('tabIndex', 1);
            this.host.css('outline', 'none');

            if (this.source) {
                if (this.source != null) {
                    var html = this.loadItems(this.source);
                    this.element.innerHTML = html;
                }
            }

            if (this.element.innerHTML.indexOf('UL')) {
                var innerElement = this.host.find('ul:first');
                if (innerElement.length > 0) {
                    this._createMenu(innerElement[0]);
                }
            }

            this.host.data('autoclose', {});

            this._render();
            var me = this;
            //   this.host.css('visibility', 'visible');
            if ($.browser.msie && $.browser.version < 8) {
                this.host.attr('hideFocus', true);
            }
        },

        loadItems: function (items, subMenuWidth) {
            if (items == null) {
                return;
            }
            if (items.length == 0) return "";

            var self = this;
            this.items = new Array();
            var html = '<ul>';
            if (subMenuWidth) {
                html = '<ul style="width:' + subMenuWidth + ';">';
            }

            $.map(items, function (item) {
                if (item == undefined)
                    return null;

                html += self._parseItem(item);
            });

            html += '</ul>';
            return html;
        },

        _parseItem: function (item) {
            var html = "";

            if (item == undefined)
                return null;

            var label = item.label;
            if (!item.label && item.html) {
                label = item.html;
            }
            if (!label) {
                label = "Item";
            }

            if (typeof item === 'string') {
                label = item;
            }

            var selected = false;
            if (item.selected != undefined && item.selected) {
                selected = true;
            }

            var disabled = false;
            if (item.disabled != undefined && item.disabled) {
                disabled = true;
            }

            html += '<li';

            if (disabled) {
                html += ' item-disabled="true" ';
            }

            if (item.label && !item.html) {
                html += ' item-label="' + label + '" ';
            }

            if (item.value != null) {
                html += ' item-value="' + item.value + '" ';
            }

            if (item.id != undefined) {
                html += ' id="' + item.id + '" ';
            }

            html += '>' + label;

            if (item.items) {
                if (item.subMenuWidth) {
                    html += this.loadItems(item.items, item.subMenuWidth);
                }
                else {
                    html += this.loadItems(item.items);
                }
            }

            html += '</li>';
            return html;
        },

        setSize: function () {
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
            }
            else if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
        },

        isTouchDevice: function () {
            if (this._isTouchDevice != undefined) return this._isTouchDevice;
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice) {
                this.host.addClass(this.toThemeProperty('jqx-touch'));
                $(".jqx-menu-item").addClass(this.toThemeProperty('jqx-touch'));
            }
            this._isTouchDevice = isTouchDevice;
            return isTouchDevice;
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.setSize();
            }
        },

        _closeAll: function (e) {
            var me = e != null ? e.data : this;
            var items = me.items;
            $.each(items, function () {
                var item = this;
                if (item.hasItems == true) {
                    if (item.isOpen) {
                        me._closeItem(me, item);
                    }
                }
            });

            if (me.mode == 'popup') {
                if (e != null) {
                    var rightclick = me._isRightClick(e);
                    if (!rightclick) {
                        me.close();
                    }
                }
            }
        },

        // @param id
        // closes a menu item by id.
        closeItem: function (id) {
            if (id == null)
                return false;
            var theId = id;
            var element = document.getElementById(theId);
            var me = this;

            $.each(me.items, function () {
                var item = this;
                if (item.isOpen == true && item.element == element) {
                    me._closeItem(me, item);
                    if (item.parentId) {
                        me.closeItem(item.parentId);
                    }
                }
            });

            return true;
        },

        // @param id
        // opens a menu item by id.
        openItem: function (id) {
            if (id == null)
                return false;

            var theId = id;
            var element = document.getElementById(theId);
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.isOpen == false && item.element == element) {
                    me._openItem(me, item);
                    if (item.parentId) {
                        me.openItem(item.parentId);
                    }
                }
            });

            return true;
        },

        _getClosedSubMenuOffset: function (item) {
            var $submenu = $(item.subMenuElement);
            var top = -$submenu.outerHeight();
            var left = -$submenu.outerWidth();
            var isTopItem = item.level == 0 && this.mode == 'horizontal';
            if (isTopItem) {
                left = 0;
            }
            else {
                top = 0;
            }

            switch (item['openVerticalDirection']) {
                case 'up':
                case 'center':
                    top = $submenu.outerHeight();
                    break;
            }

            switch (item['openHorizontalDirection']) {
                case 'left':
                    if (isTopItem) {
                        left = 0;
                    }
                    else {
                        left = $submenu.outerWidth();
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        left = 0;
                    }
                    else {
                        left = $submenu.outerWidth();
                    }
                    break;
            }
            return { left: left, top: top };
        },

        //[optimize]
        _closeItem: function (me, item, subs, force) {
            if (me == null || item == null)
                return false;

            var $submenu = $(item.subMenuElement);
          
            var isTopItem = item.level == 0 && this.mode == 'horizontal';
            var subMenuOffset = this._getClosedSubMenuOffset(item);
            var top = subMenuOffset.top;
            var left = subMenuOffset.left;

            $menuElement = $(item.element);
            var $popupElement = $submenu.closest('div.jqx-menu-popup');
            if ($popupElement != null) {
                var delay = me.animationHideDelay;
                if (force == true) {
                    //     clearTimeout($submenu.data('timer').hide);
                    delay = 0;
                }

                if ($submenu.data('timer').show != null) {
                    clearTimeout($submenu.data('timer').show);
                    $submenu.data('timer').show = null;
                }

                var hideFunc = function () {
                    item.isOpen = false;
                    if (!$.browser.msie && this.animationtype == 'fade') {
                        //         $popupElement.css('opacity', 1.0);
                    }

                    if (isTopItem) {
                        if (!$.browser.msie) {
                            //           $popupElement.stop().animate({ opacity: 0 }, me.animationHideDuration, function () {
                            //         });
                        }

                        $submenu.stop().animate({ top: top }, me.animationHideDuration, function () {
                            $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0 && me.showTopLevelArrows) {
                                $arrowSpan.removeClass();
                                if (item.openVerticalDirection == 'down') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                                }
                            }
                            $popupElement.css({ display: 'none' });
                            if (me.animationHideDuration == 0) {
                                $submenu.css({ top: top });
                            }
                            me._raiseEvent('1', item);
                        })
                    }
                    else {
                        if (!$.browser.msie) {
                            //       $popupElement.stop().animate({ opacity: 0 }, me.animationHideDuration, function () {
                            //         });
                        }

                        $submenu.stop().animate({ left: left }, me.animationHideDuration, function () {
                            if (me.animationHideDuration == 0) {
                                $submenu.css({ left: left });
                            }

                            if (item.level > 0) {
                                $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                                $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-selected'));
                                var $arrowSpan = $(item.arrow);
                                if ($arrowSpan.length > 0) {
                                    $arrowSpan.removeClass();
                                    if (item.openHorizontalDirection != 'left') {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right'));
                                    }
                                    else {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-left'));
                                    }
                                }
                            }
                            else {
                                $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                                $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                                var $arrowSpan = $(item.arrow);
                                if ($arrowSpan.length > 0) {
                                    $arrowSpan.removeClass();
                                    if (item.openHorizontalDirection != 'left') {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-right'));
                                    }
                                    else {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-left'));
                                    }
                                }
                            }
                            $popupElement.css({ display: 'none' })
                            me._raiseEvent('1', item);
                        })
                    }
                }

                if (delay > 0) {
                    $submenu.data('timer').hide = setTimeout(function () {
                        hideFunc();
                    }, delay);
                }
                else {
                    hideFunc();
                }

                if (subs != undefined && subs) {
                    var children = $submenu.children();// find('.' + me.toThemeProperty('jqx-menu-item'));
                    $.each(children, function () {
                        if (me.menuElements[this.id] && me.menuElements[this.id].isOpen) {
                            var $submenu = $(me.menuElements[this.id].subMenuElement);
                            me._closeItem(me, me.menuElements[this.id], true, true);
                        }
                    });
                }
            }
        },

        // @param id
        // @param array.
        // get menu item's sub items.
        getSubItems: function (id, array) {
            if (id == null)
                return false;

            var me = this;
            var subItems = new Array();
            if (array != null) {
                $.extend(subItems, array);
            }

            var theId = id;
            var item = this.menuElements[theId];
            var $submenu = $(item.subMenuElement);
            var children = $submenu.find('.jqx-menu-item');
            $.each(children, function () {
                subItems[this.id] = me.menuElements[this.id];
                var innerArray = me.getSubItems(this.id, subItems);
                $.extend(subItems, innerArray);
            });

            return subItems;
        },

        // disables a menu item.
        // @param id
        // @param Boolean
        disable: function (id, disable) {
            if (id == null)
                return;
            var theId = id;
            var me = this;
            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                item.disabled = disable;
                var $element = $(item.element);
                item.element.disabled = disable;
                $.each($element.children(), function () {
                    this.disabled = disable;
                });

                if (disable) {
                    $element.addClass(me.toThemeProperty('jqx-menu-item-disabled'));
                    $element.addClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    $element.removeClass(me.toThemeProperty('jqx-menu-item-disabled'));
                    $element.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
            }
        },

        _setItemProperty: function (id, propertyname, value) {
            if (id == null)
                return;

            var theId = id;
            var me = this;

            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                if (item[propertyname]) {
                    item[propertyname] = value;
                }
            }
        },

        // sets the open direction of an item.
        // @param id
        // @param String
        // @param String
        setItemOpenDirection: function (id, horizontal, vertical) {
            if (id == null)
                return;
            var theId = id;
            var me = this;
            var ie7 = $.browser.msie && $.browser.version < 8;

            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                if (horizontal != null) {
                    item['openHorizontalDirection'] = horizontal;
                    if (item.hasItems && item.level > 0) {
                        var $element = $(item.element);
                        if ($element != undefined) {
                            var $arrowSpan = $(item.arrow);
                            if (item.arrow == null) {
                                $arrowSpan = $('<span id="arrow' + $element[0].id + '"></span>');
                                if (!ie7) {
                                    $arrowSpan.prependTo($element);
                                }
                                else {
                                    $arrowSpan.appendTo($element);
                                }
                            }
                            $arrowSpan.removeClass();
                            if (item.openHorizontalDirection == 'left') {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-left'));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right'));
                            }
                            $arrowSpan.css('visibility', 'visible');

                            if (!ie7) {
                                $arrowSpan.css('display', 'block');
                                $arrowSpan.css('float', 'right');
                            }
                            else {
                                $arrowSpan.css('display', 'inline-block');
                                $arrowSpan.css('float', 'none');
                            }
                        }
                    }
                }
                if (vertical != null) {
                    item['openVerticalDirection'] = vertical;
                    var $arrowSpan = $(item.arrow);
                    var $element = $(item.element);
                    if ($element != undefined) {
                        if (item.arrow == null) {
                            $arrowSpan = $('<span id="arrow' + $element[0].id + '"></span>');
                            if (!ie7) {
                                $arrowSpan.prependTo($element);
                            }
                            else {
                                $arrowSpan.appendTo($element);
                            }
                        }
                        $arrowSpan.removeClass();
                        if (item.openVerticalDirection == 'down') {
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                        }
                        else {
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                        }
                        $arrowSpan.css('visibility', 'visible');
                        if (!ie7) {
                            $arrowSpan.css('display', 'block');
                            $arrowSpan.css('float', 'right');
                        }
                        else {
                            $arrowSpan.css('display', 'inline-block');
                            $arrowSpan.css('float', 'none');

                        }
                    }
                }
            }
        },

        //[optimize]
        _getSiblings: function (item) {
            var siblings = new Array();
            var index = 0;
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i] == item)
                    continue;

                if (this.items[i].parentId == item.parentId && this.items[i].hasItems) {
                    siblings[index++] = this.items[i];
                }
            }
            return siblings;
        },

        //[optimize]
        _openItem: function (me, item, zIndex) {
            if (me == null || item == null)
                return false;

            if (item.isOpen)
                return false;

            if (item.disabled)
                return false;

            if (me.disabled)
                return false;
            var zIndx = 1000;
            if (zIndex != undefined) {
                zIndx = zIndex;
            }

            var hideDuration = me.animationHideDuration;
            me.animationHideDuration = 0;
            me._closeItem(me, item, true, true);
            me.animationHideDuration = hideDuration;

            this.host.focus();

            var popupElementoffset = [5, 5];
            var $submenu = $(item.subMenuElement);
            if ($submenu != null) {
                $submenu.stop();
            }
            // stop hiding process.
            if ($submenu.data('timer').hide != null) {
                clearTimeout($submenu.data('timer').hide);
                //      $submenu.data('timer').hide = null;
            }
            var $popupElement = $submenu.closest('div.jqx-menu-popup');
            var $menuElement = $(item.element);
            var offset = item.level == 0 ? this._getOffset(item.element) : $menuElement.position()

            if (item.level > 0 && this.hasTransform) {
                var topTransform = parseInt($menuElement.offset().top) - parseInt(this._getOffset(item.element).top);
                offset.top += topTransform;
            }

            if (item.level == 0 && this.mode == 'popup') {
                offset = $menuElement.offset();
            }

            var isTopItem = item.level == 0 && this.mode == 'horizontal';

            var menuItemLeftOffset = isTopItem ? offset.left : this.menuElements[item.parentId] != null && this.menuElements[item.parentId].subMenuElement != null ? parseInt($($(this.menuElements[item.parentId].subMenuElement).closest('div.jqx-menu-popup')).outerWidth()) - popupElementoffset[0]
            : parseInt($submenu.outerWidth());

            $popupElement.css({ visibility: 'visible', display: 'block', left: menuItemLeftOffset, top: isTopItem ? offset.top + $menuElement.outerHeight() : offset.top, zIndex: zIndx })
            $submenu.css('display', 'block');

            if (this.mode != 'horizontal' && item.level == 0) {
                var hostOffset = this._getOffset(this.element)
                $popupElement.css('left', -1 + hostOffset.left + this.host.outerWidth());

                //          $popupElement.css('left', -2 + offset.left + this.host.width() - popupElementoffset[0]);
                $submenu.css('left', -$submenu.outerWidth());
            }
            else {
                var subMenuOffset = this._getClosedSubMenuOffset(item);
                $submenu.css('left', subMenuOffset.left);
                $submenu.css('top', subMenuOffset.top);
            }

            $popupElement.css({ height: parseInt($submenu.outerHeight()) + parseInt(popupElementoffset[1]) + 'px' });

            var top = 0;
            var left = 0;

            switch (item['openVerticalDirection']) {
                case 'up':
                    if (isTopItem) {
                        $submenu.css('top', $submenu.outerHeight());
                        top = popupElementoffset[1];
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight(), zIndex: zIndx })
                    }
                    else {
                        top = popupElementoffset[1];
                        $submenu.css('top', $submenu.outerHeight());
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight() + popupElementoffset[1] + $menuElement.outerHeight(), zIndex: zIndx })
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        $submenu.css('top', 0);
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight() / 2 + popupElementoffset[1], zIndex: zIndx })
                    }
                    else {
                        $submenu.css('top', 0);
                        $popupElement.css({ display: 'block', top: offset.top + $menuElement.outerHeight() / 2 - $popupElement.outerHeight() / 2 + popupElementoffset[1], zIndex: zIndx })
                    }

                    break;
            }

            switch (item['openHorizontalDirection']) {
                case 'left':
                    if (isTopItem) {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() - $menuElement.outerWidth() - popupElementoffset[0]) });
                    }
                    else {
                        left = popupElementoffset[0];
                        $submenu.css('left', $popupElement.outerWidth());
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth()) });
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2) });
                    }
                    else {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2) });
                        $submenu.css('left', $popupElement.outerWidth());
                    }
                    break;
            }

            if (isTopItem) {
                if (parseInt($submenu.css('top')) == top) {
                    item.isOpen = true;
                    return;
                }
            }
            else if (parseInt($submenu.css('left')) == left) {
                item.isOpen == true;
                return;
            }

            $.each(me._getSiblings(item), function () {
                me._closeItem(me, this, true, true);
            });
            var hideDelay = $.data(me.element, 'animationHideDelay');
            me.animationHideDelay = hideDelay;


            if (this.autoCloseInterval > 0) {
                if (this.host.data('autoclose') != null && this.host.data('autoclose').close != null) {
                    clearTimeout(this.host.data('autoclose').close);
                }

                if (this.host.data('autoclose') != null) {
                    this.host.data('autoclose').close = setTimeout(function () {
                        me._closeAll();
                    }, this.autoCloseInterval);
                }
            }

            $submenu.data('timer').show = setTimeout(function () {
                if ($popupElement != null) {
                    if (isTopItem) {
                        $submenu.stop();
                        $submenu.css('left', left);
                        if (!$.browser.msie) {
                            //      $popupElement.css('opacity', 0.0);
                        }

                        $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                        var $arrowSpan = $(item.arrow);
                        if ($arrowSpan.length > 0 && me.showTopLevelArrows) {
                            $arrowSpan.removeClass();
                            if (item.openVerticalDirection == 'down') {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down-selected'));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up-selected'));
                            }
                        }

                        if (me.animationShowDuration == 0) {
                            $submenu.css({ top: top });
                            item.isOpen = true;
                            me._raiseEvent('0', item);
                        }
                        else {
                            $submenu.animate({ top: top }, me.animationShowDuration, me.easing,
                            function () {
                                item.isOpen = true;
                                me._raiseEvent('0', item);
                            }) //animate submenu into view
                        }
                    }
                    else {
                        $submenu.stop();
                        $submenu.css('top', top);
                        if (!$.browser.msie) {
                            //     $popupElement.css('opacity', 0.0);
                        }

                        if (item.level > 0) {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-selected'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0) {
                                $arrowSpan.removeClass();
                                if (item.openHorizontalDirection != 'left') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right-selected'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-left-selected'));
                                }
                            }
                        }
                        else {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0) {
                                $arrowSpan.removeClass();
                                if (item.openHorizontalDirection != 'left') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right-selected'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-left-selected'));
                                }
                            }
                        }
                        if (!$.browser.msie) {
                            //      $popupElement.animate({ opacity: 1 }, 2 * me.animationShowDuration, me.easing,
                            //   function () {

                            // })
                        }
                        if (me.animationShowDuration == 0) {
                            $submenu.css({ left: left });
                            me._raiseEvent('0', item);
                            item.isOpen = true;
                        }
                        else {
                            $submenu.animate({ left: left }, me.animationShowDuration, me.easing, function () {
                                me._raiseEvent('0', item);
                                item.isOpen = true;
                            }) //animate submenu into view
                        }
                    }
                }
            }, this.animationShowDelay);
        },

        //[optimize]
        _applyOrientation: function (mode, oldmode) {
            var me = this;
            var maxHeight = 0;
            this.host.removeClass(me.toThemeProperty('jqx-menu-horizontal'));
            this.host.removeClass(me.toThemeProperty('jqx-menu-vertical'));
            this.host.removeClass(me.toThemeProperty('jqx-menu'));
            this.host.removeClass(me.toThemeProperty('jqx-widget'));
            this.host.addClass(me.toThemeProperty('jqx-widget'));
            this.host.addClass(me.toThemeProperty('jqx-menu'));

            if (mode != undefined && oldmode != undefined && oldmode == 'popup') {
                if (this.host.parent().length > 0 && this.host.parent().parent().length > 0 && this.host.parent().parent()[0] == document.body) {
                    var oldHost = $.data(document.body, 'jqxMenuOldHost' + this.element.id);
                    if (oldHost != null) {
                        var $popupElementparent = this.host.closest('div.jqx-menu-wrapper')
                        $popupElementparent.remove();
                        $popupElementparent.appendTo(oldHost);
                        this.host.css('display', 'block');
                        this.host.css('visibility', 'visible');
                        $popupElementparent.css('display', 'block');
                        $popupElementparent.css('visibility', 'visible');
                    }
                }
            }
            else if (mode == undefined && oldmode == undefined) {
                $.data(document.body, 'jqxMenuOldHost' + this.element.id, this.host.parent()[0]);
            }

            if (this.autoOpenPopup) {
                if (this.mode == 'popup') {
                    $(document).bind('contextmenu', function (e) {
                        return false;
                    });

                    $(document).bind('mousedown.menu' + this.element.id, me, this._openContextMenu);
                }
                else {
                    $(document).unbind('contextmenu');
                    $(document).unbind('mousedown.menu' + this.element.id, this._openContextMenu);
                }
            }
            else {
                $(document).unbind('contextmenu');
                $(document).unbind('mousedown.menu' + this.element.id, this._openContextMenu);
            }

            switch (this.mode) {
                case 'horizontal':
                    this.host.addClass(me.toThemeProperty('jqx-widget-header'));
                    this.host.addClass(me.toThemeProperty('jqx-menu-horizontal'));

                    $.each(this.items, function () {
                        var item = this;
                        $element = $(item.element);

                        var $arrowSpan = $(item.arrow);
                        $arrowSpan.removeClass();

                        if (item.hasItems && item.level > 0) {
                            var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');
                            $arrowSpan.prependTo($element);
                            $arrowSpan.css('float', 'right');
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right'));
                            item.arrow = $arrowSpan[0];
                        }

                        if (item.level == 0) {
                            $(item.element).css('float', 'left');
                            if (!item.ignoretheme && item.hasItems && me.showTopLevelArrows) {
                                var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');
                                var ie7 = $.browser.msie && $.browser.version < 8;

                                if (item.arrow == null) {
                                    if (!ie7) {
                                        $arrowSpan.prependTo($element);
                                    }
                                    else {
                                        $arrowSpan.appendTo($element);
                                    }
                                } else {
                                    $arrowSpan = $(item.arrow);
                                }
                                if (item.openVerticalDirection == 'down') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                                }

                                $arrowSpan.css('visibility', 'visible');

                                if (!ie7) {
                                    $arrowSpan.css('display', 'block');
                                    $arrowSpan.css('float', 'right');
                                }
                                else {
                                    $arrowSpan.css('display', 'inline-block');
                                }

                                item.arrow = $arrowSpan[0];
                            }
                            else if (!item.ignoretheme && item.hasItems && !me.showTopLevelArrows) {
                                if (item.arrow != null) {
                                    var $arrowSpan = $(item.arrow);
                                    $arrowSpan.remove();
                                    item.arrow = null;
                                }
                            }
                            maxHeight = Math.max(maxHeight, $element.height());
                        }
                    });
                    break;
                case 'vertical':
                case 'popup':
                    this.host.addClass(me.toThemeProperty('jqx-menu-vertical'));

                    $.each(this.items, function () {
                        var item = this;
                        $element = $(item.element);
                        if (item.hasItems && !item.ignoretheme) {
                            if (item.arrow) {
                                $(item.arrow).remove();
                            }

                            var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');

                            $arrowSpan.prependTo($element);
                            $arrowSpan.css('float', 'right');

                            if (item.level == 0) {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-right'));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-right'));
                            }
                            item.arrow = $arrowSpan[0];
                        }
                        $element.css('float', 'none');
                    });

                    if (this.mode == 'popup') {
                        this.host.addClass(me.toThemeProperty('jqx-widget-content'));
                        this.host.wrap('<div class="jqx-menu-wrapper" style="z-index:' + 999999999 + '; border: none; background-color: transparent; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: visible;"></div>')
                        var $popupElementparent = this.host.closest('div.jqx-menu-wrapper')
                        $popupElementparent[0].id = "menuWrapper" + this.element.id;
                        $popupElementparent.appendTo($(document.body));
                    }
                    else {
                        this.host.addClass(me.toThemeProperty('jqx-widget-header'));
                    }

                    if (this.mode == 'popup') {
                        var height = this.host.height();
                        this.host.css('position', 'absolute');
                        this.host.css('top', '0');
                        this.host.css('left', '0');
                        this.host.height(height);
                        this.host.css('display', 'none');
                        //    this.host.css('visibility', 'hidden');
                    }
                    break;
            }
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        _getOffset: function (object) {
     //       var scrollTop = $(window).scrollTop();
     //       var scrollLeft = $(window).scrollLeft();
            var isSafari = $.jqx.mobile.isSafariMobileBrowser();

            var offset = $(object).offset();
            var top = offset.top;
            var left = offset.left;

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left;
            }

            if (this.hasTransform || (isSafari != null && isSafari)) {
                var point = { left: $.jqx.mobile.getLeftPos(object), top: $.jqx.mobile.getTopPos(object) };
                return point;
            }
            else return { left: left, top: top };
        },

        _isRightClick: function (e) {
            var rightclick;
            if (!e) var e = window.event;
            if (e.which) rightclick = (e.which == 3);
            else if (e.button) rightclick = (e.button == 2);
            return rightclick;
        },

        _openContextMenu: function (e) {
            var me = e.data;
            var rightclick = me._isRightClick(e);

            if (rightclick) {
                me.open(parseInt(e.clientX) + 5, parseInt(e.clientY) + 5);
            }
        },

        // closes a context menu.
        close: function () {
            var me = this;
            var opened = $.data(this.element, 'contextMenuOpened' + this.element.id);
            if (opened) {
                var host = this.host;
                $.each(me.items, function () {
                    var item = this;
                    if (item.hasItems) {
                        me._closeItem(me, item);
                    }
                });

                $.each(me.items, function () {
                    var item = this;
                    if (item.isOpen == true) {
                        $submenu = $(item.subMenuElement);
                        var $popupElement = $submenu.closest('div.jqx-menu-popup')
                        $popupElement.hide(this.animationHideDuration);

                    }
                });

                this.host.hide(this.animationHideDuration);
                $.data(me.element, 'contextMenuOpened' + this.element.id, false);
                me._raiseEvent('1', me);
            }
        },

        // @param String. Horizontal offset
        // @param String. Vertical Offset
        // opens a context menu.
        open: function (left, top) {
            if (this.mode == 'popup') {
                var duration = 0;
                if (this.host.css('display') == 'block') {
                    this.close();
                    duration = this.animationHideDuration;
                }

                var me = this;

                if (left == undefined || left == null) left = 0;
                if (top == undefined || top == null) top = 0;

                setTimeout(function () {
                    me.host.show(me.animationShowDuration);
                    me.host.css('visibility', 'visible');
                    $.data(me.element, 'contextMenuOpened' + me.element.id, true);
                    me._raiseEvent('0', me);
                    me.host.css('z-index', 9999);

                    if (left != undefined && top != undefined) {
                        me.host.css({ 'left': left, 'top': top });
                    }
                }, duration);
            }
        },

        _renderHover: function ($menuElement, item, isTouchDevice) {
            var me = this;
            if (!isTouchDevice) {
                $menuElement.unbind('hover');
                if (!item.ignoretheme) {
                    $menuElement.hover(function () {
                        if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {
                            if (item.level > 0) {
                                $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                                $menuElement.addClass(me.toThemeProperty('jqx-menu-item-hover'));
                            }
                            else {
                                $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                                $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-hover'));
                            }
                        }
                    },
                function () {
                    if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {
                        if (item.level > 0) {
                            $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                            $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-hover'));
                        }
                        else {
                            $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                            $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-top-hover'));
                        }
                    }
                });
                }
            }
        },

        _closeAfterClick: function (event) {
            var me = event != null ? event.data : this;
            var matches = false;
            if (me.autoCloseOnClick) {
                $.each($(event.target).parents(), function () {
                    if (this.className.indexOf) {
                        if (this.className.indexOf('jqx-menu') != -1) {
                            matches = true;
                            return false;
                        }
                    }
                });

                if (!matches) {
                    event.data = me;
                    me._closeAll(event);
                }
            }
        },

        _autoSizeHorizontalMenuItems: function () {
            var me = this;
            if (me.autoSizeMainItems && this.mode == "horizontal") {
                var maxHeight = this.maxHeight;
                if (parseInt(maxHeight) > parseInt(this.host.height())) {
                    maxHeight = parseInt(this.host.height());
                }
                maxHeight = parseInt(this.host.height());

                // align vertically the items.
                $.each(this.items, function () {
                    var item = this;
                    $element = $(item.element);
                    if (item.level == 0 && maxHeight > 0) {
                        var childrenHeight = $element.children().length > 0 ? parseInt($element.children().height()) : $element.height();
                        // vertically align content.
                        var $ul = me.host.find('ul:first');
                        var paddingOffset = parseInt($ul.css('padding-top'));
                        var marginOffset = parseInt($ul.css('margin-top'));
                        //   var borderOffset = parseInt(me.host.css('border-top-width'));
                        var height = maxHeight - 2 * (marginOffset + paddingOffset);
                        var newPadding = parseInt(height) / 2 - childrenHeight / 2;
                        var topPadding = parseInt(newPadding);
                        var bottomPadding = parseInt(newPadding);
                        $element.css('padding-top', topPadding);
                        $element.css('padding-bottom', bottomPadding);

                        if (parseInt($element.outerHeight()) > height) {
                            var offset = 1;
                            $element.css('padding-top', topPadding - offset);
                            topPadding = topPadding - offset;
                        }
                    }
                });
            }
        },

        _render: function (mode, oldMode) {
            var zIndex = 1000;
            var popupElementoffset = [5, 5];
            var me = this;
            $.data(me.element, 'animationHideDelay', me.animationHideDelay);
            var isTouchDevice = this.isTouchDevice();
            $.data(document.body, 'menuel', this);

            if (this.autoCloseOnClick) {
                this.removeHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick);
                this.addHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick, me);
       //         this.removeHandler($(document), 'mouseup.menu' + this.element.id, me._closeAfterClick);
       //         this.addHandler($(document), 'mouseup.menu' + this.element.id, me._closeAfterClick, me);
                if (isTouchDevice) {
                    this.addHandler($(document), 'touchstart.menu' + this.element.id, me._closeAfterClick, me);
                }
            }

            this.hasTransform = $.jqx.utilities.hasTransform(this.host);

            this._applyOrientation(mode, oldMode);

            if (me.enableRoundedCorners) {
                this.host.addClass(me.toThemeProperty('jqx-rc-all'));
            }

            $.each(this.items, function () {
                var item = this;
                var $menuElement = $(item.element);

                if (me.enableRoundedCorners) {
                    $menuElement.addClass(me.toThemeProperty('jqx-rc-all'));
                }

                me.removeHandler($menuElement, 'click');
                me.addHandler($menuElement, 'click', function (e) {
                    if (item.disabled)
                        return;

                    me._raiseEvent('2', { item: item.element, event: e });

                    if (!me.autoOpen) {
                        if (item.level > 0) {
                            if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {
                                e.data = me;
                                me._closeAll(e);
                            }
                        }
                    }
                    else if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {
                        if (item.closeOnClick) {
                            e.data = me;
                            me._closeAll(e);
                        }
                    }
                    if (isTouchDevice && me.autoCloseOnClick) {
                        e.data = me;
                        if (!item.hasItems) {
                            me._closeAll(e);
                        }
                    }

                    if (e.target.tagName != 'A' && e.target.tagName != 'a') {
                        var anchor = item.anchor != null ? $(item.anchor) : null;

                        if (anchor != null && anchor.length > 0) {
                            var href = anchor.attr('href');
                            var target = anchor.attr('target');
                            if (href != null) {
                                if (target != null) {
                                    window.open(href, target);
                                }
                                else {
                                    window.location = href;
                                }
                                //if (target != null && target == "_blank") {
                                //    window.open(href, target);
                                //}
                                //else {
                                //   window.location = href;
                                //    window.open(href, target);

                                //}
                            }
                        }
                    }
                });

                me.removeHandler($menuElement, 'mouseenter');
                me.removeHandler($menuElement, 'mouseleave');
                me._renderHover($menuElement, item, isTouchDevice);
                if (item.subMenuElement != null) {
                    var $submenu = $(item.subMenuElement);

                    $submenu.wrap('<div class="jqx-menu-popup" style="border: none; background-color: transparent; z-index:' + zIndex + '; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: hidden;"><div style="background-color: transparent; border: none; position:absolute; overflow:hidden; left: 0; top: 0; right: 0; width: 100%; height: 100%;"></div></div>')
                    $submenu.css({ overflow: 'hidden', position: 'absolute', left: 0, display: 'inherit', top: -$submenu.outerHeight() })
                    $submenu.data('timer', {});
                    if (item.level > 0) {
                        $submenu.css('left', -$submenu.outerWidth());
                    }
                    else if (me.mode == 'horizontal') {
                        $submenu.css('left', 0);
                    }

                    zIndex++;
                    var $popupElement = $(item.subMenuElement).closest('div.jqx-menu-popup').css({ width: parseInt($(item.subMenuElement).outerWidth()) + parseInt(popupElementoffset[0]) + 'px', height: parseInt($(item.subMenuElement).outerHeight()) + parseInt(popupElementoffset[1]) + 'px' })
                    var $popupElementparent = $menuElement.closest('div.jqx-menu-popup')

                    if ($popupElementparent.length > 0) {
                        var oldsubleftmargin = $submenu.css('margin-left');
                        var oldsubrightmargin = $submenu.css('margin-right');
                        var oldsubleftpadding = $submenu.css('padding-left');
                        var oldsubrightpadding = $submenu.css('padding-right');

                        $popupElement.appendTo($popupElementparent)

                        $submenu.css('margin-left', oldsubleftmargin);
                        $submenu.css('margin-right', oldsubrightmargin);
                        $submenu.css('padding-left', oldsubleftpadding);
                        $submenu.css('padding-right', oldsubrightpadding);
                    }
                    else {
                        //      $popupElement.appendTo(this.host)
                        var oldsubleftmargin = $submenu.css('margin-left');
                        var oldsubrightmargin = $submenu.css('margin-right');
                        var oldsubleftpadding = $submenu.css('padding-left');
                        var oldsubrightpadding = $submenu.css('padding-right');

                        $popupElement.appendTo($(document.body));
                        $submenu.css('margin-left', oldsubleftmargin);
                        $submenu.css('margin-right', oldsubrightmargin);
                        $submenu.css('padding-left', oldsubleftpadding);
                        $submenu.css('padding-right', oldsubrightpadding);
                    }

                    if (!isTouchDevice && !me.clickToOpen) {
                        me.addHandler($menuElement, 'mouseenter', function () {
                            if (me.autoOpen || (item.level > 0 && !me.autoOpen)) {
                                clearTimeout($submenu.data('timer').hide)
                            }

                            if (item.parentId && item.parentId != 0) {
                                if (me.menuElements[item.parentId]) {
                                    var openedStateOfParent = me.menuElements[item.parentId].isOpen;
                                    if (!openedStateOfParent) {
                                        return;
                                    }
                                }
                            }

                            if (me.autoOpen || (item.level > 0 && !me.autoOpen)) {
                                me._openItem(me, item);
                            }
                            return false;
                        });

                        me.addHandler($menuElement, 'mousedown', function () {
                            if (!me.autoOpen && item.level == 0) {
                                clearTimeout($submenu.data('timer').hide)
                                if ($submenu != null) {
                                    $submenu.stop();
                                }

                                if (!item.isOpen) {
                                    me._openItem(me, item);
                                }
                                else {
                                    me._closeItem(me, item, true);
                                }
                            }
                        });

                        me.addHandler($menuElement, 'mouseleave', function (event) {
                            if (me.autoCloseOnMouseLeave) {
                                clearTimeout($submenu.data('timer').hide)
                                var $subMenu = $(item.subMenuElement);
                                var position = { left: parseInt(event.pageX), top: parseInt(event.pageY) };
                                var subMenuBounds = { left: parseInt($subMenu.offset().left), top: parseInt($subMenu.offset().top),
                                    width: parseInt($subMenu.outerWidth()), height: parseInt($subMenu.outerHeight())
                                };

                                var closeItem = true;
                                if (subMenuBounds.left - 5 <= position.left && position.left <= subMenuBounds.left + subMenuBounds.width + 5) {
                                    if (subMenuBounds.top <= position.top && position.top <= subMenuBounds.top + subMenuBounds.height) {
                                        closeItem = false;
                                    }
                                }

                                if (closeItem) {
                                    me._closeItem(me, item, true);
                                }
                            }
                        });

                        me.removeHandler($popupElement, 'mouseenter');
                        me.addHandler($popupElement, 'mouseenter', function () {
                            clearTimeout($submenu.data('timer').hide)
                        });

                        me.removeHandler($popupElement, 'mouseleave');
                        me.addHandler($popupElement, 'mouseleave', function (e) {
                            if (me.autoCloseOnMouseLeave) {
                                clearTimeout($submenu.data('timer').hide)
                                clearTimeout($submenu.data('timer').show);
                                if ($submenu != null) {
                                    $submenu.stop();
                                }
                                me._closeItem(me, item, true);
                            }
                        });
                    }
                    else {
                        me.removeHandler($menuElement, 'mousedown');
                        me.addHandler($menuElement, 'mousedown', function (event) {

                            clearTimeout($submenu.data('timer').hide)
                            if ($submenu != null) {
                                $submenu.stop();
                            }

                            if (item.level == 0 && !item.isOpen) {
                                event.data = me;
                                me._closeAll(event);
                            }

                            if (!item.isOpen) {
                                me._openItem(me, item);
                            }
                            else {
                                me._closeItem(me, item, true);
                            }
                        });
                    }
                }
            });

            this._autoSizeHorizontalMenuItems();
            this._raiseEvent('3', this);
        },

        createID: function () {
            var id = Math.random() + '';
            id = id.replace('.', '');
            id = '99' + id;
            id = id / 1;
            while (this.items[id]) {
                id = Math.random() + '';
                id = id.replace('.', '');
                id = id / 1;
            }
            return 'menuItem' + id;
        },

        _createMenu: function (uiObject, refresh) {
            if (uiObject == null)
                return;

            if (refresh == undefined) {
                refresh = true;
            }
            if (refresh == null) {
                refresh = true;
            }

            var self = this;
            var liTags = $(uiObject).find('li');
            var k = 0;
            for (var index = 0; index < liTags.length; index++) {
                var listItem = liTags[index];
                var $listItem = $(listItem);

                if (listItem.className.indexOf('jqx-menu') == -1 && this.autoGenerate == false)
                    continue;

                var id = listItem.id;
                if (!id) {
                    id = this.createID();
                }

                if (refresh) {
                    listItem.id = id;
                    this.items[k] = new $.jqx._jqxMenu.jqxMenuItem();
                    this.menuElements[id] = this.items[k];
                }

                k += 1;
                var parentId = 0;
                var me = this;

                $listItem.children().each(function () {
                    if (!refresh) {
                        $(this).removeClass();

                        if (me.autoGenerate) {
                            $(me.items[k - 1].subMenuElement).removeClass();
                            $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-widget-content'));
                            $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-menu-dropdown'));
                        }
                    }

                    if (this.className.indexOf('jqx-menu-dropdown') != -1) {
                        if (refresh) {
                            me.items[k - 1].subMenuElement = this;
                        }
                        return false;
                    }
                    else if (me.autoGenerate && (this.tagName == 'ul' || this.tagName == 'UL')) {
                        if (refresh) {
                            me.items[k - 1].subMenuElement = this;
                        }
                        $(this).removeClass();
                        $(this).addClass(me.toThemeProperty('jqx-widget-content'));
                        $(this).addClass(me.toThemeProperty('jqx-menu-dropdown'));
                        return false;
                    }
                });

                $listItem.parents().each(function () {
                    if (this.className.indexOf('jqx-menu-item') != -1) {
                        parentId = this.id;
                        return false;
                    }
                    else if (me.autoGenerate && (this.tagName == 'li' || this.tagName == 'LI')) {
                        parentId = this.id;
                        return false;
                    }

                });

                var separator = false;
                var type = listItem.getAttribute('type');
                var ignoretheme = listItem.getAttribute('ignoretheme');

                if (ignoretheme) {
                    if (ignoretheme == 'true' || ignoretheme == true) {
                        ignoretheme = true;
                    }
                }
                else ignoretheme = false;

                if (!type) {
                    type = listItem.type;
                }
                else {
                    if (type == 'separator') {
                        var separator = true;
                    }
                }

                if (!separator) {
                    if (parentId) {
                        type = 'sub';
                    }
                    else type = 'top';
                }

                var menuItem = this.items[k - 1];
                if (refresh) {
                    menuItem.id = id;
                    menuItem.parentId = parentId;
                    menuItem.type = type;
                    menuItem.separator = separator;
                    menuItem.element = liTags[index];
                    var anchor = $listItem.find('a:first');
                    menuItem.level = $listItem.parents('li').length;
                    menuItem.anchor = anchor.parents('li').length == menuItem.level + 1 ? anchor : null;
                }
                menuItem.ignoretheme = ignoretheme;

                var parentItem = this.menuElements[parentId];
                if (parentItem != null) {
                    if (parentItem.ignoretheme) {
                        menuItem.ignoretheme = parentItem.ignoretheme;
                        ignoretheme = parentItem.ignoretheme;
                    }
                }

                if (this.autoGenerate) {
                    if (type == 'separator') {
                        $listItem.removeClass();
                        $listItem.addClass(this.toThemeProperty('jqx-menu-item-separator'));
                    }
                    else {
                        if (!ignoretheme) {
                            $listItem.removeClass();
                            if (menuItem.level > 0) {
                                $listItem.addClass(this.toThemeProperty('jqx-item'));
                                $listItem.addClass(this.toThemeProperty('jqx-menu-item'));
                            }
                            else {
                                $listItem.addClass(this.toThemeProperty('jqx-item'));
                                $listItem.addClass(this.toThemeProperty('jqx-menu-item-top'));
                            }
                        }
                    }
                }

                if (refresh && !ignoretheme) {
                    menuItem.hasItems = $listItem.find('li').length > 0;
                }
            }
        },

        destroy: function () {
            var wrapper = this.host.closest('div.jqx-menu-wrapper');
            wrapper.remove();
            var me = this;
            this.removeHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick);
            this.removeHandler($(document), 'mouseup.menu' + this.element.id, me._closeAfterClick);
            $(window).unbind('resize.menu' + me.element.id);
            $.each(this.items, function () {
                var item = this;
                var $menuElement = $(item.element);
                me.removeHandler($menuElement, 'click');
                me.removeHandler($menuElement, 'selectstart');
                me.removeHandler($menuElement, 'mouseenter');
                me.removeHandler($menuElement, 'mouseleave');
                me.removeHandler($menuElement, 'mousedown');
                me.removeHandler($menuElement, 'mouseleave');
            });
            $.data(document.body, 'menuel', null);
            this.items = new Array();
            this.host.removeClass();
            this.host.remove();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            if (id == '2') {
                args = arg.item;
                args.owner = this;
                $.extend(event, arg.event);
                event.type = 'itemclick';
            }

            event.owner = this;
            event.args = args;
            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (value == oldvalue)
                return;

            if (key == 'touchMode') {
                this._isTouchDevice = null;
                object._render(value, oldvalue);
            }

            if (key == 'source') {
                if (object.source != null) {
                    var html = object.loadItems(object.source);
                    object.element.innerHTML = html;
                    var innerElement = object.host.find('ul:first');
                    if (innerElement.length > 0) {
                        object.refresh();
                        object._createMenu(innerElement[0]);
                        object._render();
                    }
                }
            }

            if (key == 'autoCloseOnClick') {
                if (value == false) {
                    $(document).unbind('mousedown.menu' + this.element.id, object._closeAll);
                }
                else {
                    $(document).bind('mousedown.menu' + this.element.id, object, object._closeAll);
                }
            }
            else if (key == 'mode' || key == 'width' || key == 'height' || key == 'showTopLevelArrows') {
                object.refresh();

                if (key == 'mode') {
                    object._render(value, oldvalue);
                }
                else object._applyOrientation();
            }
            else if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }
        }
    });
})(jQuery);

(function ($) {
    $.jqx._jqxMenu.jqxMenuItem = function(id, parentId, type) {
        var menuItem =
        {
            // gets the id.
    	    id: id,
            // gets the parent id.
            parentId: parentId,
            // gets the parent item instance.
            parentItem: null,
            // gets the anchor element.
            anchor: null,
            // gets the type
            type: type,
            // gets whether the item is disabled.
            disabled: false,
            // gets the item's level.
            level: 0,
            // gets a value whether the item is opened.
            isOpen: false,
            // has sub elements.
            hasItems: false,
            // li element
            element: null,
            subMenuElement: null,
            // arrow element.
            arrow: null,
            // left, right, center
            openHorizontalDirection: 'right',
            // up, down, center
            openVerticalDirection: 'down',
            closeOnClick: true
         }
        return menuItem;
    }; // 
})(jQuery);
/*
* Depends:
*   jqxcore.js
*/
(function ($) {

    $.jqx.jqxWidget('jqxExpander', '', {});

    $.extend($.jqx._jqxExpander.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the expanding animation duration.
            this.expandAnimationDuration = 350,
            // Type: Number
            // Default: 250
            // Gets or sets the collapsing animation duration.
            this.collapseAnimationDuration = 400,
            // Type: Bool
            // Default: true;
            // Gets or sets expander's state (collapsed or expanded).
            this.expanded = true;
            // Type: Bool
            // Default: false
            // Gets or sets whether the expander is disabled.
            this.disabled = false;
            // Type: String
            // Default: slide
            // Gets or sets the animation type. Possible values ['slide', 'fade', 'none'].
            this.animationType = 'slide';
            // Type: String
            // Default: top
            // Gets or sets header's position. Possible values ['top', 'bottom']
            this.headerPosition = 'top';
            // Type: String
            // Default: click
            // Gets or sets user interaction used for expanding or collapsing the content. Possible values ['click', 'dblclick', 'mouseenter', 'none'].
            this.toggleMode = 'click';
            // Type: String
            // Default: right
            // Gets or sets header's arrow position. Possible values ['left', 'right'].
            this.arrowPosition = 'right';
            // Type: Bool
            // Default: true
            // Gets or sets whether header's arrow is going to be shown.
            this.showArrow = true;
            // Type: String
            // Default: auto
            // Gets or sets expander's height. Possible values - 'auto' and string like this 'Npx' where N is any Number.
            this.height = 'auto';
            // Type: String
            // Default: auto
            // Gets or sets expander's width. Possible values - 'auto' and string like this 'Npx' where N is any Number.
            this.width = 'auto';
            // Type: Object
            // Default: null
            // Gets or sets expander's content. Possible value is any object.
            this._content = null;
            // Type: Boolean
            // Default: true
            // Gets or sets whether the expander's hover state is enabled.            
            this.enableHover = true;
            // Type: String
            // Default: header
            // Gets or sets the toggle behavior of the expander. Possible values ['header', 'arrow']
            this.toggleBehaviour = 'header';


            this._header = null;
            this._triggerMethod = undefined;
            this._contentResizeMethod = undefined;
            this._firstSlideExpand = true;
            this._events =
			 [
			    'expanding', 'expanded', 'collapsing', 'collapsed'
             ];
            this._directions = {
                'left': 'right',
                'right': 'left',
                'top': 'bottom',
                'bottom': 'top'
            };
            // Messages for invalid argument exceptions.
            this._invalidArgumentExceptions = {
                'invalidExpandAnimationDuration': 'The duration of the expanding animation is invalid.',
                'invalidCollapseAnimationDuration': 'The duration of the collapsing animation is invalid.',
                'invalidAnimationType': 'The animation type is invalid.',
                'invalidHeaderPosition': 'The header position is invalid.',
                'invalidToggleMode': 'The toggle mode is invalid.',
                'invalidArrowPosition': 'The arrow position is invalid.',
                'invalidExpanderSize': 'This size is not valid.',
                'invalidExpanderStructure': 'Please add 2 sub div elements to your html that will represent the expander header and content.'
            };
        },

        //Creating new instance of the expander.
        //Getting some key parts of the expander (header, content).
        //Validating properties, renderering, performing layout, applying theme, adding event listeners.
        //Collapsing the expander if necessary (if expanded == false).
        createInstance: function (args) {
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-expander'));
            this.host.css('visibility', 'hidden');
            this._header = this.host.children('.' + this.toThemeProperty('jqx-expander-header', true));
            this._content = this.host.children('.' + this.toThemeProperty('jqx-expander-content', true));
            this._setExpanderSize();

            var subDivs = this.host.children('div');
            if (subDivs.length > 0) {
                if (this._header.length == 0) {
                    this._header = $(subDivs[0]);
                    this._header.addClass(this.toThemeProperty('jqx-widget-header'));
                    this._header.addClass(this.toThemeProperty('jqx-expander-header'));
                }

                if (this._content.length == 0 && subDivs.length > 1) {
                    this._content = $(subDivs[1]);
                    this._content.addClass(this.toThemeProperty('jqx-widget-content'));
                    this._content.addClass(this.toThemeProperty('jqx-expander-content'));
                }
            }

            try {
                if (this._header == null || this._content == null) {
                    throw this._invalidArgumentExceptions['invalidExpanderStructure'];
                }
            } catch (exception) {
                alert(exception.Data);
            }

            this._createExpander();

            var me = this;

            if (this.expanded) {
                this._header.addClass(this.toThemeProperty('jqx-expander-header-expanded'));
                this._content.addClass(this.toThemeProperty('jqx-expander-content-expanded'));
                this._header.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                var arrowDiv = this.host.find('.jqx-expander-arrow');
                arrowDiv.addClass(this.toThemeProperty('jqx-expander-arrow-expanded'));
            }

            this.host.css('visibility', 'visible');
        },

        // This method sets the jqxExpander width and height properties.
        _setExpanderSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
        },

        //Method used in create instance and property change hadler
        _createExpander: function () {
            var content = this._content[0];
            $.data(content, 'isAnimating', false);
            this._firstSlideExpand = true;

            this._validateProperties();
            this._render(true);
            this._applyTheme();
            this._performLayout();
            this._addEventHandlers();

            if (!this.expanded) {
                this._absoluteCollapse();
            }

            var self = this;
        },

        //Collapsing the expander so it's going to be ready for expanding with any animation.
        //For use only in the creation (or property change handler).
        //In the end of the method I'm setting display to none, because when using images there's
        //displacement along the loading proccess this display none is fixing it.
        _absoluteCollapse: function (self) {
            var self = self || this;
            if (self.animationType !== 'none') {
                self._content.css('visibility', 'hidden');
            }
            if (self.animationType === 'slide') {
                self._slideCollapse(0);
            } else if (self.animationType === 'fade') {
                self._fadeCollapse(0);
            } else if (self.animationType === 'none') {
                self._toggleCollapse();
            }
            if ((!self.height || self.height === 'auto') && self.animationType !== 'none') {
                self._content.height(0);
            }
            this._header.removeClass(this.toThemeProperty('jqx-expander-header-expanded'));
            this._content.removeClass(this.toThemeProperty('jqx-expander-content-expanded'));
            self._raiseEvent(3);
        },

        //Validating all properties of the expander and throwing an exception if there's invalid property.
        _validateProperties: function () {
            try {
                if (this.expandAnimationDuration <= 0) {
                    throw this._invalidArgumentExceptions['invalidExpandAnimationDuration'];
                }
                if (this.collapseAnimationDuration <= 0) {
                    throw this._invalidArgumentExceptions['invalidCollapseAnimationDuration'];
                }
                if ((parseInt(this.width) <= 0 || parseInt(this.height) <= 0) &&
                (this.width != 'auto' && this.height != 'auto' ||
                this.width != undefined && this.height != undefined)) {
                    throw this._invalidArgumentExceptions['invalidExpanderSize'];
                }
                if (this.animationType != 'slide' && this.animationType != 'fade' && this.animationType != 'none') {
                    throw this._invalidArgumentExceptions['invalidAnimationType'];
                }
                if (this.headerPosition != 'top' && this.headerPosition != 'bottom') {
                    throw this._invalidArgumentExceptions['invalidHeaderPosition'];
                }
                if (this.toggleMode != 'click' && this.toggleMode != 'none' &&
             this.toggleMode != 'dblclick' && this.toggleMode != 'mouseenter') {
                    throw this._invalidArgumentExceptions['invalidToggleMode'];
                }
                if (this.arrowPosition != 'left' && this.arrowPosition != 'right') {
                    throw this._invalidArgumentExceptions['invalidArrowPosition'];
                }
            } catch (exception) {
                alert(exception);
            }
        },

        //Attaching event listeners.
        _addEventHandlers: function (oldBehavior) {
            var self = this;
            var content = this._content;
            var headerArrow = this._header.children(this.toThemeProperty('.jqx-expander-arrow', true));

            if (this.toggleBehaviour != 'arrow') {
                this.removeHandler(this._header, 'click');
                this.removeHandler(this._header, 'dblclick');
                this.removeHandler(this._header, 'mouseover');
            }
            else {
                this.removeHandler(headerArrow, 'click');
                this.removeHandler(headerArrow, 'dblclick');
                this.removeHandler(headerArrow, 'mouseover');
            }

            if (oldBehavior != undefined && oldBehavior != this.toggleBehavior) {
                if (oldBehavior == 'arrow') {
                    this.removeHandler(headerArrow, 'click');
                    this.removeHandler(headerArrow, 'dblclick');
                    this.removeHandler(headerArrow, 'mouseover');
                }
                else {
                    this.removeHandler(this._header, 'click');
                    this.removeHandler(this._header, 'dblclick');
                    this.removeHandler(this._header, 'mouseover');
                }
            }
            this.removeHandler(this._header, 'mouseenter');
            this.removeHandler(this._header, 'mouseleave');
            this.removeHandler(this._header, 'mousedown');
            this.removeHandler(this._header, 'mouseup');
            this.removeHandler(this._header, 'selectstart');


            if (this._triggerMethod === undefined) {
                self._triggerMethod = function (event) {
                    self._expanderTrigger(self);
                    return false;
                };
            }
            var toggleElement = this.toggleBehaviour == 'arrow' ? headerArrow : this._header;
            this.addHandler(this._header, 'mousedown', function () {
                return false;
            });

            this.addHandler(this._header, 'mouseup', function () {
                return false;
            });

            this.addHandler(this._header, 'selectstart', function () {
                return false;
            });

            switch (this.toggleMode) {
                case 'click':
                    this.addHandler(toggleElement, 'click', this._triggerMethod);
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-toggle-none'));
                    break;
                case 'dblclick':
                    this.addHandler(toggleElement, 'dblclick', this._triggerMethod);
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-toggle-none'));
                    break;
                case 'mouseenter':
                    this.addHandler(toggleElement, 'mouseover', this._triggerMethod);
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-toggle-none'));
                    break;
                case 'none':
                    this._header.addClass(this.toThemeProperty('jqx-expander-header-toggle-none'));
                    break;

            }
            this.removeHandler($(window), 'resize.expander' + this.element.id);
            this.addHandler($(window), 'resize.expander' + this.element.id, function () {
                if ($.data(content, 'isAnimating') == false) {
                    self._performLayout();
                }
            });

            var isTouchDevice = $.jqx.mobile.isTouchDevice();

            this.addHandler(this._header, 'mouseenter', function () {
                if (!self.disabled && self.enableHover && !isTouchDevice) {
                    self._header.addClass(self.toThemeProperty('jqx-expander-header-hover'));
                    self._header.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                }
            });
            this.addHandler(this._header, 'mouseleave', function () {
                if (!self.disabled && self.enableHover && !isTouchDevice) {
                    self._header.removeClass(self.toThemeProperty('jqx-expander-header-hover'));
                    self._header.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                }
            });
        },

        //Expanding or collapsing the expander. Depending on it's current state and disabled property.
        _expanderTrigger: function (expander) {
            if (!expander.disabled) {
                if (expander.expanded) {
                    expander.collapse();
                } else {
                    expander.expand();
                }
            }
        },

        //Renderering the expander.
        //If this method is called in the initialization phase (initialize == true) adding wrapper to the content (because of the fixed size expanding and collapsing)
        //This method is also appending the elements (header, content, $contentWrapper) in the correct order and calling headerRender
        _render: function (initialize) {
            if (initialize) {
                this._headerRender();
            }
            switch (this.headerPosition) {
                case 'top':
                    this._header.detach();
                    this._content.detach();
                    this._header.appendTo(this.host);
                    this._content.appendTo(this.host);
                    break;
                case 'bottom':
                    this._header.detach();
                    this._content.detach();
                    this._content.appendTo(this.host);
                    this._header.appendTo(this.host);
                    break;
            }

            // position should be set to 'relative' as this fixes 'overflow' setting issue in IE6 and IE7. 
            this._content.wrap('<div class="jqx-expander-contentWrapper" style="background-color: transparent; margin: 0; padding: 0; position: relative; overflow: hidden;">');
            this.$contentWrapper = this._content.closest('.jqx-expander-contentWrapper');
        },

        //This method is positioning and resizing all components of the expander and calling headerPerformLayout.
        _performLayout: function () {
            if (!$.data(this._content[0], 'isAnimating')) {
                var width = this.host.width();
                this._headerPerformLayout();

                if (this.height && this.height !== 'auto') {
                    this.host.height(parseInt(this.height) + 'px');
                    var borderAndPaddingHeight = parseInt(this._content.css('border-top-width')) + parseInt(this._content.css('border-bottom-width')) +
                        parseInt(this._content.css('padding-bottom')) + parseInt(this._content.css('padding-top'));
                    this._content.height(parseInt(this.host.innerHeight()) - parseInt(this._header.outerHeight()) - borderAndPaddingHeight);
                    $.data(this._content, 'contentHeight', this._content.height());
                } else {
                    this._header.height('auto');
                    this._content.height('auto');
                    this.host.height('auto');
                    $.data(this._content, 'contentHeight', 'auto');
                }
                if (this.width) {
                    if (this.width == 'auto' && $.browser.msie && $.browser.version < 8) {
                        this.host.width(width);
                    }
                    else {
                        this.host.width(this.width);
                    }
                } else {
                    this.host.width('100%');
                }
                return;
                //     this._content.css('position', 'relative');
            }
        },

        //Adding div element containing the arrow as background and wrapper for the content of the header. Adding these elements in the correct order.
        _headerRender: function () {
            var arrowDiv = $('<div class="' + this.toThemeProperty('jqx-expander-arrow') + '"></div>');
            var headerContent = $('<div class="' + this.toThemeProperty('jqx-expander-header-content') + '"></div>');
            headerContent.html(this._header.html());
            this._header.empty();

            arrowDiv.appendTo(this._header);
            headerContent.appendTo(this._header);

            if (this.showArrow) {
                var arrowOrientation = 'jqx-expander-arrow-' + ((this.expanded) ? (this._directions[this.headerPosition]) : (this.headerPosition));
                var arrowOrientationClassName = arrowOrientation;
                arrowDiv.addClass(this.toThemeProperty(arrowOrientationClassName));
            }
        },

        //Positioning and resizing all header elements (arrow div and header's content wrapper).
        _headerPerformLayout: function () {
            var headerArrow = this._header.children(this.toThemeProperty('.jqx-expander-arrow', true));
            var headerContent = this._header.children(this.toThemeProperty('.jqx-expander-header-content', true));
            var arrowWidth = headerArrow.outerWidth();
            var headerWidth = this._header.innerWidth();
            switch (this.arrowPosition) {
                case 'left':
                    headerArrow.removeClass(this.toThemeProperty('jqx-expander-arrow-align-right'));
                    headerArrow.addClass(this.toThemeProperty('jqx-expander-arrow-align-left'));
                    headerArrow.css('float', 'left');
                    break;
                case 'right':
                    headerArrow.removeClass(this.toThemeProperty('jqx-expander-arrow-align-left'));
                    headerArrow.addClass(this.toThemeProperty('jqx-expander-arrow-align-right'));
                    headerArrow.css('float', 'right');
                    break;
            }

            this._fitContent(this, headerArrow, headerContent)

            // vertical position headerContent
            var headerHeight = this._header.height();
            var middle = parseInt(headerHeight) / 2 - parseInt(headerContent.height()) / 2;
            headerContent.css('margin-top', middle + 'px');

            // vertical position arrow
            var middle = parseInt(headerHeight) / 2 - parseInt(headerArrow.height()) / 2;
            headerArrow.css('margin-top', middle + 'px');
        },

        //        _getImageSize: function () {
        //            var width = 0;
        //            var height = 0;
        //            if (this.showArrow) {
        //                width = height = 16;
        //                var imageUrl = this._header.children(this.toThemeProperty('.jqx-expander-arrow', true)).css('backgroundImage');
        //                imageUrl = imageUrl.replace('url("', '');
        //                imageUrl = imageUrl.replace('")', '');
        //                imageUrl = imageUrl.replace('url(', '');
        //                imageUrl = imageUrl.replace(')', '');

        //                var image = $('<span><img style="height: auto; width: auto; visibility:hidden;" src="' + imageUrl + '"  /></span>');
        //                image.appendTo(document.body);
        //                var self = this;
        //                width = image.width();
        //                height = image.height();

        //                image.load(function () {
        //                    self._fitContent(self, headerArrow, headerContent)
        //                    image.remove();
        //                    width = image.width();
        //                    height = image.height();
        //                });

        //                width = Math.max(16, width);
        //                height = Math.max(16, height);

        //                image.remove();
        //            }

        //            return { width: width, height: height };
        //        },

        _fitContent: function (expander, headerArrow, headerContent) {
            //            if (expander.showArrow) {
            //                headerContent.width(
            //                    parseInt(expander.width) -
            //                    parseInt(headerArrow.outerWidth()) -
            //                    parseInt(expander._header.css('padding-left')) -
            //                    parseInt(expander._header.css('padding-right')) -
            //                    parseInt(headerArrow.css('padding-left')) -
            //                    parseInt(headerArrow.css('padding-right')) -
            //                    parseInt(headerContent.css('padding-left')) -
            //                    parseInt(headerContent.css('padding-right')));
            //            }
        },

        _showSpecificArrowDirection: function (direction) {
            this._header.children(this.toThemeProperty('.jqx-expander-arrow', true)).removeClass(this.toThemeProperty('jqx-expander-arrow-' + this._directions[direction]));
            this._header.children(this.toThemeProperty('.jqx-expander-arrow', true)).addClass(this.toThemeProperty('jqx-expander-arrow-' + direction));
        },

        _applyTheme: function () {
            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-expander-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this._header.addClass(this.toThemeProperty('jqx-expander-header-disabled'));
                this._content.addClass(this.toThemeProperty('jqx-expander-content-disabled'));
            }
            switch (this.headerPosition) {
                case 'top':
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-bottom'));
                    this._content.removeClass(this.toThemeProperty('jqx-expander-content-top'));
                    this._header.addClass(this.toThemeProperty('jqx-expander-header-top'));
                    this._content.addClass(this.toThemeProperty('jqx-expander-content-bottom'));
                    break;
                case 'bottom':
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-top'));
                    this._content.removeClass(this.toThemeProperty('jqx-expander-content-bottom'));
                    this._header.addClass(this.toThemeProperty('jqx-expander-header-bottom'));
                    this._content.addClass(this.toThemeProperty('jqx-expander-content-top'));
                    break;
            }
        },

        destroy: function () {
            this.host
			.removeClass();
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this._events[id];
            args = arg;
            args.owner = this;
            var cancel = false;

            if (id == 1) {
                if (this.showArrow) {
                    this._showSpecificArrowDirection(this._directions[this.headerPosition]);
                }
                this.expanded = true;
            }
            if (id == 3) {
                if (this.showArrow) {
                    this._showSpecificArrowDirection(this.headerPosition);
                }
                this.expanded = false;
            }

            var event = new jQuery.Event(evt);
            event.owner = this;
            event.cancel = cancel;
            var result = this.host.trigger(event);

            if (!event.cancel) {
                if (id == 0) {
                    if (this.showArrow) {
                        this._showSpecificArrowDirection(this._directions[this.headerPosition]);
                    }
                    return event.cancel;
                }
                if (id == 2) {
                    if (this.showArrow) {
                        this._showSpecificArrowDirection(this.headerPosition);
                    }
                    return event.cancel;
                }
            }

            return result;
        },

        //Method which is collapsing the expander. It's making backup of expander's content size and performing toggle or animation for
        //hidding the content. This method is also raising event which indicates that the expander is collapsed.
        collapse: function () {
            var result = this._raiseEvent(2);
            if (result)
                return;
            if (this.element != null) {
                if (this.animationType != 'none') {

                    $.data(this._content[0], 'isAnimating', true);
                    this._content.css('visibility', 'visible');

                    if (!this.height || this.height === 'auto') {
                        this._content.height($.data(this._content, 'contentHeight'));
                    }
                    this._content.stop();
                    if (this.animationType == 'slide') {
                        this._slideCollapse(this.collapseAnimationDuration, true);
                    } else if (this.animationType == 'fade') {
                        this._fadeCollapse(this.collapseAnimationDuration, true);
                    }
                } else {
                    this._toggleCollapse(true);
                }
            }
            this._header.removeClass(this.toThemeProperty('jqx-expander-header-expanded'));
            this._header.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this._content.removeClass(this.toThemeProperty('jqx-expander-content-expanded'));
            var arrowDiv = this.host.find('.jqx-expander-arrow');
            arrowDiv.removeClass(this.toThemeProperty('jqx-expander-arrow-expanded'));
        },

        _toggleCollapse: function (raiseEvent) {
            var self = this;
            $(self._content).hide(0, function () { self._collapseCallback(self, raiseEvent) });
        },

        //If the expander is not with fixed size I'm fading out not just the content wrapper but also the content
        //because contentWrapper's children are not fading
        _fadeCollapse: function (duration, raiseEvent) {
            var self = this;
            if (!this.height || this.height === 'auto') {
                $(self._content).fadeOut(duration, function () { self._collapseCallback(self, raiseEvent) });
            } else {
                $(self._content).fadeTo(duration, 0.01, function () { self._collapseCallback(self, raiseEvent) });
            }
        },

        //Hidding all data. If the size isn't fixed than the contentWrapper's display is going to be set to 'none', because it must not take any space.
        _collapseCallback: function (expander, raiseEvent) {
            $.data(expander._content[0], 'isAnimating', false);
            if (raiseEvent) {
                expander._raiseEvent(3);
                expander._content.css('height', '0');
                expander._content.css('visibility', 'hidden');
            }
        },

        _slideCollapse: function (duration, raiseEvent) {
            var self = this;
            var content = self._content;
            var $header = $(self._header);
            var borderOffset = Math.max(2, parseInt($header.css('border-bottom-width')) + parseInt($header.css('border-top-width')));
            if (isNaN(borderOffset)) borderOffset = 0;
            // to do: check why this is necessary.
            if ($.browser.mozilla) {
                borderOffset = 1;
            }

            content.stop();
            switch (this.headerPosition) {
                case 'top':
                    if (duration == 0) {
                        $(content).css({ 'margin-top': -parseInt(content.height()) - borderOffset + 'px' });
                    }
                    else {
                        $(content).animate({ 'margin-top': -parseInt(content.height()) - borderOffset + 'px' }, duration, 'easeInOutSine', function () { self._collapseCallback(self, raiseEvent) });
                    }
                    break;
                case 'bottom':
                    if (this.height && this.height !== 'auto') {
                        $(content).animate({ 'bottom': -parseInt(content.height()) + 'px' }, duration, 'linear', function () { self._collapseCallback(self, raiseEvent) });
                    } else {
                        $(content).animate({ 'margin-bottom': -parseInt(content.height()) + 'px' }, duration, 'easeInOutSine', function () { self._collapseCallback(self, raiseEvent) });
                    }
                    break;
            }
        },

        //Method used for expanding the expander's content. It's calling any animation or toggle method required for hidding expander's content.
        //It's also raising event which indicates that the expander is expanded.
        expand: function () {
            this._raiseEvent(0);
            if (this.element != null) {
                if (this.animationType != 'none') {

                    this._content.css('display', 'block');

                    $.data(this._content[0], 'isAnimating', true);
                    this._content.css('visibility', 'visible');

                    if ((!this.height || this.height === 'auto')) {
                        this._content.height($.data(this._content, 'contentHeight'));
                    }
                    else if (this._content.height() == 0) {
                        this._content.height(this._content.height($.data(this._content, 'contentHeight')));
                    }

                    this._content.stop();
                    if (this.animationType == 'slide') {
                        this._slideExpand(this.expandAnimationDuration, true);
                    } else if (this.animationType == 'fade') {
                        this._fadeExpand(this.expandAnimationDuration, true);
                    }
                } else {
                    this._content.css('display', 'none');
                    this._toggleExpand(true);
                }
            }
            this._header.addClass(this.toThemeProperty('jqx-expander-header-expanded'));
            this._header.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this._content.addClass(this.toThemeProperty('jqx-expander-content-expanded'));
            var arrowDiv = this.host.find('.jqx-expander-arrow');
            arrowDiv.addClass(this.toThemeProperty('jqx-expander-arrow-expanded'));
        },

        _toggleExpand: function (raiseEvent) {
            var self = this;
            this._content.css('visibility', 'visible');

            if ((!this.height || this.height === 'auto')) {
                this._content.height($.data(this._content, 'contentHeight'));
            }
            else if (this._content.height() == 0) {
                this._content.height(this._content.height($.data(this._content, 'contentHeight')));
            }
            $(self._content).show(0, function () { self._expandCallback(self, raiseEvent) });
        },

        _fadeExpand: function (duration, raiseEvent) {
            var self = this;
            if (!this.height || this.height === 'auto') {
                $(self._content).fadeIn(duration, function () { self._expandCallback(self, raiseEvent) });
            } else {
                $(self._content).fadeTo(duration, 1, function () { self._expandCallback(self, raiseEvent) });
            }
        },

        _expandCallback: function (expander, raiseEvent) {
            $.data(expander._content[0], 'isAnimating', false);
            if (raiseEvent) {
                expander._raiseEvent(1);
            }
        },


        //Setting container's margin or top/bottom
        //Using _firstSlideExpand because when the current expander is a child and it's created after his parent creation
        //it's margin must be fixed. That's why I'm passing raiseEvent = false parameter, because it's just fix and I don't need to raise event.
        _slideExpand: function (duration, raiseEvent) {
            if (this._firstSlideExpand) {
                this._slideCollapse(0, false);
                this._firstSlideExpand = false;
            }
            var self = this;
            var content = this._content;
            content.stop();
            switch (this.headerPosition) {
                case 'top':
                    if (duration == 0) {
                        $(content).css({ 'margin-top': '0px' });
                    }
                    else {
                        $(content).animate({ 'margin-top': '0px' }, duration, 'easeInOutSine', function () { self._expandCallback(self, raiseEvent) });
                    }
                    break;
                case 'bottom':
                    if (this.height && this.height !== 'auto') {
                        $(content).animate({ 'bottom': '0px' }, duration, 'linear', function () { self._expandCallback(self, raiseEvent) });
                    } else {
                        $(content).animate({ 'margin-bottom': '0px' }, duration, 'easeInOutSine', function () { self._expandCallback(self, raiseEvent) });
                    }
                    break;
            }
        },

        //Setting content's height
        setContentHeight: function (height) {
            this._content.height(height);
            $.data(this._content, 'contentHeight', height)
            if (height === 'auto') {
                this._content.css('minHeight', 0);
            }
            if (!this.expanded) {
                this._absoluteCollapse();
            }
        },

        //This method is disabling the expander.
        disable: function () {
            this.disabled = true;
            this._applyTheme();
        },

        //This method is enabling the expander.
        enable: function () {
            this.disabled = false;
            this.host.removeClass(this.toThemeProperty('jqx-expander-disabled'));
            this._header.removeClass(this.toThemeProperty('jqx-expander-header-disabled'));
            this._content.removeClass(this.toThemeProperty('jqx-expander-content-disabled'));
        },

        //This method is setting specific content to the expander's header.
        setHeaderContent: function (content) {
            if (content) {
                var headerContainer = this._header.children(this.toThemeProperty('.jqx-expander-header-content', true));
                headerContainer.html(content);
                this._performLayout();
            }
        },

        //This method is setting specific content to the expander.
        setContent: function (content) {
            if (content) {
                this._content.html(content);
                this._performLayout();
            }
        },

        //Getting expander's current content.
        getContent: function () {
            if (this._content != null) {
                return this._content.html();
            }

            return null;
        },

        //Getting expander's header content.
        getHeaderContent: function () {
            return this._header.children(this.toThemeProperty('.jqx-expander-header-content', true)).html();
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == 'theme') {
                this.host.removeClass();
                this.host.addClass(this.toThemeProperty('jqx-widget'));
                this.host.addClass(this.toThemeProperty('jqx-expander'));
                this._header.removeClass();
                this._header.addClass(this.toThemeProperty('jqx-widget-header'));
                this._header.addClass(this.toThemeProperty('jqx-expander-header'));
                this._content.removeClass();
                this._content.addClass(this.toThemeProperty('jqx-widget-content'));
                this._content.addClass(this.toThemeProperty('jqx-expander-content'));
                var arrowDiv = this.host.find('.jqx-expander-arrow');
                var headerContent = this.host.find('.jqx-expander-header-content');
                arrowDiv.removeClass();
                arrowDiv.addClass(this.toThemeProperty('jqx-expander-arrow'));
                headerContent.addClass(this.toThemeProperty('jqx-expander-header-content'));
                this._applyTheme();
                if (this.showArrow) {
                    var arrowOrientation = 'jqx-expander-arrow-' + ((this.expanded) ? (this._directions[this.headerPosition]) : (this.headerPosition));
                    var arrowOrientationClassName = arrowOrientation;
                    arrowDiv.addClass(this.toThemeProperty(arrowOrientationClassName));
                }
                this._headerPerformLayout();
            }

            if (key == 'showArrow') {
                var arrows = this.host.find('.' + this.toThemeProperty('jqx-expander-arrow', true));
                if (value) {
                    arrows.css('visibility', 'visible');
                }
                else {
                    arrows.css('visibility', 'hidden');
                }
            }
            else if (key == 'arrowPosition') {
                this._headerPerformLayout();
            }
            else if (key == 'toggleMode') {
                this._addEventHandlers();
            }
            else if (key == 'toggleBehavior') {
                this._addEventHandlers(oldvalue);
            }
            else if (key == 'disabled') {
                this.disabled = value;
                if (value) {
                    this.host.addClass(this.toThemeProperty('jqx-expander-disabled'));
                    this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                    this._header.addClass(this.toThemeProperty('jqx-expander-header-disabled'));
                    this._content.addClass(this.toThemeProperty('jqx-expander-content-disabled'));
                } else {
                    this.host.removeClass(this.toThemeProperty('jqx-expander-disabled'));
                    this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
                    this._header.removeClass(this.toThemeProperty('jqx-expander-header-disabled'));
                    this._content.removeClass(this.toThemeProperty('jqx-expander-content-disabled'));
                }
            } else if (key == 'expanded' && !value) {
                var expandAnimationDuration = this.expandAnimationDuration;
                var collapseAnimationDuration = this.collapseAnimationDuration;
                this.collapseAnimationDuration = 0;
                this.expandAnimationDuration = 0;
                this.collapse();
                this.expandAnimationDuration = expandAnimationDuration;
                this.collapseAnimationDuration = collapseAnimationDuration;
            } else if (key == 'expanded' && value) {
                var heightBackup = undefined;

                if (key == 'expanded' && value) {
                    heightBackup = this._content.height();
                }

                if (heightBackup) {
                    this._content.height(heightBackup);
                    $.data(this._content, 'contentHeight', heightBackup)
                }

                var expandAnimationDuration = this.expandAnimationDuration;
                var collapseAnimationDuration = this.collapseAnimationDuration;
                this.collapseAnimationDuration = 0;
                this.expandAnimationDuration = 0;
                this.expand();
                this.expandAnimationDuration = expandAnimationDuration;
                this.collapseAnimationDuration = collapseAnimationDuration;
            } else if (key == 'headerPosition') {
                var header = $('<div></div>').html(this._header.children(this.toThemeProperty('.jqx-expander-header-content', true)).html());
                var content = $('<div></div>').html(this._content.html());

                var headerClassList = this._header.attr('class').split(/\s+/);
                var contentClassList = this._content.attr('class').split(/\s+/);
                var heightBackup = undefined;

                if (key == 'expanded' && value) {
                    heightBackup = this._content.height();
                }

                this.$contentWrapper.detach();
                this._content.detach();
                this._header.detach();

                this._content = content;
                this._header = header;
                this._header.addClass(this.toThemeProperty('jqx-widget-header'));
                this._header.addClass(this.toThemeProperty('jqx-expander-header'));
                this._content.addClass(this.toThemeProperty('jqx-widget-content'));
                this._content.addClass(this.toThemeProperty('jqx-expander-content'));

                for (var i = 0; i < headerClassList.length; i++) {
                    this._header.addClass(headerClassList[i]);
                }
                for (var i = 0; i < contentClassList.length; i++) {
                    this._content.addClass(contentClassList[i]);
                }
                this._createExpander();

                if (heightBackup) {
                    this._content.height(heightBackup);
                    $.data(this._content, 'contentHeight', heightBackup)
                }
            }
        }
    });
})(jQuery);
/*
* jqxnavigationbar.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*/
/*
* Depends:
*   jqxcore.js
*   jqxexpander.js
*/
(function ($) {

    $.jqx.jqxWidget('jqxNavigationBar', '', {});

    $.extend($.jqx._jqxNavigationBar.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the expanding animation duration.
            this.expandAnimationDuration = 350,
            // Type: Number
            // Default: 250
            // Gets or sets the collapsing animation duration.
            this.collapseAnimationDuration = 350,
            // Type: Bool
            // Default: false
            // Gets or sets whether the navigation bar is disabled.
            this.disabled = false;
            // Type: String
            // Default: slide
            // Gets or sets the animation type. Possible values ['slide', 'fade', 'none'].
            this.animationType = 'slide';
            // Type: String
            // Default: click
            // Gets or sets user interaction used for expanding or collapsing any item. Possible values ['click', 'dblclick', 'mouseenter', 'none'].
            this.toggleMode = 'click';
            // Type: String
            // Default: single
            // Gets or sets navigation bar's expand mode. Possible values ['single', 'multiple', 'toggle', 'none'].
            this.expandMode = 'single';
            // Type: String
            // Default: auto
            // Gets or sets navigation bar's size mode. Possible values ['fitAvailableHeight', 'maxItemHeight', 'auto'].
            this.sizeMode = 'auto';
            // Type: Bool
            // Default: true
            // Gets or sets whether header's arrow is going to be shown.
            this.showArrow = true;
            // Type: String
            // Default: right
            // Gets or sets arrow's position.
            this.arrowPosition = 'right';
            // Type: Array
            // Default: undefined
            // Gets or sets the expanded items in multiple expand mode. Sample value [1,0,2]. When the value of this variable is like in the sample
            // the first, second and third items will be expanded.
            this.expandedIndexes = undefined;
            // Type: Number
            // Default: -1
            // Gets or sets the expanded index for single or toggle expand modes.
            this.expandedIndex = -1;
            // Type: String
            // Default: auto
            // Gets or sets expander's height. Possible values - every value which is valid in CSS.
            this.height = 'auto';
            // Type: String
            // Default: auto
            // Gets or sets expander's width. Possible values - every value which is valid in CSS.
            this.width = 'auto';

            //Private variables.
            this._expandersList = [];
            this._toggleModesBackup = [];
            this._expandedIndexes = undefined;
            this._maxHeight = 0;
            this._currentExpandedItem = null;
            //Events.
            this._events =
            [
                'expandingItem', 'expandedItem', 'collapsingItem', 'collapsedItem'
            ];
            // Messages for invalid argument exceptions.
            this._invalidArgumentExceptions = {
                'invalidStructure': 'Invalid structure of the navigation bar!',
                'invalidExpandAnimationDuration': 'Expand animation duration is invalid!',
                'invalidCollapseAnimationDuration': 'Collapse animation duration is invalid!',
                'invalidAnimationType': 'The animation type is invalid!',
                'invalidToggleMode': 'The toggle mode is invalid!',
                'invalidArrowPosition': 'The arrow position is invalid!',
                'invalidNavigationBarSize': 'This size is not valid!',
                'invalidExpandModeException': 'The expand mode you\'ve entered is invalid!',
                'invalidExpandedIndexesLength': 'expandedIndexes is not with valid size.',
                'invalidExpandedIndex': 'Invalid expanded index!',
                'invalidModeException': 'You can\'t use fitAvailableHeight in multiple expand mode!',
                'invalidSizeMode': 'You have entered invalid size mode!'
            };
        },

        createInstance: function (args) {
            this.host
			.addClass(this.toThemeProperty('jqx-navigationbar'));
            this.host
			.addClass(this.toThemeProperty('jqx-widget'));
            this.host.css('visibility', 'hidden');

            var headersList = this.host.children('.' + this.toThemeProperty('jqx-expander-header', true)).detach();
            var contentsList = this.host.children('.' + this.toThemeProperty('jqx-expander-content', true)).detach();
            try {
                if (headersList.length === 0 || contentsList.length === 0) {
                    var elements = this._addExpanderClasses();
                    headersList = elements['headersList'];
                    contentsList = elements['contentsList'];
                }
                if (headersList.length != contentsList.length) {
                    throw this._invalidArgumentExceptions['invalidStructure'];
                }
            } catch (exception) {
                alert(exception);
            }

            this.headersList = headersList;
            this.contentsList = contentsList;
            this._createNavigationBar(headersList, contentsList);
            this.host.css('visibility', 'visible');
        },

        //[optimize]
        _addExpanderClasses: function () {
            var subDivs = this.host.children('div');
            if (subDivs.length > 0) {
                var headersList = [];
                for (var i = 0, j = 0; i < subDivs.length; i += 2, j++) {
                    headersList[j] = $(subDivs[i]).detach();
                    headersList[j].addClass(this.toThemeProperty('jqx-widget-header'));
                    headersList[j].addClass(this.toThemeProperty('jqx-expander-header'));
                }
                if (subDivs.length > 1) {
                    var contentsList = [];
                    for (var i = 1, j = 0; i < subDivs.length; i += 2, j++) {
                        contentsList[j] = $(subDivs[i]).detach();
                        contentsList[j].addClass(this.toThemeProperty('jqx-widget-content'));
                        contentsList[j].addClass(this.toThemeProperty('jqx-expander-content'));
                    }
                } else {
                    throw this._invalidArgumentExceptions['invalidStructure'];
                }
            } else {
                throw this._invalidArgumentExceptions['invalidStructure'];
            }
            return { headersList: headersList, contentsList: contentsList }
        },

        //[optimize]
        _updateExpandedIndexes: function (length) {
            if (length == null || length == undefined) length = 0;

            this._expandedIndexes = [];
            if (this.expandedIndexes === undefined) {
                this.expandedIndexes = [];
            } else {
                for (var i = 0; i < length; i++) {
                    this._expandedIndexes[i] = false;
                }
                for (var i = 0; i < this.expandedIndexes.length; i++) {
                    if (this.expandedIndexes[i] < length) {
                        this._expandedIndexes[this.expandedIndexes[i]] = true;
                    }
                }
            }
        },

        //In the end of the method I'm setting host's height because there is about a pixel displacement
        //in MSIE (version 8 or older), Opera, Safari and Chrome. In toggle expand mode we're
        //using just the margin fix.
        _createNavigationBar: function (headersList, contentsList) {
            this._updateExpandedIndexes(headersList.length);
            this._render(headersList, contentsList);
            this._refreshNavigationBar();
        },

        //[optimize]
        _refreshNavigationBar: function () {
            this._validateProperties();
            this._fixView();
            this._performLayout();
            this._fixView();
        },

        //[optimize]
        _collapseItems: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                if (!this._expandedIndexes[i]) {
                    $(this._expandersList[i]).jqxExpander('_absoluteCollapse');
                }
            }
        },

        //[optimize]
        _removeArrayItem: function (item, array) {
            var index = this._getItemIndex(item, array);
            if (index >= 0) {
                array.splice(index, 1);
            }
        },

        //[optimize]
        _removeEventHandlers: function () {
            var self = this;
            $.each(this._expandersList, function () {
                var expander = this;
                self.removeHandler($(expander), 'expanded');
                self.removeHandler($(expander), 'collapsed');
                self.removeHandler($(expander), 'collapsing');
                self.removeHandler($(expander), 'expanding');
                self.removeHandler($(window), 'load');
            });
        },

        //[optimize]
        _addEventHandlers: function (expander) {
            var self = this;

            this.addHandler($(expander), 'mouseenter', function () {
                expander.css('z-index', 100);
            });

            this.addHandler($(expander), 'mouseleave', function () {
                expander.css('z-index', 0);
            });

            this.addHandler($(expander), 'expanded', function () {
                var index = self._getItemIndex(expander, self._expandersList);
                self._expandedIndexes[index] = true;
                if (self.expandMode === 'single') {
                    self.expandedIndex = index;
                }
                $(this).css('margin-bottom', 0);
                var itemIndex = self._getItemIndex(this, self._expandersList);
                // check whether the item exists before pushing it in the Array. Otherwise, calling the expandAt method multiple times will result in wrong array. 
                // To Do: check this logic once more.
                if (self.expandedIndexes[itemIndex] == undefined) {
                    self.expandedIndexes.push(itemIndex);
                }

                self._raiseEvent(1, self._getItemIndex(this, self._expandersList));
            });
            this.addHandler($(expander), 'collapsed', function () {
                var index = self._getItemIndex(expander, self._expandersList);
                self._expandedIndexes[index] = false;
                self._removeArrayItem(self._getItemIndex(this, self._expandersList), self.expandedIndexes);

                self._raiseEvent(3, self._getItemIndex(this, self._expandersList));
            });
            this.addHandler($(expander), 'collapsing', function (event) {
                self._raiseEvent(2, self._getItemIndex(this, self._expandersList));
                if (self.expandMode === 'single') {
                    $(this).jqxExpander('toggleMode', self.toggleMode);
                }
            });
            this.addHandler($(expander), 'expanding', function (event) {
                if (self.expandMode === 'single' || self.expandMode === 'toggle') {

                    if (self._currentExpandedItem &&
                        self._getItemIndex(event.owner.element, self._expandersList) >= 0) {

                        self.collapseAt(self._getItemIndex(self._currentExpandedItem, self._expandersList));
                        $(self._currentExpandedItem).jqxExpander('toggleMode', self.toggleMode);

                        //Fixing displacement in opera, chrome, safari and versions of MSIE before 9
                        if ((self.sizeMode === 'maxItemHeight' || self.sizeMode === 'fitAvailableHeight') &&
                            ($.browser.webkit || $.browser.opera ||
                            $.browser.msie && parseInt($.browser.version) < 9)) {
                            //   $(this).css('margin-bottom', -1);
                        }
                    }
                    self._currentExpandedItem = this;

                    if (self.expandMode === 'single') {
                        $(this).jqxExpander('toggleMode', 'none');
                    }
                    //Make it slowly
                    if (self.animationType !== 'none') {
                        //            self._disableItems();
                        //              setTimeout(function () { self._enableItems(); }, Math.max(self.expandAnimationDuration, self.collapseAnimationDuration));
                    }
                }
                self._raiseEvent(0, self._getItemIndex(this, self._expandersList));
            });
            this.addHandler($(window), 'load', function (event) {
                if (self.sizeMode === 'maxItemHeight') {
                    self._refreshNavigationBar();
                }
            });
        },

        //[optimize]
        _getItemIndex: function (item, array) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === item || array[i][0] === item) {
                    return i;
                }
            }
            return -1;
        },

        //[optimize]
        _validateProperties: function () {
            try {
                if ((parseInt(this.width) <= 0 || parseInt(this.height) <= 0) &&
                (this.width !== 'auto' && this.height !== 'auto' ||
                this.width !== undefined && this.height !== undefined)) {
                    throw this._invalidArgumentExceptions['invalidNavigationBarSize'];
                }
                if (this.animationType !== 'slide' && this.animationType !== 'none' && this.animationType !== 'fade') {
                    throw this._invalidArgumentExceptions['invalidAnimationType'];
                }
                if (this.expandMode !== 'single' && this.expandMode !== 'multiple' &&
                this.expandMode !== 'none' && this.expandMode !== 'toggle') {
                    throw this._invalidArgumentExceptions['invalidExpandMode'];
                }
                if (this.expandedIndexes.length > this._expandersList.length) {
                    throw this._invalidArgumentExceptions['invalidExpandedIndexesLength'];
                }
                if (this.expandedIndex > (this._expandersList.length - 1)) {
                    throw this._invalidArgumentExceptions['invalidExpandedIndex'];
                }
                if (this.sizeMode !== 'auto' && this.sizeMode !== 'fitAvailableHeight' &&
                this.sizeMode !== 'maxItemHeight') {
                    throw this._invalidArgumentExceptions['invalidSizeMode'];
                }
                if (this.expandMode === 'multiple' && this.sizeMode === 'fitAvailableHeight') {
                    throw this._invalidArgumentExceptions['invalidModeException'];
                }
            } catch (exception) {
                alert(exception);
            }
        },

        //[optimize]
        _render: function (headersList, contentsList) {
            this._maxHeight = 0;
            for (var i = 0; i < headersList.length; i++) {
                var expanderHeader = $(headersList[i]).addClass(this.toThemeProperty('jqx-expander-header'));
                var expanderContent = $(contentsList[i]).addClass(this.toThemeProperty('jqx-expander-content'));
                expanderHeader.addClass(this.toThemeProperty('jqx-widget-header'));
                expanderContent.addClass(this.toThemeProperty('jqx-widget-content'));
                var expanderDiv = $('<div class="' + this.toThemeProperty('jqx-expander') + '"></div>');
                expanderDiv.append(expanderHeader);
                expanderDiv.append(expanderContent);
                this.host.append(expanderDiv);
                this._expandersList[i] = this._createExpanderByNavigationBarExpandMode(i, expanderDiv);
                var contentHeight = parseInt($(this._expandersList[i]).children('.jqx-expander-contentWrapper', true).children(this.toThemeProperty('.jqx-expander-content', true)).outerHeight());

                if (this._maxHeight < contentHeight) {
                    this._maxHeight = contentHeight;
                }
                this._addEventHandlers(this._expandersList[i]);
            }
        },

        //[optimize]
        _performLayout: function () {
            var headersHeight = 0;
            for (var j = 0; j < this._expandersList.length; j++) {
                headersHeight += this._expandersList[j].children(this.toThemeProperty('.jqx-expander-header', true)).outerHeight();
            }
            switch (this.sizeMode) {
                case 'auto':
                    break;
                case 'fitAvailableHeight':
                    for (var i = 0; i < this._expandersList.length; i++) {
                        var borders = 0;
                        borders += parseInt(this._expandersList[0].children(this.toThemeProperty('.jqx-expander-header', true)).css('border-top-width')) +
                                   parseInt(this._expandersList[this._expandersList.length - 1].children('.jqx-expander-contentWrapper').
                                   children(this.toThemeProperty('.jqx-expander-content', true)).css('border-bottom-width'));
                        var contentHeight = parseInt(this.height) - headersHeight; // -this._expandersList.length * borders;
                        $(this._expandersList[i]).jqxExpander('setContentHeight', contentHeight);
                    }
                    break;
                case 'maxItemHeight':
                    for (var i = 0; i < this._expandersList.length; i++) {
                        $(this._expandersList[i]).jqxExpander('setContentHeight', this._maxHeight);
                    }
                    break;
            }
            this._performHostLayout(headersHeight);
        },

        //[optimize]
        _performHostLayout: function (headersHeight) {
            if (this.width) {
                this.host.width(this.width);
            }
            for (var i = 0; i < this._expandersList.length; i++) {
                if (!this._expandedIndexes[i]) {
                    $(this._expandersList[i]).jqxExpander('expanded', false);
                } else {
                    $(this._expandersList[i]).jqxExpander('expanded', true);
                }
            }
            if ((this.sizeMode === 'maxItemHeight') &&
                (this.expandMode === 'single')) {
                var contentBorderHeight = parseInt(this._expandersList[this._expandersList.length - 1].children('.jqx-expander-contentWrapper', true).
                                   children(this.toThemeProperty('.jqx-expander-content', true)).css('border-bottom-width'));
                this.host.height(headersHeight + this._maxHeight + contentBorderHeight + 'px');
            } else if ((this.sizeMode === 'fitAvailableHeight') &&
                       (this.expandMode === 'toggle' || this.expandMode === 'single')) {
                this.host.height(parseInt(this.height));
            } else {
                this.host.height('auto');
            }
        },

        //[optimize]
        _fixView: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                this._expandersList[i].css('position', 'relative');
                var expanderHeader = this._expandersList[i].children('.' + this.toThemeProperty('jqx-expander-header', true));
                var expanderContent = this._expandersList[i].children('.' + this.toThemeProperty('jqx-expander-contentWrapper', true));
                //    expanderHeader.css('border-top-width', '0px');
                if (i > 0)
                    expanderHeader.css('margin-top', '-1px');

                expanderContent.css('border-left-width', '0px');
                expanderContent.css('border-right-width', '0px');
                expanderContent.css('border-top-width', '0px');
                expanderContent.css('border-bottom-width', '0px');
                expanderContent.children().css('border-top-width', '0px');

                if (i !== 0 && i !== (this._expandersList.length - 1)) {
                    this._removeRoundedCorners(this._expandersList[i], true, true);
                }
                if (i === 0) {
                    this._removeRoundedCorners(this._expandersList[i], false, true);
                }
                if (i === (this._expandersList.length - 1)) {
                    this._removeRoundedCorners(this._expandersList[i], true, false);
                }
            }
        },

        //[optimize]
        _createExpander: function (expanderDiv, toggleModeValue) {
            var expander = $(expanderDiv).jqxExpander({ expanded: true, width: this.width, arrowPosition: this.arrowPosition, expandAnimationDuration: this.expandAnimationDuration,
                collapseAnimationDuration: this.collapseAnimationDuration, disabled: this.disabled, animationType: this.animationType, showArrow: this.showArrow, toggleMode: toggleModeValue
                , theme: this.theme
            });
            return expander;
        },

        //[optimize]
        _createExpanderByNavigationBarExpandMode: function (expanderIndex, expanderDiv) {
            var self = this;
            var expander;
            switch (this.expandMode) {
                case 'single':
                    expander = this._singleExpandModeCreateExpander(expanderIndex, expanderDiv);
                    break;
                case 'multiple':
                    expander = this._multipleExpandModeCreateExpander(expanderIndex, expanderDiv);
                    break;
                case 'toggle':
                    expander = this._toggleExpandModeCreateExpander(expanderIndex, expanderDiv);
                    break;
                case 'none':
                    expander = this._noneExpandModeCreateExpander(expanderIndex, expanderDiv);
                    break;
            }
            return expander;
        },

        //[optimize]
        _disableItems: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                this._toggleModesBackup[i] = $(this._expandersList[i]).jqxExpander('toggleMode');
                $(this._expandersList[i]).jqxExpander('toggleMode', 'none');
            }
        },

        //[optimize]
        _enableItems: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                $(this._expandersList[i]).jqxExpander('toggleMode', this._toggleModesBackup[i]);
            }
        },

        //[optimize]
        _isValidIndex: function (index) {
            return (index < this._expandersList.length);
        },

        //[optimize]
        _toggleExpandModeCreateExpander: function (expanderIndex, expanderDiv) {
            var expander;
            if (this.expandedIndex === expanderIndex) {
                expander = this._createExpander(expanderDiv, this.toggleMode, true);
                this._expandedIndexes[expanderIndex] = true;
                this._currentExpandedItem = expander;
            } else {
                expander = this._createExpander(expanderDiv, this.toggleMode, false);
                this._expandedIndexes[expanderIndex] = false;
            }
            return expander;
        },

        //[optimize]
        _singleExpandModeCreateExpander: function (expanderIndex, expanderDiv) {
            var expander;
            if ((this.expandedIndex === -1 && expanderIndex === 0) || this.expandedIndex === expanderIndex) {
                expander = this._createExpander(expanderDiv, this.toggleMode, true);
                this._expandedIndexes[expanderIndex] = true;
                this._currentExpandedItem = expander;
            } else {
                expander = this._createExpander(expanderDiv, this.toggleMode, false);
                this._expandedIndexes[expanderIndex] = false;
            }
            return expander;
        },

        //[optimize]
        _multipleExpandModeCreateExpander: function (expanderIndex, expanderDiv) {
            var expander;
            if (this._expandedIndexes[expanderIndex]) {
                expander = this._createExpander(expanderDiv, this.toggleMode, this._expandedIndexes[expanderIndex]);
                this._expandedIndexes[expanderIndex] = true;
            } else {
                expander = this._createExpander(expanderDiv, this.toggleMode, this._expandedIndexes[expanderIndex]);
                this._expandedIndexes[expanderIndex] = false;
            }
            return expander;
        },

        //[optimize]
        _noneExpandModeCreateExpander: function (expanderIndex, expanderDiv) {
            var expander;
            if (this._expandedIndexes[expanderIndex]) {
                expander = this._createExpander(expanderDiv, this.toggleMode, this._expandedIndexes[expanderIndex]);
                this._expandedIndexes[expanderIndex] = true;
            } else {
                expander = this._createExpander(expanderDiv, this.toggleMode, this._expandedIndexes[expanderIndex]);
                this._expandedIndexes[expanderIndex] = false;
            }
            return expander;
        },

        //[optimize]
        _removeRoundedCorners: function (expander, top, bottom) {
            if (top) {
                var header = $(expander).children(this.toThemeProperty('.jqx-expander-header', true));
                header.css('-moz-border-radius', '0px');
                expander.css('-moz-border-radius-topleft', '0px');
                expander.css('-moz-border-radius-topright', '0px');
                header.css('border-radius', '0px');
                expander.css('border-top-left-radius', '0px');
                expander.css('border-top-right-radius', '0px');
            }
            if (bottom) {
                var content = $(expander).children('.jqx-expander-contentWrapper').children(this.toThemeProperty('.jqx-expander-content', true));
                content.css('-moz-border-radius', '0px');
                expander.css('-moz-border-radius-topleft', '0px');
                expander.css('-moz-border-radius-topright', '0px');
                content.css('border-radius', '0px');
                expander.css('border-bottom-left-radius', '0px');
                expander.css('border-bottom-right-radius', '0px');
            }
        },

        //Collapsing item with  any index
        collapseAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('collapse');
                this._expandedIndexes[index] = false;

                this.expandedIndexes.splice(index, 1);
                if (this.expandedIndex == index) {
                    this.expandedIndex = -1;
                }
            }
        },

        //Expanding item with  any index
        expandAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('expand');
                this._expandedIndexes[index] = true;
                this.expandedIndex = index;
            }
        },

        // gets item states.
        getItemStates: function () {
            return this._expandedIndexes;
        },

        //Disabling item with  any index
        disableAt: function (index) {
            if (this._isValidIndex(index)) {
                if (!$(this._expandersList[index]).jqxExpander('disabled')) {
                    $(this._expandersList[index]).jqxExpander('disabled', true)
                }
            }
        },

        //Enabling item with  any index
        enableAt: function (index) {
            if (this._isValidIndex(index)) {
                if ($(this._expandersList[index]).jqxExpander('disabled')) {
                    $(this._expandersList[index]).jqxExpander('disabled', false)
                }
            }
        },

        //Setting content to item with  any index
        setContentAt: function (index, content) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('setContent', content);
            }
        },

        //Setting header content to item with  any index
        setHeaderContentAt: function (index, content) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('setHeaderContent', content);
            }
        },

        //Getting header content of item with  any index
        getHeaderContentAt: function (index) {
            if (this._isValidIndex(index)) {
                return $(this._expandersList[index]).jqxExpander('getHeaderContent');
            }
            return null;
        },

        //Getting content of item with  any index
        getContentAt: function (index) {
            if (this._isValidIndex(index)) {
                return $(this._expandersList[index]).jqxExpander('getContent');
            }
            return null;
        },

        //Forbidding expand/collapse for item with specific index
        lockAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('toggleMode', 'none');
            }
        },

        //Allowing expand/collapse for item with specific index. This method is useful
        //only when the item is already locked.
        unlockAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('toggleMode', this.toggleMode);
            }
        },

        //Showing the arrow of expander with specific index
        showArrowAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('showArrow', true);
            }
        },

        //Hiding the arrow of expander with specific index
        hideArrowAt: function (index) {
            if (this._isValidIndex(index)) {
                $(this._expandersList[index]).jqxExpander('showArrow', false);
            }
        },

        //This method is disabling the navigation bar.
        disable: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                this.disableAt(i);
            }
        },

        //This method is enabling the navigation bar.
        enable: function () {
            for (var i = 0; i < this._expandersList.length; i++) {
                this.enableAt(i);
            }
        },

        destroy: function () {
            this.host
			.removeClass();
            this.host.remove();
        },

        //[optimize]
        _raiseEvent: function (id, itemIndex) {
            if (itemIndex == undefined) {
                itemIndex = -1;
            }
            var eventType = this._events[id];
            var event = $.Event(eventType);

            event.owner = itemIndex;
            event.item = itemIndex;

            var result = this.host.trigger(event);
            return result;
        },

        //[optimize]
        _getHeaders: function () {
            var headersList = [];
            for (var i = 0; i < this._expandersList.length; i++) {

                headersList[i] = $('<div class="' + this.toThemeProperty('jqx-expander-header') + '" />').append($(this._expandersList[i]).jqxExpander('getHeaderContent'));
            }
            return headersList;
        },

        //[optimize]
        _getContents: function () {
            var contentsList = [];
            for (var i = 0; i < this._expandersList.length; i++) {
                contentsList[i] = $('<div class="' + this.toThemeProperty('jqx-expander-content') + '" />').append($(this._expandersList[i]).jqxExpander('getContent'));
            }
            return contentsList;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            this._validateProperties();
            if (key === 'arrowPosition') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ arrowPosition: value });
                });
            }
            else if (key === 'expandAnimationDuration') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ expandAnimationDuration: value });
                });
            }
            else if (key === 'collapseAnimationDuration') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ collapseAnimationDuration: value });
                });
            }
            else if (key === 'showArrow') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ showArrow: value });
                });
            }
            else if (key === 'toggleMode') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ toggleMode: value });
                });
            }
            else if (key === 'theme') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ theme: value });
                });
            }
            else if (key === 'animationType') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ animationType: value });
                });
            }
            else if (key === 'disabled') {
                $.each(object._expandersList, function () {
                    this.jqxExpander({ disabled: value });
                });
            }
            else if (key === 'expandedIndexes') {
                $.each(object.expandedIndexes, function () {
                    if (value) {
                        object.expandAt(this);
                    }
                    else {
                        object.collapseAt(this);
                    }
                });
            }
            else
                if (key === 'disabled') {
                    if (value) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                } else {
                    this._updateExpandedIndexes(this.headersList.length);
                    this._refreshNavigationBar();
                }
        }
    });
})(jQuery);(function ($) {

    $.jqx.jqxWidget("jqxNumberInput", "", {});
    $.jqx.textInput = {};
    $.extend($.jqx.textInput, {

        addHandler: function (element) {
            $(element).data('lastValue', $(element).val());
            $(element).bind('keyup.textchange', $.jqx.textInput.handler);
            $(element).bind('cut.textchange paste.textchange input.textchange', $.jqx.textInput.delayedHandler);
        },

        removeHandler: function (element) {
            $(element).unbind('.textchange');
        },

        handler: function (event) {
            $.jqx.textInput.triggerIfChanged($(this));
        },

        delayedHandler: function (event) {
            var element = $(this);
            setTimeout(function () {
                $.jqx.textInput.triggerIfChanged(element);
            }, 25);
        },

        triggerIfChanged: function (element) {
            var current = element.val();
            var lastValue = element.data('lastValue');

            if (current !== element.data('lastValue')) {
                element.trigger('textchange', [element.data('lastValue')]);
                var showPlaceHolder = false;
                if (element.val() === '' && element.val() != lastValue) {
                    showPlaceHolder = true;
                    element.data('emptyValue', true);
                }
                else {
                    showPlaceHolder = false;
                    element.data('emptyValue', false);
                }

                element.trigger('showPlaceHolder', showPlaceHolder);
                element.data('lastValue', current);
            }
        }
    });

    $.extend($.jqx._jqxNumberInput.prototype, {

        defineInstance: function () {
            // Type: Number
            // Default: 0
            // Gets or sets the input's value.
            this.value = null;
            // Type: Number
            // Default: 0
            // Gets or sets the input's number.
            this.decimal = 0;
            // Type: Number
            // Default= 0
            // Gets or sets the input's minimum value.
            this.min = -99999999;
            // Type: Number
            // Default: 0
            // Gets or sets the input's maximum value.
            this.max = 99999999;
            //Type: Number.
            //Default: 0.
            //Sets width of the input in pixels. Only positive values have effect.
            this.width = null;
            //Type: String;
            //Default: Invalid value.
            this.validationMessage = "Invalid value";
            //Type: Number.
            //Default: 0.
            //Sets height of the input in pixels. 
            this.height = 50;
            // Sets the alignment.
            this.textAlign = "right";
            // Type: Bool
            // Default: false
            // Sets the readOnly state of the input.
            this.readOnly = false;
            // Type: Char
            // Default: "_"
            // Sets the prompt char displayed when an editable char is empty.
            // Possible Values: "_"; "?"; "#".
            this.promptChar = "_";
            // Type: Number
            // Default: 2
            // Indicates the number of decimal places to use in numeric values.
            this.decimalDigits = 2;
            // Type= Char
            // Default: '.'
            // Gets or sets the char to use as the decimal separator in numeric values.
            this.decimalSeparator = ".";
            // Type= Char
            // Default: ";"
            // Gets or sets the string that separates groups of digits to the left of the
            // decimal in numeric values.
            this.groupSeparator = ",";
            // Type: Number
            // Default: '3'
            // Gets or sets the number of digits in each group to the left of the decimal in numeric values.
            this.groupSize = 3;
            // Type: String
            // Default: empty
            // Gets or sets the string to use as currency or percentage symbol.
            this.symbol = '';
            // Type: Bool
            // Default: "left"
            // Gets or sets the position of the symbol in the input.
            this.symbolPosition = "left";
            // Type: Number
            // Default: 8
            // Gets or sets the digits in the input
            this.digits = 8;
            // Type: Bool
            // Default: false
            // Gets or sets whether the decimal is negative.
            this.negative = false;
            // Type: Bool
            // Default: false
            // Gets or sets the string to use as negative symbol.
            this.negativeSymbol = '-';
            // Type: Bool
            // Default: false
            // Gets or sets whether the widget is disabled.
            this.disabled = false;
            // Type: String
            // Default: advanced
            // Gets or sets the input mode. When the mode is simple, the text is formatted after editing. When the mode is advanced, the text is formatted while the user is in edit mode.
            // Available values: [simple, advanced]
            this.inputMode = 'advanced';
            // Type: Boolean
            // Default: false
            // shows the spin buttons. 
            this.spinButtons = false;
            // Type: Number
            // Default: 18
            // Sets the spin buttons width
            this.spinButtonsWidth = 18;
            // Type: Number
            // Default: 1
            // sets the spin button step.
            this.spinButtonsStep = 1;
            // validates the value to be in the min-max range when the user leaves the input.
            this.autoValidate = true;
            // none, advanced or simple
            this.spinMode = 'advanced';
            // NumberInput events.
            this.events =
			[
		  	   'valuechanged',
               'textchanged',
               'mousedown',
               'mouseup',
               'keydown',
               'keyup',
               'keypress',
      		];

            this.invalidArgumentExceptions =
            [
                'invalid argument exception'
            ];
        },

        // creates the number input's instance. 
        createInstance: function (args) {
            this.render();
        },

        render: function()
        {
            this.host
             .attr({
                 role: "numberInput"
             });

            if (this.officeMode || (this.theme && this.theme.indexOf('office') != -1)) {
                if (this.spinButtonsWidth == 18) this.spinButtonsWidth = 15;
            }

            if ($.jqx.mobile.isTouchDevice()) {
                this.inputMode = 'simple';
                this.spinMode = 'simple';
            }

            if (this.decimalSeparator == '') this.decimalSeparator = ' ';
            this.host.addClass(this.toThemeProperty('jqx-input'));
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));

            if (this.spinButtons) {
                this._spinButtons();
            }
            else {
                this.numberInput = $("<input autocomplete='off' type='textarea'/>").appendTo(this.host);
                this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));
                this.numberInput.addClass(this.toThemeProperty('jqx-widget-content'));
            }
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.numberInput.attr('name', name);

            if ($.jqx.mobile.isTouchDevice() || this.inputMode == 'textbox') {
                var me = this;

                this.numberInput.bind('change', function () {
                    if (!me.parsing) me.parsing = true;
                    if (me.parsing) {
                        if (me.numberInput.val() && me.numberInput.val().indexOf('-') == 0) {
                            me.setvalue('negative', true);
                        }
                        else me.setvalue('negative', false);
                        me.ValueString = me.GetValueString(me.numberInput.val(), me.decimalSeparator, me.decimalSeparator != '');
                        me.ValueString = new Number(me.ValueString).toFixed(me.decimalDigits);
                        me._parseDecimalInSimpleMode();
                        me.decimal = me.ValueString;
                        me.parsing = false;
                    }
                });
            }

            var vars = $.data(this.host[0], 'jqxNumberInput');
            vars.jqxNumberInput = this;
            var me = this;
            this.addHandler(this.host, 'loadContent', function (event) {
                me._render();
            });

            if (this.host.parents('form').length > 0) {
                this.host.parents('form').bind('reset', function () {
                    setTimeout(function () {
                        me.setDecimal(0);
                    }, 10);
                });
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.numberInput.addClass(self.toThemeProperty('jqx-input-disabled'));
                    instance.numberInput.attr("disabled", true);
                }
                else {
                    instance.host.removeClass(self.toThemeProperty('jqx-input-disabled'));
                    instance.numberInput.attr("disabled", false);
                }

                if (instance.spinButtons && instance.host.jqxRepeatButton) {
                    instance.upbutton.jqxRepeatButton({ disabled: value });
                    instance.downbutton.jqxRepeatButton({ disabled: value });
                }
            }

            if (this.disabled) {
                this.numberInput.addClass(this.toThemeProperty('jqx-input-disabled'));
                this.numberInput.attr("disabled", true);
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }

            this.selectedText = "";
            this.decimalSeparatorPosition = -1;

            var id = this.element.id;
            var el = this.element;
            var self = this;

            this.oldValue = this._value();

            this.items = new Array();
            var value = this.value;
            var decimal = this.decimal;
            this._initializeLiterals();
            this._render();

            this.setDecimal(decimal);
            var me = this;
            setTimeout(function () {
                me._render(false);
            }
           , 100);

            this._addHandlers();
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this._render();
            }
        },

        wheel: function (event, self) {
            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;

            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }

            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);
                if (event.preventDefault)
                    event.preventDefault();

                if (event.originalEvent != null) {
                    event.originalEvent.mouseHandled = true;
                }

                if (event.stopPropagation != undefined) {
                    event.stopPropagation();
                }

                if (result) {
                    result = false;
                    event.returnValue = result;
                    return result;
                }
                else {
                    return false;
                }
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            if (delta < 0) {
                this.spinDown();
            }
            else this.spinUp();
            return true;
        },

        _addHandlers: function () {
            var self = this;
            this.addHandler(this.numberInput, 'mousedown',
            function (event) {
                return self._raiseEvent(2, event)
            });

            this._mousewheelfunc = this._mousewheelfunc || function (event) {
                if (!self.editcell) {
                    self.wheel(event, self);
                    return false;
                }
            };

            this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);
            var isOperaMini = $.jqx.mobile.isOperaMiniMobileBrowser();
            if (isOperaMini) {
                this.inputMode = 'simple';

                var mini = $.jqx.mobile.isOperaMiniBrowser();
                if (mini) {
                    self.numberInput.attr("readonly", true);
                }

                this.addHandler($(document), 'click.' + this.element.id, self._exitSimpleInputMode, self);
            }

            this.addHandler(this.numberInput, 'focus',
            function (event) {
                if (self.inputMode == 'simple') {
                    //          self._enterSimpleInputMode(event, self);
                }

                $.data(self.numberInput, "selectionstart", self._selection().start);
                self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                if (self.spincontainer) {
                    self.spincontainer.addClass(self.toThemeProperty('jqx-numberinput-focus'));
                }
            });

            this.addHandler(this.numberInput, 'blur',
            function (event) {
                if (self.inputMode == 'simple') {
                    self._exitSimpleInputMode(event, self, false);
                }
                if (self.autoValidate) {
                    var val = self.getDecimal();
                    if (val > self.max) {
                        self.setDecimal(self.max);
                    }
                    if (val < self.min) {
                        self.setDecimal(self.min);
                    }
                }

                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
                if (self.spincontainer) {
                    self.spincontainer.removeClass(self.toThemeProperty('jqx-numberinput-focus'));
                }
                return true;
            });

            this.addHandler(this.numberInput, 'mouseup',
            function (event) {
                return self._raiseEvent(3, event)
            });

            this.addHandler(this.numberInput, 'keydown',
            function (event) {
                return self._raiseEvent(4, event)
            });

            this.addHandler(this.numberInput, 'keyup',
            function (event) {
                return self._raiseEvent(5, event)
            });

            this.addHandler(this.numberInput, 'keypress',
            function (event) {
                return self._raiseEvent(6, event)
            });
        },

        _removeHandlers: function () {
            var self = this;
            this.removeHandler(this.numberInput, 'mousedown');
            var isOperaMini = $.jqx.mobile.isOperaMiniMobileBrowser();
            if (isOperaMini) {
                this.removeHandler($(document), 'click.' + this.element.id, self._exitSimpleInputMode, self);
            }

            this.removeHandler(this.numberInput, 'focus');
            this.removeHandler(this.numberInput, 'blur');
            this.removeHandler(this.numberInput, 'mouseup');
            this.removeHandler(this.numberInput, 'keydown');
            this.removeHandler(this.numberInput, 'keyup');
            this.removeHandler(this.numberInput, 'keypress');
        },

        //[optimize]
        _spinButtons: function () {
            if (this.host.jqxRepeatButton) {
                if (!this.numberInput) {
                    this.numberInput = $("<input autocomplete='off' style='float: left;' type='textarea'/>");
                    this.numberInput.appendTo(this.host);
                    this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));
                    this.numberInput.addClass(this.toThemeProperty('jqx-widget-content'));
                }
                else {
                    this.numberInput.css('float', 'left');
                }

                this.spincontainer = $('<div style="float: left; height: 100%; overflow: hidden; position: relative;"></div>');
                this.host.append(this.spincontainer);
                this.upbutton = $('<div style="overflow: hidden; padding: 0px; margin-left: -1px; position: relative;"><div></div></div>');
                this.spincontainer.append(this.upbutton);
                this.upbutton.jqxRepeatButton({ overrideTheme: true, disabled: this.disabled, roundedCorners: 'top-right' });
                this.downbutton = $('<div style="overflow: hidden; padding: 0px; margin-left: -1px; position: relative;"><div></div></div>');
                this.spincontainer.append(this.downbutton);
                this.downbutton.jqxRepeatButton({ overrideTheme: true, disabled: this.disabled, roundedCorners: 'bottom-right' });

                var me = this;

                this.downbutton.addClass(this.toThemeProperty('jqx-fill-state-normal'));
                this.upbutton.addClass(this.toThemeProperty('jqx-fill-state-normal'));
                this.upbutton.addClass(this.toThemeProperty('jqx-rc-tr'));
                this.downbutton.addClass(this.toThemeProperty('jqx-rc-br'));

                this.addHandler(this.downbutton, 'mouseup', function (event) {
                    if (!me.disabled) {
                        me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        me._downArrow.removeClass(me.toThemeProperty('icon-arrow-down-selected'));
                    }
                });

                this.addHandler(this.upbutton, 'mouseup', function (event) {
                    if (!me.disabled) {
                        me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        me._upArrow.removeClass(me.toThemeProperty('icon-arrow-up-selected'));
                    }
                });

                this.removeHandler($(document), 'mouseup.' + this.element.id);
                this.addHandler($(document), 'mouseup.' + this.element.id, function (event) {
                    me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    me._upArrow.removeClass(me.toThemeProperty('icon-arrow-up-selected'));
                    me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    me._downArrow.removeClass(me.toThemeProperty('icon-arrow-down-selected'));
                });

                this.addHandler(this.downbutton, 'mousedown', function (event) {
                    if (!me.disabled) {
                        me.downbutton.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        me._downArrow.addClass(me.toThemeProperty('icon-arrow-down-selected'));
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                });

                this.addHandler(this.upbutton, 'mousedown', function (event) {
                    if (!me.disabled) {
                        me.upbutton.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        me._upArrow.addClass(me.toThemeProperty('icon-arrow-up-selected'));
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                });

                this.upbutton.hover(function () {
                    if (!me.disabled) {
                        me.upbutton.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                    }
                }, function () {
                    me.upbutton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                    me._upArrow.removeClass(me.toThemeProperty('icon-arrow-up-hover'));
                });

                this.downbutton.hover(function () {
                    if (!me.disabled) {
                        me.downbutton.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                    }
                }, function () {
                    me.downbutton.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                    me._downArrow.removeClass(me.toThemeProperty('icon-arrow-down-hover'));
                });

                this.upbutton.css('border-width', '0px');
                this.downbutton.css('border-width', '0px');

                if (this.disabled) {
                    this.upbutton[0].disabled = true;
                    this.downbutton[0].disabled = true;
                }
                else {
                    this.upbutton[0].disabled = false;
                    this.downbutton[0].disabled = false;
                }

                this.spincontainer.addClass(this.toThemeProperty('jqx-input'));
                this.spincontainer.addClass(this.toThemeProperty('jqx-rc-r'));
                this.spincontainer.css('border-width', '0px');
                this.spincontainer.css('border-left-width', '1px');

                this._upArrow = this.upbutton.find('div');
                this._downArrow = this.downbutton.find('div');

                this._upArrow.addClass(this.toThemeProperty('icon-arrow-up'));
                this._downArrow.addClass(this.toThemeProperty('icon-arrow-down'));
                this._upArrow.addClass(this.toThemeProperty('jqx-input-icon'));
                this._downArrow.addClass(this.toThemeProperty('jqx-input-icon'));
                var me = this;
                this._upArrow.hover(function () {
                    if (!me.disabled) {
                        me._upArrow.addClass(me.toThemeProperty('icon-arrow-up-hover'));
                    }
                }, function () {
                    me._upArrow.removeClass(me.toThemeProperty('icon-arrow-up-hover'));
                });
                this._downArrow.hover(function () {
                    if (!me.disabled) {
                        me._downArrow.addClass(me.toThemeProperty('icon-arrow-down-hover'));
                    }
                }, function () {
                    me._downArrow.removeClass(me.toThemeProperty('icon-arrow-down-hover'));
                });

                this.addHandler(this.downbutton, 'click', function () {
                    if (me._selection().start == 0) {
                        me._setSelectionStart(me.numberInput.val().length);
                    }

                    me.spinDown();
                });
                this.addHandler(this.upbutton, 'click', function () {
                    if (me._selection().start == 0) {
                        me._setSelectionStart(me.numberInput.val().length);
                    }
                    me.spinUp();
                });
            }
        },

        spinDown: function () {
            var me = this;

            if (me.spinMode == 'none')
                return;

            if (!me.disabled) {
                var olddecimal = me.decimal;
                var selection = this._selection();

                var decimal = parseFloat(me.decimal);
                if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;

                var dec = parseInt(me.decimal) + me.spinButtonsStep;
                dec = dec.toString().length;
                var validvalue = dec <= me.digits;

                if (me.spinMode != 'advanced') {
                    if (decimal > 0 && decimal + me.spinButtonsStep <= me.max && validvalue) {
                        var multiple = 1;
                        for (i = 0; i < me.decimalDigits; i++) {
                            multiple = multiple * 10;
                        }

                        var newvalue = (multiple * decimal) - (multiple * me.spinButtonsStep);
                        newvalue = newvalue / multiple;
                        if (newvalue < 0) newvalue = 0;

                        newvalue = this._parseDecimalValueToEditorValue(newvalue);
                        me._setDecimal(newvalue);
                    }
                }
                else {
                    var values = this._getspindecimal();
                    var separator = this._getSeparatorPosition();

                    var decimal = parseFloat(values.decimal);
                    if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;

                    var dec = parseInt(decimal) + me.spinButtonsStep;
                    dec = dec.toString().length;
                    var validvalue = dec <= me.digits;
                    var multiple = 1;

                    var separatorindex = values.decimal.indexOf(".");
                    if (separatorindex != -1) {
                        var divide = values.decimal.length - separatorindex - 1;
                        var multiple = 1;
                        for (var i = 0; i < divide; i++) {
                            multiple = multiple * 10;
                        }
                        decimal -= new Number(me.spinButtonsStep / multiple);
                        if (decimal < 0) decimal = 0;
                        decimal = decimal.toFixed(divide);
                        var separatorindex = decimal.toString().indexOf(".");
                        if (separatorindex == -1) {
                            decimal = decimal.toString() + '.';
                        }
                        var result = decimal.toString() + values.afterdecimal;
                        result = new Number(result);
                        result = result.toFixed(me.decimalDigits);
                        if (result >= me.min) {
                            result = this._parseDecimalValueToEditorValue(result);
                            me._setDecimal(result);
                        }
                    }
                    else {
                        if (decimal > 0 && decimal - me.spinButtonsStep <= me.max && validvalue) {
                            var newvalue = (multiple * decimal) - (multiple * me.spinButtonsStep);
                            newvalue = newvalue / multiple;
                            var result = newvalue.toString() + values.afterdecimal;
                            if (result < 0) result = 0;
                            if (result >= me.min) {
                                result = this._parseDecimalValueToEditorValue(result);
                                me._setDecimal(result);
                            }
                        }
                    }
                }

                if (result == undefined || this.inputMode != 'simple') {
                    this._setSelectionStart(selection.start);
                    return;
                }

                if (result != undefined && (olddecimal == undefined || olddecimal.toString().length == result.length)) {
                    this._setSelectionStart(selection.start);
                }
                else {
                    this._setSelectionStart(selection.start - 1);
                }
            }
        },

        _getspindecimal: function () {
            var selection = this._selection();
            var decimalString = "";
            var separatorPosition = this._getSeparatorPosition();
            var visibleItems = this._getVisibleItems();
            var prefix = this._getHiddenPrefixCount();
            var text = this.numberInput.val();

            if (this.numberInput.val().length == selection.start && selection.length == 0) {
                this._setSelection(selection.start, selection.start + 1);
                selection = this._selection();
            }

            var issimple = this.inputMode != 'advanced';

            for (i = 0; i < selection.start; i++) {
                if (issimple) {
                    var literal = text.substring(i, i + 1);
                    var isDigit = (!isNaN(parseInt(literal)));
                    if (isDigit) {
                        decimalString += literal;
                    }
                    if (literal == this.decimalSeparator) {
                        decimalString += literal;
                    }
                    continue;
                }

                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                    decimalString += visibleItems[i].character;
                }
                else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {
                    if (decimalString.length == 0) {
                        decimalString = "0";
                    }

                    decimalString += visibleItems[i].character;
                }

            }

            var afterdecimal = "";
            for (i = selection.start; i < visibleItems.length; i++) {
                if (issimple) {
                    var literal = text.substring(i, i + 1);
                    var isDigit = (!isNaN(parseInt(literal)));
                    if (isDigit) {
                        afterdecimal += literal;
                    }
                    if (literal == this.decimalSeparator) {
                        afterdecimal += literal;
                    }
                    continue;
                }

                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                    afterdecimal += visibleItems[i].character;
                }
                else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {
                    afterdecimal += visibleItems[i].character;
                }
            }

            return { decimal: this._parseDecimalValue(decimalString), afterdecimal: this._parseDecimalValue(afterdecimal) };
        },

        _parseDecimalValue: function (number) {
            if (this.decimalSeparator != '.') {
                var start = number.toString().indexOf(this.decimalSeparator);
                if (start >= 0) {
                    var result = number.toString().substring(0, start) + '.' + number.toString().substring(start + 1);
                    return result;
                }
            }
            return number;
        },

        _parseDecimalValueToEditorValue: function (number) {
            if (this.decimalSeparator != '.') {
                var start = number.toString().indexOf(".");
                if (start >= 0) {
                    var result = number.toString().substring(0, start) + this.decimalSeparator + number.toString().substring(start + 1);
                    return result;
                }
            }
            return number;
        },

        spinUp: function () {
            var me = this;

            if (me.spinMode == 'none')
                return;

            if (!me.disabled) {
                var selection = this._selection();

                var olddecimal = me.decimal;
                var decimal = parseFloat(me.decimal);
                if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;

                var dec = parseInt(me.decimal) + me.spinButtonsStep;
                dec = dec.toString().length;
                var validvalue = dec <= me.digits;

                if (me.spinMode != 'advanced') {
                    if (decimal + me.spinButtonsStep <= me.max && validvalue) {
                        var multiple = 1;
                        for (i = 0; i < me.decimalDigits; i++) {
                            multiple = multiple * 10;
                        }

                        var newvalue = (multiple * decimal) + (multiple * me.spinButtonsStep);
                        newvalue = newvalue / multiple;
                        newvalue = this._parseDecimalValueToEditorValue(newvalue);
                        me._setDecimal(newvalue);
                    }
                }
                else {
                    var values = this._getspindecimal();
                    var separator = this._getSeparatorPosition();

                    var decimal = parseFloat(values.decimal);
                    if (me.spinButtonsStep < 0) me.spinButtonsStep = 1;

                    var dec = parseInt(decimal) + me.spinButtonsStep;
                    dec = dec.toString().length;
                    var validvalue = dec <= me.digits;
                    var multiple = 1;

                    var separatorindex = values.decimal.indexOf(".");
                    if (separatorindex != -1) {
                        var divide = values.decimal.length - separatorindex - 1;
                        var multiple = 1;
                        for (i = 0; i < divide; i++) {
                            multiple = multiple * 10;
                        }
                        decimal += new Number(me.spinButtonsStep / multiple);
                        decimal = decimal.toFixed(divide);
                        var separatorindex = decimal.toString().indexOf(".");
                        if (separatorindex == -1) {
                            decimal = decimal.toString() + '.';
                        }
                        var result = decimal.toString() + values.afterdecimal;
                        result = new Number(result);
                        result = result.toFixed(me.decimalDigits);
                        var number = new Number(result).toFixed(me.decimalDigits);

                        if (number <= me.max) {
                            result = this._parseDecimalValueToEditorValue(result);
                            me._setDecimal(result);
                        }
                        else result = undefined;
                    }
                    else {
                        if (decimal + me.spinButtonsStep <= me.max && validvalue) {
                            var newvalue = (multiple * decimal) + (multiple * me.spinButtonsStep);
                            newvalue = newvalue / multiple;
                            var result = newvalue.toString() + values.afterdecimal;
                            var number = new Number(result).toFixed(me.decimalDigits);
                            if (number <= me.max) {
                                result = this._parseDecimalValueToEditorValue(result);
                                me._setDecimal(result);
                            }
                            else result = undefined;
                        }
                    }
                }

                if (result == undefined || this.inputMode != 'simple') {
                    this._setSelectionStart(selection.start);
                    return;
                }

                if (result != undefined && (olddecimal == undefined || olddecimal.toString().length == result.length)) {
                    this._setSelectionStart(selection.start);
                }
                else {
                    this._setSelectionStart(1 + selection.start);
                }
            }
        },

        _exitSimpleInputMode: function (event, self, checkbounds) {
            if (self == undefined) {
                self = event.data;
            }

            if (self == null) return;

            if (checkbounds == undefined) {
                if (event.target != null && self.element != null) {
                    if ((event.target.id != undefined && event.target.id.toString().length > 0 && self.host.find('#' + event.target.id).length > 0) || event.target == self.element) {
                        return;
                    }
                }

                var offset = self.host.offset();
                var left = offset.left;
                var top = offset.top;
                var width = self.host.width();
                var height = self.host.height();

                var targetOffset = $(event.target).offset();
                if (targetOffset.left >= left && targetOffset.left <= left + width)
                    if (targetOffset.top >= top && targetOffset.top <= top + height) {
                        return;
                    }
            }

            if ($.jqx.mobile.isOperaMiniBrowser()) {
                self.numberInput.attr("readonly", true);
            }

            if (self.disabled || self.readOnly)
                return;

            var enteredMode = $.data(self.numberInput, "simpleInputMode");
            if (enteredMode == null) return;

            $.data(self.numberInput, "simpleInputMode", null);
            this._parseDecimalInSimpleMode();
            return false;
        },

        _parseDecimalInSimpleMode: function () {
            var self = this;
            var isNegative = self.getvalue('negative');
            var decimal = this.ValueString;
            if (decimal == undefined) {
                decimal = this.GetValueString(this.numberInput.val(), this.decimalSeparator, this.decimalSeparator != "");
            }
            if (this.decimalSeparator != '.') {
                var indx = decimal.toString().indexOf(".");
                if (indx > 0) {
                    var prefix = decimal.toString().substring(0, indx);
                    var val = prefix + this.decimalSeparator + decimal.toString().substring(indx + 1);
                    decimal = val;
                }
            }

            var string = isNegative ? "-" : '';
            if (this.symbolPosition == 'left') {
                string += this.symbol;
            }
            var leadingDigitsCount = this.digits % this.groupSize;
            if (leadingDigitsCount == 0) {
                leadingDigitsCount = this.groupSize;
            }

            var decimalString = decimal.toString();
            string += decimalString;

            if (this.symbolPosition == 'right') {
                string += this.symbol;
            }

            self.numberInput.val(string);
        },

        //[optimize]
        _enterSimpleInputMode: function (event, self) {
            if (self == undefined) {
                self = event.data;
            }

            var selection = this._selection();

            if (self == null) return;
            var isNegative = self.getvalue('negative');

            var decimal = self.decimal;
            if (isNegative) {
                if (decimal > 0)
                    decimal = -decimal;
            }

            self.numberInput.val(decimal);
            $.data(self.numberInput, "simpleInputMode", true);

            if ($.jqx.mobile.isOperaMiniBrowser()) {
                self.numberInput.attr("readonly", false);
            }
            this._parseDecimalInSimpleMode();
            this._setSelectionStart(selection.start);
        },

        setvalue: function (name, value) {
            if (this[name] != undefined) {
                if (name == 'decimal') {
                    this._setDecimal(value);
                }
                else {
                    this[name] = value;
                    this.propertyChangedHandler(this, name, value, value);
                }
            }
        },

        getvalue: function (name) {
            if (name == 'decimal') {
                if (this.negative != undefined && this.negative == true) {
                    return -Math.abs(this[name]);
                }
            }

            if (name in this) {
                return this[name]
            }

            return null;
        },

        // gets the intput's value.
        _getString: function () {
            var s = "";
            for (i = 0; i < this.items.length; i++) {
                var character = this.items[i].character;
                s += character;
            }

            return s;
        },

        //[optimize]
        _literal: function (letter, regExpression, editable, separator) {
            return { character: letter, regex: regExpression, canEdit: editable, isSeparator: separator };
        },

        //[optimize]
        _initializeLiterals: function () {
            if (this.inputMode == 'textbox') return;
            // add the negative symbol.
            var index = 0;
            var negativeSymbolLength = this.negativeSymbol.length;
            for (i = 0; i < negativeSymbolLength; i++) {
                var character = this.negativeSymbol.substring(i, i + 1);
                var regex = "";
                var canEdit = false;
                var literal = null;
                if (this.negative) {
                    literal = this._literal(character, regex, canEdit, false);
                }
                else {
                    literal = this._literal('', regex, canEdit, false);
                }

                this.items[index] = literal;
                index++;
            }

            // add the currency or percentage symbol.
            var symbolLength = this.symbol.length;
            if (this.symbolPosition == 'left') {
                for (i = 0; i < symbolLength; i++) {
                    var character = this.symbol.substring(i, i + 1);
                    var regex = "";
                    var canEdit = false;
                    var literal = this._literal(character, regex, canEdit, false);
                    this.items[index] = literal;
                    index++;
                }
            }

            var leadingDigitsCount = this.digits % this.groupSize;
            if (leadingDigitsCount == 0) {
                leadingDigitsCount = this.groupSize;
            }

            // add the digits and group separators.
            for (i = 0; i < this.digits; i++) {
                var character = this.promptChar;
                var regex = "\\d";
                var canEdit = true;

                var literal = this._literal(character, regex, canEdit, false);
                this.items[index] = literal;
                index++;

                if (i < this.digits - 1 && this.groupSeparator != undefined && this.groupSeparator.length > 0) {
                    leadingDigitsCount--;
                    if (leadingDigitsCount == 0) {
                        leadingDigitsCount = this.groupSize;
                        var separatorLiteral = this._literal(this.groupSeparator, "", false, false);
                        this.items[index] = separatorLiteral;
                        index++;
                    }
                }
                else if (i == this.digits - 1) {
                    literal.character = 0;
                }
            }
            this.decimalSeparatorPosition = -1;

            // add the digits decimal separator and the decimal digits.
            if (this.decimalDigits != undefined && this.decimalDigits > 0) {
                var character = this.decimalSeparator;
                if (character.length == 0) {
                    character = ".";
                }

                var literal = this._literal(character, "", false, true);
                this.items[index] = literal;
                this.decimalSeparatorPosition = index;
                index++;

                for (i = 0; i < this.decimalDigits; i++) {
                    var decimalCharacter = 0;
                    var regex = "\\d";
                    var decimalDigit = this._literal(decimalCharacter, regex, true, false);
                    this.items[index] = decimalDigit;
                    index++;
                }
            }

            // add the currency or percentage symbol.
            if (this.symbolPosition == 'right') {
                for (i = 0; i < symbolLength; i++) {
                    var character = this.symbol.substring(i, i + 1);
                    var regex = "";
                    var canEdit = false;
                    var literal = this._literal(character, regex, canEdit);
                    this.items[index] = literal;
                    index++;
                }
            }
        },

        //[optimize]
        _match: function (character, regex) {
            var regExpr = new RegExp(regex, "i");
            return regExpr.test(character);
        },

        //[optimize]
        _raiseEvent: function (id, arg) {
            var evt = this.events[id];
            var args = {};
            args.owner = this;
            if (this.host.css('display') == 'none') {
                return true;
            }

            var key = arg.charCode ? arg.charCode : arg.keyCode ? arg.keyCode : 0;
            var result = true;
            var isreadOnly = this.readOnly;
            var me = this;

            if (id == 3 || id == 2) {
                if (!this.disabled) {
                    if (this.inputMode != 'simple') {
                        this._handleMouse(arg);
                    }
                    else {
                        //       this._enterSimpleInputMode(null, me);
                        return true;
                    }
                }
            }

            if (id == 0) {
                var decimalValue = this.getvalue('decimal');
                if ((this.max < decimalValue) || (this.min > decimalValue)) {
                    this.host.addClass(this.toThemeProperty("jqx-input-invalid"));
                }
                else {
                    this.host.removeClass(this.toThemeProperty("jqx-input-invalid"));
                    this.host.addClass(this.toThemeProperty("jqx-input"));
                    this.host.addClass(this.toThemeProperty("jqx-rc-all"));
                }
            }

            var event = new jQuery.Event(evt);
            event.owner = this;
            args.value = this.getvalue('decimal');
            args.text = this.numberInput.val();

            event.args = args;
            result = this.host.trigger(event);
            var me = this;
            // key down
            if (this.inputMode == 'textbox')
                return result;

            if (this.inputMode != 'simple') {
                if (id == 4) {
                    if (isreadOnly || this.disabled) {
                        return false;
                    }

                    result = me._handleKeyDown(arg, key);
                }
                // key up
                else if (id == 5) {
                    if (isreadOnly || this.disabled) {
                        result = false;
                    }
                }
                else if (id == 6) {
                    if (isreadOnly || this.disabled) {
                        return false;
                    }
                    result = me._handleKeyPress(arg, key);
                }
            }
            else {
                if (id == 4 || id == 5 || id == 6) {
                    if ($.jqx.mobile.isTouchDevice()) {
                        return true;
                    }

                    if (isreadOnly || this.disabled) {
                        return false;
                    }

                    var letter = String.fromCharCode(key);
                    var digit = parseInt(letter);
                    var allowInput = true;
                    if (!arg.ctrlKey && !arg.shiftKey) {
                        if (key >= 65 && key <= 90) {
                            allowInput = false;
                        }
                    }

                    if (id == 6 && $.browser.opera != undefined) {
                        if (key == 8)
                            return false;
                    }
                    if (allowInput) {
                        if (id == 4) {
                            allowInput = me._handleSimpleKeyDown(arg, key);
                        }

                        if (!$.browser.msie) {
                            var e = arg;
                            if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */ ||
                                  (e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */ ||
                                  (e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */ || (e.shiftKey && key == 45)) {
                                if (id == 6 && $.browser.webkit) {
                                    me._handleSimpleKeyDown(arg, key);
                                }
                                return false;
                            }
                        }

                        if ((arg.ctrlKey && key == 97 /* firefox */) || (arg.ctrlKey && key == 65) /* opera */) {
                            return true;
                        }

                        if (id == 6 && allowInput) {
                            var specialKey = this._isSpecialKey(key);
                            return specialKey;
                        }
                    }

                    return allowInput;
                }
            }

            return result;
        },

        GetSelectionInValue: function (selectionPosition, text, separator, hasSeparator) {
            var selectionInValue = 0;

            for (i = 0; i < text.length; i++) {
                if (i >= selectionPosition)
                    break;

                var literal = text.substring(i, i + 1);
                var isDigit = (!isNaN(parseInt(literal)));

                if (isDigit || (hasSeparator && text.substring(i, i + 1) == separator)) {
                    selectionInValue++;
                }
            }

            return selectionInValue;
        },

        GetSelectionLengthInValue: function (selectionPosition, selectionLength, text, separator) {
            var selectionInValue = 0;

            for (i = 0; i < text.length; i++) {
                if (i >= selectionPosition + selectionLength)
                    break;

                var literal = text.substring(i, i + 1);
                var isDigit = (!isNaN(parseInt(literal)));

                if (selectionLength > 0 && i >= selectionPosition && isDigit || (i >= selectionPosition && text[i].toString() == separator)) {
                    selectionInValue++;
                }
            }

            return selectionInValue;
        },

        GetInsertTypeByPositionInValue: function (positionInValue, separator, text, hasSeparator) {
            var insertType = "before";
            var valueString = this.GetValueString(text, separator, hasSeparator);
            var digitsToSeparator = this.GetDigitsToSeparator(0, valueString, separator);

            if (positionInValue > digitsToSeparator) {
                insertType = 'after';
            }

            return insertType;
        },

        RemoveRange: function (start, length, text, separatorChar, updateText, insert) {
            var decimalPossibleChars = this.digits;
            var selectionStart = start;
            var selectionLength = length;
            var removedDigits = 0;
            var value = this.decimal;
            var selection = this._selection();
            var text = this.numberInput.val();
            var separatorChar = this.decimalSeparator;
            var hasSeparator = separatorChar != '';

            if (selectionLength == 0 && this.ValueString.length < this.decimalPossibleChars - 1)
                return removedDigits;

            var separatorPosition = this.GetSeparatorPositionInText(separatorChar, text);

            if (!updateText) {
                separatorPosition = this.GetSeparatorPositionInText(separatorChar, text);
            }

            if (separatorPosition < 0 && !hasSeparator && text.length > 1) {
                separatorPosition = text.length;
            }

            if (separatorPosition == -1)
                separatorPosition = text.length;

            var separatorOffset = hasSeparator ? 1 : 0;

            if (length < 2 && insert == true) {
                var valueDigits = this.ValueString.length - this.decimalDigits - separatorOffset;
                if ((valueDigits) == decimalPossibleChars && start + length < separatorPosition) {
                    selectionLength++;
                }
            }


            var newTextString = "";
            for (var i = 0; i < text.length; i++) {
                if (i < selectionStart || i >= selectionStart + selectionLength) {
                    newTextString += text.substring(i, i + 1);
                    continue;
                }
                else {
                    var literal = text.substring(i, i + 1);
                    if (literal == separatorChar) {
                        newTextString += separatorChar;
                        continue;
                    }
                    else {
                        var literal = text.substring(i, i + 1);
                        if (i > separatorPosition) {
                            newTextString += "0";
                            continue;
                        }
                    }
                }

                var literal = text.substring(i, i + 1);
                var isDigit = (!isNaN(parseInt(literal)));

                if (isDigit) {
                    removedDigits++;
                }
            }

            if (newTextString.length == 0) {
                newTextString = "0";
            }

            if (updateText) {
                this.numberInput.val(newTextString);
            }
            else {
                this.ValueString = newTextString;
            }

            var ch = newTextString.substring(0, 1);
            if (ch == separatorChar && isNaN(parseInt(ch))) {
                var res = '0' + newTextString;
                newTextString = res;
            }

            this.ValueString = this.GetValueString(newTextString, separatorChar, hasSeparator);

            this.decimal = this.ValueString;
            this._parseDecimalInSimpleMode();

            this._setSelectionStart(selectionStart);
            return removedDigits;
        },

        InsertDigit: function (digit, position) {
            if (typeof this.digits != 'number') {
                this.digits = parseInt(this.digits);
            }

            if (typeof this.decimalDigits != 'number') {
                this.decimalDigits = parseInt(this.decimalDigits);
            }

            var decimalPossibleChars = 1 + this.digits;

            var selection = this._selection();
            var isNegative = this.getvalue('negative');
            var increased = false;

            if (selection.start == 0 && this.symbol != '' && this.symbolPosition == 'left') {
                this._setSelectionStart(selection.start + 1);
                selection = this._selection();
                increased = true;
            }

            if ((isNegative && increased) || (isNegative && !increased && selection.start == 0)) {
                this._setSelectionStart(selection.start + 1);
                selection = this._selection();
            }

            var selectionChar = this.numberInput.val().substring(selection.start, selection.start + 1);
            var text = this.numberInput.val();
            var separatorChar = this.decimalSeparator;
            var hasSeparator = separatorChar != '' && this.decimalDigits > 0;

            if (selectionChar == this.symbol && this.symbolPosition == 'right') {
                if (this.decimalDigits == 0) {
                    this.ValueString = this.GetValueString(text, separatorChar, hasSeparator);
                    if (this.ValueString.length >= decimalPossibleChars)
                        return;
                }
                else {
                    return;
                }
            }

            this.ValueString = this.GetValueString(text, separatorChar, hasSeparator);
            var value = this.ValueString;

            if (this.decimalDigits > 0 && position >= value.length) {
                position = value.length - 1;
            }

            var valueChar = '';
            if (position < value.length) {
                valueChar = value.substring(position, position + 1);
            }

            var shouldReplace = false;
            var decrementedPosition = false;

            var type = this.GetInsertTypeByPositionInValue(position, separatorChar, text, hasSeparator);

            if (type == 'after') {
                shouldReplace = true;
            }

            var separatorOffset = hasSeparator ? 1 : 0;

            if (valueChar != separatorChar && (this.ValueString.length - this.decimalDigits - separatorOffset) >= decimalPossibleChars - 1) {
                shouldReplace = true;
            }

            var isdecimal = false;

            var separatoroffset = hasSeparator ? 1 : 0;

            if (!shouldReplace && this.ValueString && this.ValueString.length >= this.digits + this.decimalDigits + separatoroffset) {
                return;
            }

            if (shouldReplace && valueChar != separatorChar) {
                if (isdecimal)
                    position++;

                var before = value.substring(0, position);
                if (before.length == value.length) {
                    if (this.ValueString.length >= this.digits + this.decimalDigits + separatoroffset)
                        return;
                }

                var current = digit;
                var after = "";

                if (position + 1 < value.length) {
                    after = value.substring(position + 1);
                }

                var result = before + current + after;
                this.ValueString = result;
            }
            else {
                var before = value.substring(0, position);
                var current = digit;
                var after = value.substring(position);
                var result = before + current + after;

                if (value.substring(0, 1) == '0') {
                    result = current + value.substring(1);
                    if (valueChar == separatorChar) {
                        this._setSelectionStart(selection.start - 1);
                        selection = this._selection();
                    }
                }
                this.ValueString = result;
            }

            if (isNegative) {
                this.decimal = -this.ValueString;
            }
            else this.decimal = this.ValueString;

            this._parseDecimalInSimpleMode();
            var start = selection.start;
            start += 1;

            this._setSelectionStart(start);

            this.value = this.decimal;

            this._raiseEvent(0, this.value);
            this._raiseEvent(1, this.numberInput.val());
        },

        GetStringToSeparator: function (text, separator, hasSeparator) {
            var res = "";
            var pointSeparator = separator;
            var separatorInText = this.GetSeparatorPositionInText(separator, text);
            var newString = text.subString(0, separatorInText);
            res = this.GetValueString(newString, separator, hasSeparator);

            return res;
        },

        GetSeparatorPositionInText: function (separator, text) {
            var decimalPointPos = -1;

            for (i = 0; i < text.length; i++) {
                if (text.substring(i, i + 1) == separator) {
                    decimalPointPos = i;
                    break;
                }
            }
            return decimalPointPos;
        },

        GetValueString: function (text, separator, hasSeparator) {
            var res = "";

            for (var i = 0; i < text.length; i++) {
                var literal = text.substring(i, i + 1);
                var isDigit = (!isNaN(parseInt(literal)));
                if (isDigit) {
                    res += literal;
                }
                if (literal == separator) {
                    res += separator;
                }
            }

            return res;
        },

        Backspace: function () {
            var selection = this._selection();
            var initialselection = this._selection();
            var text = this.numberInput.val();

            if (selection.start == 0 && selection.length == 0)
                return;

            this.isBackSpace = true;

            var literal = text.substring[selection.start, selection.start + 1];
            var isDigit = (!isNaN(parseInt(literal)));
            if (selection.start > 0 && selection.length == 0) {
                this._setSelectionStart(selection.start - 1);
                var selection = this._selection();
            }

            this.Delete();
            this._setSelectionStart(initialselection.start - 1);
            this.isBackSpace = false;
        },

        Delete: function (deleteWithoutSelection) {
            var selection = this._selection();
            var text = this.numberInput.val();

            var selectionStart = selection.start;
            var selectionLength = selection.length;
            selectionLength = Math.max(selectionLength, 1);

            this.ValueString = this.GetValueString(text, this.decimalSeparator, this.decimalSeparator != '');

            this.RemoveRange(selection.start, selectionLength, this.ValueString, ".", false);
            var literal = this.ValueString.substring(0, 1);
            var isDigit = (!isNaN(parseInt(literal)));
            if (!isDigit) {
                this.ValueString = '0' + this.ValueString;
            }
            this.decimal = this.ValueString;
            this._parseDecimalInSimpleMode();
            this._setSelectionStart(selectionStart);
            this.value = this.decimal;
            this._raiseEvent(0, this.value);
            this._raiseEvent(1, this.numberInput.val());
        },

        insertsimple: function (insertion) {
            var selection = this._selection();
            var text = this.numberInput.val();

            if (selection.start == text.length && this.decimalDigits > 0)
                return;

            var oldValue = this.decimal;

            var separatorChar = this.decimalSeparator;
            this.ValueString = this.GetValueString(text, separatorChar, separatorChar != '');
            var positionInValue = this.GetSelectionInValue(selection.start, text, separatorChar, separatorChar != '');
            var lengthInValue = this.GetSelectionLengthInValue(selection.start, selection.length, text, separatorChar);

            var digitsToSeparator = this.GetDigitsToSeparator(0, this.ValueString, separatorChar);
            var decrementPositionInValue = false;

            if (this.decimalDigits > 0 && positionInValue >= this.ValueString.length) {
                positionInValue--;
            }

            this.RemoveRange(selection.start, lengthInValue, this.ValueString, separatorChar, false, true);
            this.InsertDigit(insertion, positionInValue, selection);
        },

        GetDigitsToSeparator: function (digitsToSeparator, valueString, separator) {
            if (separator == undefined) separator = '.';

            if (valueString.indexOf(separator) < 0) {
                return valueString.length;
            }

            for (i = 0; i < valueString.length; i++) {
                if (valueString.substring(i, i + 1) == separator) {
                    digitsToSeparator = i;
                    break;
                }
            }
            return digitsToSeparator;
        },

        _handleSimpleKeyDown: function (e, key) {
            var selection = this._selection();

            if (selection.start >= 0 && selection.start < this.items.length) {
                var letter = String.fromCharCode(key);
            }

            // handle backspace.
            if (key == 8) {
                this.Backspace();
                return false;
            }

            if (key == 190 || key == 110) {
                var position = this.GetSeparatorPositionInText(this.decimalSeparator, this.numberInput.val());
                this._setSelectionStart(position + 1);
                return false;
            }

            if (key == 188) {
                var value = this.numberInput.val();
                for (i = selection.start; i < value.length; i++) {
                    if (value[i] == this.groupSeparator) {
                        this._setSelectionStart(1 + i);
                        break;
                    }
                }

                return false;
            }

            // allow Ctrl+C (copy)
            if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */) {
                var selection = this._selection();
                var text = "";
                var input = this.numberInput.val();
                if (selection.start > 0 || selection.length > 0) {
                    for (var i = selection.start; i < selection.end; i++) {
                        text += input.substring(i, i + 1);
                    }
                }
                if ($.browser.msie) {
                    window.clipboardData.setData("Text", text);
                }
                this.savedText = text;
                return false;
            }
            // allow Ctrl+Z (undo)
            if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */) return false;
            // allow or deny Ctrl+V (paste), Shift+Ins
            if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
            || (e.shiftKey && key == 45)) {
                if (this.savedText != null && this.savedText.length > 0) {
                    for (var i = 0; i < this.savedText.length; i++) {
                        var digit = parseInt(this.savedText.substring(i, i + 1));
                        if (!isNaN(digit)) {
                            this.insertsimple(digit);
                        }
                    }
                }
                return false;
            }

            var letter = String.fromCharCode(key);
            var digit = parseInt(letter);
            if (key >= 96 && key <= 105) {
                digit = key - 96;
                key = key - 48;
            }

            if (!isNaN(digit)) {
                var me = this;
                this.insertsimple(digit);

                return false;
            }


            // handle del.
            if (key == 46) {
                this.Delete();
                return false;
            }

            if (key == 189 || key == 45) {
                var isNegative = this.getvalue('negative');
                if (isNegative == false) {
                    this.setvalue('negative', true);
                }
                else {
                    this.setvalue('negative', false);
                }
                this._parseDecimalInSimpleMode();
                this._setSelectionStart(selection.start);
            }

            if (key == 38) {
                this.spinUp();
                return false;
            }
            else if (key == 40) {
                this.spinDown();
                return false;
            }

            var specialKey = this._isSpecialKey(key);

            if (!$.browser.mozilla)
                return true;

            return specialKey;
        },

        //[optimize]
        _getEditRange: function () {
            var start = 0;
            var end = 0;

            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit) {
                    start = i;
                    break;
                }
            }

            for (i = this.items.length - 1; i >= 0; i--) {
                if (this.items[i].canEdit) {
                    end = i;
                    break;
                }
            }

            return { start: start, end: end }
        },

        //[optimize]
        _getVisibleItems: function () {
            var visibleItems = new Array();
            var k = 0;
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].character.toString().length > 0) {
                    visibleItems[k] = this.items[i];
                    k++;
                }
            }

            return visibleItems;
        },

        //[optimize]
        _hasEmptyVisibleItems: function () {
            var visibleItems = this._getVisibleItems();
            for (i = 0; i < visibleItems.length; i++) {
                if (visibleItems[i].canEdit && visibleItems[i].character == this.promptChar) {
                    return true;
                }
            }

            return false;
        },

        //[optimize]
        _getFirstVisibleNonEmptyIndex: function () {
            var visibleItems = this._getVisibleItems();
            for (i = 0; i < visibleItems.length; i++) {
                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                    return i;
                }
            }
        },

        //[optimize]
        _handleMouse: function (e, args) {
            var selection = this._selection();
            if (selection.length <= 1) {
                var firstItemIndex = this._getFirstVisibleNonEmptyIndex();
                if (selection.start < firstItemIndex) {
                    this._setSelectionStart(firstItemIndex);
                }
            }
        },

        _insertKey: function (key) {
            this.numberInput[0].focus();
            var letter = String.fromCharCode(key);
            var charDigit = parseInt(letter);
            if (isNaN(charDigit))
                return;

            var emptyDigits = 0;
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].character.length == 0) {
                    emptyDigits++;
                }
            }

            var selection = this._selection();

            var rootElement = this;
            if (selection.start >= 0 && selection.start <= this.items.length) {
                var selectedTextDeleted = false
                var firstItemIndex = this._getFirstVisibleNonEmptyIndex();
                if (selection.start < firstItemIndex && selection.length == 0) {
                    if (!isNaN(letter) || letter == ' ') {
                        this._setSelectionStart(firstItemIndex);
                        selection = this._selection();
                    }
                }

                var firstEditableIndex = this._getFirstEditableItemIndex();
                var lastEditableIndex = this._getLastEditableItemIndex();
                var visibleItems = this._getVisibleItems();
                $.each(visibleItems, function (i, value) {
                    if (selection.start > i && i != visibleItems.length - 1)
                        return;

                    var item = visibleItems[i];
                    if (i > lastEditableIndex) {
                        item = visibleItems[lastEditableIndex];
                    }

                    if (isNaN(letter) || letter == ' ')
                        return;

                    if (!item.canEdit) {
                        return;
                    }
                    var separatorPosition = rootElement._getSeparatorPosition();

                    if (rootElement._match(letter, item.regex)) {
                        if (!selectedTextDeleted && selection.length > 0) {
                            for (j = selection.start + emptyDigits; j < selection.end + emptyDigits; j++) {
                                if (rootElement.items[j].canEdit) {
                                    if (j > separatorPosition) {
                                        rootElement.items[j].character = '0';
                                    }
                                    else {
                                        rootElement.items[j].character = rootElement.promptChar;
                                    }
                                }
                            }

                            var text = rootElement._getString();
                            //           rootElement.inputValue(text);
                            selectedTextDeleted = true;
                        }

                        var separatorPosition = rootElement._getSeparatorPosition();
                        var hasEmptyItems = rootElement._hasEmptyVisibleItems();

                        if (selection.start <= separatorPosition && hasEmptyItems) {
                            var limit = i;
                            if (rootElement.decimalSeparatorPosition == -1 && selection.start == separatorPosition) {
                                limit = i + 1;
                            }

                            var numberString = "";
                            for (p = 0; p < limit; p++) {
                                if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {
                                    numberString += visibleItems[p].character;
                                }
                            }

                            numberString += letter;
                            var offset = rootElement.decimal < 1 ? 1 : 0;

                            if (selection.start == separatorPosition && rootElement.decimalSeparatorPosition != -1) {
                                numberString += rootElement.decimalSeparator;
                                offset = 0;
                            }


                            for (p = limit + offset; p < visibleItems.length; p++) {
                                if (visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {
                                    numberString += visibleItems[p].character;
                                }
                                else if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {
                                    numberString += visibleItems[p].character;
                                }
                            }

                            if (rootElement.decimalSeparator != '.') {
                                numberString = rootElement._parseDecimalValue(numberString);
                            }

                            numberString = parseFloat(numberString).toString();
                            numberString = new Number(numberString);
                            numberString = numberString.toFixed(rootElement.decimalDigits);
                            if (rootElement.decimalSeparator != '.') {
                                numberString = rootElement._parseDecimalValueToEditorValue(numberString);
                            }

                            rootElement.setvalue('decimal', numberString);

                            var text = rootElement._getString();

                            if (selection.end < separatorPosition) {
                                rootElement._setSelectionStart(selection.end + offset);
                            }
                            else {
                                rootElement._setSelectionStart(selection.end);
                            }

                            if (selection.length >= 1) {
                                rootElement._setSelectionStart(selection.end);
                            }

                            if (selection.length == rootElement.numberInput.val().length) {
                                var selectBeforeSeparator = rootElement._moveCaretToDecimalSeparator();
                                var separatorOffset = rootElement.decimalSeparatorPosition >= 0 ? 1 : 0;
                                rootElement._setSelectionStart(selectBeforeSeparator - separatorOffset);
                            }
                        }
                        else {
                            if (selection.start < separatorPosition || selection.start > separatorPosition) {
                                if (rootElement.numberInput.val().length == selection.start && rootElement.decimalSeparatorPosition != -1) {
                                    return false;
                                }
                                else if (rootElement.numberInput.val().length == selection.start && rootElement.decimalSeparatorPosition == -1 && !hasEmptyItems) {
                                    return false;
                                }

                                var numberString = "";
                                var addedSeparator = false;
                                for (p = 0; p < i; p++) {
                                    if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {
                                        numberString += visibleItems[p].character;
                                    }
                                    if (visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {
                                        numberString += visibleItems[p].character;
                                        addedSeparator = true;
                                    }
                                }

                                numberString += letter;
                                var offset = rootElement.decimal < 1 ? 1 : 0;

                                if (!addedSeparator && selection.start == separatorPosition - 1) {
                                    numberString += rootElement.decimalSeparator;
                                    addedSeparator = true;
                                }

                                for (p = i + 1; p < visibleItems.length; p++) {
                                    if (!addedSeparator && visibleItems[p].character == rootElement.decimalSeparator && visibleItems[p].isSeparator) {
                                        numberString += visibleItems[p].character;
                                    }
                                    else if (visibleItems[p].canEdit && visibleItems[p].character != rootElement.promptChar) {
                                        numberString += visibleItems[p].character;
                                    }
                                }

                                rootElement.setvalue('decimal', numberString);

                                var text = rootElement._getString();

                                if (rootElement.decimalSeparatorPosition < 0 && item == visibleItems[lastEditableIndex]) {
                                    rootElement._setSelectionStart(i);

                                    return false;
                                }

                                var symbolstartposition = text.indexOf(rootElement.symbol);
                                var sel = !rootElement.getvalue('negative') ? 0 : 1;
                                if (symbolstartposition <= sel) symbolstartposition = text.length;

                                // Do not move caret, if it's after the symbol.
                                if (selection.start < symbolstartposition) {
                                    rootElement._setSelectionStart(i + 1);
                                }
                                else rootElement._setSelectionStart(i);

                                if (selection.length >= 1) {
                                    //             rootElement._setSelectionStart(selection.end);
                                }

                                if (selection.length == rootElement.numberInput.val().length) {
                                    var selectBeforeSeparator = rootElement._moveCaretToDecimalSeparator();
                                    rootElement._setSelectionStart(selectBeforeSeparator - 1);
                                }
                            }
                        }
                        return false;
                    }
                });
            }
        },

        //[optimize]
        _handleKeyPress: function (e, key) {
            var selection = this._selection();
            var rootElement = this;
            if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */) {
                return true;
            }

            if (key == 8) {
                if (selection.start > 0) {
                    rootElement._setSelectionStart(selection.start);
                }
                return false;
            }

            if (key == 46) {
                if (selection.start < this.items.length) {
                    rootElement._setSelectionStart(selection.start);
                }

                return false;
            }

            if (key == 45) {
                var isNegative = this.getvalue('negative');
                if (isNegative == false) {
                    this.setvalue('negative', true);
                }
                else {
                    this.setvalue('negative', false);
                }
            }

            if ($.browser.msie) {
                this._insertKey(key);
            }

            var specialKey = this._isSpecialKey(key);
            return specialKey;
        },

        //[optimize]
        _deleteSelectedText: function () {
            var selection = this._selection();
            var decimalString = "";
            var separatorPosition = this._getSeparatorPosition();
            var visibleItems = this._getVisibleItems();
            var prefix = this._getHiddenPrefixCount();

            if (this.numberInput.val().length == selection.start && selection.length == 0) {
                this._setSelection(selection.start, selection.start + 1);
                selection = this._selection();
            }

            for (i = 0; i < selection.start; i++) {
                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                    decimalString += visibleItems[i].character;
                }
                else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {
                    if (decimalString.length == 0) {
                        decimalString = "0";
                    }

                    decimalString += visibleItems[i].character;
                }
            }

            for (i = selection.start; i < selection.end; i++) {
                if (i > separatorPosition && this.decimalSeparatorPosition != -1) {
                    if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                        decimalString += "0";
                    }
                }
                else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {
                    if (decimalString.length == 0) {
                        decimalString = "0";
                    }

                    decimalString += visibleItems[i].character;
                }
            }

            for (i = selection.end; i < visibleItems.length; i++) {
                if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                    decimalString += visibleItems[i].character;
                }
                else if (!visibleItems[i].canEdit && this.decimalSeparatorPosition != -1 && visibleItems[i] == visibleItems[this.decimalSeparatorPosition - prefix]) {
                    if (decimalString.length == 0) {
                        decimalString = "0";
                    }

                    decimalString += visibleItems[i].character;
                }
            }

            this.setvalue('decimal', decimalString);
            return selection.length > 0;
        },

        _restoreInitialState: function () {
            var suffix = parseInt(this.decimalDigits);

            // add the first digit + the decimal separator.           
            if (suffix > 0) {
                suffix += 2;
            }

            for (k = this.items.length - 1; k > this.items.length - 1 - suffix; k--) {
                if (this.items[k].canEdit && this.items[k].character == this.promptChar) {
                    this.items[k].character = 0;
                }
            }
        },

        // clears the decimal value.
        clearDecimal: function () {
            if (this.inputMode == 'textbox') {
                this.numberInput.val();
                return;
            }

            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit) {
                    this.items[i].character = this.promptChar;
                }
            }

            this._restoreInitialState();
        },

        //[optimize]
        _saveSelectedText: function () {
            var selection = this._selection();
            var text = "";
            var visibleItems = this._getVisibleItems();

            if (selection.start > 0 || selection.length > 0) {
                for (i = selection.start; i < selection.end; i++) {
                    if (visibleItems[i].canEdit && visibleItems[i].character != this.promptChar) {
                        text += visibleItems[i].character;
                    }
                    else if (visibleItems[i].isSeparator) {
                        text += visibleItems[i].character;
                    }
                }
            }
            if ($.browser.msie) {
                window.clipboardData.setData("Text", text);
            }

            return text;
        },

        _pasteSelectedText: function () {
            var selection = this._selection();
            var text = "";
            var k = 0;

            if (window.clipboardData) {
                var clipboardText = window.clipboardData.getData("Text");
                if (clipboardText != this.selectedText && clipboardText.length > 0) {
                    this.selectedText = window.clipboardData.getData("Text");
                    if (this.selectedText == null || this.selectedText == undefined)
                        return;
                }
            }
            var newSelection = selection.start;
            var visibleItems = this._getVisibleItems();
            this.selectedText = $.data(document.body, "jqxSelection");

            for (t = 0; t < this.selectedText.length; t++) {
                var number = parseInt(this.selectedText[t]);
                if (!isNaN(number)) {
                    var numberCode = 48 + number;
                    this._insertKey(numberCode);
                }
            }
        },

        _getHiddenPrefixCount: function () {
            var length = 0;

            if (!this.negative) {
                length++;
            }

            if (this.symbolPosition == "left") {
                for (i = 0; i < this.symbol.length; i++) {
                    if (this.symbol.substring(i, i + 1) == '') {
                        length++;
                    }
                }
            }
            return length;
        },

        //[optimize]
        _getEditableItem: function () {
            var selection = this._selection();

            for (i = 0; i < this.items.length; i++) {
                if (i < selection.start) {
                    if (this.items[i].canEdit && this.items[i].character != this.promptChar) {
                        return this.items[i];
                    }
                }
            }

            return null;
        },

        //[optimize]
        _getEditableItems: function () {
            var editableItems = new Array();
            var k = 0;

            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit) {
                    editableItems[k] = this.items[i];
                    k++;
                }
            }

            return editableItems;
        },

        //[optimize]
        _getValidSelectionStart: function (selectionStart) {
            for (i = this.items.length - 1; i >= 0; i--) {
                if (this.items[i].canEdit && this.items[i].character != this.promptChar) {
                    return i;
                }
            }

            return -1;
        },

        //[optimize]
        _getEditableItemIndex: function (afterCaret) {
            var selection = this._selection();
            var prefix = this._getHiddenPrefixCount();
            var visibleItems = this._getVisibleItems();

            var index = selection.start;
            var editableIndex = -1;
            for (i = 0; i < index; i++) {
                if (i < visibleItems.length && visibleItems[i].canEdit) {
                    editableIndex = i + prefix;
                }
            }

            if (editableIndex == -1 && selection.length > 0) {
                index = selection.end;
                for (i = 0; i < index; i++) {
                    if (i < visibleItems.length && visibleItems[i].canEdit) {
                        editableIndex = i + prefix;
                        break;
                    }
                }
            }

            return editableIndex;
        },

        //[optimize]
        _getEditableItemByIndex: function (index) {
            for (k = 0; k < this.items.length; k++) {
                if (k > index) {
                    if (this.items[k].canEdit && this.items[k].character != this.promptChar) {
                        return k;
                    }
                }
            }

            return -1;
        },

        //[optimize]
        _getFirstEditableItemIndex: function () {
            var visibleItems = this._getVisibleItems();
            for (m = 0; m < visibleItems.length; m++) {
                if (visibleItems[m].character != this.promptChar && visibleItems[m].canEdit && visibleItems[m].character != '0')
                    return m;
            }

            return -1;
        },

        //[optimize]
        _getLastEditableItemIndex: function () {
            var visibleItems = this._getVisibleItems();
            for (m = visibleItems.length - 1; m >= 0; m--) {
                if (visibleItems[m].character != this.promptChar && visibleItems[m].canEdit)
                    return m;
            }

            return -1;
        },

        //[optimize]
        _moveCaretToDecimalSeparator: function () {
            for (i = this.items.length - 1; i >= 0; i--) {
                if (this.items[i].character == this.decimalSeparator && this.items[i].isSeparator) {
                    if (!this.negative) {
                        this._setSelectionStart(i);
                        return i;
                    }
                    else {
                        this._setSelectionStart(i + 1);
                        return i;
                    }
                    break;
                }
            }

            return this.numberInput.val().length;
        },

        //[optimize]
        _handleBackspace: function () {
            var selection = this._selection();
            var prefix = this._getHiddenPrefixCount();
            var editableItemIndex = this._getEditableItemIndex() - prefix;

            if (editableItemIndex >= 0) {
                if (selection.length == 0 && editableItemIndex != -1) {
                    this._setSelection(editableItemIndex, editableItemIndex + 1);
                }

                var deleteAfterSeparator = selection.start > this._getSeparatorPosition() + 1 && this.decimalSeparatorPosition > 0;
                if (deleteAfterSeparator) {
                    selection = this._selection();
                }

                var deletedText = this._deleteSelectedText();
                if (selection.length < 1 || deleteAfterSeparator) {
                    this._setSelectionStart(selection.start);
                }
                else if (selection.length >= 1) {
                    this._setSelectionStart(selection.end);
                }

                if (selection.length == this.numberInput.val().length) {
                    var selectBeforeSeparator = this._moveCaretToDecimalSeparator();
                    this._setSelectionStart(selectBeforeSeparator - 1);
                }
            }
            else {
                this._setSelectionStart(selection.start);
            }
        },

        //[optimize]
        _handleKeyDown: function (e, key) {
            var selection = this._selection();

            if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */) {
                return true;
            } // allow Ctrl+X (cut)
            if ((e.ctrlKey && key == 120 /* firefox */) || (e.ctrlKey && key == 88) /* opera */) {
                this.selectedText = this._saveSelectedText(e);
                $.data(document.body, "jqxSelection", this.selectedText);
                this._handleBackspace();
                return false;
            }
            // allow Ctrl+C (copy)
            if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */) {
                this.selectedText = this._saveSelectedText(e);
                $.data(document.body, "jqxSelection", this.selectedText);
                return false;
            }
            // allow Ctrl+Z (undo)
            if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */) return false;
            // allow or deny Ctrl+V (paste), Shift+Ins
            if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
            || (e.shiftKey && key == 45)) {
                this._pasteSelectedText();
                return false;
            }
            if (selection.start >= 0 && selection.start < this.items.length) {
                var letter = String.fromCharCode(key);
                var item = this.items[selection.start];
            }

            // handle backspace.
            if (key == 8) {
                this._handleBackspace();
                return false;
            }

            if (key == 190 || key == 110) {
                this._moveCaretToDecimalSeparator();
                return false;
            }

            if (key == 188) {
                var value = this.numberInput.val();
                for (i = selection.start; i < value.length; i++) {
                    if (value[i] == this.groupSeparator) {
                        this._setSelectionStart(1 + i);
                        break;
                    }
                }

                return false;
            }

            if ($.browser.msie == null) {
                var letter = String.fromCharCode(key);
                var digit = parseInt(letter);
                if (key >= 96 && key <= 105) {
                    digit = key - 96;
                    key = key - 48;
                }

                if (!isNaN(digit)) {
                    var me = this;
                    me._insertKey(key);
                    return false;
                }
            }

            // handle del.
            if (key == 46) {
                var visibleItems = this._getVisibleItems();
                if (selection.start < visibleItems.length) {
                    var offset = visibleItems[selection.start].canEdit == false ? 2 : 1;
                    if (selection.length == 0) {
                        this._setSelection(selection.start + offset, selection.start + offset + selection.length);
                    }

                    this._handleBackspace();

                    if (new Number(this.decimal) < 1 || selection.start > this._getSeparatorPosition()) {
                        this._setSelectionStart(selection.end + offset);
                    }
                    else if (selection.start + 1 < this.decimalSeparatorPosition) {
                        this._setSelectionStart(selection.end + offset);
                    }
                }
                return false;
            }

            if (key == 38) {
                this.spinUp();
                return false;
            }
            else if (key == 40) {
                this.spinDown();
                return false;
            }

            var specialKey = this._isSpecialKey(key);

            if (!$.browser.mozilla)
                return true;

            return specialKey;
        },

        _isSpecialKey: function (key) {
            if (key != 8 /* backspace */ &&
			key != 9 /* tab */ &&
			key != 13 /* enter */ &&
			key != 35 /* end */ &&
			key != 36 /* home */ &&
			key != 37 /* left */ &&
			key != 39 /* right */ &&
			key != 27 /* right */ &&
		    key != 46 /* del */
		    ) {
                return false;
            }

            return true;
        },

        //[optimize]
        _selection: function () {
            if ('selectionStart' in this.numberInput[0]) {
                var e = this.numberInput[0];
                var selectionLength = e.selectionEnd - e.selectionStart;
                return { start: e.selectionStart, end: e.selectionEnd, length: selectionLength, text: e.value };
            }
            else {
                var r = document.selection.createRange();
                if (r == null) {
                    return { start: 0, end: e.value.length, length: 0 }
                }

                var re = this.numberInput[0].createTextRange();
                var rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);
                var selectionLength = r.text.length;

                return { start: rc.text.length, end: rc.text.length + r.text.length, length: selectionLength, text: r.text };
            }
        },

        _setSelection: function (start, end) {
            try {
                if ('selectionStart' in this.numberInput[0]) {
                    this.numberInput[0].focus();
                    this.numberInput[0].setSelectionRange(start, end);
                }
                else {
                    var range = this.numberInput[0].createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', start);
                    range.select();
                }
            }
            catch (error) {
            }
        },

        _setSelectionStart: function (start) {
            this._setSelection(start, start);
            $.data(this.numberInput, "selectionstart", start);
        },

        _render: function (refreshValue) {
            var leftBorder = parseInt(this.host.css("border-left-width"));
            var rightBorder = parseInt(this.host.css("border-left-width"));
            var topBorder = parseInt(this.host.css("border-left-width"));
            var bottomBorder = parseInt(this.host.css("border-left-width"));

            var height = parseInt(this.host.css("height")) - topBorder - bottomBorder;
            var width = parseInt(this.host.css("width")) - leftBorder - rightBorder;
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            width = parseInt(width);
            height = parseInt(height);

            this.numberInput.css({
                "border-left-width": 0,
                "border-right-width": 0,
                "border-bottom-width": 0,
                "border-top-width": 0
            });

            this.numberInput.css("text-align", this.textAlign);
            var fontSize = this.numberInput.css("font-size");

            if (!isNaN(height)) {
                this.numberInput.css('height', parseInt(fontSize) + 4 + 'px');
            }

            if (!isNaN(width)) {
                this.numberInput.css('width', width - 2);
            }

            var top = height - 2 * topBorder - 2 * bottomBorder - parseInt(fontSize);
            if (isNaN(top)) top = 0;

            if (!isNaN(height)) {
                this.host.height(height);
            }
            if (!isNaN(width)) {
                this.host.width(width);
            }

            if (this.spinButtons && this.spincontainer) {
                width -= parseInt(this.spinButtonsWidth - 2);
                this.spincontainer.width(this.spinButtonsWidth);
                this.upbutton.width(this.spinButtonsWidth + 2);
                this.downbutton.width(this.spinButtonsWidth + 2);
                this.upbutton.height(Math.round(height / 2));
                this.downbutton.height(Math.round(height / 2));
                this.spincontainer.width(this.spinButtonsWidth);
                this.numberInput.css('width', width - 5);
                this.numberInput.css('margin-right', '2px');
            }

            var topPadding = top / 2;

            // fix for MSIE 6 and 7. These browsers double the top padding for some reason...
            if ($.browser.msie && $.browser.version < 8) {
                topPadding = top / 4;
            }

            this.numberInput.css("padding-left", '0px');
            this.numberInput.css("padding-right", '0px');
            this.numberInput.css("padding-top", topPadding);
            this.numberInput.css("padding-bottom", top / 2);

            if (refreshValue == undefined || refreshValue == true) {
                this.numberInput.val(this._getString())
                if (this.inputMode != 'advanced') {
                    this._parseDecimalInSimpleMode();
                }
            }
        },

        destroy: function () {
            this._removeHandlers();
            this.host.remove();
        },

        // gets or sets the input's text value including the formatting characters.
        inputValue: function (newValue) {
            if (newValue === undefined) {
                return this._value();
            }

            this.propertyChangedHandler(this, "value", this._value, newValue);
            this._refreshValue();
            return this;
        },

        // gets the input's value.
        _value: function () {
            var value = this.numberInput.val();
            return value;
        },

        val: function (decimal) {
            if (decimal != undefined && typeof decimal != 'object') {
                this.setDecimal(decimal);
            }
            else return this.getDecimal();
        },

        getDecimal: function () {
            if (this.inputMode == 'simple') {
                this._parseDecimalInSimpleMode();
            }

            var isNegative = this.getvalue('negative');
            if (isNegative && this.decimal > 0) {
                return -this.decimal;
            }

            return this.decimal;
        },

        setDecimal: function (value) {
            var currentValue = value;
            if (this.decimalSeparator != '.') {
                value = value.toString();
                var separatorIndex = value.indexOf('.');
                if (separatorIndex != -1) {
                    var prefix = value.substring(0, separatorIndex);
                    var suffix = value.substring(separatorIndex + 1);
                    value = prefix + this.decimalSeparator + suffix;
                }
                if (value < 0)
                    this.setvalue('negative', true);
                else this.setvalue('negative', false);
                this._setDecimal(value);
            }
            else {
                if (value < 0)
                    this.setvalue('negative', true);
                else this.setvalue('negative', false);
                this._setDecimal(Math.abs(value));
            }

            if (currentValue == null) {
                this.numberInput.val("");
            }
        },

        // sets the input's decimal value.
        _setDecimal: function (value) {
            if (value == null || value == undefined) {
                value = 0;
            }

            if (value.toString().indexOf('e') != -1) {
                value = 0;
            }

            this.clearDecimal();
            var decimalString = value.toString();
            var numberPartString = "";
            var decimalPartString = "";
            var addToNumberPart = true;

            if (decimalString.length == 0) {
                decimalString = "0";
            }

            for (var i = 0; i < decimalString.length; i++) {
                if (decimalString.substring(i, i + 1) == this.decimalSeparator) {
                    addToNumberPart = false;
                    continue;
                }

                if (addToNumberPart) {
                    numberPartString += decimalString.substring(i, i + 1);
                }
                else {
                    decimalPartString += decimalString.substring(i, i + 1);
                }
            }

            if (numberPartString.length > 0) {
                numberPartString = parseFloat(numberPartString).toString();
            }

            var digitsBeforeSeparator = this.digits;
            if (digitsBeforeSeparator < numberPartString.length) {
                numberPartString = numberPartString.substr(0, digitsBeforeSeparator);
            }

            var k = 0;
            var separatorPosition = this._getSeparatorPosition();
            var hiddenTextLength = this._getHiddenPrefixCount();
            separatorPosition = separatorPosition + hiddenTextLength;

            for (var i = separatorPosition; i >= 0; i--) {
                if (i < this.items.length && this.items[i].canEdit) {
                    if (k < numberPartString.length) {
                        this.items[i].character = numberPartString.substring(numberPartString.length - k - 1, numberPartString.length - k);
                        k++;
                    }
                }
            }

            k = 0;
            for (var i = separatorPosition; i < this.items.length; i++) {
                if (this.items[i].canEdit) {
                    if (k < decimalPartString.length) {
                        this.items[i].character = decimalPartString.substring(k, k + 1);
                        k++;
                    }
                }
            }

            this._refreshValue();

            if (this.decimalSeparator == '.') {
                this.ValueString = new Number(value).toFixed(this.decimalDigits);
            }
            else {
                var indx = value.toString().indexOf(this.decimalSeparator);
                if (indx > 0) {
                    var prefix = value.toString().substring(0, indx);
                    var val = prefix + "." + value.toString().substring(indx + 1);
                    this.ValueString = new Number(val).toFixed(this.decimalDigits);
                }
                else {
                    this.ValueString = new Number(value).toFixed(this.decimalDigits);
                }
            }

            if (this.inputMode != 'advanced') {
                this._parseDecimalInSimpleMode();
                this._raiseEvent(1, this.ValueString);
            }
        },

        //[optimize]
        _getSeparatorPosition: function () {
            var hiddenTextLength = this._getHiddenPrefixCount();
            if (this.decimalSeparatorPosition > 0)
                return this.decimalSeparatorPosition - hiddenTextLength;

            return this.items.length - hiddenTextLength;
        },

        _setTheme: function () {
            this.host.removeClass();
            this.host.addClass(this.toThemeProperty('jqx-input'));
            this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));

            if (this.spinButtons) {
                this.downbutton.removeClass();
                this.upbutton.removeClass();
                this.downbutton.addClass(this.toThemeProperty('jqx-scrollbar-button-state-normal'));
                this.upbutton.addClass(this.toThemeProperty('jqx-scrollbar-button-state-normal'));
                this._upArrow.removeClass();
                this._downArrow.removeClass();
                this._upArrow.addClass(this.toThemeProperty('icon-arrow-up'));
                this._downArrow.addClass(this.toThemeProperty('icon-arrow-down'));

            }
            this.numberInput.removeClass();
            this.numberInput.addClass(this.toThemeProperty('jqx-input-content'));
        },

        // sets a property.
        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key == 'digits' || key == 'groupSize' || key == 'decimalDigits') {
                if (value < 0) {
                    throw new Exception(this.invalidArgumentExceptions[0]);
                }
            }

            if (key === 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }

            if (key == "digits") {
                if (value != oldvalue) {
                    object.digits = parseInt(value);
                }
            }

            if (key == "decimalDigits") {
                if (value != oldvalue) {
                    object.decimalDigits = parseInt(value);
                }
            }

            if (key == "decimalSeparator" || key == "digits" || key == "symbol" || key == "symbolPosition" || key == "groupSize" || key == "groupSeparator" || key == "decimalDigits" || key == "negativeSymbol") {
                var decimal = object.decimal;

                if (key == 'decimalSeparator' && value == '') {
                    value = ' ';
                }

                if (oldvalue != value) {
                    var selection = object._selection();
                    object.items = new Array();
                    object._initializeLiterals();
                    object.value = object._getString();
                    object._refreshValue();
                    object._setSelection(selection.start, selection.end);
                    object._setDecimal(decimal);
                }
            }
            if (key == "spinButtons") {
                if (object.spincontainer) {
                    if (!value) {
                        object.spincontainer.css('display', 'none');
                    }
                    else {
                        object.spincontainer.css('display', 'block');
                    }
                    object._render();
                }
                else {
                    object._spinButtons();
                }
            }
            if (key == "negative" && object.inputMode == 'advanced') {
                var selection = object._selection();
                var offset = 0;

                if (value) {
                    object.items[0].character = object.negativeSymbol[0];
                    offset = 1;
                }
                else {
                    object.items[0].character = "";
                    offset = -1;
                }

                object._refreshValue();
                if (object.isInitialized) {
                    object._setSelection(selection.start + offset, selection.end + offset);
                }
            }

            if (key == "decimal") {
                object.setDecimal(value);
            }

            if (key === "value") {
                object.value = value;
                object.setDecimal(value);
                object._raiseEvent(1, value);
            }

            if (key == "textAlign") {
                object.textAlign = value;
                object._render();
            }

            if (key == "disabled") {
                object.numberInput.attr("disabled", value);
                if (object.disabled) {
                    object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));
                }
            }

            if (key == "readOnly") {
                object.readOnly = value;
            }

            if (key == "promptChar") {
                for (i = 0; i < object.items.length; i++) {
                    if (object.items[i].character == object.promptChar) {
                        object.items[i].character = value;
                    }
                }

                object.promptChar = value;
            }

            if (key == "width") {
                object.width = value;
                object._render();
            }
            else if (key == "height") {
                object.height = value;
                object._render();
            }
        },

        _value: function () {
            var val = this.value;
            return val;
        },

        _refreshValue: function () {
            var value = this.value;
            var k = 0;

            this.value = this._getString();
            value = this.value;

            var decimalValue = "";
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i].canEdit && this.items[i].character != this.promptChar) {
                    decimalValue += this.items[i].character;
                }

                if (i == this.decimalSeparatorPosition) {
                    decimalValue += ".";
                }
            }

            this.decimal = decimalValue;
            var hasChange = false;

            if (this.oldValue !== value) {
                this.oldValue = value;
                this._raiseEvent(0, value);
                hasChange = true;
            }

            if (this.inputMode != 'simple') {
                this.numberInput.val(value);
                if (hasChange) {
                    this._raiseEvent(1, value);
                }
            }

            if (value == null) {
                this.numberInput.val("");
            }
        }
    });
})(jQuery);

(function ($) {

    $.jqx.jqxWidget("jqxProgressBar", "", {});

    $.extend($.jqx._jqxProgressBar.prototype, {

        defineInstance: function () {
            //Type: Number.
            //Default: 0.
            //Sets the progress value.
            this.value = 0;
            //Type: Number.
            //Default: null.
            //Sets the progress value.            
            this.oldValue = null;
            //Type: Number.
            //Default: 100.
            //Sets the progress max value.
            this.max = 100;
            //Type: Number.
            //Default: 0.
            //Sets the progress min value.
            this.min = 0;
            //Type: String.
            //Default: 'horizontal'.
            //Sets the orientation.
            this.orientation = 'horizontal';
            //Type: String.
            //Default: null.
            //Sets the progress bar width.
            this.width = null;
            //Type: String.
            //Default: null.
            //Sets the progress height width.
            this.height = null;
            //Type: Boolean.
            //Default: false.
            //Sets the visibility of the progress bar's text.
            this.showText = false;
            //Type: Number.
            //Default: 300
            //Sets the duration of the progress bar's animation.
            this.animationDuration = 300;
            // gets or sets whether the progress bar is disabled.
            this.disabled = false;
            // Progress Bar events.
            this.events =
			[
            // occurs when the value is changed.
		  	   'valuechanged',
            // occurs when the value is invalid.
               'invalidvalue',
            // occurs when the value becomes equal to the maximum value.
               'complete'
			];
        },

        // creates a new jqxProgressBar instance.
        createInstance: function (args) {

            var self = this;
            this.host
			.addClass(this.toThemeProperty("jqx-progressbar"));

            this.host
			.addClass(this.toThemeProperty("jqx-widget"));
            this.host
			.addClass(this.toThemeProperty("jqx-widget-content"));
            this.host
            .addClass(this.toThemeProperty("jqx-rc-all"));

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            this.valueDiv = $("<div></div>").appendTo(this.element);

            if (this.orientation == 'horizontal') {
                this.valueDiv.width(0);
                this.valueDiv.addClass(this.toThemeProperty("jqx-progressbar-value"));
            }
            else {
                this.valueDiv.height(0);
                this.valueDiv.addClass(this.toThemeProperty("jqx-progressbar-value-vertical"));
            }
            this.valueDiv.addClass(this.toThemeProperty("jqx-fill-state-pressed"));

            this.feedbackElementHost = $("<div style='width: 100%; height: 100%; position: relative;'></div>").appendTo(this.host);

            this.feedbackElement = $("<span class='text'></span>").appendTo(this.feedbackElementHost);
            this.feedbackElement.addClass(this.toThemeProperty('jqx-progressbar-text'));
            this.oldValue = this._value();
            this.refresh();

            $(window).resize(function () {
                self.refresh();
            });
        },

        destroy: function () {
            this.host.removeClass();
            this.valueDiv.removeClass();
            this.valueDiv.remove();
            this.feedbackElement.remove();
        },

        _raiseevent: function (id, oldValue, newValue) {
            if (this.isInitialized != undefined && this.isInitialized == true) {
                var evt = this.events[id];
                var event = new jQuery.Event(evt);
                event.previousValue = oldValue;
                event.currentValue = newValue;
                event.owner = this;
                var result = this.host.trigger(event);
                return result;
            }
        },

        // gets or sets the progress bar value.
        // @param Number. Represents the new value
        actualValue: function (newValue) {
            if (newValue === undefined) {
                return this._value();
            }

            $.jqx.setvalueraiseevent(this, 'value', newValue);

            return this._value();
        },

        propertyChangedHandler: function (object, key, oldValue, value) {
            if (!this.isInitialized)
                return;

            var widget = this;

            if (key == "min" && object.value < value) {
                object.value = value;
            }
            else if (key == "max" && object.value > value) {
                object.value = value;
            }

            if (key === "value" && widget.value != undefined) {
                widget.value = value;
                widget.oldValue = oldValue;

                if (value < widget.min || value > widget.max) {
                    widget._raiseevent(1, oldValue, value);
                }

                widget.refresh();
                if (widget._value() === widget.max) {
                    widget._raiseevent(2, oldValue, value);
                }
            }

            if (key == "renderText" || key == "orientation" || key == "showText" || key == "min" || key == "max") {
                widget.refresh();
            }
            else if (key == "width" && widget.width != undefined) {
                if (widget.width != undefined && !isNaN(widget.width)) {
                    widget.host.width(widget.width);
                    widget.refresh();
                }
            }
            else if (key == "height" && widget.height != undefined) {
                if (widget.height != undefined && !isNaN(widget.height)) {
                    widget.host.height(widget.height);
                    widget.refresh();
                }
            }
            if (key == "disabled") widget.refresh();
        },

        _value: function () {
            var val = this.value;
            // normalize invalid value
            if (typeof val !== "number") {
                var result = parseInt(val);
                if (isNaN(result)) {
                    val = 0;
                }
                else val = result;
            }
            return Math.min(this.max, Math.max(this.min, val));
        },

        _percentage: function () {
            return 100 * this._value() / this.max;
        },

        _textwidth: function (text) {
            var measureElement = $('<span>' + text + '</span>');
            $(this.host).append(measureElement);
            var width = measureElement.width();
            measureElement.remove();
            return width;
        },

        _textheight: function (text) {
            var measureElement = $('<span>' + text + '</span>');
            $(this.host).append(measureElement);
            var height = measureElement.height();
            measureElement.remove();
            return height;
        },

        refresh: function () {
            var value = this.actualValue();
            var percentage = this._percentage();

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-progressbar-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                return;
            }
            else {
                this.host.removeClass(this.toThemeProperty('jqx-progressbar-disabled'));
                this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
                $(this.element.children[0]).show();
            }

            if (isNaN(value)) {
                return;
            }

            if (isNaN(percentage)) {
                return;
            }

            if (this.oldValue !== value) {
                this._raiseevent(0, this.oldValue, value);
                this.oldValue = value;
            }

            var height = this.host.outerHeight();
            var width = this.host.outerWidth();

            if (this.width != null) {
                width = parseInt(this.width);
            }
            if (this.height != null) {
                height = parseInt(this.height);
            }

            var halfWidth = parseInt(this.host.outerWidth()) / 2;
            var halfHeight = parseInt(this.host.outerHeight()) / 2;

            if (isNaN(percentage)) {
                percentage = 0;
            }
            var me = this;
            try {
                var valueElement = this.element.children[0];
                if (this.orientation == "horizontal") {
                    $(valueElement)
                    .toggle(value >= this.min)
                    $(valueElement).animate({ width: percentage.toFixed(0) + "%" }, this.animationDuration, function () {
                    });
                    this.feedbackElementHost.css('margin-top', -this.host.height());
                }
                else {
                    $(valueElement)
			        .toggle(value >= this.min)

                    this.feedbackElementHost.animate({ 'margin-top': -(percentage.toFixed(0) * me.host.height()) / 100 }, this.animationDuration, function () {
                    });
                    $(valueElement).animate({ height: percentage.toFixed(0) + "%" }, this.animationDuration, function () {
                        if (percentage.toFixed(0) == me.min) {
                            $(valueElement).hide();
                        }
                    });

                }
            }
            catch (ex) {
            }


            this.feedbackElement
			    .html(percentage.toFixed(0) + "%")
                .toggle(this.showText == true);
            if (this.renderText) {
                this.feedbackElement.html(this.renderText(percentage.toFixed(0) + "%"));
            }

            this.feedbackElement.css('position', 'absolute');
            this.feedbackElement.css('top', '50%');
            this.feedbackElement.css('left', '0');

            var textHeight = this.feedbackElement.height();
            var textWidth = this.feedbackElement.width();
            var centerWidth = Math.floor(halfWidth - (parseInt(textWidth) / 2));

            this.feedbackElement.css({ "left": (centerWidth), "margin-top": -parseInt(textHeight) / 2 + 'px' });
        }
    });
})(jQuery);
/*
* jqxradiobutton.js
*
* This source is property of jqwidgets and/or its partners and is subject to jqwidgets Source Code License agreement and jqwidgets EULA.
* Copyright (c) 2011 jqwidgets.
* <Licensing info>
* 
* http://www.jQWidgets.com
*
*/
/*
* Depends:
*   jqxcore.js*/


(function ($) {

    $.jqx.jqxWidget("jqxRadioButton", "", {});

    $.extend($.jqx._jqxRadioButton.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the delay of the fade animation when the CheckBox is going to be opened.
            this.animationShowDelay = 300,
            // Type: Number
            // Default: 300
            // Gets or sets the delay of the fade animation when the CheckBox is going to be closed. 
             this.animationHideDelay = 300,
            // Type: Number.
            // Default: null.
            // Sets the width.
            this.width = null;
            // Type: Number.
            // Default: null.
            // Sets the height.
            this.height = null;
            // Type: String
            // Default: '13px'
            // Gets or sets the radiobutton's size.
            this.boxSize = '13px';
            // Type: Bool and Null
            // Default: false
            // Gets or sets the ckeck state.
            // Possible Values: true, false and null.
            this.checked = false;
            // Type: Bool
            // Default: false
            // Gets or sets whether the radiobutton has 3 states - checked, unchecked and indeterminate.
            this.hasThreeStates = false;
            // Type: Bool
            // Default: false
            // Gets whether the CheckBox is disabled.
            this.disabled = false;
            // Type: Bool
            // Default: true
            // Gets or sets whether the clicks on the container are handled as clicks on the check box.
            this.enableContainerClick = true;
            // Type: Bool
            // Default: true
            // Gets or sets whether the checkbox is locked. In this mode the user is not allowed to check/uncheck the radio button.
            this.locked = false;
            // Type: String
            // Default: ''
            // Gets or sets the group name. When this property is set, the checkboxes in the same group behave as radio buttons.
            this.groupName = '';
            // 'checked' is triggered when the radiobutton is checked.
            // 'unchecked' is triggered when the radiobutton is unchecked.
            // 'indeterminate' is triggered when the radiobutton's ckecked property is going to be null.
            // 'change' is triggered when the radiobutton's state is changed.
            this.events =
			 [
			    'checked', 'unchecked', 'indeterminate', 'change'
             ];
        },

        createInstance: function (args) {
            this.setSize();
            var me = this;
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                me.setSize();
            };

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                me.setSize();
            };

            this.radiobutton = $('<div><div><span></span></div></div>');
            this.host.attr('tabIndex', 0);
            this.host.prepend(this.radiobutton);
            this.host.append($('<div style="clear: both;"></div>'));
            this.checkMark = $(this.radiobutton).find('span');
            this.box = $(this.radiobutton).find('div');

            this._supportsRC = true;
            if ($.browser.msie && $.browser.version < 9) {
                this._supportsRC = false;
            }

            this.box.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this.box.addClass(this.toThemeProperty('jqx-radiobutton-default'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));

            if (this.disabled) {
                this.disable();
            }

            this.host.addClass(this.toThemeProperty('jqx-radiobutton'));

            if (this.locked) {
                this.host.css('cursor', 'auto');
            }

            var checked = this.element.getAttribute('checked');
            if (checked == 'checked' || checked == 'true' || checked == true) {
                this.checked = true;
            }

            this._addInput();
            this._render();
            this._addHandlers();
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.setSize();
                this._render();
            }
        },

        setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
        },

        _addHandlers: function () {
            var me = this;
            this.addHandler(this.box, 'click', function (event) {
                if (!me.disabled && !me.enableContainerClick) {
                    me.toggle();
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'keydown', function (event) {
                if (!me.disabled && !me.locked) {
                    if (event.keyCode == 32) {
                        me.toggle();
                        event.preventDefault();
                        return false;
                    }
                }
            });

            this.addHandler(this.host, 'click', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    me.toggle();
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'selectstart', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    event.preventDefault();
                }
            });

            this.addHandler(this.host, 'mouseup', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    event.preventDefault();
                }
            });

            this.addHandler(this.host, 'mousedown', function (event) {
                if (!me.disabled && me.enableContainerClick) {
                    me.host.focus();
                    event.preventDefault();
                }
            });

            this.addHandler(this.host, 'focus', function (event) {
                if (!me.disabled && me.enableContainerClick && !me.locked) {
                    me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'blur', function (event) {
                if (!me.disabled && me.enableContainerClick && !me.locked) {
                    me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'mouseenter', function (event) {
                if (!me.disabled && me.enableContainerClick && !me.locked) {
                    me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));

                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.host, 'mouseleave', function (event) {
                if (!me.disabled && me.enableContainerClick && !me.locked) {
                    me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                    event.preventDefault();
                    return false;
                }
            });

            this.addHandler(this.box, 'mouseenter', function () {
                if (!me.disabled && !me.enableContainerClick) {
                    me.box.addClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                }
            });

            this.addHandler(this.box, 'mouseleave', function () {
                if (!me.disabled && !me.enableContainerClick) {
                    me.box.removeClass(me.toThemeProperty('jqx-radiobutton-hover'));
                    me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                }
            });
        },

        _removeHandlers: function () {
            this.removeHandler(this.box, 'click');
            this.removeHandler(this.box, 'mouseenter');
            this.removeHandler(this.box, 'mouseleave');
            this.removeHandler(this.host, 'click');
            this.removeHandler(this.host, 'mouseup');
            this.removeHandler(this.host, 'mousedown');
            this.removeHandler(this.host, 'selectstart');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.host, 'focus');
            this.removeHandler(this.host, 'blur');
        },

        _render: function () {
            if (this.boxSize == null) this.boxSize = 13;

            this.box.width(this.boxSize);
            this.box.height(this.boxSize);

            if (!this.disabled) {
                if (this.enableContainerClick) {
                    this.host.css('cursor', 'pointer');
                }
                else this.host.css('cursor', 'auto');
            }
            else {
                this.disable();
            }

            this.updateStates();
        },

        // checks the ckeckbox.
        check: function () {
            this.checked = true;
            var me = this;
            this.checkMark.removeClass();

            this.checkMark.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            if ($.browser.msie) {
                if (!this.disabled) {
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));
                }
                else {
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));
                }
            }
            else {
                if (!this.disabled) {
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));
                }
                else {
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));
                    this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-checked'));
                }

                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }

            var checkboxes = $.find('.jqx-radiobutton');

            if (this.groupName == null) this.groupName = '';
            $.each(checkboxes, function () {
                var groupName = $(this).jqxRadioButton('groupName');
                if (groupName == me.groupName && this != me.element) {
                    $(this).jqxRadioButton('uncheck')
                }
            });

            this._raiseEvent('0');
            this._raiseEvent('3', { checked: true });

            if (this.checkMark.height() == 0) {
                this.checkMark.height(this.boxSize);
                this.checkMark.width(this.boxSize);
            }
            this.input.val(this.checked);
        },

        // unchecks the radiobutton.
        uncheck: function () {
            var oldCheck = this.checked;
            this.checked = false;
            var me = this;

            if ($.browser.msie) {
                me.checkMark.removeClass();
            }
            else {
                this.checkMark.css('opacity', 1);
                this.checkMark.stop().animate({ opacity: 0 }, this.animationHideDelay, function () {
                    me.checkMark.removeClass();
                });
            }

            if (oldCheck) {
                this._raiseEvent('1');
                this._raiseEvent('3', { checked: false });
            }
            this.input.val(this.checked);
        },

        // sets the indeterminate state.
        indeterminate: function () {
            var oldCheck = this.checked;
            this.checked = null;
            this.checkMark.removeClass();

            if ($.browser.msie) {
                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate'));
            }
            else {
                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate'));
                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }

            if (oldCheck != null) {
                this._raiseEvent('2');
                this._raiseEvent('3', { checked: null });
            }
            this.input.val(this.checked);
        },

        // toggles the check state.
        toggle: function () {
            if (this.disabled)
                return;

            if (this.locked)
                return;

            var oldChecked = this.checked;

            if (this.checked == true) {
                this.checked = this.hasTreeStates ? null : true;
            }
            else {
                this.checked = true;
            }

            if (oldChecked != this.checked) {
                this.updateStates();
            }
            this.input.val(this.checked);
        },

        // updates check states depending on the value of the 'checked' property.
        updateStates: function () {
            if (this.checked) {
                this.check();
            }
            else if (this.checked == false) {
                this.uncheck();
            }
            else if (this.checked == null) {
                this.indeterminate();
            }
        },

        // disables the radiobutton.
        disable: function () {
            this.disabled = true;

            if (this.checked == true) {
                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.addClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate-disabled'));
            }
            this.box.addClass(this.toThemeProperty('jqx-radiobutton-disabled'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        // enables the radiobutton.
        enable: function () {
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            if (this.checked == true) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-radiobutton-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-radiobutton-check-indeterminate-disabled'));
            }
            this.box.removeClass(this.toThemeProperty('jqx-radiobutton-disabled'));
         
            this.disabled = false;
        },

        destroy: function () {
            this._removeHandlers();
            this.host.remove();
        },

        _raiseEvent: function (id, args) {
            var evt = this.events[id];
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;

            try {
                var result = this.host.trigger(event);
            }
            catch (error) {
            }

            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == this.enableContainerClick && !this.disabled && !this.locked) {
                if (value) {
                    this.host.css('cursor', 'pointer');
                }
                else this.host.css('cursor', 'auto');
            }

            if (key == 'checked') {
                switch (value) {
                    case true:
                        this.check();
                        break;
                    case false:
                        this.uncheck();
                        break;
                    case null:
                        this.indeterminate();
                        break;
                }
            }

            if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, this.host);
            }

            if (key == 'disabled') {
                if (value) {
                    this.disable();
                } else this.enable();
            }
        }
    });
})(jQuery);
/*
*   Depends:
*       jqxcore.js
*/
(function ($) {

    $.jqx.jqxWidget('jqxRating', '', {});

    $.extend($.jqx._jqxRating.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 5
            // Sets or gets images count.
            this.count = 5;
            // Type: Bool
            // Default: false
            // Sets or gets whether the rating widget is disabled.
            this.disabled = false;
            // Type: Number
            // Default: 0
            // Gets or sets current rating.
            this.value = 0;
            // Type: Number or String
            // Default: auto
            // Gets or sets widget's height.
            this.height = 'auto';
            // Type: Number or String
            // Default: auto
            // Gets or sets widget's width.
            this.width = 'auto';
            // Type: Number
            // Default: 1
            // Gets or sets vote precision.
            this.precision = 1;
            // Type: Bool
            // Default: false
            // Gets or sets whether the user can vote single or multiple times.
            this.singleVote = false;
            // Type: Number or String
            // Default: auto
            // Gets or sets rating item's height
            this.itemHeight = '20';
            // Type: Number or String
            // Default: auto
            // Gets or sets rating item's width.
            this.itemWidth = '20';

            //Private varables
            this._itemHeight;
            this._itemWidth;
            this._images = [];

            // the change event is triggered when the rating is changed.
            this._events = [
                'change'
            ];
            this._invalidArgumentExceptions = {
                'invalidPrecision': 'The value of the precision property is invalid!',
                'invalidWidth': 'Width you\'ve entered is invalid!',
                'invalidHeight': 'Height you\'ve entered is invalid!',
                'invalidCount': 'You\'ve entered invalid value for the count property!',
                'invalidValue': 'You\'ve entered invalid value property!'
            };
        },

        createInstance: function (args) {
            this._createRating();
        },

        destroy: function()
        {
            this.host.remove();
        },

        _createRating: function () {
            this.host.css('display', 'none');
            this.host.empty();
            this._addInput();
            this._validateProperties();
            this._render();
            this._performLayout();
            this._removeEventHandlers();
            this._addEventHandlers();
            this.host.css('display', 'block');
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
            this.input.val(this.value.toString());
        },

        _render: function () {
            for (var i = 1; i <= this.count; i++) {
                this._images[i - 1] = $('<div style="float:left;width:auto;height:auto;">' +
                                            '<div style="position:absolute;width:auto;height:auto;visibility:hidden;" class="jqx-rating-hoverWrapper">' +
                                                '<div style="width:auto;height:auto;float:left;" class="' + this.toThemeProperty('jqx-rating-image-hover') + '"></div>' +
                                                '<div style="visibility:hidden;width:auto;height:auto;" class="' + this.toThemeProperty('jqx-rating-image-backward') + '"></div>' +
                                            '</div>' +
                                            '<div style="position:absolute;width:auto;height:auto;" class="jqx-rating-voteWrapper">' +
                                                '<div style="width:auto;height:auto;float:left;" class="' + this.toThemeProperty('jqx-rating-image-default') + '"></div>' +
                                                '<div style="width:0;height:auto;float:left;" class="' + this.toThemeProperty('jqx-rating-image-backward') + '"></div>' +
                                            '</div>' +
                                        '</div>');
                this.host.append(this._images[i - 1]);
            }
        },

        _performLayout: function () {
            for (var i = 1; i <= this.count; i++) {
                var backwardImageDiv = this._images[i - 1].find(this.toThemeProperty('.jqx-rating-image-backward', true)),
                    defaultImageDiv = this._images[i - 1].find(this.toThemeProperty('.jqx-rating-image-default', true)),
                    hoverImageDiv = this._images[i - 1].find(this.toThemeProperty('.jqx-rating-image-hover', true)),
                    defaultImageUrl = this._getImageName(defaultImageDiv), 
                    hoverImageUrl = this._getImageName(hoverImageDiv),
                    backwardImageUrl = this._getImageName(backwardImageDiv);
                defaultImageDiv.css('background-image', 'none');
                hoverImageDiv.css('background-image', 'none');
                backwardImageDiv.css('background-image', 'none');
                this._appendImage(hoverImageDiv, hoverImageUrl, i - 1);
                this._appendImage(backwardImageDiv, backwardImageUrl, i - 1);
                this._appendImage(defaultImageDiv, defaultImageUrl, i - 1);
            }
        },

        _setControlSize: function (width, height) {
            this.host.css('height', this.height);
            this.host.css('width', this.width);
            if (this.itemHeight && this.itemHeight !== 'auto') {
                this._itemHeight = parseInt(this.itemHeight);
            } else {
                this._itemHeight = height;
            }
            if (this.itemWidth && this.itemWidth !== 'auto') {
                this._itemWidth = parseInt(this.itemWidth);
            } else {
                this._itemWidth = width;
            }
        },

        _appendImage: function (container, imageUrl, imageId) {
            var self = this;
            var image = $('<img style="-moz-user-select:-moz-none;-khtml-user-select: ' +
                        'none;-webkit-user-select:none;user-select:none;" class="' + this.toThemeProperty('jqx-rating-image') + '" src="' + imageUrl + '" />');
            container.append(image);
            image.load(function () {
                if (!self._initialized) {
                    self._setControlSize($(this).width(), $(this).height());
                    self._setValue(self.value, '.jqx-rating-voteWrapper', '.jqx-rating-image-default', '.jqx-rating-image-backward');
                    self._initialized = true;
                }
                self._images[imageId].height(self._itemHeight);
                $(this).height(self._itemHeight);
                self._images[imageId].width(self._itemWidth);
                $(this).width(self._itemWidth);
            });
            return image;
        },

        _validateProperties: function () {
            try {
                if (this.precision < 0.001 || this.precision > 1) {
                    throw this._invalidArgumentExceptions['invalidPrecision'];
                }
                if (this.height !== 'auto' && parseInt(this.height) < 0) {
                    throw this._invalidArgumentExceptions['invalidHeight'];
                }
                if (this.width !== 'auto' && parseInt(this.width) < 0) {
                    throw this._invalidArgumentExceptions['invalidWidth'];
                }
                if (this.count <= 0) {
                    throw this._invalidArgumentExceptions['invalidCount'];
                }
                if (this.value > this.count || this.value < 0) {
                    throw this._invalidArgumentExceptions['invalidValue'];
                }
            } catch (exception) {
                alert(exception);
            }
        },

        _getImageIndex: function (image) {
            var index = 0;
            while (image !== this._images[index][0]) {
                index++;
            }
            return ++index;
        },

        _getRating: function (image, pageCoordinate) {
            var imageRate = this._getImageIndex(image);
            if (this.precision < 1) {
                var leftOffet = parseInt(pageCoordinate) - parseInt($(image).position().left),
                    sectorSize = this._itemWidth * this.precision, size = 0;
                while (size < leftOffet) {
                    size += sectorSize;
                }
                if (size > parseInt(this._itemWidth) - sectorSize) {
                    size = parseInt(this._itemWidth);
                }
                var percents = size / $(image).width();
                imageRate -= 1 - percents;
            }
            return imageRate;
        },

        _addEventHandlers: function () {
            var self = this;
            for (var i = 0; i < this.count; i++) {
                if (!$.jqx.mobile.isTouchDevice()) {
                    this.addHandler(this._images[i], 'mousemove', function (event) {
                        var imageRate = self._getRating(this, event.pageX);
                        self._setValue(imageRate, '.jqx-rating-hoverWrapper', '.jqx-rating-image-hover', '.jqx-rating-image-backward');
                    });
                    this.addHandler(this._images[i], 'mouseenter', function (event) {
                        var imageRate = self._getImageIndex(this);
                        for (var j = 0; j < imageRate; j++) {
                            self._images[j].children('.jqx-rating-hoverWrapper').css('z-index', '10');
                            self._images[j].children('.jqx-rating-voteWrapper').css('z-index', '1');
                            self._images[j].children('.jqx-rating-hoverWrapper').css('visibility', 'visible');
                        }
                    });
                    this.addHandler(this._images[i], 'mouseleave', function (event) {
                        var imageRate = self._getImageIndex(this);
                        for (var j = 0; j < imageRate; j++) {
                            self._images[j].children('.jqx-rating-voteWrapper').css('z-index', '10');
                            self._images[j].children('.jqx-rating-hoverWrapper').css('z-index', '1');
                            self._images[j].children('.jqx-rating-hoverWrapper').css('visibility', 'hidden');
                        }
                    });
                }
                this.addHandler(this._images[i], 'click', function (event) {
                    var imageRate = self._getRating(this, event.pageX);
                    self._raiseEvent(0, imageRate);
                    self._setValue(imageRate, '.jqx-rating-voteWrapper', '.jqx-rating-image-default', '.jqx-rating-image-backward');
                    if (self.singleVote) {
                        self.disable();
                    }
                    event.stopPropagation();
                });
                this.addHandler(this._images[i], 'dragstart', function (event) {
                    return false;
                });
            }
        },

        _removeEventHandlers: function () {
            for (var i = 0; i < this.count; i++) {
                this.removeHandler(this._images[i], 'mousemove');
                this.removeHandler(this._images[i], 'mouseenter');
                this.removeHandler(this._images[i], 'mouseleave');
                this.removeHandler(this._images[i], 'click');
                this.removeHandler(this._images[i], 'dragstart');
            }
        },

        _getImageName: function (image) {
            var imageUrl = image.css('background-image')
            imageUrl = imageUrl.replace('url("', '');
            imageUrl = imageUrl.replace('")', '');
            imageUrl = imageUrl.replace('url(', '');
            imageUrl = imageUrl.replace(')', '');
            return imageUrl;
        },

        _setValue: function (rating, parent, rated, nonRated) {
            for (var i = 1; i <= this.count; i++) {
                var percent = 1,
                    parentNode = this._images[i - 1].children(parent),
                    rateDiv = parentNode.children(rated),
                    nonRatedDiv = parentNode.children(nonRated);
                if (i > rating) {
                    if (Math.abs(i - rating) < 1) {
                        percent = 1 - Math.abs(i - rating);
                    } else {
                        percent = 0;
                    }
                }
                rateDiv.width(this._itemWidth * percent);
                nonRatedDiv.width(this._itemWidth - parseInt(rateDiv.width()));
                parentNode.children(this.toThemeProperty(nonRated)).children(0).css('margin-left', -this._itemWidth * percent + 'px');
            }
        },

        _raiseEvent: function (id, newValue) {
            var event = new $.Event(this._events[id]);
            event.owner = this;
            event.value = newValue;
            event.oldvalue = this.value;
            this.value = newValue;
            if (this.input) {
                this.input.val(this.value.toString());
            }
            return this.host.trigger(event);
        },

        //Setting value to the rating widget
        setValue: function (value) {
            this._setValue(value, '.jqx-rating-voteWrapper', '.jqx-rating-image-default', '.jqx-rating-image-backward');
            this.value = value;
        },

        //Getting current rating value
        getValue: function () {
            return this.value;
        },

        //Disabling the widget
        disable: function () {
            this._removeEventHandlers();
            this.disabled = true;
        },

        //Enabling the widget
        enable: function () {
            this._removeEventHandlers();
            this._addEventHandlers();
            this.disabled = false;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            this._validateProperties();
            if (key === 'disabled') {
                if (value) {
                    this.disable();
                } else {
                    this.enable();
                }
                return;
            } else if (key === 'precision') {
                this.precision = value;
                return;
            } else {
                this._createRating();
            }
        }
    });
})(jQuery);/*

Depends:
jqxcore.js
jqxbuttons.js

*/
(function ($) {

    $.jqx.jqxWidget("jqxSlider", "", {});

    $.extend($.jqx._jqxSlider.prototype, {
        defineInstance: function () {
            // Type: Bool
            // Default: false
            // Sets or gets whether the slider is disabled.
            this.disabled = false;
            // Type: Number/String
            // Default: 300
            // Sets or gets slider's width.
            this.width = 300;
            // Type: Number/String
            // Default: 30
            // Sets or gets slider's height.
            this.height = 30;
            // Type: Number
            // Default: 2
            // Sets or gets slide step when the user is using the arrows or the mouse wheel for changing slider's value.
            this.step = 1;
            // Type: Number
            // Default: 10
            // Sets or gets slider's maximum value.
            this.max = 10;
            // Type: Number
            // Default: 0
            // Sets or gets slider's minimum value.
            this.min = 0;
            // Type: String
            // Default: horizontal
            // Sets or gets slider's orientation.
            this.orientation = 'horizontal';
            // Type: Bool
            // Default: true
            // Sets or gets whether ticks will be shown.
            this.showTicks = true;
            // Type: Number
            // Default: both
            // Sets or gets slider's ticks position. Possible values - 'top', 'bottom', 'both'.
            this.ticksPosition = 'both';
            // Type: Number
            // Default: 2
            // Sets or gets slider's ticks frequency.
            this.ticksFrequency = 2;
            // Type: Bool
            // Default: true
            // Sets or gets whether the scroll buttons will be shown.
            this.showButtons = true;
            // Type: String
            // Default: both
            // Sets or gets scroll buttons position. Possible values 'both', 'left', 'right'.
            this.buttonsPosition = 'both';
            // Type: String
            // Default: default
            // Sets or gets slider's mode. If the mode is default then the user can use floating values.
            this.mode = 'default';
            // Type: Bool
            // Default: true
            // Sets or gets whether the slide range is going to be shown.
            this.showRange = true;
            // Type: Bool
            // Default: false
            // Sets or gets whether the slider is a range slider.
            this.rangeSlider = false;
            // Type: Number
            // Default: 0
            // Sets or gets slider's value. This poperty will be an object with the following structure { rangeStart: range_start, rangeEnd: range_end } if the
            // slider is range slider otherwise it's going to be a number.
            this.value = 0;
            // Type: Array
            // Default: [0, 10]
            // Sets or gets range slider's values.
            this.values = [0, 10];
            // Type: Bool
            // Default: true
            // Sets or gets whether the slider title will be shown.
            this.tooltip = true;
            // Type: Number/String
            // Default: 11
            // Sets or gets whether the slider buttons size.
            this.sliderButtonSize = 14;
            // Type: Number/String
            // Default: 5
            // Sets or gets the tick size.
            this.tickSize = 7;
            // Private properties
            this._dimentions = {
                'vertical': {
                    'size': 'height',
                    'oSize': 'width',
                    'outerOSize': 'outerWidth',
                    'outerSize': 'outerHeight',
                    'dimention': 'top',
                    'oDimention': 'left',
                    'start': '_startY',
                    'mouse': '_mouseStartY',
                    'page': 'pageY',
                    'opposite': 'horizontal'
                },
                'horizontal': {
                    'size': 'width',
                    'oSize': 'height',
                    'outerOSize': 'outerHeight',
                    'outerSize': 'outerWidth',
                    'dimention': 'left',
                    'oDimention': 'top',
                    'start': '_startX',
                    'mouse': '_mouseStartX',
                    'page': 'pageX',
                    'opposite': 'vertical'
                }
            };
            this._touchEvents = {
                'mousedown': 'touchstart',
                'click': 'touchstart',
                'mouseup': 'touchend',
                'mousemove': 'touchmove',
                'mouseenter': 'mouseenter',
                'mouseleave': 'mouseleave'
            };
            this._events = ['change', 'slide', 'slideEnd', 'slideStart', 'created'];
            this._invalidArgumentExceptions = {
                'invalidWidth': 'Invalid width.',
                'invalidHeight': 'Invalid height.',
                'invalidStep': 'Invalid step.',
                'invalidMaxValue': 'Invalid maximum value.',
                'invalidMinValue': 'Invalid minimum value.',
                'invalidTickFrequency': 'Invalid tick frequency.',
                'invalidValue': 'Invalid value.',
                'invalidValues': 'Invalid values.',
                'invalidTicksPosition': 'Invalid ticksPosition',
                'invalidButtonsPosition': 'Invalid buttonsPosition'
            };
            //Containing the last value. This varialbe is used in the _raiseEvent method and it's our criteria for checking
            //whether we need to trigger event.
            this._lastValue = [];
            this._track = null;
            this._leftButton = null;
            this._rightButton = null;
            this._slider = null;
            this._rangeBar = null;
            this._slideEvent = null;
            this._capturedElement = null;
            this._slideStarted = false;
        },

        createInstance: function (args) {
            this.host.addClass(this.toThemeProperty('jqx-slider'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));

            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this.host.width(this.width);
            this.host.height(this.height);
            this._refresh();
            this._raiseEvent(4, { value: this.getValue() });
            this._addInput();
        },

        destroy: function () {
            this.host.remove();
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
            if (!this.rangeSlider) {
                this.input.val(this.value.toString());
            }
            else {
                if (this.values) {
                    this.input.val(this.value.rangeStart.toString() + "-" + this.value.rangeEnd.toString());
                }
            }
        },

        _getDimention: function (dimention) {
            return this._dimentions[this.orientation][dimention];
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._touchEvents[event];
            } else {
                return event;
            }
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this._refresh();
            }
        },

        _refresh: function () {
            this._render();
            this._performLayout();
            this._removeEventHandlers();
            this._addEventHandlers();
            this._initialSettings();
        },

        _render: function () {
            this._addTrack();
            this._addSliders();
            this._addTickContainers();
            this._addContentWrapper();
            this._addButtons();
            this._addRangeBar();
        },

        _addTrack: function () {
            if (this._track === null || this._track.length < 1) {
                this._track = $('<div class="' + this.toThemeProperty('jqx-slider-track') + '"></div>');
                this.host.append(this._track);
            }
            this._track.attr('style', '');
            this._track.removeClass(this.toThemeProperty('jqx-slider-track-' + this._getDimention('opposite')));
            this._track.addClass(this.toThemeProperty('jqx-slider-track-' + this.orientation));
            this._track.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this._track.addClass(this.toThemeProperty('jqx-rc-all'));
        },

        _addSliders: function () {
            if (this._slider === null || this._slider.length < 1) {
                this._slider = {};
                this._slider.left = $('<div class="' + this.toThemeProperty('jqx-slider-slider') + '"></div>');
                this._track.append(this._slider.left);
                this._slider.right = $('<div class="' + this.toThemeProperty('jqx-slider-slider') + '"></div>');
                this._track.append(this._slider.right);
            }
            this._slider.left.removeClass(this.toThemeProperty('jqx-slider-slider-' + this._getDimention('opposite')));
            this._slider.left.addClass(this.toThemeProperty('jqx-slider-slider-' + this.orientation));
            this._slider.right.removeClass(this.toThemeProperty('jqx-slider-slider-' + this._getDimention('opposite')));
            this._slider.right.addClass(this.toThemeProperty('jqx-slider-slider-' + this.orientation));
            this._slider.right.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this._slider.left.addClass(this.toThemeProperty('jqx-fill-state-normal'));
        },

        _addTickContainers: function () {
            if (this._bottomTicks !== null || this._bottomTicks.length < 1 ||
                this._topTicks !== null || this._topTicks.length < 1) {
                this._addTickContainers();
            }
            if (!this.showTicks) {
                this._bottomTicks.css('visibility', 'hidden');
                this._topTicks.css('visibility', 'hidden');
            } else {
                this._bottomTicks.css('visibility', 'visible');
                this._topTicks.css('visibility', 'visibility');
            }
        },

        _addTickContainers: function () {
            if (typeof this._bottomTicks === 'undefined' || this._bottomTicks.length < 1) {
                this._bottomTicks = $('<div class="' + this.toThemeProperty('jqx-slider-tickscontainer') + '" style=""></div>');
                this.host.prepend(this._bottomTicks);
            }
            if (typeof this._topTicks === 'undefined' || this._topTicks.length < 1) {
                this._topTicks = $('<div class="' + this.toThemeProperty('jqx-slider-tickscontainer') + '" style=""></div>');
                this.host.append(this._topTicks);
            }
        },

        _addButtons: function () {
            if (this._leftButton === null || this._leftButton.length < 1 ||
                this._rightButton === null || this._rightButton.length < 1) {
                this._createButtons();
            }
            if (!this.showButtons || this.rangeSlider) {
                this._rightButton.css('display', 'none');
                this._leftButton.css('display', 'none');
            } else {
                this._rightButton.css('display', 'block');
                this._leftButton.css('display', 'block');
            }
        },

        _createButtons: function () {
            this._leftButton = $('<div class="jqx-slider-left"><div style="width: 100%; height: 100%;"></div></div>');
            this._rightButton = $('<div class="jqx-slider-right"><div style="width: 100%; height: 100%;"></div></div>');
            this.host.prepend(this._rightButton);
            this.host.prepend(this._leftButton);
            this._leftButton.jqxRepeatButton({ theme: this.theme, delay: 250, width: this.sliderButtonSize, height: this.sliderButtonSize });
            this._rightButton.jqxRepeatButton({ theme: this.theme, delay: 250, width: this.sliderButtonSize, height: this.sliderButtonSize });
        },

        _addContentWrapper: function () {
            if (this._contentWrapper === undefined || this._contentWrapper.length === 0) {
                this.host.wrapInner('<div></div>');
                this._contentWrapper = this.host.children(0);
            }
            if (this.orientation === 'horizontal') {
                this._contentWrapper.css('float', 'left');
            } else {
                this._contentWrapper.css('float', 'none');
            }
        },

        //Webkit don't know how to handle with width with floating point. We are correcting the error using displacement and error varaibles
        _addTicks: function (container) {
            if (!this.showTicks)
                return;

            var count = this.max - this.min,
                width = container[this._getDimention('size')](),
                tickscount = Math.round(count / this.ticksFrequency),
                distance = width / tickscount;
            container.empty();
            this._addTick(container, 0, this.min);
            for (var i = 1; i < tickscount; i++) {
                var number = i * distance;
                number = Math.floor(number);
                this._addTick(container, number, i);
            }
            this._addTick(container, tickscount * distance, this.max);
        },

        _addTick: function (container, position, value) {
            var currentTick, size = container[this._getDimention('oSize')]();
            if (this.orientation === 'horizontal') {
                currentTick = $('<div style="float: left; position:absolute; left:' + position +
                                'px;" class="' + this.toThemeProperty('jqx-slider-tick-horizontal') + '"></div>');
                this._tickLayout(container, currentTick);
            } else {
                currentTick = $('<div style="float: none; position:absolute; top:' + position +
                                'px;" class="' + this.toThemeProperty('jqx-slider-tick-vertical') + '"></div>');
                this._tickLayout(container, currentTick);
            }
            //currentTick[0].value = value;
            currentTick.addClass(this.toThemeProperty('jqx-slider-tick'));
            currentTick.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            container.append(currentTick);
            currentTick[this._getDimention('oSize')](this.tickSize);
        },

        _tickLayout: function (container, currentTick) {
            var size = container[this._getDimention('oSize')]();
            if (container[0] === this._topTicks[0]) {
                currentTick.css(this._getDimention('oDimention'), '2px');
            } else {
                currentTick.css(this._getDimention('oDimention'), size - this.tickSize - 2);
            }
        },

        _addRangeBar: function () {
            if (this._rangeBar === null || this._rangeBar.length < 1) {
                this._rangeBar = $('<div class="' + this.toThemeProperty('jqx-slider-rangebar') + '"></div>');
                this._rangeBar.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._rangeBar.addClass(this.toThemeProperty('jqx-rc-all'));
                this._track.append(this._rangeBar);
            }
            if (!this.showRange) {
                this._rangeBar.css('display', 'none');
            } else {
                this._rangeBar.css('display', 'block');
            }
        },

        _getLeftDisplacement: function () {
            if (!this.showButtons) {
                return 0;
            }
            if (this.rangeSlider) {
                return 0;
            }
            switch (this.buttonsPosition) {
                case 'left':
                    return this._leftButton[this._getDimention('outerSize')](true) + this._rightButton[this._getDimention('outerSize')](true);
                case 'right':
                    return 0;
                default:
                    return this._leftButton[this._getDimention('outerSize')](true);
            }
            return 0;
        },

        _performLayout: function () {
            this.host.width(this.width);
            this.host.height(this.height);
            var size = this.host.height();
            if (this._getDimention('size') == 'width') {
                size = this.host.width();
            }

            this._performButtonsLayout();
            this._performTrackLayout(size);
            this._contentWrapper[this._getDimention('size')](this._track[this._getDimention('size')]());
            this._contentWrapper[this._getDimention('oSize')](this[this._getDimention('oSize')]);
            this._performTicksLayout();
            this._performRangeBarLayout();
            if (this.rangeSlider) {
                this._slider.left.css('visibility', 'visible');
            } else {
                this._slider.left.css('visibility', 'hidden');
            }
            this._refreshRangeBar();
            if (this.orientation == 'vertical') {
                if (this.showButtons) {
                    //   var leftMargin = parseInt(this._leftButton.css('margin-left'));
                    var centerLeft = parseInt((this._leftButton.width() - this._track.width()) / 2);

                    this._track.css('margin-left', -2 + centerLeft + 'px');
                }
            }
        },

        _performTrackLayout: function (size) {
            this._track[this._getDimention('size')](size - ((this.showButtons && !this.rangeSlider) ?
                        this._leftButton[this._getDimention('outerSize')](true) + this._rightButton[this._getDimention('outerSize')](true) : 0));
            this._slider.left.css('left', 0);
            this._slider.left.css('top', 0);
            this._slider.right.css('left', 0);
            this._slider.right.css('top', 0);
        },

        _performTicksLayout: function () {
            this._performTicksContainerLayout();
            this._addTicks(this._topTicks);
            this._addTicks(this._bottomTicks);
            this._topTicks.css('visibility', 'hidden');
            this._bottomTicks.css('visibility', 'hidden');
            if ((this.ticksPosition === 'top' || this.ticksPosition === 'both') && this.showTicks) {
                this._bottomTicks.css('visibility', 'visible');
            }
            if ((this.ticksPosition === 'bottom' || this.ticksPosition === 'both') && this.showTicks) {
                this._topTicks.css('visibility', 'visible');
            }
        },

        _performTicksContainerLayout: function () {
            var sizeDimension = this._getDimention('size');
            var oSizeDimension = this._getDimention('oSize');
            var outerSizeDimension = this._getDimention('outerOSize');

            this._topTicks[sizeDimension](this._track[sizeDimension]());
            this._bottomTicks[sizeDimension](this._track[sizeDimension]());
            var topTicksSize = -1 + (this[oSizeDimension] - this._track[outerSizeDimension](true)) / 2;
            this._topTicks[oSizeDimension](parseInt(topTicksSize));
            var bottomTicksSize = -1 + (this[oSizeDimension] - this._track[outerSizeDimension](true)) / 2;
            this._bottomTicks[oSizeDimension](parseInt(bottomTicksSize));

            if (this.orientation === 'vertical') {
                this._topTicks.css('float', 'left');
                this._track.css('float', 'left');
                this._bottomTicks.css('float', 'left');
            } else {
                this._topTicks.css('float', 'none');
                this._track.css('float', 'none');
                this._bottomTicks.css('float', 'none');
            }
        },

        _performButtonsLayout: function () {
            this._addButtonsStyles();
            this._addButtonsClasses();
            this._addButtonsHover();
            this._orderButtons();
            this._centerElement(this._rightButton);
            this._centerElement(this._leftButton);
            this._layoutButtons();
        },

        _addButtonsStyles: function () {
            this._leftButton.css('background-position', 'center');
            this._rightButton.css('background-position', 'center');
            if (this.orientation === 'vertical') {
                this._leftButton.css('float', 'none');
                this._rightButton.css('float', 'none');
            } else {
                this._leftButton.css('float', 'left');
                this._rightButton.css('float', 'left');
            }
        },

        _addButtonsClasses: function () {
            var icons = { prev: 'left', next: 'right' };
            if (this.orientation === 'vertical') {
                icons = { prev: 'up', next: 'down' };
            }
            this._leftButton.addClass(this.toThemeProperty('jqx-rc-all'));
            this._rightButton.addClass(this.toThemeProperty('jqx-rc-all'));
            this._leftButton.addClass(this.toThemeProperty('jqx-slider-button'));
            this._rightButton.addClass(this.toThemeProperty('jqx-slider-button'));
            this._leftArrow = this._leftButton.find('div');
            this._rightArrow = this._rightButton.find('div');
            this._leftArrow.removeClass(this.toThemeProperty('icon-arrow-left'));
            this._rightArrow.removeClass(this.toThemeProperty('icon-arrow-right'));
            this._leftArrow.removeClass(this.toThemeProperty('icon-arrow-up'));
            this._rightArrow.removeClass(this.toThemeProperty('icon-arrow-down'));
            this._leftArrow.addClass(this.toThemeProperty('icon-arrow-' + icons.prev));
            this._rightArrow.addClass(this.toThemeProperty('icon-arrow-' + icons.next));
        },

        _addButtonsHover: function () {
            var me = this, icons = { prev: 'left', next: 'right' };
            if (this.orientation === 'vertical') {
                icons = { prev: 'up', next: 'down' };
            }

            this.addHandler($(document), 'mouseup.arrow' + this.element.id, function () {
                me._leftArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.prev + '-selected'));
                me._rightArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.next + '-selected'));
            });

            this.addHandler(this._leftButton, 'mousedown', function () {
                if (!me.disabled)
                me._leftArrow.addClass(me.toThemeProperty('icon-arrow-' + icons.prev + '-selected'));
            });
            this.addHandler(this._leftButton, 'mouseup', function () {
                if (!me.disabled)
                    me._leftArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.prev + '-selected'));
            });
            this.addHandler(this._rightButton, 'mousedown', function () {
                if (!me.disabled)
                    me._rightArrow.addClass(me.toThemeProperty('icon-arrow-' + icons.next + '-selected'));
            });
            this.addHandler(this._rightButton, 'mouseup', function () {
                if (!me.disabled)
                    me._rightArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.next + '-selected'));
            });

            this._leftButton.hover(function () {
                if (!me.disabled)
                    me._leftArrow.addClass(me.toThemeProperty('icon-arrow-' + icons.prev + '-hover'));
            }, function () {
                if (!me.disabled)
                    me._leftArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.prev + '-hover'));
            });
            this._rightButton.hover(function () {
                if (!me.disabled)
                    me._rightArrow.addClass(me.toThemeProperty('icon-arrow-' + icons.next + '-hover'));
            }, function () {
                if (!me.disabled)
                    me._rightArrow.removeClass(me.toThemeProperty('icon-arrow-' + icons.next + '-hover'));
            });
        },

        _layoutButtons: function () {
            if (this.orientation === 'horizontal') {
                this._horizontalButtonsLayout();
            } else {
                this._verticalButtonsLayout();
            }
        },

        _horizontalButtonsLayout: function () {
            var offset = (2 + Math.ceil(this.sliderButtonSize / 2));
            if (this.buttonsPosition == 'left') {
                this._leftButton.css('margin-right', '0px');
                this._rightButton.css('margin-right', offset);
            } else if (this.buttonsPosition == 'right') {
                this._leftButton.css('margin-left', 2 + offset);
                this._rightButton.css('margin-right', '0px');
            } else {
                this._leftButton.css('margin-right', offset);
                this._rightButton.css('margin-left', 2 + offset);
            }
        },

        _verticalButtonsLayout: function () {
            var offset = (2 + Math.ceil(this.sliderButtonSize / 2));
            if (this.buttonsPosition == 'left') {
                this._leftButton.css('margin-bottom', '0px');
                this._rightButton.css('margin-bottom', offset);
            } else if (this.buttonsPosition == 'right') {
                this._leftButton.css('margin-top', 2 + offset);
                this._rightButton.css('margin-bottom', '0px');
            } else {
                this._leftButton.css('margin-bottom', offset);
                this._rightButton.css('margin-top', 2 + offset);
            }
        },

        _orderButtons: function () {
            this._rightButton.detach();
            this._leftButton.detach();
            switch (this.buttonsPosition) {
                case 'left':
                    this.host.prepend(this._rightButton);
                    this.host.prepend(this._leftButton);
                    break;
                case 'right':
                    this.host.append(this._leftButton);
                    this.host.append(this._rightButton);
                    break;
                case 'both':
                    this.host.prepend(this._leftButton);
                    this.host.append(this._rightButton);
                    break;
            }
        },

        _performRangeBarLayout: function () {
            this._rangeBar[this._getDimention('oSize')](this._track[this._getDimention('oSize')]());
            this._rangeBar[this._getDimention('size')](this._track[this._getDimention('size')]());
            this._rangeBar.css('position', 'absolute');
            this._rangeBar.css('left', 0);
            this._rangeBar.css('top', 0);
        },

        _centerElement: function (element) {
            var displacement = ($(element.parent())[this._getDimention('oSize')]() - element[this._getDimention('outerOSize')]()) / 2;
            element.css('margin-' + [this._getDimention('dimention')], 0);
            element.css('margin-' + [this._getDimention('oDimention')], displacement);
            return element;
        },

        _raiseEvent: function (id, arg) {
            var event = $.Event(this._events[id]);
            event.args = arg;
            if (id === 1) {
                event.args.cancel = false;
                this._slideEvent = event;
            }
            this._lastValue[id] = arg.value;
            return this.host.trigger(event);
        },

        //Initializing the slider - setting it's values, disabling it if
        //disabled is true and setting tab-indexes for the keyboard navigation
        _initialSettings: function () {
            if (this.rangeSlider) {
                if (typeof this.value !== 'number') {
                    this.setValue(this.value);
                } else {
                    this.setValue(this.values);
                }
            } else {
                this.setValue(this.value);
            }
            if (this.disabled) {
                this.disable();
            }
            this.element.tabIndex = 0;
            this.host.find('DIV').css('tab-index', 0);
        },

        //Mouse down handlers for the left and right buttons are because of the mousedown handler for
        //the host (used for directly setting value). When the user clicks on the button first the host
        //triggers mousedown so the _trackMouseDownHandler is executing but we don't want this that's why we are
        //stopping event propagation.
        _addEventHandlers: function () {
            var self = this;
            this.addHandler(this._slider.right, this._getEvent('mousedown'), this._startDrag, { self: this });
            this.addHandler(this._slider.left, this._getEvent('mousedown'), this._startDrag, { self: this });
            this.addHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'), function () {
                self._stopDrag(self);
            });

            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    var eventHandle = function (event) {
                        self._stopDrag(self);
                    };
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        if (window.top.document) {
                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }
                    }
                }
            }
            this.addHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'), this._performDrag, { self: this });
            var me = this;
            this.addHandler(this._slider.left, 'mouseenter', function () {
                if (!me.disabled)
                    self._slider.left.addClass(self.toThemeProperty('jqx-fill-state-hover'));
            });

            this.addHandler(this._slider.right, 'mouseenter', function () {
                if (!me.disabled)
                    self._slider.right.addClass(self.toThemeProperty('jqx-fill-state-hover'));
            });

            this.addHandler(this._slider.left, 'mouseleave', function () {
                if (!me.disabled)
                    self._slider.left.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
            });

            this.addHandler(this._slider.right, 'mouseleave', function () {
                if (!me.disabled)
                    self._slider.right.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
            });

            this.addHandler(this._slider.left, 'mousedown', function () {
                if (!me.disabled)
                    self._slider.left.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
            });

            this.addHandler(this._slider.right, 'mousedown', function () {
                if (!me.disabled)
                    self._slider.right.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
            });

            this.addHandler(this._slider.left, 'mouseup', function () {
                if (!me.disabled)
                    self._slider.left.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
            });

            this.addHandler(this._slider.right, 'mouseup', function () {
                if (!me.disabled)
                    self._slider.right.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
            });

            this.addHandler(this._leftButton, this._getEvent('click'), this._leftButtonHandler, { self: this });
            this.addHandler(this._rightButton, this._getEvent('click'), this._rightButtonHandler, { self: this });
            this.addHandler(this._track, this._getEvent('mousedown'), this._trackMouseDownHandler, { self: this });
            this.element.onselectstart = function () { return false; }
            this._addMouseWheelListeners();
            this._addKeyboardListeners();
        },

        _addMouseWheelListeners: function () {
            var self = this;
            this.addHandler(this.host, 'mousewheel', function (event) {
                var scroll = event.wheelDelta;
                if (event.originalEvent && event.originalEvent.wheelDelta) {
                    event.wheelDelta = event.originalEvent.wheelDelta;
                }

                if (!('wheelDelta' in event)) {
                    scroll = event.detail * -40;
                }
                if (scroll > 0) {
                    self.incrementValue();
                } else {
                    self.decrementValue();
                }
                event.preventDefault();
            });
        },

        _addKeyboardListeners: function () {
            var self = this;
            this.addHandler(this.host, 'keydown', function (event) {
                switch (event.keyCode) {
                    case 40:
                    case 37:    //left arrow
                        self.decrementValue();
                        return false;
                    case 38:
                    case 39:    //right arrow
                        self.incrementValue();
                        return false;
                    case 36:    //home
                        if (self.rangeSlider) {
                            self.setValue([self.values[0], self.max]);
                        } else {
                            self.setValue(self.min);
                        }
                        return false;
                    case 35:    //end
                        if (self.rangeSlider) {
                            self.setValue([self.min, self.values[1]]);
                        } else {
                            self.setValue(self.max);
                        }
                        return false;
                }
            });
        },

        _trackMouseDownHandler: function (event) {
            var self = event.data.self,
                event = (self._isTouchDevice) ? event.originalEvent.touches[0] : event,
                position = self._track.offset()[self._getDimention('dimention')],
                pagePos = event[self._getDimention('page')] - self._slider.left[self._getDimention('size')]() / 2,
                slider = self._getClosest(pagePos),
                size = parseInt(self._track[self._getDimention('size')]());
            var value = self._getValueByPosition(pagePos);
            self._setValue(value, slider);
            event.target = slider;
            self._startDrag(event);
        },

        _getClosest: function (position) {
            if (!this.rangeSlider) {
                return this._slider.right;
            } else {
                position = position - this._track.offset()[this._getDimention('dimention')] - this._slider.left[this._getDimention('size')]() / 2;
                if (Math.abs(parseInt(this._slider.left.css(this._getDimention('dimention')), 10) - position) <
                Math.abs(parseInt(this._slider.right.css(this._getDimention('dimention')), 10) - position)) {
                    return this._slider.left;
                } else {
                    return this._slider.right;
                }
            }
        },

        _removeEventHandlers: function () {
            this.removeHandler(this._slider.right, this._getEvent('mousedown'), this._startDrag);
            this.removeHandler(this._slider.left, this._getEvent('mousedown'), this._startDrag);
            this.removeHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'), this._stopDrag);
            this.removeHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'), this._performDrag);
            this.removeHandler(this._leftButton, this._getEvent('click'), this._leftButtonHandler);
            this.removeHandler(this._rightButton, this._getEvent('click'), this._rightButtonHandler);
            this.removeHandler(this._track, this._getEvent('mousedown'), this._trackMouseDownHandler);
            this.element.onselectstart = null;
            this.removeHandler(this.host, this._getEvent('mousewheel'));
            this.removeHandler(this.host, this._getEvent('keydown'));
        },

        _rightButtonHandler: function (event) {
            var self = event.data.self;
            if (self.orientation == 'horizontal') {
                self.incrementValue();
            }
            else {
                self.decrementValue();
            }
        },

        _leftButtonHandler: function (event) {
            var self = event.data.self;
            if (self.orientation == 'horizontal') {
                self.decrementValue();
            }
            else self.incrementValue();
        },

        _startDrag: function (event) {
            var self = event.data.self;
            self._capturedElement = $(event.target);
            self._startX = $(event.target).offset().left;
            self._startY = $(event.target).offset().top;
            self._mouseStartX = (self._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX;
            self._mouseStartY = (self._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY;
            return false;
        },

        _stopDrag: function (self) {
            if (self._slideStarted) {   //if the slideStart event have been triggered and the user is dropping the thumb we are firing a slideStop event
                self._raiseEvent(2, { value: self.getValue() });
            }

            self._slider.left.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
            self._slider.right.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));

            self._slideStarted = false;
            self._capturedElement = null;
        },

        _performDrag: function (event) {
            var self = event.data.self,
                event = (self._isTouchDevice) ? event.originalEvent.touches[0] : event;
            if (self._capturedElement !== null) {
                if (event.which === 0 && $.browser.msie && $.browser.version < 9) {
                    self._stopDrag(self);
                    return false;
                }
                //if the thumb is dragged more than 3 pixels we are firing an event
                self._isDragged(event[self._getDimention('page')])
                if (self._slideStarted) {
                    return self._dragHandler(event[self._getDimention('page')]);
                }
            }
        },

        _isDragged: function (position) {
            if (Math.abs(position - this[this._getDimention('mouse')]) > 2 && !this._slideStarted) {
                this._slideStarted = true;
                if (this._valueChanged(3)) {
                    this._raiseEvent(3, { value: this.getValue() });
                }
            } else {
                if (this._capturedElement === null) {   //!FIXED!
                    this._slideStarted = false;
                }
            }
        },

        _dragHandler: function (position) {
            position = (position - this[this._getDimention('mouse')]) + this[this._getDimention('start')];
            var newvalue = this._getValueByPosition(position);
            if (this.rangeSlider) {
                var second = this._slider.right,
                     first = this._slider.left;
                var dimension = this._getDimention('dimention');

                if (this._capturedElement[0] === first[0]) {
                    if (parseFloat(position) > second.offset()[dimension]) {
                        position = second.offset()[dimension];
                    }
                } else {
                    if (parseFloat(position) < first.offset()[dimension]) {
                        position = first.offset()[dimension];
                    }
                }
            }
            this._setValue(newvalue, this._capturedElement, position);
            return false;
        },

        _getValueByPosition: function (position) {
            if (this.mode === 'default') {
                return this._getFloatingValueByPosition(position);
            } else {
                return this._getFixedValueByPosition(position);
            }
        },

        _getFloatingValueByPosition: function (position) {
            var relativePosition = position - this._track.offset()[this._getDimention('dimention')] + this._slider.left.width() / 2,
                ratio = relativePosition / this._track[this._getDimention('size')](),
                value = (this.max - this.min) * ratio + this.min;
            if (this.orientation === 'horizontal') {
                return value;
            } else {
                return (this.max + this.min) - value;
            }
        },

        _getFixedValueByPosition: function (position) {
            var step = this.step,
                count = (this.max - this.min) / step, sectorSize = (this._track[this._getDimention('size')]()) / count,
                currentSectorPosition = this._track.offset()[this._getDimention('dimention')] - this._slider.left[this._getDimention('size')]() / 2,
                closestSector = { number: -1, distance: Number.MAX_VALUE };
            //position -= this._track.offset()[this._getDimention('dimention')];
            for (var sector = this.min; sector <= this.max + this.step; sector += this.step) {
                if (Math.abs(closestSector.distance - position) > Math.abs(currentSectorPosition - position)) {
                    closestSector.distance = currentSectorPosition;
                    closestSector.number = sector;
                }
                currentSectorPosition += sectorSize;
            }
            if (this.orientation === 'horizontal') {
                return closestSector.number;
            } else {
                return (this.max + this.min) - closestSector.number;
            }
        },

        _setValue: function (value, slider, position) {
            if (!this._slideEvent || !this._slideEvent.args.cancel) {
                value = this._handleValue(value, slider);
                this._setSliderPosition(value, slider, position);
                this._fixZIndexes();
                if (this._valueChanged(1)) {
                    var event = this._raiseEvent(1, { value: this.getValue() });
                }
                if (this._valueChanged(0)) {
                    this._raiseEvent(0, { value: this.getValue() });
                }
                if (this.tooltip) {
                    slider.attr('title', value);
                }
                if (this.input) {
                    if (!this.rangeSlider) {
                        this.input.val(this.value.toString());
                    }
                    else {
                        if (this.values) {
                            this.input.val(this.value.rangeStart.toString() + "-" + this.value.rangeEnd.toString());
                        }
                    }
                }
            }
        },

        _valueChanged: function (id) {
            var value = this.getValue();
            return (!this.rangeSlider && this._lastValue[id] !== value) ||
                    (this.rangeSlider && (typeof this._lastValue[id] !== 'object' ||
                     Math.round(this._lastValue[id].rangeEnd) !== Math.round(value.rangeEnd) || Math.round(this._lastValue[id].rangeStart) !== Math.round(value.rangeStart)));
        },

        _handleValue: function (value, slider) {
            value = this._validateValue(value, slider);
            if (slider[0] === this._slider.left[0]) {
                this.values[0] = value;
            }
            if (slider[0] === this._slider.right[0]) {
                this.values[1] = value;
            }
            if (this.rangeSlider) {
                this.value = { rangeStart: this.values[0], rangeEnd: this.values[1] };
            } else {
                this.value = value;
            }
            return value;
        },

        _fixZIndexes: function () {
            if (this.values[1] - this.values[0] < 0.5 && this.max - this.values[0] < 0.5) {
                this._slider.left.css('z-index', 20);
                this._slider.right.css('z-index', 15);
            } else {
                this._slider.left.css('z-index', 15);
                this._slider.right.css('z-index', 20);
            }
        },

        _refreshRangeBar: function () {
            var position = this._slider.left.position()[this._getDimention('dimention')];
            if (this.orientation === 'vertical') {
                position = this._slider.right.position()[this._getDimention('dimention')];
            }
            this._rangeBar.css(this._getDimention('dimention'), position + this._slider.left[this._getDimention('size')]() / 2);
            this._rangeBar[this._getDimention('size')](Math.abs(
                this._slider.right.position()[this._getDimention('dimention')] - this._slider.left.position()[this._getDimention('dimention')]));
        },

        _validateValue: function (value, slider) {
            if (value > this.max) {
                value = this.max;
            }
            if (value < this.min) {
                value = this.min;
            }
            if (slider[0] === this._slider.left[0]) {
                if (value >= this.values[1]) {
                    value = this.values[1];
                }
            } else {
                if (value <= this.values[0]) {
                    value = this.values[0];
                }
            }
            return value;
        },

        _setSliderPosition: function (value, slider, position) {
            var trackSize = this._track[this._getDimention('size')](), ratio, distance;
            if (position) {
                position -= this._track.offset()[this._getDimention('dimention')];
            }
            if (this.orientation === 'horizontal') {
                ratio = (value - this.min) / (this.max - this.min);
            } else {
                ratio = 1 - ((value - this.min) / (this.max - this.min));
            }
            distance = (typeof position === 'undefined' || this.mode !== 'default') ?
                            (trackSize * ratio - this._slider.left[this._getDimention('size')]() / 2) : position;
            distance = this._validateDropPosition(distance, slider);
            slider.css(this._getDimention('dimention'), distance);
            this._refreshRangeBar();
        },

        _validateDropPosition: function (distance, slider) {
            var trackSize = this._track[this._getDimention('size')](),
                sliderWidth = slider[this._getDimention('size')]();
            if (distance < -sliderWidth / 2) {
                distance = -sliderWidth / 2;
            }
            if (distance > trackSize - sliderWidth / 2) {
                distance = trackSize - sliderWidth / 2;
            }
            return Math.floor(distance);
        },

        _addDisabledClasses: function () {
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        _removeDisabledClasses: function () {
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            switch (key) {
                case 'theme':
                    $.jqx.utilities.setTheme(oldvalue, value, object.host);
                    object._leftButton.jqxRepeatButton({ theme: value });
                    object._rightButton.jqxRepeatButton({ theme: value });
                    break;
                case 'disabled':
                    if (value) {
                        object.disabled = true;
                        object.disable();
                    } else {
                        object.disabled = false;
                        object.enable();
                    }
                    break;
                case 'width':
                    object.width = parseInt(value);
                    object._performLayout();
                    object._initialSettings();
                    break;
                case 'height':
                    object.height = parseInt(value);
                    object._performLayout();
                    object._initialSettings();
                    break;
                case 'min':
                    //   object._performLayout();
                    object.min = parseFloat(value);
                    if (!object.rangeSlider) {
                        object._setValue(value, object._slider.left);
                    }
                    object._initialSettings();
                    break;
                case 'step':
                    break;
                case 'max':
                    object.max = parseFloat(value);
                    if (!object.rangeSlider) {
                        object._setValue(value, object._slider.left);
                    }
                    object._initialSettings();
                    break;
                case 'showTicks':
                case 'ticksPosition':
                case 'ticksFrequency':
                case 'tickSize':
                    object._performLayout();
                    object._initialSettings();
                    break;
                case 'showRange':
                case 'showButtons':
                case 'orientation':
                    object._render();
                    object._performLayout();
                    object._initialSettings();
                    break;
                case 'buttonsPosition':
                    object._refresh();
                    break;
                case 'mode':
                    break;
                case 'rangeSlider':
                    if (!value) {
                        object.value = object.value.rangeEnd;
                    } else {
                        object.value = { rangeEnd: object.value, rangeStart: object.value };
                    }
                    object._render();
                    object._performLayout();
                    object._initialSettings();
                    break;
                case 'value':
                    if (!object.rangeSlider) {
                        object.value = parseFloat(value);
                    }
                    object.setValue(value);
                    break;
                case 'values':
                    object.setValue(value);
                    break;
                case 'tooltip':
                    if (!value) {
                        object._slider.left.removeAttr('title');
                        object._slider.right.removeAttr('title');
                    }
                    break;
                default: object._refresh();
            }
        },

        //Increment slider's value. If it's a range slider it's increment it's end range.
        incrementValue: function (step) {
            if (step == undefined || isNaN(parseFloat(step))) {
                step = this.step;
            }
            if (this.rangeSlider) {
                if (this.values[1] < this.max) {
                    this._setValue(this.values[1] + step, this._slider.right);
                }
            } else {
                if (this.values[1] >= this.min && this.values[1] < this.max) {
                    this._setValue(this.values[1] + step, this._slider.right);
                }
            }
        },

        //Decrementing slider's value. If it's range slider it's decrement it's start range.
        decrementValue: function (step) {
            if (step == undefined || isNaN(parseFloat(step))) {
                step = this.step;
            }
            if (this.rangeSlider) {
                if (this.values[0] > this.min) {
                    this._setValue(this.values[0] - step, this._slider.left);
                }
            } else {
                if (this.values[1] <= this.max && this.values[1] > this.min) {
                    this._setValue(this.values[1] - step, this._slider.right);
                }
            }
        },

        //Setting slider's value. Possible value types - array, one or two numbers.
        setValue: function (value) {
            if (this.rangeSlider) {
                var rangeLeft, rangeRight;
                if (arguments.length < 2) {
                    if (value instanceof Array) {
                        rangeLeft = value[0];
                        rangeRight = value[1];
                    } else if (typeof value === 'object' && typeof value.rangeStart !== 'undefined' && typeof value.rangeEnd !== 'undefined') {
                        rangeLeft = value.rangeStart;
                        rangeRight = value.rangeEnd;
                    }
                } else {
                    rangeLeft = arguments[0];
                    rangeRight = arguments[1];
                }
                this._setValue(rangeRight, this._slider.right);
                this._setValue(rangeLeft, this._slider.left);
            } else {
                this._setValue(this.min, this._slider.left);
                this._setValue(value, this._slider.right);
            }
        },

        //Getting slider's value. If it's a range slider this method returns an array.
        getValue: function () {
            //            if (this.rangeSlider) {
            //                return this.values;
            //            } else {
            return this.value;
            //}
        },

        //Disabling the slider.
        disable: function () {
            this._removeEventHandlers();
            this.disabled = true;
            this._addDisabledClasses();
            this._leftButton.jqxRepeatButton({ disabled: this.disabled });
            this._rightButton.jqxRepeatButton({ disabled: this.disabled });
        },

        //Enabling the slider.
        enable: function () {
            this._addEventHandlers();
            this.disabled = false;
            this._removeDisabledClasses();
            this._leftButton.jqxRepeatButton({ disabled: this.disabled });
            this._rightButton.jqxRepeatButton({ disabled: this.disabled });
        }
    });
})(jQuery);(function ($) {

    $.jqx.jqxWidget('jqxSplitter', '', {});

    $.extend($.jqx._jqxSplitter.prototype, {

        defineInstance: function () {
            // Type: Number
            // Default: null
            // Gets or sets the splitter's width.
            this.width = null;
            // Type: height
            // Default: null
            // Gets or sets the splitter's height.
            this.height = null;
            // Type: Boolean
            // Default: true
            // Gets or sets whether the splitter is with rounded corners.         
            this.roundedcorners = false;
            // Type: Array
            // Default: []
            // Sets or gets properties for all the panels
            this.panels = [];
            // Type: String
            // Default: vertical
            // Sets or gets splitter's orientation
            this.orientation = 'vertical';
            // Type: Bool
            // Default: false
            // Sets or gets whether the splitter is disabled
            this.disabled = false;
            // Type: Number/String
            // Default: 5
            // Sets or gets splitbar's size
            this.splitBarSize = 5;
            // Type: Bool
            // Default: false
            // Sets or gets whether the collapse/expand animation is enabled
            this.enableCollapseAnimation = false;
            // Type: Number
            // Default: 100
            // Sets or gets collapse/expand animation duration
            this.animationDuration = 'fast';
            // Type: Bool
            // Default: false
            // Sets or gets whether the cookies are enabled
            this.cookies = false;
            // Type: Object
            // Default: {}
            // Sets or gets cookie options
            this.cookieOptions = {};
            // Type: Number
            // Default: 15
            // Sets or gets splitter's split bar size when a touch device is used
            this.touchSplitBarSize = 15;
            // Private properties
            this._dimentions = {
                'horizontal': {
                    'size': 'height',
                    'outerSize': 'outerHeight',
                    'dimention': 'top',
                    'start': '_startY',
                    'mouse': '_mouseStartY',
                    'page': 'pageY',
                    'opposite': 'vertical'
                },
                'vertical': {
                    'size': 'width',
                    'outerSize': 'outerWidth',
                    'dimention': 'left',
                    'start': '_startX',
                    'mouse': '_mouseStartX',
                    'page': 'pageX',
                    'opposite': 'horizontal'
                }
            };
            this._touchEvents = {
                'mousedown': 'touchstart',
                'mouseup': 'touchend',
                'mousemove': 'touchmove',
                'mouseenter': 'mouseenter',
                'mouseleave': 'mouseleave'
            };
            this._isTouchDevice = false;
            this.touchMode = 'auto';
            this._splitBars = [];
            this._splitPanels = [];
            this._cursor = '';
            this._panelWrapper = null;
            this._events = ['resize', 'expanded', 'collapsed', 'resizeStart'];
            this._exceptions = {
                'invalidArgument': 'Invalid ',
                'invalidOrientation': 'Invalid orientation!',
                'invalidStructure': 'Invalid structure!',
                'invalidSplitBarSize': 'Invalid splitbar size!'
            };
        },

        createInstance: function () {
            this._cursor = this.host.css('cursor');
            this._setSplitterSize();
            //this._cursor = (this._cursor === 'auto') ? 'default' : this._cursor;
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this._validateProperties();
            this._defaultLayout = true;
            this._refresh(true);
            this._defaultLayout = false;
            var splitters = $.data(document.body, 'jqx-splitters') || [];
            splitters.push(this.host);
            $.data(document.body, 'jqx-splitters', splitters);
            if (this.disabled) {
                this.disabled = false;
                this.disable();
            }
            this._splittersLayout();

            var me = this;
            setTimeout(function () {
                me.refresh();
            }, 10);

            if (this.element.style.height == "" || this.element.style.width == "") {
                var setSplitBarSize = function (size) {
                    $.each(me._splitBars, function () {
                        if (me.orientation == 'vertical') {
                            this.splitBar.css('height', size);
                        }
                        else {
                            this.splitBar.css('width', size);
                        }
                    });
                }

                me._splliterAutoSizeTimer = setInterval(function () {
                    setSplitBarSize('100%');
                    if (me.host.width() != me._oldWidth || me.host.height() != me._oldHeight) {
                        me._performLayout();
                    }
                    else {
                        setSplitBarSize(me.orientation == 'vertical' ? me.host.height() : me.host.width());
                    }

                    me._oldWidth = me.host.width();
                    me._oldHeight = me.host.height();
                }, 100);
            }
            this.windowWidth = $(window).width();
            this.windowHeight = $(window).height();

            if (this._hiddenParent()) {
                this._displayTimer = setInterval(function () {
                    if (!me._hiddenParent()) {
                        clearInterval(me._displayTimer);
                        me.updateLayout();
                    }
                }, 100);
            }
        },

        destroy: function () {
            this.host.remove();
        },

        _hiddenParent: function () {
            var me = this;
            if (me.host.css('display') != 'block')
                return true;
            var hiddenParent = false;
            $.each(me.host.parents(), function () {
                if ($(this).css('display') != 'block') {
                    hiddenParent = true;
                    return false;
                }
            });
            return hiddenParent;
        },

        _setSplitterSize: function () {
            var minSize = 0,
                panel, ratio, panelMinSize = 0, panelMaxSize = 0, setMaxSize = true;
            if (this.width === 'auto' || !isNaN(parseInt(this.width, 10))) {
                this.host.css('width', this.width);
            }
            if (this.height === 'auto' || !isNaN(parseInt(this.height, 10))) {
                this.host.css('height', this.height);
            }
            for (var i = 0; i < this.panels.length; i += 1) {
                panelMinSize = parseInt(this.panels[i].min, 10);
                if (!this.panels[i].max) {
                    setMaxSize = false;
                } else {
                    panelMaxSize += parseInt(this.panels[i].max, 10);
                }
                if (!isNaN(panelMinSize)) {
                    minSize += panelMinSize;
                }
            }
            this.host.css('min-' + this._getDimention('size'), minSize);
            if (setMaxSize) {
                if (panelMaxSize < 9999) {
                    this.host.css('max-' + this._getDimention('size'), panelMaxSize);
                }
            }
        },

        _getDimention: function (dimention) {
            return this._dimentions[this.orientation][dimention];
        },

        _validateProperties: function () {
            try {
                this._validatePanels();
                this._validateStructure();
                this._validateOptions();
            } catch (exception) {
                alert(exception);
            }
        },

        _validatePanels: function () {
            var properties = ['max', 'min', 'size', 'collapsed', 'collapsible', 'resizable'],
                temp;
            for (var j = 0; j < properties.length; j += 1) {
                for (var i = 0; i < this.panels.length; i += 1) {
                    if (typeof this.panels[i][properties[j]] !== 'undefined') {
                        this._validatePanel(properties[j], this.panels[i]);
                    }
                }
            }
        },

        _validatePanel: function (property, panel) {
            var temp;
            if (property !== 'collapsed' && property !== 'collapsible' && property !== 'resizable') {
                temp = panel[property];
                panel[property] = parseInt(panel[property], 10);
                if (isNaN(panel[property])) {
                    throw new Error(this._exceptions['invalidArgument'] + property + ' for panel ' + (i + 1) + '.');
                } else {
                    if (typeof temp === 'string' && temp.indexOf('%') >= 0) {
                        panel["_" + property] = temp;
                        panel[property] = this.host[this._getDimention('size')]() * panel[property] / 100;
                    }
                }
            } else {
                panel[property] = this._parseBoolean(panel[property]);
            }
        },

        _parseBoolean: function (str) {
            return /^true$/i.test(str);
        },

        _validateStructure: function () {
            if (this.host.children('div').length < 2) {
                throw new Error(this._exceptions['invalidStructure']);
            }
        },

        _validateOptions: function () {
            if (this.orientation !== 'vertical' && this.orientation !== 'horizontal') {
                throw new Error(this._exceptions['invalidOrientation']);
            }
            if (parseInt(this.splitBarSize, 10) < 0 || isNaN(parseInt(this.splitBarSize, 10))) {
                throw new Error(this._exceptions['invalidSplitBarSize']);
            }
            if (parseInt(this.touchSplitBarSize, 10) < 0 || isNaN(parseInt(this.touchSplitBarSize, 10))) {
                throw new Error(this._exceptions['invalidSplitBarSize']);
            }
        },

        _refresh: function (creation) {
            this._render();
            this._startupLayout(creation);
            this._removeEventHandlers();
            this._addEventHandlers();
        },

        updateLayout: function () {
            this._setSplitterSize();
            this._addPanelProperties();
            this._refresh(true);
            this._splittersLayout();
            this._performLayout();
        },

        refresh: function () {
            this.updateLayout();
        },

        _startupLayout: function (creation) {
            var layoutImported = false;
            if (creation) {
                if (this.cookies) {
                    var layout = $.jqx.cookie.cookie("jqxSplitter" + this.element.id);
                    if (layout !== null) {
                        this.importLayout(layout);
                        layoutImported = true;
                    }
                }
            }
            if (!layoutImported) {
                this._refreshWidgetLayout();
            }
        },

        _render: function () {
            this.host.addClass(this.toThemeProperty('jqx-splitter'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));

            if (this.roundedcorners) {
                this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            }
            var splitChildren = this.host.children('div'), panel;
            if (this._panelWrapper) {
                splitChildren = this._panelWrapper.children('.jqx-splitter-panel');
            }

            if (this._splitPanels.length < 1) {
                for (var i = 0; i < splitChildren.length; i += 1) {
                    panel = $(splitChildren[i]);
                    panel.options = { max: 9007199254740992, min: 0, collapsible: true, resizable: true,
                        collapsed: false, size: panel[this._getDimention('size')]()
                    };
                    this._splitPanels.push(panel);
                }
                this._createSplitBars();
                this._addCollapseButtons();
                this._addPanelProperties();
                var previous, next, splitBar;
                for (var i = 0; i < this._splitPanels.length; i += 1) {
                    if (i + 1 < this._splitPanels.length) {
                        previous = this._splitPanels[i];
                        next = this._splitPanels[i + 1];
                        var splitBar = this._splitBars[i];
                        if (!previous.options.resizable || !next.options.resizable) {
                            splitBar.splitBar.css('cursor', 'default');
                        }
                    }
                }
            }
            this._wrapperHandler();
        },

        _createSplitBars: function () {
            var previous, next, splitBar;
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                if (i + 1 < this._splitPanels.length) {
                    previous = this._splitPanels[i];
                    next = this._splitPanels[i + 1];
                    splitBar = { previous: previous, next: next };
                    splitBar.splitBar = this._addSplitBar(previous, next);
                    this._splitBars.push(splitBar);
                }
            }
        },

        _addSplitBar: function (previous, next) {
            var splitBar = $('<div/>');
            splitBar.insertAfter(previous);
            if (this.orientation === 'horizontal') {
                splitBar.width(previous.width());
            } else {
                splitBar.height(previous.height());
            }
            return splitBar;
        },

        _addCollapseButtons: function () {
            var count = this._splitBars.length;
            for (var i = 0; i < count; i += 1) {
                var button = $('<div/>');
                this._splitBars[i].splitBar.append(button);
                if (i !== 0 && i !== count - 1) {
                    button.css('visibility', 'hidden');
                }
            }
        },

        _refreshWidgetLayout: function () {
            this._setSplitterSize();
            this._removeClasses();
            this._addClasses();
            //this._performLayout();            
            this._validateSize();
            if (this._defaultLayout == true) {
                this._applyOptions();
            }
            this._performLayout();
        },

        _addClasses: function () {
            var button, splitBar;
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                this._splitPanels[i].addClass(this.toThemeProperty('jqx-splitter-panel'));
                this._splitPanels[i].addClass(this.toThemeProperty('jqx-widget-content'));
                if (i < this._splitBars.length) {
                    splitBar = this._splitBars[i].splitBar;
                    button = splitBar.children(0);
                    splitBar.addClass(this.toThemeProperty('jqx-splitter-splitbar-' + this.orientation));
                    splitBar.addClass(this.toThemeProperty('jqx-fill-state-normal'));
                    splitBar.removeClass(this.toThemeProperty('jqx-splitter-splitbar-' + this._getDimention('opposite')));
                    button.addClass(this.toThemeProperty('jqx-splitter-collapse-button-' + this.orientation));
                    button.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    button.removeClass(this.toThemeProperty('jqx-splitter-collapse-button-' + this._getDimention('opposite')));
                    if ($.browser.msie && $.browser.version <= 7) {
                        this._splitBars[i].previous.css('position', 'relative');
                        this._splitBars[i].next.css('position', 'relative');
                    }
                }
            }
        },

        _removeClasses: function (theme) {
            var temp = this.theme;
            this.theme = theme;
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                this._splitPanels[i].removeClass(this.toThemeProperty('jqx-splitter-panel'));
                this._splitPanels[i].removeClass(this.toThemeProperty('jqx-widget-content'));
                if (i < this._splitBars.length) {
                    var button = this._splitBars[i].splitBar.children(0);
                    this._splitBars[i].splitBar.removeClass(this.toThemeProperty('jqx-splitter-splitbar-' + this.orientation));
                    this._splitBars[i].splitBar.removeClass(this.toThemeProperty('jqx-fill-state-normal'));
                    button.removeClass(this.toThemeProperty('jqx-splitter-collapse-button-' + this.orientation));
                    button.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                }
            }
            this.theme = temp;
        },

        _addPanelProperties: function () {
            var properties = ['max', 'min', 'size', 'collapsed', 'collapsible', 'resizable'],
                panels = (this.panels instanceof Array) ? this.panels : [];
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                for (var j = 0; j < properties.length; j += 1) {
                    if (typeof panels[i] !== 'undefined' && typeof panels[i][properties[j]] !== 'undefined') {
                        this._splitPanels[i].options[properties[j]] = panels[i][properties[j]];
                    } else if (properties[j] === 'size') {
                        if (this._splitPanels[i][0].style[this._getDimention('size')] !== 'auto' &&
                            this._splitPanels[i][0].style[this._getDimention('size')] !== '') {
                            this._splitPanels[i].options.size = this._splitPanels[i][this._getDimention('size')]();
                        } else {
                            if (this.orientation == 'horizontal') {
                                this._splitPanels[i].options.size = Math.floor(this.host.height() / this._splitPanels.length);
                            }
                            else {
                                this._splitPanels[i].options.size = Math.floor(this.host.width() / this._splitPanels.length);
                            }
                        }
                    }
                }
            }
        },

        _addPanelSizeProperties: function()
        {
           panels = (this.panels instanceof Array) ? this.panels : [];
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                var size = this._splitPanels[i][0].style[this._getDimention('size')];
                if (size !== 'auto' && size !== '') {
                    if (panels[i] != undefined) {
                        this._splitPanels[i].options.size = panels[i].size;
                    }
                }
                else {
                    if (this.orientation == 'horizontal') {
                        this._splitPanels[i].options.size = Math.floor(this.host.height() / this._splitPanels.length);
                    }
                    else {
                        this._splitPanels[i].options.size = Math.floor(this.host.width() / this._splitPanels.length);
                    }
                }
            }
        },

        _wrapperHandler: function () {
            if (this._panelWrapper === null) {
                this._panelWrapper = $('<div class="jqx-splitter-panel-wrapper" style="height: 100%;"></div>');
                this.host.wrapInner(this._panelWrapper);
                this._panelWrapper = this.host.children();
            }
        },

        _performLayout: function () {
            var count = this._splitBars.length;
            while (count) {
                count -= 1;
                this._performSplitterLayout(this._splitBars[count]);
            }
            this._refreshLayout();
        },

        _performSplitterLayout: function (splitBar) {
            if (this.orientation === 'horizontal') {
                splitBar.previous.css('float', 'none');
                splitBar.splitBar.css('float', 'none');
                splitBar.next.css('float', 'none');
                splitBar.splitBar.css('width', '100%');
                splitBar.next.css('width', '100%');
                splitBar.previous.css('width', '100%');
            } else {
                splitBar.previous.css('float', 'left');
                splitBar.splitBar.css('float', 'left');
                splitBar.next.css('float', 'left');
                splitBar.next.css('height', '100%');
                splitBar.previous.css('height', '100%');
            }
        },

        _refreshLayout: function () {
            //            if (this.orientation === 'vertical') {
            //               this._panelWrapper.width(this.host.width());
            //            } else {
            //               this._panelWrapper.width(this.host.width());       
            //            }
            this._panelWrapper.css('width', '100%');
            this._panelWrapper.css('height', '100%');

            this._performSplitBarsLayout();
            this._performPanelLayout();
        },

        _performSplitBarsLayout: function () {
            var hostHeight = this.host.height(), hostWidth = this.host.width(),
                size = (this._isTouchDevice) ? this.touchSplitBarSize : this.splitBarSize;
            for (var i = 0; i < this._splitBars.length; i += 1) {
                if (this.orientation === 'vertical') {
                    this._splitBars[i].splitBar.height(hostHeight);
                    this._splitBars[i].splitBar.width(size);
                } else {
                    this._splitBars[i].splitBar.width(hostWidth);
                    this._splitBars[i].splitBar.height(size);
                }
                this._centerChild(this._splitBars[i].splitBar.children(0));
            }
        },

        _centerChild: function (element) {
            var size = (this._isTouchDevice) ? this.touchSplitBarSize : this.splitBarSize;
            if (size != 5) {
                if (this.orientation === 'vertical') {
                    element.width(size);
                    element.height(45);
                }
                else {
                    element.height(size);
                    element.width(45);
                }
            }

            var displacementY = ($(element.parent()).height() - element.outerHeight()) / 2,
                displacementX = ($(element.parent()).width() - element.outerWidth()) / 2;
     //       element.css('margin-top', displacementY);
       //     element.css('margin-left', displacementX);
            element.css('position', 'relative');
            if (this.orientation === 'vertical') {
                element.css('top', '50%');
                element.css('left', '0');
                element.css('margin-top', '-23px');
                element.css('margin-left', '-0px');
            }
            else
            {
                element.css('left', '50%');
                element.css('top', '0');
                element.css('margin-left', '-23px');
                element.css('margin-top', '-0px');
            }
                //     element.css('margin-left', '50%');
            return element;
        },

        _performPanelLayout: function () {
            var count = this._splitPanels.length,
                i = 0,
                sizeSum = (count - 1) * this._splitBars[0].splitBar[this._getDimention('outerSize')](true),
                hostSize = this.host[this._getDimention('size')](),
                currentPanel;
           // hostSize -= 1;
            while (i < count) {
                currentPanel = this._splitPanels[i];
                i++;
                if (!currentPanel.options.collapsed) {
                    sizeSum += this._handlerPanelSize(currentPanel, sizeSum, hostSize);
                }
            }
            if (sizeSum < hostSize) {
                this._fillContainer(hostSize, sizeSum, count - 1);
            }
        },

        _getBorderSize: function (element) {
            if (element == null) {
                return 0;
            }
            var borderSize = this.orientation == 'vertical' ? parseInt(element.css('border-left-width')) : parseInt(element.css('border-top-width'));
            return borderSize;
        },

        _handlerPanelSize: function (currentPanel, sizeSum, hostSize) {
            this._setPanelSize(currentPanel, currentPanel.options.size);
            var panelWidth = currentPanel.options.size, size;
            if (sizeSum + panelWidth >= hostSize && !currentPanel.options.collapsed) {
                size = hostSize - sizeSum;
                var bordersize = this._getBorderSize(currentPanel),
                    difference = sizeSum + size - hostSize;
                if (!isNaN(bordersize)) {
                    size -= bordersize;
                }
                size = Math.min(size, currentPanel.options.max);
                size = Math.max(size, currentPanel.options.min);
                if (!currentPanel.options.collapsed) {
                    currentPanel[this._getDimention('size')](size);
                    currentPanel.options.size = size;
                }
            }
            return currentPanel[this._getDimention('outerSize')](true);
        },

        _fillContainer: function (hostSize, sizeSum, index) {
            if (typeof index === 'undefined') {
                index = 0;
            }
            var lastPanel = this._splitPanels[index],
                sizeDifference = hostSize - sizeSum,
                size = lastPanel[this._getDimention('size')](),
                sizeTotal = sizeDifference + size;
            if (index <= this._splitPanels.length) {
                if (lastPanel.options.collapsed) {
                    this._fillHelper(sizeSum, hostSize);
                } else {
                    if (sizeTotal > lastPanel.options.max) {
                        lastPanel.options.max = sizeTotal;
                    }
                    lastPanel[this._getDimention('size')](sizeTotal);
                    lastPanel.options.size = sizeTotal;
                }
                return;
            }
            sizeTotal = Math.min(sizeTotal, lastPanel.options.max);
            if (!lastPanel.options.collapsed) {
                lastPanel[this._getDimention('size')](sizeTotal);
                lastPanel.options.size = sizeTotal;
            } else {
                sizeTotal = size = 0;
            }
            if (sizeTotal + (sizeSum - size) < hostSize ||
                lastPanel.options.collapsed) {
                this._fillContainer(hostSize, (sizeSum - size) + sizeTotal, index - 1);
            }
        },

        _fillHelper: function (sizeSum, hostSize) {
            var panel,
                found = false;
            for (var i = 0; i < this._splitPanels.length && !found; i += 1) {
                panel = this._splitPanels[i];
                if (!panel.options.collapsed) {
                    found = true;
                }
            }
            panel[this._getDimention('size')](hostSize - sizeSum + panel[this._getDimention('size')]());
        },

        _applyOptions: function () {
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                var options = this._splitPanels[i].options;
                if (options.collapsed) {
                    options.collapsed = false;
                    this.collapseAt(i, true);
                }
                if (!options.collapsible) {
                    if (i < this._splitPanels.length - 1) {
                        this.hideCollapseButtonAt(i);
                    } else {
                        if (this._splitPanels.length > 2) {
                            this.hideCollapseButtonAt(i - 1);
                        }
                    }
                }
                else if (options.collapsible) {
                    if (i < this._splitPanels.length - 1) {
                        this.showCollapseButtonAt(i);
                    } else {
                        this.showCollapseButtonAt(i - 1);
                    }
                }
            }
        },

        _validateSize: function () {
            var options, dim = this._getDimention('size');
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                options = this._splitPanels[i].options;
                if (options.max < options.size) {
                    options.size = options.max;
                } else if (options.min > options.size) {
                    options.min = options.size;
                }
                this._splitPanels[i][dim](options.size);
                //this._splitPanels[i].css('min-' + dim, options.min);
                //this._splitPanels[i].css('max-' + dim, options.max);
            }
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._touchEvents[event];
            } else {
                return event;
            }
        },

        _removeEventHandlers: function () {
            var count = this._splitBars.length;
            var self = this;

            this.removeHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'));
            this.removeHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'));
            this.removeHandler($(window), 'resize.' + this.element.id);
            this.removeHandler(this.host, 'loadContent');

            while (count) {
                count -= 1;
                this._removeSplitBarHandlers(this._splitBars[count]);
                this._removeCollapseButtonHandlers($(this._splitBars[count].splitBar.children(0)), count);
            }
        },

        _removeSplitBarHandlers: function (splitBar) {
            this.removeHandler(splitBar.splitBar, this._getEvent('mouseenter'));
            this.removeHandler(splitBar.splitBar, this._getEvent('mouseleave'));
            this.removeHandler(splitBar.splitBar, this._getEvent('mousedown'));
        },

        _removeCollapseButtonHandlers: function (button) {
            this.removeHandler(button, this._getEvent('mouseenter'));
            this.removeHandler(button, this._getEvent('mouseleave'));
            this.removeHandler(button, this._getEvent('mousedown'));
        },

        _addEventHandlers: function () {
            var count = this._splitBars.length, self = this;
            self.autoResize = true;
            this.addHandler($(document), this._getEvent('mouseup') + '.' + this.host.attr('id'), function () {
                self.autoResize = false;
                self._stopDrag(self);
                self.autoResize = true;
            });

            this.addHandler(this.host, 'loadContent', function () {
                if (self._hiddenParent()) {
                    return true;
                }
                var hasPercentageSize = false;
                if ((typeof self.width === 'string' && self.width.indexOf('%') >= 0 && self.orientation == 'vertical') ||
                   (typeof self.height === 'string' && self.height.indexOf('%') >= 0 && self.orientation == 'horizontal')) {
                    for (var i = 0; i < self.panels.length; i += 1) {
                        if (self.panels[i]["_size"] != undefined) {
                            self.panels[i]["size"] = self.panels[i]["_size"];
                            self._validatePanel("size", self.panels[i]);
                            hasPercentageSize = true;
                        }
                    }
                    if (hasPercentageSize) {
                        self._addPanelSizeProperties();
                    }
                }
                self._refreshLayout();
                if (self._refreshWindowResizeTimer) clearTimeout(self._refreshWindowResizeTimer);
                self._refreshWindowResizeTimer = setTimeout(function () {
                    self._refreshLayout();
                }, 100);
            });

            this.addHandler($(document), this._getEvent('mousemove') + '.' + this.host.attr('id'), function (event) {
                self._performDrag(self, event);
            });

            this.addHandler($(window), 'resize.' + this.element.id, function (event) {
                var doWindowResize = function () {
                    if (self._hiddenParent()) {
                        return true;
                    }

                    if (!self.windowWidth) {
                        self.windowWidth = $(window).width();
                    }
                    if (!self.windowHeight) {
                        self.windowHeight = $(window).height();
                    }

                    var windowWidth = $(window).width();
                    var windowHeight = $(window).height();

                    if (self.autoResize) {
                        if (windowWidth != self.windowWidth || windowHeight != self.windowHeight || self.hostWidth != self.host.width() || self.hostHeight != self.host.height()) {
                            if ((typeof self.width === 'string' && self.width.indexOf('%') >= 0 && self.orientation == 'vertical') ||
                        (typeof self.height === 'string' && self.height.indexOf('%') >= 0 && self.orientation == 'horizontal')) {
                                var hasPercentageSize = false;
                                for (var i = 0; i < self.panels.length; i += 1) {
                                    if (self.panels[i]["_size"] != undefined) {
                                        self.panels[i]["size"] = self.panels[i]["_size"];
                                        self._validatePanel("size", self.panels[i]);
                                        hasPercentageSize = true;
                                    }
                                }
                                if (hasPercentageSize) {
                                    self._addPanelSizeProperties();
                                }
                            }
                            self._refreshLayout();
                            if (self._refreshWindowResizeTimer) clearTimeout(self._refreshWindowResizeTimer);
                            self._refreshWindowResizeTimer = setTimeout(function () {
                                self._refreshLayout();
                            }, 100);
                        }
                    }

                    self.windowWidth = $(window).width();
                    self.windowHeight = $(window).height();
                    self.hostWidth = self.host.width();
                    self.hostHeight = self.host.height();
                }

                doWindowResize();
                setTimeout(function () {
                    doWindowResize();
                }, 10);
            });
            while (count) {
                count -= 1;
                this._addSplitBarHandlers(this._splitBars[count]);
                this._addCollapseButtonHandlers($(this._splitBars[count].splitBar.children(0)), count);
            }

            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            self._stopDrag(self);
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mouseup', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }
                }
            }
        },

        _addSplitBarHandlers: function (splitBar) {
            var self = this;

            this.addHandler(splitBar.splitBar, this._getEvent('mousedown'), this._startDrag, { self: this });
            this.addHandler(splitBar.splitBar, this._getEvent('mouseenter'), function () {
                $(this).addClass(self.toThemeProperty('jqx-splitter-splitbar-hover'));
                $(this).addClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
            this.addHandler(splitBar.splitBar, this._getEvent('mouseleave'), function () {
                $(this).removeClass(self.toThemeProperty('jqx-splitter-splitbar-hover'));
                $(this).removeClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
        },

        _addCollapseButtonHandlers: function (button, index) {
            var self = this;
            this.addHandler(button, this._getEvent('mouseenter'), function () {
                button.addClass(self.toThemeProperty('jqx-splitter-collapse-button-hover'));
                button.addClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
            this.addHandler(button, this._getEvent('mouseleave'), function () {
                button.removeClass(self.toThemeProperty('jqx-splitter-collapse-button-hover'));
                button.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
            });
            this.addHandler(button, this._getEvent('mousedown'), function (event) {
                var splitbars = self._splitBars.length;
                if (splitbars == 1) {
                    $.each(self._splitPanels, function (i) {
                        var options = self._splitPanels[i].options;
                        if (options.collapsible) {
                            self._collapseButtonClickHandler(i);
                            return false;
                        }
                    });
                } else {
                    if (index < splitbars / 2) {
                        self._collapseButtonClickHandler(index);
                    } else {
                        self._collapseButtonClickHandler(1 + index);
                    }
                }
                if (event.stopPropagation != undefined) {
                    event.stopPropagation();
                }
                if (event.preventDefault != undefined) {
                    event.preventDefault();
                }
                return false;
            });
        },

        _collapseButtonClickHandler: function (index) {
            if (this._splitPanels[index].options.collapsed) {
                this.expandAt(index);
            } else {
                this.collapseAt(index);
            }
        },

        _initOverlay: function (create) {
            var self = this;
            if (self.overlay || create == 'undefined') {
                self.overlay.remove();
                self.overlay = null;
            }
            else if (create == true) {
                self.overlay = $("<div style='background: #999999;'></div>");
                self.overlay.css('opacity', 0.01);
                self.overlay.width(self.host.width());
                self.overlay.height(self.host.height());
                self.overlay.css('position', 'absolute');
                self.overlay.appendTo($(document.body));
                var offset = self.host.offset();
                self.overlay.css('left', offset.left);
                self.overlay.css('top', offset.top);
            }
        },

        _startDrag: function (event) {
            var self = event.data.self;

            var splitBarIndex = self._indexOf($(event.target));
            self._resizeArea = self._splitBars[splitBarIndex];

            if (self._resizeArea != null) {
                self._initOverlay(true);

                if ((typeof self._resizeArea.previous.options.resizable === 'undefined' || self._resizeArea.previous.options.resizable) &&
                (typeof self._resizeArea.next.options.resizable === 'undefined' || self._resizeArea.next.options.resizable)) {
                    var previous = self._resizeArea.previous,
                next = self._resizeArea.next;
                    if ((!previous.options.collapsed && !next.options.collapsed) &&
                !(next.options.max <= next[self._getDimention('outerSize')]() &&
                  previous.options.max <= previous[self._getDimention('outerSize')]())) {
                        self._capturedElement = self._makeClone(event.target);
                        self._startX = self._capturedElement.offset().left;
                        self._startY = self._capturedElement.offset().top;
                        self._mouseStartX = (self._isTouchDevice) ? event.originalEvent.touches[0].pageX : event.pageX;
                        self._mouseStartY = (self._isTouchDevice) ? event.originalEvent.touches[0].pageY : event.pageY;

                        var panelOptions = self._getPanelOptions();
                        self._raiseEvent(3, { firstPanel: { index: splitBarIndex, size: previous.options.size },
                            secondPanel: { index: splitBarIndex + 1, size: next.options.size }, panels: panelOptions
                        });
                    }
                }
                return false;
            }
        },

        _makeClone: function (splitBar) {
            var clone = $(splitBar).clone();
            clone.css({
                'position': 'absolute',
                'top': $(splitBar).offset().top,
                'left': $(splitBar).offset().left
            });
            clone.fadeTo(0, 0.7);
            clone.css('z-index', 9999);
            $(document.body).append(clone);
            return clone;
        },

        _clickCollapse: function (event) {
            var self = event.data.self;
            self.collapseAt(0);
        },

        _performDrag: function (self, event) {
            var eventCoordinates = (self._isTouchDevice) ? event.originalEvent.touches[0][self._getDimention('page')] : event[self._getDimention('page')];
            if (event.which === 0 && $.browser.msie && $.browser.version < 9) {
                self._stopDrag(self);
                return false;
            }
            if (self._capturedElement !== null && typeof self._capturedElement !== 'undefined') {
                var position = (eventCoordinates - self[self._getDimention('mouse')]) + self[self._getDimention('start')];
                self._moveSplitBar(position);
                return false;
            }
            return true;
        },

        _moveSplitBar: function (position) {
            position = this._validatePosition(position);
            if (position.invalid) {
                this._capturedElement.addClass(this.toThemeProperty('jqx-splitter-invalid'));
            } else {
                this._capturedElement.removeClass(this.toThemeProperty('jqx-splitter-invalid'));
            }
            this._capturedElement.css(this._getDimention('dimention'), position.position);
        },

        _validatePosition: function (position) {
            var resizeArea = this._resizeArea,
                rightBound = this._getNextBoundary(resizeArea),
                leftBound = this._getPreviousBoundary(resizeArea),
                maxRight = Math.min(rightBound, rightBound - resizeArea.next.options.min, leftBound + resizeArea.previous.options.max),
                maxLeft = Math.max(leftBound, leftBound + resizeArea.previous.options.min, rightBound - resizeArea.next.options.max),
                invalidPosition;
            if (maxLeft > maxRight) {
                invalidPosition = resizeArea.next.offset()[this._getDimention('dimention')] - this._capturedElement[this._getDimention('outerSize')](true)
                return { position: invalidPosition, invalid: true };
            }
            if (position < maxLeft) {
                return { position: maxLeft, invalid: true };
            }
            if (position > maxRight) {
                return { position: maxRight, invalid: true };
            }
            return { position: position, invalid: false };
        },

        _getNextBoundary: function (splitArea) {
            var boundary = splitArea.next.offset()[this._getDimention('dimention')] +
                           splitArea.next[this._getDimention('size')]() -
                           this._capturedElement[this._getDimention('outerSize')](true),
                next = this._nextPanel(splitArea.next);
            if (next !== null && next.options.collapsed) {
                boundary -= next.options.min;
            }
            return boundary;
        },

        _getPreviousBoundary: function (splitArea) {
            var boundary = splitArea.previous.offset()[this._getDimention('dimention')],
                prev = this._previousPanel(splitArea.previous);
            if (prev !== null && prev.options.collapsed) {
                boundary += prev.options.min;
            }
            return boundary;
        },

        _previousPanel: function (splitPanel) {
            var index = this._indexOfSplitPanel(splitPanel);
            if (index === 0) {
                return null;
            } else {
                return this._splitPanels[index - 1];
            }
        },

        _nextPanel: function (splitPanel) {
            var index = this._indexOfSplitPanel(splitPanel);
            if (index === this._splitPanels.length - 1) {
                return null;
            } else {
                return this._splitPanels[index + 1];
            }
        },

        _indexOfSplitPanel: function (splitPanel) {
            var count = this._splitPanels.length;
            while (count) {
                count -= 1;
                if (this._splitPanels[count][0] === splitPanel[0]) {
                    return count;
                }
            }
            return -1;
        },

        _stopDrag: function (self) {
            if (self._capturedElement) {
                self._performAreaResize();
                self._capturedElement.remove();
            }
            self._capturedElement = null;
            self._initOverlay();
        },

        _performAreaResize: function () {
            var splitArea = this._resizeArea,
                displacement = this._capturedElement.offset()[this._getDimention('dimention')] - this[this._getDimention('start')],
                prevSize = splitArea.previous[this._getDimention('size')]() + displacement,
                nextSize = splitArea.next[this._getDimention('size')]() - displacement,
                splitBarIndex = this._indexOf(splitArea.splitBar),
                prevPanelOldSize = splitArea.previous[this._getDimention('size')]();
            this._setPanelSize(splitArea.previous, prevSize);
            this._setPanelSize(splitArea.next, nextSize);
            this._splittersLayout();
            if (this.cookies) {
                $.jqx.cookie.cookie("jqxSplitter" + this.element.id, this.exportLayout(), this.cookieOptions);
            }
            if (prevPanelOldSize !== prevSize) {
                var panelOptions = this._getPanelOptions();
                this._raiseEvent(0, { firstPanel: { index: splitBarIndex, size: prevSize },
                    secondPanel: { index: splitBarIndex + 1, size: nextSize }, panels: panelOptions
                });
            }

            var panelIndex = -1;
            for (var i = 0; i < this._splitPanels.length; i++) {
                if (this._splitPanels[i] == splitArea.previous) {
                    panelIndex = i;
                }
            }

            if (panelIndex >= 0) {
                if (this.panels[panelIndex]) {
                    if (this.panels[panelIndex]['_size']) {
                        if (this.orientation == 'horizontal') {
                            var percentage = displacement / (this.host.height() - 2) * 100;
                        }
                        else {
                            var percentage = displacement / (this.host.width() - 2) * 100;
                        }
                        percentage = Math.round(percentage);
                        this.panels[panelIndex]['_size'] = parseInt(this.panels[panelIndex]['_size']) + percentage + '%';
                        if (this.panels[panelIndex + 1]) {
                            this.panels[panelIndex + 1]['_size'] = parseInt(this.panels[panelIndex + 1]['_size']) - percentage + '%';
                        }
                        this.autoResize = true;
                    }
                }
            }
        },

        _splittersLayout: function () {
            var splitters = $.data(document.body, 'jqx-splitters') || [];

            for (var i = 0; i < splitters.length; i += 1) {
                if (splitters[i][0] !== this.element) {
                    $(splitters[i]).jqxSplitter('_performLayout');
                }
            }
        },

        _raiseEvent: function (eventId, data) {
            var event = new $.Event(this._events[eventId]);
            event.owner = this;
            event.args = data;
            return this.host.trigger(event);
        },

        _setPanelSize: function (panel, size) {
            if (!panel.options.collapsed) {
                panel.options.size = parseInt(size);
                panel[this._getDimention('size')](size);
            } else {
                panel[this._getDimention('size')](0);
            }
        },

        _indexOf: function (splitBar) {
            var count = this._splitBars.length;
            while (count) {
                count -= 1;
                if (this._splitBars[count].splitBar[0] === splitBar[0]) {
                    return count;
                }
            }
            return -1;
        },

        _neighborPanel: function (index) {
            var neighbor;
            if (index === this._splitPanels.length - 1) {
                neighbor = this._splitPanels[index - 1];
            } else {
                neighbor = this._splitPanels[index + 1];
            }
            return neighbor;
        },


        _animateResize: function (panel, size, duration, callback) {
            var animationProperties = {}, self = this;
            animationProperties[this._getDimention('size')] = size;
            panel.animate(animationProperties, { step: function () {
                self._splittersLayout.call(self);
            }, duration: duration, complete: function () {
                self._splittersLayout.call(self);
                if (callback && callback instanceof Function) {
                    callback();
                }
            }
            });
        },

        _addDisabledClasses: function () {
            var splitbar;
            for (var i = 0; i < this._splitBars.length; i += 1) {
                splitbar = this._splitBars[i].splitBar;
                splitbar.addClass(this.toThemeProperty('jqx-splitter-splitbar-disabled'));
                splitbar.children(0).addClass(this.toThemeProperty('jqx-splitter-collapse-button-disabled'));
            }
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        _removeDisabledClasses: function () {
            var splitbar;
            for (var i = 0; i < this._splitBars.length; i += 1) {
                splitbar = this._splitBars[i].splitBar;
                splitbar.removeClass(this.toThemeProperty('jqx-splitter-splitbar-disabled'));
                splitbar.children(0).removeClass(this.toThemeProperty('jqx-splitter-collapse-button-disabled'));
            }
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
        },

        _closestSplitBar: function (firstPanel, secondPanel) {
            for (var i = 0; i < this._splitBars.length; i += 1) {
                if ((this._splitBars[i].previous[0] === firstPanel[0] &&
                    this._splitBars[i].next[0] === secondPanel[0]) ||
                    (typeof secondPanel === 'undefined' && this._splitBars[i].previous[0] === firstPanel[0]) ||
                    (this._splitBars[i].next[0] === firstPanel[0] &&
                    this._splitBars[i].previous[0] === secondPanel[0])) {
                    return this._splitBars[i].splitBar;
                }
            }
            return null;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key == 'touchMode') {
                if (value) {
                    object.splitBarSize = object.touchSplitBarSize;
                    object._performLayout();
                }
            }
            if (key === 'disabled') {
                if (value) {
                    this.disable();
                } else {
                    this.enable();
                }
            } else if (key === 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, this.host);
            } else if (key === 'panels') {
                this._validatePanels();
                this._addPanelProperties();
                this._refreshWidgetLayout();
            } else {
                this._refreshWidgetLayout();
            }
        },

        /**
        * Exporting splitter's layout as a JSON string
        */
        exportLayout: function () {
            var jSON = '{ "panels": [';
            for (var i = 0; i < this._splitPanels.length; i += 1) {
                jSON += '{';
                for (var property in this._splitPanels[i].options) {
                    jSON += '"' + property + '":';
                    jSON += '"' + this._splitPanels[i].options[property] + '",'
                }
                jSON = jSON.substring(0, jSON.length - 1) + ' },';
            }
            jSON = jSON.substring(0, jSON.length - 1) + '],\
                 "orientation": "' + this.orientation + '" }';
            return jSON;
        },

        /**
        * Importing splitter layout as a JSON string. This string should have the following format: { panels: [Array with panel's properties], orientation: 'horizontal/vertical' }
        */
        importLayout: function (jSON) {
            try {
                var config = $.parseJSON(jSON);
                this.panels = config.panels;
                this.orientation = config.orientation;
                this._validatePanels();
//                this._addPanelProperties();
//                this._refreshWidgetLayout();

                this._setSplitterSize();
                this._addPanelProperties();
                this._refresh(false);
                this._splittersLayout();
                this._performLayout();
            } catch (exception) {
                alert(exception);
            }
        },

        /**
        * Expanding panel with specific index
        */
        expandAt: function (index) {
            if (index <= this._splitPanels.length && index >= 0 &&
                this._splitPanels[index].options.collapsed) {
                var toResize = this._neighborPanel(index), toExpand = this._splitPanels[index], self = this,
                    animationDuration = (this.enableCollapseAnimation) ? this.animationDuration : 0, splitBar;
                toExpand.options.collapsed = false;
                toExpand.options.size = Math.min(toExpand.options.size, toResize[this._getDimention('size')]());
                toResize.options.size = toResize[this._getDimention('size')]() - toExpand.options.size;
                splitBar = this._closestSplitBar(toExpand, toResize);
                splitBar.removeClass(this.toThemeProperty('jqx-splitter-splitbar-collapsed'));
                this._animateResize(toResize, toResize.options.size, animationDuration);
                this._animateResize(toExpand, toExpand.options.size, animationDuration, function () {
                    var panelOptions = self._getPanelOptions();
                    self._raiseEvent(0, { firstPanel: { index: index, size: toExpand.options.size }, secondPanel: { index: index + 1, size: toResize.options.size } });
                    self._raiseEvent(1, { index: index, expandedPanel: panelOptions[index], panels: panelOptions });            
                });

                if (this.panels[index]) {
                    if (this.panels[index]['_size']) {
                        var toResizeIndex = index === this._splitPanels.length - 1 ? index - 1 : index + 1;
                        var panelToResize = this.panels[toResizeIndex];
                        if (panelToResize && panelToResize['_size']) {
                            var percentage = this.orientation == 'vertical' ? parseInt(toExpand.options.size) / this.host.width() * 100 : parseInt(toExpand.options.size) / this.host.height() * 100;
                            percentage = parseInt(percentage);
                            panelToResize['_size'] = parseInt(panelToResize['_size']) - percentage + '%';
                            this.panels[index]['_size'] = percentage + '%';
                            this.autoResize = true;
                        }
                    }
                }
                if (this.cookies) {
                    $.jqx.cookie.cookie("jqxSplitter" + this.element.id, this.exportLayout(), this.cookieOptions);
                }
            }
        },

        _getPanelOptions: function () {
            var panelOptions = new Array();
            $.each(this._splitPanels, function () {
                panelOptions[panelOptions.length] = this.options;
            });

            return panelOptions;
        },

        collapseAt: function (index, refreshed) {
            var panelOptions = this._splitPanels[index].options;
            if (index < this._splitPanels.length && index >= 0 &&
                !panelOptions.collapsed && panelOptions.collapsible) {
                var toCollapse = this._splitPanels[index],
                    width = toCollapse[this._getDimention('size')](),
                    animationDuration = (this.enableCollapseAnimation) ? this.animationDuration : 0,
                    toResize = this._neighborPanel(index), self = this, splitBar;
                //fix when there is a collapsed item and we change the orientation
                toCollapse.options.size = (width) ? width : toCollapse.options.size;
                toCollapse.options.collapsed = true;

                splitBar = this._closestSplitBar(toCollapse, toResize);
                splitBar.addClass(this.toThemeProperty('jqx-splitter-splitbar-collapsed'));
                toResize.options.size = toResize[this._getDimention('size')]() + width;
                this._animateResize(toResize, toResize.options.size, animationDuration);
                this._animateResize(toCollapse, 0, animationDuration, function () {
                    if (refreshed == undefined) {
                        var panelOptions = self._getPanelOptions();
                        self._raiseEvent(0, { firstPanel: { index: index, size: 0 }, secondPanel: { index: index + 1, size: toResize.options.size } });
                        self._raiseEvent(2, { index: index, collapsedPanel: panelOptions[index], panels: panelOptions });
                    }
                });
                if (this.panels[index]) {
                    if (this.panels[index]['_size']) {
                        var toResizeIndex = index === this._splitPanels.length - 1 ? index - 1 : index + 1;
                        var panelToResize = this.panels[toResizeIndex];
                        if (panelToResize && panelToResize['_size']) {
                            var percentage = parseInt(this.panels[index]['_size']);
                            panelToResize['_size'] = parseInt(panelToResize['_size']) + percentage + '%';
                            this.panels[index]['_size'] = '0%';
                        }
                        this.autoResize = true;
                    }
                }
                if (this.cookies) {
                    $.jqx.cookie.cookie("jqxSplitter" + this.element.id, this.exportLayout(), this.cookieOptions);
                }
            }
        },

        disable: function () {
            this._removeEventHandlers();
            this.disabled = true;
            this._addDisabledClasses();
        },

        /**
        * Enabling the splitter
        */
        enable: function () {
            this._addEventHandlers();
            this.disabled = false;
            this._removeDisabledClasses();
        },

        showCollapseButtonAt: function (index) {
            if (index >= 0 && index < this._splitBars.length) {
                this._splitBars[index].splitBar.children(0).css('visibility', 'inherit');
            }
        },

        hideCollapseButtonAt: function (index) {
            if (index >= 0 && index < this._splitBars.length) {
                this._splitBars[index].splitBar.children(0).css('visibility', 'hidden');
            }
        }
    });
} (jQuery));/*
*   Depends:
*        jqxcore.js
*
*/

(function ($) {

    $.jqx.jqxWidget('jqxTabs', '', {});

    $.extend($.jqx._jqxTabs.prototype, {

        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the duration of the scroll animation.
            this.scrollAnimationDuration = 200;
            // Type: Bool
            // Default: true
            // Gets or sets whether the hover effect is active.
            this.enabledHover = true;
            // Type: Bool
            // Default: false
            // Gets or sets whether the tab view is disabled.
            this.disabled = false;
            // Type: Bool
            // Default: false
            // Gets or sets whether the tab view is collapsible.
            this.collapsible = false;
            // Type: String
            // Default: none
            // Gets or sets the animation type of switching tabs. Possible values ['none', 'fade'].
            this.animationType = 'none';
            // Type: Bool
            // Default: true
            // Gets or sets whether the scroll animation is enabled.
            this.enableScrollAnimation = true;
            // Type: Number
            // Default: 450
            // Gets or sets animation duration of showing animation.
            this.contentTransitionDuration = 450;
            // Type: String
            // Default: click
            // Gets or sets user interaction used for switching the different tabs. Possible values ['click', 'dblclick', 'mouseenter', 'none'].
            this.toggleMode = 'click';
            // Type: Number
            // Default: 0
            // Gets or sets current selected item.
            this.selectedItem = 0;
            // Type: Number or String
            // Default: auto
            // Gets or sets widget's height.
            this.height = 'auto';
            // Type: Number or String
            // Default: auto
            // Gets or sets widget's width.
            this.width = 'auto';
            // Type: String
            // Default: top
            // Gets or sets widget's navigation location. Possible values ['top', 'bottom'].
            this.position = 'top';
            // Type: Bool
            // Default: false
            // Gets or sets whether the selection tracker is enabled.
            this.selectionTracker = false;
            // Type: Bool
            // Default: true
            // Gets or sets whether the scrolling is enabled.
            this.scrollable = true;
            // Type: String
            // Default: both
            // Gets or sets the position of the scroll arrows. Possible values ['left', 'right', 'both'].
            this.scrollPosition = 'right'
            // Type: Number
            // Default: 70
            // Gets or sets the scrolling step.
            this.scrollStep = 70;
            // Type: Bool
            // Default: true
            // Gets or sets whether the tab view's header is with the height equals to the height of it's biggest item.
            this.autoHeight = true;
            // sets a height of the header
            this.headerHeight = null;
            // Type: Bool
            // Default: false
            // Gets or sets whether tabs will have close buttons.
            this.showCloseButtons = false;
            // Type: Bool
            // Default: true
            // Gets or sets whether all tabs can be closed with the 'close' button or with the 'removeAt' function.
            this.canCloseAllTabs = true;
            // Type: Number
            // Default: 250
            // Gets or sets the drop animation duration
            this.dropAnimationDuration = 250;
            // Type: Number
            // Default: 16
            // Gets or sets the close button size.
            this.closeButtonSize = 16;
            // Type: Number
            // Default: 16
            // Gets or sets the arrow buttons size.
            this.arrowButtonSize = 16;
            // Type: Bool
            // Default: true
            // Gets or sets whether the keyboard navigation is activated.
            this.keyboardNavigation = true;
            // Type: Bool
            // Default: false
            // Gets or sets whether the tab view's elements could be reordered.
            this.reorder = false;
            // Type: Bool
            // Default: false
            // Gets or sets whether the drop animation is enabled.
            this.enableDropAnimation = false;
            // Type: Number
            // Default: 300
            // Gets or sets whether the selection tracker animation duration.
            this.selectionTrackerAnimationDuration = 300;
            //Private variables
            this._isTouchDevice = false;
            this.roundedCorners = true;
            //This variable is used in the expanding and collapsing. Onece when the tab have been collapsed bottom or top (depending ot
            //header's position) border is added to the titles and _headerWrapper's height is increasing with 1px. When the header increase
            //its size with one pixel _headerExpandingBalance is increasing with one, when it's decreased it's decreasing with one.
            this._headerExpandingBalance = 0;
            this._dragStarted = false;
            this._tabCaptured = false;
            //Used in scrolling when the user is dragging any item
            this._lastUnorderedListPosition = 0;
            this._selectedItem = 0;
            this._titleList = [];
            this._contentList = [];
            this._contentWrapper = null;
            this._unorderedList = null;
            this._scrollTimeout = null;
            this.isCollapsed = false;
            //This property is used to cancel selecting and unselecting events. It is keeping reference to these events.
            this._currentEvent = null;
            //This property indicates is the unordered list wide enough to add scroll arrows
            this._needScroll = true;
            //This variable is used for not allowing to the user to perform any action when there is an active animation.
            //Before the animation start we are adding property (with the name of the animated object) to the _isAnimated object and setting it's value to true.
            //When the animation ends we are setting this property to false.
            //In the method which is checking is there an active animation we are checking is there any property with value true.
            this._isAnimated = {};
            this._events = [
                'created', 'selected', 'add', 'removed', 'enabled', 'disabled', 'selecting', 'unselecting',
                'unselected', 'dragStart', 'dragEnd', 'locked', 'unlocked', 'collapsed', 'expanded', 'tabclick'
            ];
            this._initTabContentList = [];
            this._invalidArgumentExceptions = {
                'invalidScrollAnimationDuration': 'The scroll animation duration is not valid!',
                'invalidWidth': 'Width you\'ve entered is invalid!',
                'invalidHeight': 'Height you\'ve entered is invalid!',
                'invalidAnimationType': 'You\'ve entered invalid animation type!',
                'invalidcontentTransitionDuration': 'You\'ve entered invalid value for contentTransitionDuration!',
                'invalidToggleMode': 'You\'ve entered invalid value for toggleMode!',
                'invalidPosition': 'You\'ve entered invalid position!',
                'invalidScrollPosition': 'You\'ve entered invalid scroll position!',
                'invalidScrollStep': 'You\'ve entered invalid scroll step!',
                'invalidStructure': 'Invalid structure!',
                'invalidArrowSize': 'Invalid scroll button size!',
                'invalidCloseSize': 'Invalid close button size!',
                'invalidDropAnimationDuration': 'Invalid dropAnimationDuration!'
            };
        },

        createInstance: function () {
            this.host.addClass(this.toThemeProperty('jqx-tabs'));
            this.host.addClass(this.toThemeProperty('jqx-widget'));
            this.host.addClass(this.toThemeProperty('jqx-widget-content'));

            this._unorderedList = this.host.children('ul');

            this._titleList = this.host.children('ul').children('li');
            this._contentList = this.host.children('div');
            this._selectedItem = this.selectedItem;
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this._needScroll = this.scrollable;
            if (this.selectionTracker) {
                this.selectionTracker = this._seletionTrackerBrowserCheck();
            }
            if (this._isTouchDevice) {
                this.reorder = false;
                this.keyboardNavigation = false;
            }
            //Saving all titles and contents into collections
            var count = this.length();
            while (count) {
                count--;
                this._titleList[count] = $(this._titleList[count]);
                this._contentList[count] = $(this._contentList[count]);
            }
            this._validateProperties();
            this._refresh();
            this._moveSelectionTrack(this._selectedItem, 0);
            if (this.disabled) {
                this.disable();
            }
            this.element.tabIndex = 0;
            this._raiseEvent(0);

            //// resize when the width or height is in percentages.
            //var percentageSize = false;
            var me = this;
            //if (me.width != null && me.width.toString().indexOf("%") != -1) {
            //    percentageSize = true;
            //}

            //if (me.height != null && me.height.toString().indexOf("%") != -1) {
            //    percentageSize = true;
            //}

            //if (me.width == 'auto' || me.height == 'auto') percentageSize = true;

            me._enableWindowResize();

            if (me._hiddenParent()) {
                me._intervalTimer = setInterval(function () {
                    if (!me._hiddenParent()) {
                        me._refresh();
                        clearInterval(me._intervalTimer);
                    }
                }, 100);
            }
        },

        _hiddenParent: function () {
            var me = this;
            if (me.host.css('display') != 'block')
                return true;
            var hiddenParent = false;
            $.each(me.host.parents(), function () {
                if ($(this).css('display') != 'block') {
                    hiddenParent = true;
                    return false;
                }
            });
            return hiddenParent;
        },

        _enableWindowResize: function (enable) {
            if (enable == false) {
                $(window).unbind('resize.tabs' + this.element.id);
                return;
            }

            var percentageSize = false;
            var me = this;
            if (me.width != null && me.width.toString().indexOf("%") != -1) {
                percentageSize = true;
            }

            if (me.height != null && me.height.toString().indexOf("%") != -1) {
                percentageSize = true;
            }
            if (me.width == 'auto' || me.height == 'auto') percentageSize = true;

            $(window).bind('resize.tabs' + this.element.id, function () {
                if (percentageSize) {
                    var width = me.host.width();
                    var height = me.host.height();
                    if (me._lastWidth != width || me._lastHeight != height) {
                        if (me.refreshTimer) {
                            clearTimeout(me.refreshTimer);
                        }

                        me.refreshTimer = setTimeout(function () {
                            me.refresh();
                        }, 10);
                    }
                    me._lastWidth = width;
                    me._lastHeight = height;
                }
            });
        },

        refresh: function (initialRefresh) {
            if (true != initialRefresh || initialRefresh == undefined) {
                this._performResize();
            }
        },

        _seletionTrackerBrowserCheck: function () {
            var txt = "Browser CodeName: " + navigator.appCodeName + "";
            txt += "Browser Name: " + navigator.appName + "";
            txt += "Browser Version: " + navigator.appVersion + "";
            // txt += "Cookies Enabled: " + navigator.cookieEnabled + "";
            txt += "Platform: " + navigator.platform + "";
            txt += "User-agent header: " + navigator.userAgent + "";

            if (txt.indexOf('IEMobile') != -1) {
                return false;
            }
            if (txt.indexOf('Windows Phone OS') != -1) {
                return false;
            }
            if ($.browser.msie && $.browser.version <= 7) {
                return false;
            }
            return true;
        },

        _uiRefresh: function (render) {
            //Using this backup variable because after refresh the scroll position should be recovered
            this._unorderedListLeftBackup = this._unorderedList.css('left');
            if (render) {
                this._render();
            }
            this._addStyles();
            this._performLayout();
            this._prepareTabs();
            this._removeEventHandlers();
            this._addEventHandlers();
            if (this._unorderedListLeftBackup === 'auto') {
                this._unorderedListLeftBackup = this._getArrowsDisplacement();
            }
            this._unorderedList.css('left', this._unorderedListLeftBackup);
        },

        _refresh: function () {
            this._uiRefresh(true);
        },

        _addStyles: function () {
            this._unorderedList.addClass(this.toThemeProperty('jqx-tabs-title-container'));
            this._unorderedList.css({
                'outline': 'none', 'white-space': 'nowrap',
                'margin-top': '0px', 'margin-bottom': '0px', padding: '0px', background: 'transparent', border: 'none', 'border-style': 'none', 'text-indent': '0px'
            });

            var count = this.length();
            while (count) {
                count--;
                this._titleList[count].removeClass();
                this._titleList[count].css('padding', '');
                this._titleList[count].addClass('jqx-reset');
                this._titleList[count].addClass('jqx-disableselect');
                this._titleList[count].addClass(this.toThemeProperty('jqx-tabs-title'));
                this._titleList[count].addClass(this.toThemeProperty('jqx-item'));
                if (this.position == 'bottom') {
                    this._titleList[count].addClass(this.toThemeProperty('jqx-tabs-title-bottom'));
                }

                if (this._titleList[count].disabled) {
                    this._titleList[count].addClass(this.toThemeProperty('jqx-tabs-title-disable'));
                    this._titleList[count].addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                }

                this._titleList[count].removeClass(this.toThemeProperty('jqx-rc-b'));
                this._titleList[count].removeClass(this.toThemeProperty('jqx-rc-t'));
                this._contentList[count].removeClass(this.toThemeProperty('jqx-rc-b'));
                this._contentList[count].removeClass(this.toThemeProperty('jqx-rc-t'));
                switch (this.position) {
                    case 'top':
                        this._titleList[count].addClass(this.toThemeProperty('jqx-rc-t'));
                        this._contentList[count].addClass(this.toThemeProperty('jqx-rc-b'));
                        break;
                    case 'bottom':
                        this._titleList[count].addClass(this.toThemeProperty('jqx-rc-b'));
                        this._contentList[count].addClass(this.toThemeProperty('jqx-rc-t'));
                        break;
                }
            }
            if (this.selectionTracker) {
                this._selectionTracker.removeClass(this.toThemeProperty('jqx-rc-b'));
                this._selectionTracker.removeClass(this.toThemeProperty('jqx-rc-t'));
                switch (this.position) {
                    case 'top':
                        this._selectionTracker.addClass(this.toThemeProperty('jqx-rc-t'));
                        break;
                    case 'bottom':
                        this._selectionTracker.addClass(this.toThemeProperty('jqx-rc-b'));
                        break;
                }
            }
        },

        _raiseEvent: function (eventId, data) {
            var event = new $.Event(this._events[eventId]);
            event.owner = this;
            event.args = data;
            if (eventId === 6 || eventId === 7) {
                event.cancel = false;
                this._currentEvent = event;
            }
            var result = '';
            try {
                result = this.host.trigger(event);
                if (eventId == 1) {
                    var me = this;
                    if (this.selectionTracker || this.animationType != 'none') {
                        setTimeout(function () {
                            if (!me._initTabContentList[me.selectedItem]) {
                                if (me.initTabContent) {
                                    me.initTabContent(me.selectedItem);
                                    me._initTabContentList[me.selectedItem] = true;
                                }
                            }
                            var event = new $.Event('loadContent');
                            event.owner = this;
                            if (me._contentList.length > 0 && me._contentList[me.selectedItem]) {
                                me._contentList[me.selectedItem].find('div').trigger(event);
                            }
                        }, 50 + me.selectionTrackerAnimationDuration);
                    }
                    else {
                        var event = new $.Event('loadContent');
                        if (!me._initTabContentList[me.selectedItem]) {
                            if (me.initTabContent) {
                                me.initTabContent(me.selectedItem);
                                me._initTabContentList[me.selectedItem] = true;
                            }
                        }
                        event.owner = this;
                        if (this._contentList.length > 0 && this._contentList[this.selectedItem]) {
                            this._contentList[this.selectedItem].find('div').trigger(event);
                        }
                    }
                }
            }
            catch (error) {
            }

            return result;
        },

        _getArrowsDisplacement: function () {
            if (!this._needScroll) {
                return 0;
            }
            var trackerDisplacement;
            var leftArrowWidth = this.arrowButtonSize;
            var rightArrowWidth = this.arrowButtonSize;
            if (this.scrollPosition === 'left') {
                trackerDisplacement = leftArrowWidth + rightArrowWidth;
            } else if (this.scrollPosition === 'both') {
                trackerDisplacement = leftArrowWidth;
            } else {
                trackerDisplacement = 0;
            }
            return trackerDisplacement;
        },

        _scrollRight: function (duration, callback) {
            this._unorderedList.stop();
            this._unlockAnimation('unorderedList');
            var scrollWidth = parseInt(this._unorderedList.width() + parseInt(this._unorderedList.css('margin-left')), 10),
                hostWidth = parseInt(this.host.width(), 10),
                leftArrowWidth, rightArrowWidth,
                unorderedListLeft = parseInt(this._unorderedList.css('left'), 10),
                trackerDisplacement = this._getArrowsDisplacement(),
                left = 0,
                selectionTrackerLeft = undefined;
            if (this.scrollable) {
                leftArrowWidth = parseInt(this._leftArrow.outerWidth(), 10);
                rightArrowWidth = parseInt(this._rightArrow.outerWidth(), 10);
            } else {
                leftArrowWidth = 0;
                rightArrowWidth = 0;
            }
            duration = (this.enableScrollAnimation) ? duration : 0;
            if (parseInt(this._headerWrapper.width(), 10) > parseInt(this._unorderedList.css('margin-left')) + parseInt(this._unorderedList.width(), 10)) {
                left = trackerDisplacement;
            } else if (Math.abs(unorderedListLeft) + this.scrollStep <
                Math.abs(hostWidth - scrollWidth) + leftArrowWidth + rightArrowWidth + trackerDisplacement) {
                left = unorderedListLeft - this.scrollStep;
                selectionTrackerLeft = unorderedListLeft - this.scrollStep + parseInt(this._titleList[this._selectedItem].position().left);
            } else {
                left = hostWidth - scrollWidth - (2 * this.arrowButtonSize - trackerDisplacement);
                //Making this check because jQuery(selector).position().left is giving different results
                if (left < parseInt(this._unorderedList.css('left'), 10) - 4 &&
                    left > parseInt(this._unorderedList.css('left'), 10) + 4) {
                    selectionTrackerLeft = hostWidth - scrollWidth - leftArrowWidth - rightArrowWidth + parseInt(this._titleList[this._selectedItem].position().left);
                }
            }
            this._performScrollAnimation(left, selectionTrackerLeft, duration);
        },

        _scrollLeft: function (duration, callback) {
            this._unorderedList.stop();
            this._unlockAnimation('unorderedList')
            var unorderedListLeft = parseInt(this._unorderedList.css('left')),
                trackerDisplacement = this._getArrowsDisplacement(),
                left = 0,
                selectionTrackerLeft = undefined;
            //Calculating animation's parameters
            duration = (this.enableScrollAnimation) ? duration : 0;
            if (parseInt(this._headerWrapper.width()) >= parseInt(this._unorderedList.width())) {
                left = trackerDisplacement;
            } else if (unorderedListLeft + this.scrollStep < trackerDisplacement) {
                left = unorderedListLeft + this.scrollStep;
                selectionTrackerLeft = unorderedListLeft + this.scrollStep + parseInt(this._titleList[this._selectedItem].position().left);
            } else {
                left = trackerDisplacement;
                //Making this check because jQuery(selector).position().left is giving different results
                if (left < parseInt(this._unorderedList.css('left')) - 4 &&
                    left > parseInt(this._unorderedList.css('left')) + 4) {
                    selectionTrackerLeft = parseInt(this._titleList[this._selectedItem].position().left);
                }
            }
            this._performScrollAnimation(left, selectionTrackerLeft, duration);
        },

        _performScrollAnimation: function (left, selectionTrackerLeft, duration) {
            var self = this;
            if (selectionTrackerLeft !== undefined) {
                this._moveSelectionTrack(this._selectedItem, 0, selectionTrackerLeft);
            }
            this._lockAnimation('unorderedList');
            this._unorderedList.animate({ 'left': left }, duration, function () {
                self._moveSelectionTrack(self.selectedItem, 0);
                self._unlockAnimation('unorderedList');
            });
        },

        _addKeyboardHandlers: function () {
            var self = this;
            if (this.keyboardNavigation) {
                this.addHandler(this.host, 'keydown', function (event) {
                    if (!self._activeAnimation()) {
                        var selectedItem = self._selectedItem;
                        var tracker = self.selectionTracker;
                        //     self.selectionTracker = false;
                        switch (event.keyCode) {
                            case 37:    //left arrow
                                self.previous();
                                return true;
                            case 39:    //right arrow
                                self.next();
                                return true;
                            case 36:    //home
                                self.first();
                                return true;
                            case 35:    //end
                                self.last();
                                return true;
                            case 27:
                                if (self._tabCaptured) {
                                    self._cancelClick = true;
                                    self._uncapture(null, self.selectedItem);
                                    self._tabCaptured = false;
                                }
                                break;
                        }
                        self.selectionTracker = tracker;
                    }
                    return true;
                });
            }
        },

        _addScrollHandlers: function () {
            var self = this;
            this.addHandler(this._leftArrow, 'mousedown', function () {
                self._startScrollRepeat(true, self.scrollAnimationDuration);
            });
            this.addHandler(this._rightArrow, 'mousedown', function () {
                self._startScrollRepeat(false, self.scrollAnimationDuration);
            });
            this.addHandler(this._rightArrow, 'mouseleave', function () {
                clearTimeout(self._scrollTimeout);
            });
            this.addHandler(this._leftArrow, 'mouseleave', function () {
                clearTimeout(self._scrollTimeout);
            });
            this.addHandler($(document), 'mouseup.tab' + this.element.id, this._mouseUpScrollDocumentHandler, this);
            this.addHandler($(document), 'mouseleave.tab' + this.element.id, this._mouseLeaveScrollDocumentHandler, this);
        },

        _mouseLeaveScrollDocumentHandler: function (event) {
            var self = event.data;
            clearTimeout(self._scrollTimeout);
        },

        _mouseUpScrollDocumentHandler: function (event) {
            var self = event.data;
            clearTimeout(self._scrollTimeout);
        },

        _mouseUpDragDocumentHandler: function (event) {
            var self = event.data;
            if (self._tabCaptured && self._dragStarted) {
                self._uncapture(event);
            }
            self._tabCaptured = false;
        },

        _addReorderHandlers: function () {
            var self = this;
            this.addHandler($(document), 'mousemove.tab' + this.element.id, this._moveElement, this);
            this.addHandler($(document), 'mouseup.tab' + this.element.id, this._mouseUpDragDocumentHandler, this);
        },

        _addEventHandlers: function () {
            var count = this.length();
            while (count) {
                count--;
                this._addEventListenerAt(count);
            }
            if (this.keyboardNavigation) {
                this._addKeyboardHandlers();
            }
            if (this.scrollable) {
                this._addScrollHandlers();
            }
            if (this.reorder && !this._isTouchDevice) {
                this._addReorderHandlers();
            }
            var me = this;
            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    var eventHandle = function (event) {
                        if (me._tabCaptured) {
                            me._cancelClick = true;
                            me._uncapture(null, me.selectedItem);
                            me._tabCaptured = false;
                        }
                    };
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mouseup', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }
                }
            }
        },

        _getFocusedItem: function (mouseX, mouseY) {
            var count = this.length();
            while (count) {
                count--;
                var currentElement = this._titleList[count],
                    currentElementWidth = parseInt(currentElement.outerWidth(true)),
                    currentElementX = parseInt(currentElement.offset().left),
                    unorderedListX = parseInt(this._unorderedList.offset().left),
                    hostX = parseInt(this.host.offset().left),
                    currentElementAbsoluteX = currentElementX;
                if ((currentElementAbsoluteX <= mouseX &&
                    currentElementAbsoluteX + currentElementWidth >= mouseX) &&
                    (currentElement !== this._capturedElement) &&
                    (!this._titleList[count].locked) &&
                    (this._titleList[count].disabled !== true)) {
                    return count;
                }
            }
            return -1;
        },

        _simulateDropAnimation: function (captured, mouseOver) {
            var self = this;
            var callback = function () {
                self._headerWrapper.css('visibility', 'visible');
                headerWrapper.remove();
            };
            //Creating cloning of the header which is using absolute positioning for the tabs
            var top = this._headerWrapper.position().top;
            var left = this._headerWrapper.position().left;
            var headerWrapper = this._headerWrapper.clone();
            var unorderedList = headerWrapper.children(0);
            var selectionTracker = headerWrapper.find(this.toThemeProperty('.jqx-tabs-selection-tracker-top', true));
            this._headerWrapper.css('visibility', 'hidden');
            selectionTracker.css('display', 'none');

            headerWrapper.appendTo(this.host);
            headerWrapper.css({
                position: 'absolute',
                //    overflow: 'hidden',
                left: left,
                top: ((this.position === 'top') ? top : top),
                height: headerWrapper.height(),
                width: headerWrapper.width()
            });
            var count = this.length();
            var leftOffset = 0;
            var capturedItem = $(unorderedList.children()[captured]);
            var overItem = $(unorderedList.children()[mouseOver]);
            for (var i = 0; i < count; i++) {
                var child = $(unorderedList.children()[i]);
                child.width(child.width());
                var visible = this.isVisibleAt(i);
                if (!visible && i != captured) {
                    child.css('visibility', 'hidden');
                }

                if (i !== 0) {
                    leftOffset += parseInt($(unorderedList.children()[i - 1]).outerWidth(true));
                }
                if (i !== captured) {
                    child.css({ position: 'absolute', left: leftOffset, top: 0 });
                } else {
                    child.css({ position: 'absolute', left: this._capturedElement.position().left, top: 0 });
                }
                child.css('z-index', 0);
            }

            var makeSelection = function () {
                self._selectedItem = -1;
                self.select(mouseOver);
                self._selectedItem = mouseOver;
            }

            //Animation, when the captured item index is greater than mouseOver item index
            if (captured > mouseOver) {
                leftOffset = parseInt(overItem.css('left'));
                this._lockAnimation('simulation');
                capturedItem.animate({
                    left: leftOffset
                }, this.dropAnimationDuration, function () {
                    callback();
                    self._unlockAnimation('simulation');
                    makeSelection();
                });
                for (var i = mouseOver; i < captured; i++) {
                    var child = $(unorderedList.children()[i]);
                    if (i === mouseOver) {
                        leftOffset += capturedItem.outerWidth(true);
                    } else {
                        leftOffset += $(unorderedList.children()[i - 1]).outerWidth(true);
                    }
                    this._lockAnimation('simulation');
                    child.animate({ left: leftOffset }, this.dropAnimationDuration, function () {
                        self._unlockAnimation('simulation');
                        makeSelection();
                    });
                }
                //Animation, when the captured item index is less than mouseOver item index
            } else if (captured < mouseOver) {
                this._lockAnimation('simulation');
                capturedItem.animate({
                    left: parseInt(overItem.css('left')) + parseInt(overItem.outerWidth(true)) - parseInt(capturedItem.outerWidth(true))
                }, this.dropAnimationDuration, function () {
                    callback();
                    self._unlockAnimation('simulation');
                    makeSelection();
                });
                for (var i = captured + 1; i <= mouseOver; i++) {
                    this._lockAnimation('simulation');
                    $(unorderedList.children()[i]).animate({
                        left: parseInt($(unorderedList.children()[i]).css('left')) - parseInt(capturedItem.outerWidth(true))
                    }, this.dropAnimationDuration, function () {
                        self._unlockAnimation('simulation');
                        makeSelection();
                    });
                }
            }
        },

        _uncapture: function (event) {
            var trackerBackup = this.selectionTracker;
            this._unorderedListLeftBackup = this._unorderedList.css('left');
            this._dragStarted = false;
            this._tabCaptured = false;
            var capturedIndex = this._indexOf(this._capturedElement);
            if (!this._capturedElement) return;
            switch (this.position) {
                case 'top':
                    this._capturedElement.css('bottom', 0);
                    break;
                case 'bottom':
                    this._capturedElement.css('top', 0);
                    break;
            }
            if (event) {
                var mouseOverElementIndex = this._getFocusedItem(event.clientX, event.clientY);
            }
            if (mouseOverElementIndex === -1 || !event) {
                this._capturedElement.css('left', 0);
            } else {
                if (this.enableDropAnimation) {
                    this._simulateDropAnimation(capturedIndex, mouseOverElementIndex);
                }
                this._raiseEvent(10, { item: capturedIndex, dropIndex: mouseOverElementIndex });
                this._reorderItems(mouseOverElementIndex, capturedIndex);
            }

            $.each(this._titleList, function () {
                this.css('position', 'static');
            });

            this._reorderHeaderElements();
            this._unorderedList.css({
                'position': 'relative',
                'top': '0px'
            });

            this._prepareTabs();

            if (mouseOverElementIndex === -1 || !event) {
                this._selectedItem = capturedIndex;
                this._moveSelectionTrack(capturedIndex, 0);
                this._addSelectStyle(this._selectedItem, true);
            }
            else {
                this._moveSelectionTrack(this._selectedItem, 0);
                this._addSelectStyle(this._selectedItem, true);
            }

            if (document.selection) {
                document.selection.clear();
            }
            this._unorderedList.css('left', this._unorderedListLeftBackup);
            this.selectionTracker = trackerBackup;
        },

        _reorderItems: function (mouseOverElementIndex, capturedIndex) {
            var selectedItem = this._titleList[this.selectedItem];
            var capturedContent = this._contentList[capturedIndex];
            if (typeof this._capturedElement === 'undefined') {
                this._capturedElement = this._titleList[capturedIndex];
            }
            //Visible reorder
            this._titleList[capturedIndex].remove();
            if (capturedIndex < mouseOverElementIndex) {
                this._titleList[capturedIndex].insertAfter(this._titleList[mouseOverElementIndex]);
            } else {
                this._titleList[capturedIndex].insertBefore(this._titleList[mouseOverElementIndex]);
            }
            this._reorderElementArrays(mouseOverElementIndex, capturedIndex);
            this._getSelectedItem(selectedItem);
            this._removeEventHandlers();
            this._addEventHandlers();
        },

        _reorderElementArrays: function (mouseOverElementIndex, capturedIndex) {
            //Reordering in the collections and correcting the event handlers
            var selectedItem = this._titleList[this.selectedItem];
            var capturedContent = this._contentList[capturedIndex];
            if (capturedIndex < mouseOverElementIndex) {
                for (var i = capturedIndex; i <= mouseOverElementIndex; i++) {
                    this._titleList[i] = this._titleList[i + 1];
                    this._contentList[i] = this._contentList[i + 1];
                }
                this._contentList[mouseOverElementIndex] = capturedContent;
                this._titleList[mouseOverElementIndex] = this._capturedElement;
            } else {
                for (var i = capturedIndex; i >= mouseOverElementIndex; i--) {
                    this._titleList[i] = this._titleList[i - 1];
                    this._contentList[i] = this._contentList[i - 1];
                }
                this._contentList[mouseOverElementIndex] = capturedContent;
                this._titleList[mouseOverElementIndex] = this._capturedElement;
            }
        },

        _getSelectedItem: function (selectedItem) {
            //Getting selected item
            var count = this.length();
            while (count) {
                count--;
                if (this._titleList[count] === selectedItem) {
                    this._selectedItem = this.selectedItem = count;
                    break;
                }
            }
        },

        _moveElement: function (event, self) {
            var self = event.data;
            if (self._tabCaptured) {
                if (document.selection) {
                    document.selection.clear();
                }
                if (!self._dragStarted) {
                    unorderedListLeft = -parseInt(self._unorderedList.css('left'), 10);

                    if (event.clientX + unorderedListLeft > self._startX + 3 || event.clientX + unorderedListLeft < self._startX - 3) {
                        self._prepareTabForDragging();
                        self._dragStarted = true;
                    }
                } else {
                    self._performDrag(event);
                    clearTimeout(self._scrollTimeout);
                    self._dragScroll(event);
                }
            }
        },

        _performDrag: function (event) {
            var zoomFactor = this.getZoomFactor();
            unorderedListLeft = -parseInt(this._unorderedList.css('left'), 10);

            this._capturedElement.css('left', unorderedListLeft + event.clientX / zoomFactor - this._startX / zoomFactor);
            this._lastX = event.clientX / zoomFactor;
            this._moveSelectionTrack(this.selectedItem, 0);
        },

        getZoomFactor: function () {
            var factor = 1;
            if (document.body.getBoundingClientRect) {
                // rect is only in physical pixel size in IE before version 8 
                var rect = document.body.getBoundingClientRect();
                var physicalW = rect.right - rect.left;
                var logicalW = document.body.offsetWidth;

                // the zoom level is always an integer percent value
                factor = Math.round((physicalW / logicalW) * 100) / 100;
            }
            return factor;
        },

        _prepareTabForDragging: function () {
            this._capturedElement.css({
                position: 'relative',
                left: '0px',
                top: '0px',
                'z-index': '300'
            });
            this.selectedItem = this._indexOf(this._capturedElement);

            switch (this.position) {
                case 'top':
                    this._capturedElement.css('bottom', parseInt(this._capturedElement.css('top')));
                    break;
                case 'bottom':
                    this._capturedElement.css('top', parseInt(this._capturedElement.css('top')));
                    break;
            }
            this._raiseEvent(9, { item: this._indexOf(this._capturedElement) });
        },

        _dragScroll: function (event) {
            var lastUnorderedListPosition = parseInt(this._unorderedList.css('left'));
            var self = this;
            var capturedElementLeft = parseInt(this._capturedElement.css('left'));
            if (event.clientX <= this._headerWrapper.offset().left) {
                this._scrollLeft(this.scrollAnimationDuration);
                this._capturedElement.css('left',
                    parseInt(this._capturedElement.css('left')) +
                    this._lastUnorderedListPosition - lastUnorderedListPosition);
            } else if (event.clientX > this._headerWrapper.offset().left + parseInt(this._headerWrapper.width(), 10)) {
                this._scrollRight(this.scrollAnimationDuration);
                this._capturedElement.css('left',
                    parseInt(this._capturedElement.css('left')) +
                    this._lastUnorderedListPosition - lastUnorderedListPosition);
            } else {
                this._unorderedList.stop();
                this._unlockAnimation('unorderedList');
                clearTimeout(this._scrollTimeout);
            }
            var self = this;
            this._scrollTimeout = setTimeout(function () {
                self._dragScroll(event);
            }, this.scrollAnimationDuration);
            this._lastUnorderedListPosition = lastUnorderedListPosition;
        },

        _captureElement: function (event, index) {
            if (!this._tabCaptured &&
                !this._titleList[index].locked &&
                 this._titleList[index].disabled !== true &&
                 !this._activeAnimation()) {
                unorderedListLeft = -parseInt(this._unorderedList.css('left'), 10);

                this._startX = unorderedListLeft + event.clientX;
                this._startY = event.clientY;
                this._lastX = event.clientX;
                this._lastY = event.clientY;
                this._tabCaptured = true;
                this._capturedElement = this._titleList[index];
            }
        },

        _titleInteractionTrigger: function (index) {
            //Used for removing expand/collapse border fix
            if (this._headerExpandingBalance > 0) {
                this._removeOppositeBorder();
            }
            /////////////////////////////////////////////
            if (this._selectedItem !== index) {
                this.select(this._titleList[index], 'toggle');
                //If an item have been collapsed and we want to select it
                //before the selection we are uncollapsing the item
                this._titleList[index].collapsed = false;
                if (!this.collapsible) {
                    if (this.height !== 'auto') {
                        this._contentWrapper.css('visibility', 'visible');
                    } else {
                        this._contentWrapper.css('display', 'block');
                    }
                }
            } else if (this.collapsible) {
                if (this.isCollapsed) {
                    this.expand();
                } else {
                    this.collapse();
                }
            }
        },

        //Collapsing the current selected item.
        collapse: function () {
            var index = this._selectedItem,
                self = this;
            this.isCollapsed = true;
            // if (!this._titleList[index].collapsed) {
            //     this._titleList[index].collapsed = true;
            if (self.height !== 'auto') {
                self._contentWrapper.css('visibility', 'hidden');
            } else {
                self._contentWrapper.hide();
            }
            self._raiseEvent(13, { item: index });
            if (this.position == 'top') {
                self._headerWrapper.addClass(this.toThemeProperty('jqx-tabs-header-collapsed'));
                self.host.addClass(this.toThemeProperty('jqx-tabs-collapsed'));
            }
            else {
                self._headerWrapper.addClass(this.toThemeProperty('jqx-tabs-header-collapsed-bottom'));
                self.host.addClass(this.toThemeProperty('jqx-tabs-collapsed-bottom'));
            }
        },

        //Expanding the current selected item.
        expand: function () {
            var index = this._selectedItem,
                self = this;
            this.isCollapsed = false;
            //     if (this._titleList[index].collapsed) {
            //       this._titleList[index].collapsed = false;
            this._select(index, self.contentTransitionDuration, null, false, true);
            //Depend on the widget's height we are changing the display or visibility property
            if (self.height !== 'auto') {
                self._contentWrapper.css('visibility', 'visible');
            } else {
                self._contentWrapper.show();
            }
            self._raiseEvent(14, { item: index });
            if (this.position == 'top') {
                self._headerWrapper.removeClass(this.toThemeProperty('jqx-tabs-header-collapsed'));
                self.host.removeClass(this.toThemeProperty('jqx-tabs-collapsed'));
            }
            else {
                self._headerWrapper.removeClass(this.toThemeProperty('jqx-tabs-header-collapsed-bottom'));
                self.host.removeClass(this.toThemeProperty('jqx-tabs-collapsed-bottom'));
            }
        },

        _addSelectHandler: function (index) {
            var self = this;
            this.addHandler(this._titleList[index], 'selectstart', function (index) {
                return false;
            });

            this.addHandler(this._titleList[index], this.toggleMode, function (index) {
                return function () {
                    self._raiseEvent('15', { item: index });
                    if (!self._tabCaptured && !self._cancelClick) {
                        self._titleInteractionTrigger(index);
                    }
                    return true;
                }

            }(index));
        },

        _addDragDropHandlers: function (index) {
            var self = this;
            this.addHandler(this._titleList[index], 'mousedown', function (event) {
                self._captureElement(event, index);
                return false;
            });

            this.addHandler(this._titleList[index], 'mouseup', function (event) {
                if (self._tabCaptured && self._dragStarted) {
                    self._cancelClick = true;
                    self._uncapture(event, index);
                } else {
                    self._cancelClick = false;
                }
                self._tabCaptured = false;
                return false;
            });
        },

        _removeHoverStates: function () {
            var self = this;
            $.each(this._titleList, function () {
                this.removeClass(self.toThemeProperty('jqx-tabs-title-hover-top'));
                this.removeClass(self.toThemeProperty('jqx-tabs-title-hover-bottom'));
            });
        },

        _addHoverHandlers: function (index) {
            var self = this;
            var item = this._titleList[index];

            this.addHandler(item, 'mouseenter', function (event) {
                if (index != self._selectedItem) {
                    if (self.position == 'top') {
                        item.addClass(self.toThemeProperty('jqx-tabs-title-hover-top'));
                    }
                    else {
                        item.addClass(self.toThemeProperty('jqx-tabs-title-hover-bottom'));
                    }
                    item.addClass(self.toThemeProperty('jqx-fill-state-hover'));

                    if (self.showCloseButtons) {
                        var closeButton = item.children(0).children(self.toThemeProperty('.jqx-tabs-close-button', true));
                        closeButton.addClass(self.toThemeProperty('jqx-tabs-close-button-hover', true));
                    }
                }
            });

            this.addHandler(item, 'mouseleave', function (event) {
                if (index != self._selectedItem) {
                    if (self.position == 'top') {
                        item.removeClass(self.toThemeProperty('jqx-tabs-title-hover-top'));
                    }
                    else {
                        item.removeClass(self.toThemeProperty('jqx-tabs-title-hover-bottom'));
                    }
                    item.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                    if (self.showCloseButtons) {
                        var closeButton = item.children(0).children(self.toThemeProperty('.jqx-tabs-close-button', true));
                        closeButton.removeClass(self.toThemeProperty('jqx-tabs-close-button-hover', true));
                    }
                }
            });
        },

        _addEventListenerAt: function (index) {
            var self = this;
            if (this._titleList[index].disabled) return;
            if (this.reorder && !this._isTouchDevice) {
                this._addDragDropHandlers(index);
            }
            this._addSelectHandler(index);
            if (this.enabledHover) {
                this._addHoverHandlers(index);
            }
            var closeButton = this._titleList[index].find(this.toThemeProperty('.jqx-tabs-close-button', true));
            this.removeHandler(closeButton, 'click');
            this.addHandler(closeButton, 'click', function (event) {
                self.removeAt(index);
                return false;
            });
        },

        _removeEventHandlers: function () {
            var self = this;
            var count = this.length();
            while (count) {
                count--;
                this._removeEventListenerAt(count);
            }
            if (this.scrollable) {
                this.removeHandler(this._leftArrow, 'mousedown');
                this.removeHandler(this._rightArrow, 'mousedown');
            }
            this.removeHandler($(document), 'mousemove.tab' + this.element.id, this._moveElement);
            this.removeHandler($(document), 'mouseup.tab' + this.element.id, this._mouseUpScrollDocumentHandler);
            this.removeHandler($(document), 'mouseup.tab' + this.element.id, this._mouseUpDragDocumentHandler);
            this.removeHandler(this.host, 'keydown');
        },

        _removeEventListenerAt: function (index) {
            var self = this;
            this.removeHandler(this._titleList[index], this.toggleMode);
            this.removeHandler(this._titleList[index], 'mouseenter');
            this.removeHandler(this._titleList[index], 'mouseleave');
            this.removeHandler(this._titleList[index], 'mousedown');
            this.removeHandler(this._titleList[index], 'mouseup');
            var closeButton = this._titleList[index].children(0).children(this.toThemeProperty('.jqx-tabs-close-button', true));
            this.removeHandler(closeButton, 'click');
        },

        _moveSelectionTrack: function (item, duration, left) {
            var self = this;
            if (item == -1)
                return;

            if (this._titleList.length == 0)
                return;

            if (item >= this._titleList.length)
                return;

            if (this.selectionTracker) {
                this._selectionTracker.stop();
                this._unlockAnimation('selectionTracker');
                if (left === undefined) {
                    var leftDisplacement = parseInt(this._titleList[item].position().left);
                    if (!isNaN(parseInt(this._unorderedList.css('left')))) {
                        leftDisplacement += parseInt(this._unorderedList.css('left'));
                    }
                    if (!isNaN(parseInt(this._unorderedList.css('margin-left')))) {
                        leftDisplacement += parseInt(this._unorderedList.css('margin-left'));
                    }
                    if (!isNaN(parseInt(this._titleList[item].css('margin-left')))) {
                        leftDisplacement += parseInt(this._titleList[item].css('margin-left'));
                    }
                    if (!isNaN(parseInt(this._titleList[item].css('margin-right')))) {
                        //        leftDisplacement += parseInt(this._titleList[item].css('margin-right'));
                    }
                } else {
                    var leftDisplacement = left;
                }
                var topDisplacement = 0;
                var heightDifference = 0;
                if (this.position === 'top') {
                    topDisplacement = parseInt(this._headerWrapper.height()) - parseInt(this._titleList[item].outerHeight())
                    if (!this.autoHeight) {
                        heightDifference += parseInt(this._titleList[item].css('margin-top'));
                    }
                }
                this._lockAnimation('selectionTracker');

                // outerWidth includes the margin-right for some reason.
                // Use this instead: this._titleList[item].width() + this._titleList[item].css('padding-left') + this._titleList[item].css('padding-right');

                var horizontalPadding = parseInt(this._titleList[item].css('padding-left')) + parseInt(this._titleList[item].css('padding-right'));

                // the selected item's bottom border should be 0.
                var topOffset = this.position == 'top' ? 0 : 1;
                var headerPadding = parseInt(this._headerWrapper.css('padding-top')); // -parseInt(this._headerWrapper.css('padding-bottom'));
                var itemPadding = parseInt(this._titleList[item].css('padding-top')) + parseInt(this._titleList[item].css('padding-bottom'));
                this._selectionTracker.css('visibility', 'visible');
                this._moveSelectionTrackerContainer.css('visibility', 'visible');
                var topMargin = parseInt(this._titleList[item].css('margin-top'));
                if (isNaN(topMargin))
                    topMargin = 0;

                this._selectionTracker.animate({
                    'top': headerPadding + topMargin - topOffset, 'left': leftDisplacement + 'px',
                    'height': parseInt(this._titleList[item].height() + itemPadding), 'width': this._titleList[item].width() + horizontalPadding
                }, duration, function () {
                    self._unlockAnimation('selectionTracker');
                    self._selectionTracker.css('visibility', 'hidden');
                    self._addSelectStyle(item, true);
                    self._moveSelectionTrackerContainer.css('visibility', 'hidden');
                });
            }
        },

        destroy: function()
        {
            this.host.remove();
        },

        _switchTabs: function (selectIndex, unselectIndex) {
            if (selectIndex !== unselectIndex && !this._activeAnimation() && !this._tabCaptured) {
                var self = this;
                //Triggering unselecting and selecting events first because they could be canceled by the user
                this._raiseEvent(7, { item: unselectIndex });
                this._raiseEvent(6, { item: selectIndex });
                //Check if the event is canceled
                if (this._currentEvent) {
                    if (this._currentEvent.cancel) {
                        this._currentEvent = null;
                        return;
                    }
                }

                this._unselect(unselectIndex, null, true);
                this._select(selectIndex, self.contentTransitionDuration, null, true);
                return true;
            }
            return false;
        },

        _activeAnimation: function () {

            for (child in this._isAnimated) {
                if (this._isAnimated.hasOwnProperty(child)) {
                    if (this._isAnimated[child]) {
                        return true;
                    }
                }
            }
            return false;
        },

        _indexOf: function (item) {
            var count = this.length();
            while (count) {
                count--;
                if (this._titleList[count][0] === item[0] ||
                    this._contentList[count][0] === item[0]) {
                    return count;
                }
            }
            return -1;
        },

        _validateProperties: function () {
            try {
                if (this.scrollAnimationDuration < 0 || isNaN(this.scrollAnimationDuration)) {
                    throw new Error(this._invalidArgumentExceptions['invalidScrollAnimationDuration']);
                }
                if (parseInt(this.width) < 0 && this.width !== 'auto') {
                    throw new Error(this._invalidArgumentExceptions['invalidWidth']);
                }
                if (parseInt(this.height) < 0 && this.height !== 'auto') {
                    throw new Error(this._invalidArgumentExceptions['invalidHeight']);
                }
                if (this.animationType !== 'none' && this.animationType !== 'fade') {
                    throw new Error(this._invalidArgumentExceptions['invalidAnimationType']);
                }
                if (this.contentTransitionDuration < 0 || isNaN(this.contentTransitionDuration)) {
                    throw new Error(this._invalidArgumentExceptions['invalidcontentTransitionDuration']);
                }
                if (this.toggleMode !== 'click' && this.toggleMode !== 'dblclick' &&
                this.toggleMode !== 'mouseenter' && this.toggleMode !== 'none') {
                    throw new Error(this._invalidArgumentExceptions['invalidToggleMode']);
                }
                if (this.position !== 'top' && this.position !== 'bottom') {
                    throw new Error(this._invalidArgumentExceptions['invalidPosition']);
                }
                if (this.scrollPosition !== 'left' && this.scrollPosition !== 'right' && this.scrollPosition !== 'both') {
                    throw new Error(this._invalidArgumentExceptions['invalidScrollPosition']);
                }
                if (this.scrollStep < 0 || isNaN(this.scrollStep)) {
                    throw new Error(this._invalidArgumentExceptions['invalidScrollStep']);
                }
                if (this._titleList.length !== this._contentList.length) {
                    throw new Error(this._invalidArgumentExceptions['invalidStructure']);
                }
                if (this.arrowButtonSize < 0 || isNaN(this.arrowButtonSize)) {
                    throw new Error(this._invalidArgumentExceptions['invalidArrowSize']);
                }
                if (this.closeButtonSize < 0 || isNaN(this.closeButtonSize)) {
                    throw new Error(this._invalidArgumentExceptions['invalidCloseSize']);
                }
                if (this.dropAnimationDuration < 0 || isNaN(this.dropAnimationDuration)) {
                    throw new Error(this._invalidArgumentExceptions['invalidDropAnimationDuration']);
                }
            } catch (exception) {
                alert(exception);
            }
        },

        _startScrollRepeat: function (isLeft, timeout) {
            var self = this;
            if (timeout < 50) timeout = 50;
            if (isLeft) {
                this._scrollLeft(timeout);
            }
            else {
                this._scrollRight(timeout);
            }

            this._scrollTimeout = setTimeout(function () {
                self._startScrollRepeat(isLeft, timeout - 50)
            }, timeout);
        },

        _performLayout: function () {
            var count = this.length();
            while (count) {
                count--;
                if (this.position === 'top' ||
                    this.position === 'bottom') {
                    this._titleList[count].css('float', 'left');
                }
            }

            this._enableWindowResize(false);
            this._fitToSize();
            this._performHeaderLayout();
            this._fitToSize();
            this._enableWindowResize(true);
        },

        updatetabsheader: function () {
            this._performHeaderLayout();
        },

        _performResize: function () {
            this._fitToSize();
            this._positionArrows(this._totalItemsWidth);
            if (this._totalItemsWidth > this.host.width()) {
                this._unorderedList.width(this._totalItemsWidth);
            }
            else {
                this._unorderedList.width(this.host.width() - 2);
            }
            this._fitToSize();
        },

        _addArrows: function () {
            if (this._leftArrow && this._rightArrow) {
                this._leftArrow.remove();
                this._rightArrow.remove();
            }
            this._leftArrow = $('<div><span style="display: block; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-tabs-arrow-left') + '"></span></div>');
            this._rightArrow = $('<div><span style="display: block; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-tabs-arrow-right') + '"></span></div>');
            this._leftArrow.addClass(this.toThemeProperty('jqx-tabs-arrow-background'));
            this._rightArrow.addClass(this.toThemeProperty('jqx-tabs-arrow-background'));
            this._leftArrow.addClass(this.toThemeProperty('jqx-widget-header'));
            this._rightArrow.addClass(this.toThemeProperty('jqx-widget-header'));

            this._headerWrapper.append(this._leftArrow);
            this._headerWrapper.append(this._rightArrow);
            this._leftArrow.width(this.arrowButtonSize);
            this._leftArrow.height('100%');
            this._rightArrow.width(this.arrowButtonSize);
            this._rightArrow.height('100%');

            //     this._leftArrow.append('<img style="border: 0; margin: 0; pading: 0; outline: 0; with: ' + this.arrowButtonSize + 'px; height: ' + this.arrowButtonSize + 'px;" src="' + this._getImageUrl(this._leftArrow) + '" />');
            //   this._rightArrow.append('<img style="border: 0; margin: 0; pading: 0; outline: 0; with: ' + this.arrowButtonSize + 'px; height: ' + this.arrowButtonSize + 'px;" src="' + this._getImageUrl(this._rightArrow) + '" />');
            this._leftArrow.css({
                //             'background-image': 'none',
                'z-index': '30'
            });
            this._rightArrow.css({
                //               'background-image': 'none',
                'z-index': '30'
            });

            this._leftArrow.css('display', 'none');
            this._rightArrow.css('display', 'none');
        },

        _tabsWithVisibleCloseButtons: function () {
            if (!this.showCloseButtons)
                return 0;

            var count = this.length();

            var me = this;
            $.each(this._titleList, function () {
                var hasCloseButton = this.attr('hasclosebutton');
                if (hasCloseButton != undefined && hasCloseButton != null) {
                    if (hasCloseButton == 'false' || hasCloseButton == false) {
                        count--;
                    }
                }
            });

            return count;
        },

        _calculateTitlesSize: function () {
            var maxItemHeight = 0;
            var totalItemsWidth = 0;
            var count = this.length();
            while (count) {
                count--;
                //To calculate unordered list's children width sum correctly (to prevent from differences in the MSIE and other browsers
                //because of the image size) firstly we are hiding the close button, calculating the width and after that showing it if necessary
                this._titleList[count].css('position', 'static');

                this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'none');
                totalItemsWidth += parseInt(this._titleList[count].outerWidth(true));

                if (maxItemHeight < this._titleList[count].outerHeight(true)) {
                    maxItemHeight = Math.round(parseInt(this._titleList[count].outerHeight(true)));
                }
                if (this._titleList[count].height() == 0) {
                    var clone = this._titleList[count].clone();
                    $(document.body).append(clone);
                    maxItemHeight = Math.round(parseInt(clone.outerHeight(true)));
                    clone.remove();
                }

                var hasCloseButton = this._titleList[count].attr('hasCloseButton');
                if (hasCloseButton != undefined && hasCloseButton != null) {
                    var processed = false;
                    if (this.hiddenCloseButtons) {
                        if (this.hiddenCloseButtons[count] == 1) {
                            this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'none');
                            processed = true;
                        }
                    }
                    if (!processed) {
                        if (hasCloseButton == 'true' || hasCloseButton == true) {
                            totalItemsWidth += this.closeButtonSize;
                            this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'block');
                        }
                        else if (hasCloseButton == 'false' || hasCloseButton == false) {
                            this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'none');
                        }
                    }
                }
                else {
                    if (this.showCloseButtons && (this.canCloseAllTabs || this._tabsWithVisibleCloseButtons() > 1)) {
                        var processed = false;
                        if (this.hiddenCloseButtons) {
                            if (this.hiddenCloseButtons[count] == 1) {
                                this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'none');
                                processed = true;
                            }
                        }
                        if (!processed) {
                            totalItemsWidth += this.closeButtonSize;
                            this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).css('display', 'block');
                        }
                    }
                }

                this._titleList[count].height(this._titleList[count].height());
            }

            return { height: maxItemHeight, width: 10 + totalItemsWidth };
        },

        _reorderHeaderElements: function () {
            if (this.selectionTracker) {
                this._moveSelectionTrackerContainer.css({
                    'position': 'absolute',
                    'height': '100%', //this._headerWrapper.outerHeight(true),
                    'top': '0px',
                    'left': '0px',
                    'width': '100%'
                });
            }
            this._headerWrapper.css({
                'position': 'relative',
                'left': '0px',
                'top': '0px'
            });

            if (this.scrollable) {
                this._rightArrow.css({
                    'width': this.arrowButtonSize,
                    'position': 'absolute',
                    'top': '0px'
                });
                this._leftArrow.css({
                    'width': this.arrowButtonSize,
                    'position': 'absolute',
                    'top': '0px'
                });
                var _margin = this.theme && this.theme.indexOf('ui-') != -1 ? 3 : 0;
                if (_margin > 0) {
                    this._rightArrow.addClass(this.toThemeProperty('jqx-rc-r'));
                    this._leftArrow.addClass(this.toThemeProperty('jqx-rc-l'));
                }
                switch (this.scrollPosition) {
                    case 'both':
                        this._rightArrow.css('right', '0px');
                        this._leftArrow.css('left', '0px');
                        break;
                    case 'left':
                        this._rightArrow.css('left', this.arrowButtonSize + 'px');
                        this._leftArrow.css('left', '0px');
                        break;
                    case 'right':
                        this._rightArrow.css('right', -_margin + 'px');
                        this._leftArrow.css('right', (this.arrowButtonSize - _margin) + 'px');
                        break;
                }
            }
        },

        _positionArrows: function (totalItemsWidth) {
            if (totalItemsWidth >= parseInt(this._headerWrapper.width()) && this.scrollable) {
                this._needScroll = true;
                //When the arrows are invisible and after that they become visible
                if (this._unorderedList.position().left === 0) {
                    this._unorderedListLeftBackup = this._getArrowsDisplacement() + 'px';
                }
                this._leftArrow.css('display', 'block');
                this._rightArrow.css('display', 'block');
            } else {
                this._needScroll = false;
                this._leftArrow.css('display', 'none');
                this._rightArrow.css('display', 'none');
                this._unorderedList.css('left', 0);
            }
        },

        _performHeaderLayout: function () {
            this._removeSelectStyle();
            var size = this._calculateTitlesSize();
            var maxItemHeight = size.height;
            var totalItemsWidth = size.width;
            this._headerWrapper.height(maxItemHeight);
            this._unorderedList.height(maxItemHeight);
            if (this.headerHeight != null && this.headerHeight != 'auto') {
                this._headerWrapper.height(this.headerHeight);
                this._unorderedList.height(this.headerHeight);
            }
            if (totalItemsWidth > this.host.width()) {
                this._unorderedList.width(totalItemsWidth);
            }
            else {
                this._unorderedList.width(this.host.width());
            }
            if ($.browser.msie && $.browser.version < 8) {
                this._unorderedList.css('position', 'relative');
                this._headerWrapper.css('overflow', 'hidden');
            }

            this._reorderHeaderElements();
            totalItemsWidth = totalItemsWidth + parseInt(this._unorderedList.css('margin-left'));
            this._totalItemsWidth = totalItemsWidth;
            this._positionArrows(totalItemsWidth);
            this._unorderedList.css({
                'position': 'relative',
                'top': '0px'
            });
            this._verticalAlignElements();
            this._moveSelectionTrack(this._selectedItem, 0);
            this._addSelectStyle(this.selectedItem);
        },

        _verticalAlignElements: function () {
            var count = this.length();
            var maxHeightTab = this._maxHeightTab();
            while (count) {
                count--;
                var textWrapper = this._titleList[count].find('.jqx-tabs-titleContentWrapper'),
                                textWrapperHeight = textWrapper.height(),
                                closeButtonWrapper = this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)),
                                padding = parseInt(this._titleList[count].css('padding-top'));
                if (!padding) {
                    padding = 0;
                }
                if (this.autoHeight) {
                    var difference = this._titleList[count].outerHeight(true) - this._titleList[count].height();
                    //          this._titleList[count].height(parseInt(this._titleList[maxHeightTab].height()));
                    var topPadding = parseInt(this._titleList[count].css('padding-top'));
                    var bottomPadding = parseInt(this._titleList[count].css('padding-bottom'));
                    var topBorder = parseInt(this._titleList[count].css('border-top-width'));
                    var bottomBorder = parseInt(this._titleList[count].css('border-bottom-width'));
                    //      this._titleList[count].height('100%');
                    this._titleList[count].height(this._unorderedList.outerHeight() - topPadding - bottomPadding - topBorder - bottomBorder);
                    //           this._titleList[count].css('margin-top', 0);
                } else {
                    if (this.position === 'top') {
                        var margin = parseInt(this._unorderedList.height()) - parseInt(this._titleList[count].outerHeight(true));
                        if (parseInt(this._titleList[count].css('margin-top')) !== margin && margin !== 0) {
                            this._titleList[count].css('margin-top', margin);
                        }
                    } else {
                        this._titleList[count].height(this._titleList[count].height());
                    }
                }
                this._titleList[count].children(0).height('100%');

                //  this._titleList[count].children(0).height(this._titleList[count].height());
                var visibleHeight = parseInt(this._titleList[count].height());
                var closeButtonWrapperMiddle = parseInt(visibleHeight) / 2 - parseInt(closeButtonWrapper.height()) / 2;
                closeButtonWrapper.css('margin-top', 1 + closeButtonWrapperMiddle);
                var textWrapperMiddle = parseInt(visibleHeight) / 2 - parseInt(textWrapper.height()) / 2;
                textWrapper.css('margin-top', textWrapperMiddle);
            }
            //Align arrow
            if (this.scrollable) {
                var difference = parseInt(this._headerWrapper.outerHeight()) - this.arrowButtonSize;
                var halfDifference = difference / 2;
                this._rightArrow.children(0).css('margin-top', halfDifference);
                this._rightArrow.height('100%');
                this._leftArrow.height('100%');
                //      this._leftArrow.height(this._leftArrow.height() - 1);
                //        this._rightArrow.height(this._rightArrow.height() - 1);

                this._leftArrow.children(0).css('margin-top', halfDifference);
            }
        },

        _getImageUrl: function (arrowContainer) {
            var imageUrl = arrowContainer.css('background-image');
            imageUrl = imageUrl.replace('url("', '');
            imageUrl = imageUrl.replace('")', '');
            imageUrl = imageUrl.replace('url(', '');
            imageUrl = imageUrl.replace(')', '');
            return imageUrl;
        },

        _fitToSize: function () {
            //Resizing the host and content container if height or width are set
            this.host.width(this.width);

            if (this.width != 'auto') {
                this._contentWrapper.css('width', '100%');
                this._contentWrapper.width(this.host.width() - 2);
            }

            if (this.height !== 'auto') {
                this.host.height(this.height);
                var height = this.host.height() - this._headerWrapper.outerHeight() - 2; // -parseInt(this._titleList[this._maxHeightTab()].outerHeight(true));
                this._contentWrapper.height(height); //borderOffset
            } else {
                this._contentWrapper.css('height', 'auto');
            }
        },

        _maxHeightTab: function () {
            var count = this.length();
            var maxSize = -1;
            var returnIndex = -1;
            while (count) {
                count--;
                if (maxSize < parseInt(this._titleList[count].outerHeight(true))) {
                    returnIndex = count;
                }
            }
            return returnIndex;
        },

        _addSelectionTracker: function () {
            if (this._moveSelectionTrackerContainer) {
                this._moveSelectionTrackerContainer.remove();
            }
            this._moveSelectionTrackerContainer = $('<div class="' + this.toThemeProperty('jqx-tabs-selection-tracker-container') + '">');
            var selectionTrackerClass = this.toThemeProperty('jqx-tabs-selection-tracker-' + this.position);
            this._selectionTracker = $('<div class="' + selectionTrackerClass + '">');
            this._selectionTracker.css('color', 'inherit');
            this._moveSelectionTrackerContainer.append(this._selectionTracker);
            this._headerWrapper.append(this._moveSelectionTrackerContainer);
            this._selectionTracker.css({
                'position': 'absolute',
                'z-index': '10',
                'left': '0px',
                'top': '0px',
                'display': 'inline-block'
            });
        },

        _addContentWrapper: function () {
            //Adding content wrapper
            var floating = 'none';
            //Content wrapper

            var addWrapper = this._contentWrapper == undefined;
            this._contentWrapper = this._contentWrapper || $('<div class="' + this.toThemeProperty('jqx-tabs-content') + '" style="float:' + floating + ';">');
            this._contentWrapper.addClass(this.toThemeProperty('jqx-widget-content'));
            var count = this.length();
            while (count) {
                count--;
                this._contentList[count].addClass(this.toThemeProperty('jqx-tabs-content-element'));
            }
            if (addWrapper) {
                this.host.find('.jqx-tabs-content-element').wrapAll(this._contentWrapper);
                this._contentWrapper = this.host.find('.jqx-tabs-content');
            }
            if (this.roundedCorners) {
                if (this.position == 'top') {
                    this._contentWrapper.addClass(this.toThemeProperty('jqx-rc-b'));
                }
                else {
                    this._contentWrapper.addClass(this.toThemeProperty('jqx-rc-t'));
                }

                this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            }
        },

        _addHeaderWrappers: function () {
            var count = this.length();
            this._unorderedList.remove();
            this._headerWrapper = this._headerWrapper || $('<div class="jqx-tabs-headerWrapper" style="outline: none;">');
            this._headerWrapper.remove();
            if (this.position == 'top') {
                this._headerWrapper.prependTo(this.host);
            }
            else {
                this._headerWrapper.appendTo(this.host);
            }
            this._unorderedList.appendTo(this._headerWrapper);

            this._headerWrapper.addClass(this.toThemeProperty('jqx-tabs-header'));
            this._headerWrapper.addClass(this.toThemeProperty('jqx-widget-header'));
            if (this.position == 'bottom') {
                this._headerWrapper.addClass(this.toThemeProperty('jqx-tabs-header-bottom'));
            }
            else {
                this._headerWrapper.removeClass(this.toThemeProperty('jqx-tabs-header-bottom'));
            }

            if (this.roundedCorners) {
                if (this.position == 'top') {
                    this._headerWrapper.addClass(this.toThemeProperty('jqx-rc-t'));
                    this._headerWrapper.removeClass(this.toThemeProperty('jqx-rc-b'));
                }
                else {
                    this._headerWrapper.removeClass(this.toThemeProperty('jqx-rc-t'));
                    this._headerWrapper.addClass(this.toThemeProperty('jqx-rc-b'));
                }
            }

            while (count) {
                count--;
                if (this._titleList[count].children('.jqx-tabs-titleWrapper').length <= 0) {
                    var tabWrapper = $('<div class="jqx-tabs-titleWrapper" style="outline: none; position: relative;">');
                    tabWrapper.append(this._titleList[count].html());
                    this._titleList[count].empty();
                    tabWrapper.appendTo(this._titleList[count]);
                }
                this._titleList[count].children('.jqx-tabs-titleWrapper').css('z-index', '15');
            }
        },

        _render: function () {
            this._addCloseButtons();
            this._addHeaderWrappers();
            this._addContentWrapper();

            if (this.selectionTracker) {
                this._addSelectionTracker();
            }
            this._addArrows();
        },

        _addCloseButton: function (index) {
            var count = index;
            if (this._titleList[count].find(this.toThemeProperty('.jqx-tabs-close-button', true)).length <= 0 &&
                    this._titleList[count].find('.jqx-tabs-titleContentWrapper').length <= 0) {
                var titleWrapper = $('<div class="jqx-tabs-titleContentWrapper"></div>');
                titleWrapper.css('float', 'left');
                titleWrapper.addClass('jqx-disableselect');
                titleWrapper.append(this._titleList[count].html());
                this._titleList[count].html('');
                var closeButton = $('<div class="' + this.toThemeProperty('jqx-tabs-close-button') + '"></div>');
                closeButton.css({
                    'height': this.closeButtonSize,
                    'width': this.closeButtonSize,
                    'float': 'left',
                    'font-size': '1px'
                });

                var me = this;
                this._titleList[count].append(titleWrapper);
                this._titleList[count].append(closeButton);
                //       closeButton.append('<img src="' + this._getImageUrl(closeButton) + '" style="width:' + this.closeButtonSize + 'px; height:' + this.closeButtonSize + 'px;" />');
                //       closeButton.css('background', 'transperent');
                if (!this.showCloseButtons) {
                    closeButton.css('display', 'none');
                }
                else if (this.hiddenCloseButtons) {
                    if (this.hiddenCloseButtons[index] == 1) {
                        closeButton.css('display', 'none');
                    }
                }
            }
        },

        _addCloseButtons: function () {
            var count = this.length();
            while (count) {
                count--;
                this._addCloseButton(count);
            }
        },

        //Unselecting all items which are not equal to selectedItem property
        _prepareTabs: function () {
            var count = this.length();
            var tracker = this.selectionTracker;
            this.selectionTracker = false;
            while (count) {
                count--;
                if (this._selectedItem !== count) {
                    this._unselect(count, null, false);
                }
            }
            this._select(this._selectedItem, 0, null, false);
            this.selectionTracker = tracker;
            if (this.initTabContent) {
                if (!this._initTabContentList[this.selectedItem]) {
                    this.initTabContent(this.selectedItem);
                    this._initTabContentList[this.selectedItem] = true;
                }
            }
        },

        _isValidIndex: function (index) {
            return (index >= 0 && index < this.length());
        },

        _removeSelectStyle: function () {
            var count = this.length();
            while (count) {
                count--;
                var closeButton = null;
                if (this.showCloseButtons) {
                    var closeButton = this._titleList[count].children(0).children(this.toThemeProperty('.jqx-tabs-close-button', true));
                    closeButton.removeClass(this.toThemeProperty('jqx-tabs-close-button-selected'));
                }

                if (this.position == 'top') {
                    this._titleList[count].removeClass(this.toThemeProperty('jqx-tabs-title-selected-top'));
                }
                else {
                    this._titleList[count].removeClass(this.toThemeProperty('jqx-tabs-title-selected-bottom'));
                }
                this._titleList[count].removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            }
        },

        _addSelectStyle: function (index, force) {
            var count = this.length();
            this._removeSelectStyle();
            if (!this.selectionTracker || (force != undefined && force)) {
                if (index >= 0 && this._titleList[index] != undefined) {
                    var closeButton = null;
                    if (this.showCloseButtons) {
                        var closeButton = this._titleList[index].children(0).children(this.toThemeProperty('.jqx-tabs-close-button', true));
                        if (this.hiddenCloseButtons) {
                            if (this.hiddenCloseButtons[index] == 1) {
                                closeButton = null;
                            }
                        }
                    }

                    this._titleList[index].removeClass(this.toThemeProperty('jqx-fill-state-hover'));
                    if (this.position == 'top') {
                        this._titleList[index].removeClass(this.toThemeProperty('jqx-tabs-title-hover-top'));
                        this._titleList[index].addClass(this.toThemeProperty('jqx-tabs-title-selected-top'));
                    }
                    else {
                        this._titleList[index].removeClass(this.toThemeProperty('jqx-tabs-title-hover-bottom'));
                        this._titleList[index].addClass(this.toThemeProperty('jqx-tabs-title-selected-bottom'));
                    }
                    this._titleList[index].addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    if (closeButton != null) {
                        closeButton.addClass(this.toThemeProperty('jqx-tabs-close-button-selected'));
                    }
                }
            }
        },

        _addItemTo: function (collection, index, item) {
            if (index < collection.length) {
                var temp = undefined,
                    swap = undefined;
                for (var i = index; i + 1 < collection.length; i++) {
                    if (temp === undefined) {
                        temp = collection[i + 1];
                        collection[i + 1] = collection[i];
                    }
                    else {
                        swap = collection[i + 1];
                        collection[i + 1] = temp;
                        temp = swap;
                    }
                }
                if (temp === undefined) {
                    temp = collection[index];
                }
                collection[index] = item;
                collection.push(temp);
            } else {
                collection.push(item);
            }
        },

        _select: function (index, duration, callback, toTrigger, force) {
            if (!this._tabCaptured) {
                this.host.attr("hideFocus", "true");
                var self = this;
                if (force == undefined) {
                    this._addSelectStyle(index);
                }
                else {
                    this._addSelectStyle(index, force);
                }

                if (this.isCollapsed && this.collapsible) {
                    this._contentList[index].css('display', 'none');
                    this._selectCallback(index, callback, toTrigger);
                    return;
                }

                switch (this.animationType) {
                    case 'none':
                        if (!self.selectionTracker) {
                            for (var i = 0; i < this._contentList.length; i++) {
                                if (index != i && this._contentList[i].css('display') == 'block') {
                                    this._contentList[i].css('display', 'none');
                                }
                            }
                            this._contentList[index].css('display', 'block');
                        }
                        else {
                            setTimeout(function () {
                                self._contentList[index].css('display', 'block');
                            }, this.selectionTrackerAnimationDuration);
                        }

                        this._selectCallback(index, callback, toTrigger);
                        break;
                    case 'fade':
                        this._lockAnimation('contentListSelect');
                        self._selectCallback(index, callback, toTrigger);
                        this._contentList[index].fadeIn(duration,
                            function () {
                                self._unlockAnimation('contentListSelect');
                            });
                        break;
                }
            }
        },

        _selectCallback: function (index, callback, toTrigger) {
            this._selectedItem = index;
            this.selectedItem = this._selectedItem;
            if (callback) {
                callback();
            }
            if (toTrigger) {
                this._raiseEvent(1, { item: index });
            }
        },


        _unselect: function (index, callback, toTrigger) {
            if (index >= 0) {
                if (!this._tabCaptured) {
                    var self = this;
                    this._contentList[index].stop();

                    if (this.animationType == 'fade') {
                        this._contentList[index].css('display', 'none');
                    }
                    else {
                        if (this.selectionTracker) {
                            setTimeout(function () {
                                self._contentList[index].css('display', 'none');
                            }, this.selectionTrackerAnimationDuration);
                        }
                        else {
                            this._contentList[index].css('display', 'none');
                        }
                    }

                    this._unselectCallback(index, callback, toTrigger);

                    if (!this.selectionTracker) {
                        this._titleList[index].removeClass(this.toThemeProperty('jqx-tabs-title-selected'));
                        this._titleList[index].removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    }
                }
                else {
                    var x = 12;
                }
            }
        },


        _unselectCallback: function (index, callback, toTrigger) {
            if (toTrigger) {
                this._raiseEvent(8, { item: index });
            }

            if (callback) {
                callback();
            }
        },

        //Disabling the widget
        disable: function () {
            var count = this.length();
            while (count) {
                count--;
                this.disableAt(count);
            }
        },

        //Enabling the widget
        enable: function () {
            var count = this.length();
            while (count) {
                count--;
                this.enableAt(count);
            }
        },

        // gets the count of the enabled items.
        getEnabledTabsCount: function () {
            var length = 0;
            $.each(this._titleList, function () {
                if (!this.disabled) {
                    length++;
                }
            });

            return length;
        },

        // gets the count of the disabled items.
        getDisabledTabsCount: function () {
            var length = 0;
            $.each(this._titleList, function () {
                if (this.disabled) {
                    length++;
                }
            });

            return length;
        },

        //Removing tab with indicated index
        removeAt: function (index) {
            if (this._isValidIndex(index) && (this.canCloseAllTabs || this.length() > 1)) {
                this._removeHoverStates();
                var self = this,
                    selectedObject = this._titleList[this._selectedItem],
                    closeItemWidth = parseInt(this._titleList[index].outerWidth(true)),
                    title = this.getTitleAt(index);
                this._unorderedList.width(parseInt(this._unorderedList.width()) - closeItemWidth);
                this._titleList[index].remove();
                this._contentList[index].remove();

                var ensureVisibleIndex = 0;
                this._titleList.splice(index, 1);
                this._contentList.splice(index, 1);

                this._addStyles();
                this._performHeaderLayout();
                this._removeEventHandlers();
                this._addEventHandlers();
                this._raiseEvent(3, { item: index, title: title });
                this._isAnimated = {};

                if (this.selectedItem > 0) {
                    this._selectedItem = -1;
                    var current = this._getPreviousIndex(this.selectedItem);
                    this.select(current);
                }
                else {
                    this._selectedItem = -1;
                    var current = this._getNextIndex(this.selectedItem);
                    this.select(current);
                }

                //Fixing some issues with the scrolling
                if (parseInt(this._unorderedList.css('left')) > this._getArrowsDisplacement()) {
                    this._unorderedList.css('left', this._getArrowsDisplacement());
                }
                if (parseInt(this._unorderedList.width()) <= parseInt(this._headerWrapper.width())) {
                    var duration = (this.enableScrollAnimation) ? this.scrollAnimationDuration : 0;
                    this._lockAnimation('unorderedList');
                    this._unorderedList.animate({ 'left': 0 }, duration, function () {
                        self._unlockAnimation('unorderedList');
                    });
                }
            }
        },

        //Removing the first tab
        removeFirst: function () {
            this.removeAt(0);
        },

        //Removing the last tab
        removeLast: function () {
            this.removeAt(this.length() - 1);
        },

        //Disabling tab with indicated index
        disableAt: function (index) {
            if (!this._titleList[index].disabled ||
            this._titleList[index].disabled === undefined) {
                if (this.selectedItem == index) {
                    var selectedNext = this.next();
                    if (!selectedNext) {
                        selectedNext = this.previous();
                    }
                }

                this._titleList[index].disabled = true;
                this.removeHandler(this._titleList[index], this.toggleMode);
                if (this.enabledHover) {
                    this._titleList[index].unbind('mouseenter').unbind('mouseleave');
                }
                this._removeEventListenerAt(index);
                this._titleList[index].addClass(this.toThemeProperty('jqx-tabs-title-disable'));
                this._titleList[index].addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this._raiseEvent(5, { item: index });
            }
        },

        //Enabling tab in indicated position
        enableAt: function (index) {
            if (this._titleList[index].disabled) {
                this._titleList[index].disabled = false;
                this._addEventListenerAt(index);
                this._titleList[index].removeClass(this.toThemeProperty('jqx-tabs-title-disable'));
                this._titleList[index].removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this._raiseEvent(4, { item: index });
            }
        },

        //Adding tab in indicated position
        addAt: function (index, title, content) {
            if (index >= 0 || index <= this.length()) {
                this._removeHoverStates();
                var titleContainer = $('<li>' + title + '</li>');
                var contentContainer = $('<div>' + content + '</div>');
                titleContainer.addClass(this.toThemeProperty('jqx-tabs-title'));
                titleContainer.addClass(this.toThemeProperty('jqx-item'));
                contentContainer.addClass(this.toThemeProperty('jqx-tabs-content-element'));

                if (this.position == 'bottom') {
                    titleContainer.addClass(this.toThemeProperty('jqx-tabs-title-bottom'));
                }
                var fullRefresh = false;

                if (this._titleList.length == 0) {
                    this._unorderedList.append(titleContainer);
                }
                else {
                    if (index < this.length() && index >= 0) {
                        this._titleList[index].before(titleContainer);
                    } else {
                        this._titleList[this.length() - 1].after(titleContainer);
                    }
                }

                contentContainer.appendTo(this._contentWrapper);
                this._addItemTo(this._titleList, index, titleContainer);
                this._addItemTo(this._contentList, index, contentContainer);
                if (this._selectedItem > index) {
                    this._selectedItem++;
                }
                this._switchTabs(index, this._selectedItem);
                this._selectedItem = index;
                if (this.showCloseButtons && this._titleList.length > 0) {
                    this._addCloseButton(index);
                }

                this._uiRefresh(fullRefresh);
                this._raiseEvent(2, { item: index });
                this._moveSelectionTrack(this._selectedItem, 0);
            }
        },

        //Adding tab in the beginning
        addFirst: function (title, content) {
            this.addAt(0, title, content);
        },

        //Adding tab in the end
        addLast: function (title, content) {
            this.addAt(this.length(), title, content);
        },

        //Selecting tab with indicated index
        select: function (index, toggle) {
            if (typeof (index) === 'object') {
                index = this._indexOf(index);
            }

            var canSelect = index >= 0 && index < this._titleList.length ? this._titleList[index].attr('canselect') : true;
            if (canSelect == undefined || canSelect == 'true' || canSelect == true) {
                if (index !== this._selectedItem && this._isValidIndex(index)) {
                    if (!this._activeAnimation() && !this._titleList[index].disabled) {
                        var res = this._switchTabs(index, this._selectedItem);
                        if (res) {
                            this.ensureVisible(index);
                        }
                    }
                }
            }
        },

        //Selecting the previous item
        previous: function (item) {
            var index = this._selectedItem;
            if (item != undefined && !isNaN(item)) index = item;

            while (index > 0 && index < this._titleList.length) {
                index--;
                if (!this._titleList[index].disabled) {
                    this.select(index);
                    return true;
                }
            }
            return false;
        },


        _getPreviousIndex: function (index) {
            if (index != undefined && !isNaN(index)) {
                var savedIndex = index;
                while (index > 0 && index <= this._titleList.length) {
                    index--;
                    if (!this._titleList[index].disabled) {
                        return index;
                        break;
                    }
                }

                return savedIndex;
            }
            else return 0;
        },


        _getNextIndex: function (index) {
            if (index != undefined && !isNaN(index)) {
                var savedIndex = index;

                while (index >= 0 && index < this._titleList.length) {
                    if (!this._titleList[index].disabled) {
                        return index;
                        break;
                    }
                    index++;
                }

                return savedIndex;
            }
            else return 0;
        },

        //Selecting the next item
        next: function (item) {
            var index = this._selectedItem;
            if (item != undefined && !isNaN(item)) index = item;

            while (index >= 0 && index < this._titleList.length - 1) {
                index++;
                if (!this._titleList[index].disabled) {
                    this.select(index);
                    return true;
                }
            }

            return false;
        },

        //Selecting the first item
        first: function () {
            var index = 0;
            if (this._titleList[index].disabled) {
                this.next(index);
            }
            else {
                this.select(index);
            }
        },

        //Selecting the first item
        last: function () {
            var index = this._titleList.length - 1;
            if (this._titleList[index].disabled) {
                this.previous(index);
            }
            else {
                this.select(index);
            }
        },

        //Returning the tabs count
        length: function () {
            return this._titleList.length;
        },

        //Locking tab with specific index
        lockAt: function (index) {
            if (this._isValidIndex(index) &&
                (!this._titleList[index].locked ||
                 this._titleList[index].locked === undefined)) {
                this._titleList[index].locked = true;
                this._raiseEvent(11, { item: index });
            }
        },

        //Unlocing a tab with specific index
        unlockAt: function (index) {
            if (this._isValidIndex(index) &&
                this._titleList[index].locked) {
                this._titleList[index].locked = false;
                this._raiseEvent(12, { item: index });
            }
        },

        //Locing all tabs
        lockAll: function () {
            var count = this.length();
            while (count) {
                count--;
                this.lockAt(count);
            }
        },

        //Unlocking all tabs
        unlockAll: function () {
            var count = this.length();
            while (count) {
                count--;
                this.unlockAt(count);
            }
        },

        //Showing close button in a specific position
        showCloseButtonAt: function (index) {
            if (this._isValidIndex(index)) {
                if (!this.showCloseButtons) {
                    this.showCloseButtons = true;
                    this.updatetabsheader();
                }

                var closeButton = this._titleList[index].find(this.toThemeProperty('.jqx-tabs-close-button', true));
                closeButton.css('display', 'block');
                if (!this.hiddenCloseButtons) this.hiddenCloseButtons = new Array();
                this.hiddenCloseButtons[index] = 0;
            }
        },

        //Hiding a close button in a specific position
        hideCloseButtonAt: function (index) {
            if (this._isValidIndex(index)) {
                var closeButton = this._titleList[index].find(this.toThemeProperty('.jqx-tabs-close-button', true));
                closeButton.css('display', 'none');
                if (!this.hiddenCloseButtons) this.hiddenCloseButtons = new Array();
                this.hiddenCloseButtons[index] = 1;
            }
        },

        //Hiding all close buttons
        hideAllCloseButtons: function () {
            var count = this.length();
            while (count) {
                count--;
                this.hideCloseButtonAt(count);
            }
        },

        //Showing all close buttons.
        showAllCloseButtons: function () {
            var count = this.length();
            while (count) {
                count--;
                this.showCloseButtonAt(count);
            }
        },

        //Getting the title of specified tab.
        getTitleAt: function (index) {
            if (this._titleList[index]) {
                return this._titleList[index].text();
            }
            return null;
        },

        //Getting the content of specified tab.
        getContentAt: function (index) {
            if (this._contentList[index]) {
                return this._contentList[index].text();
            }
            return null;
        },

        setTitleAt: function (index, text) {
            if (this._titleList[index]) {
                this._titleList[index].text(text);
                if (this.showCloseButtons) {
                    this._addCloseButton(index);
                    this._removeEventHandlers();
                    this._addEventHandlers();

                }
            }
        },

        setContentAt: function (index, html) {
            if (this._contentList[index]) {
                this._contentList[index].html(html);
            }
        },

        //This method is ensuring the visibility of item with indicated index.
        //If the item is currently not visible the method is scrolling to it.
        ensureVisible: function (index) {
            var self = this;
            if (index == undefined || index == -1 || index == null)
                index = this.selectedItem;
            if (!this._isValidIndex(index)) {
                return false;
            }
            var itemRelativePosition = parseInt(this._titleList[index].position().left) + parseInt(this._unorderedList.css('margin-left'));
            var unorderedListPosition = parseInt(this._unorderedList.css('left'));
            var headerWrapperWidth = parseInt(this._headerWrapper.outerWidth(true));
            var itemWidth = parseInt(this._titleList[index].outerWidth(true));
            var visibleAreaLeftEnd = unorderedListPosition - this._getArrowsDisplacement();
            var visibleAreaRightEnd = headerWrapperWidth - this._getArrowsDisplacement() - visibleAreaLeftEnd;
            var scrollPosition, trackerPosition;
            if (itemRelativePosition < -visibleAreaLeftEnd) {
                scrollPosition = -itemRelativePosition + this._getArrowsDisplacement();
                trackerPosition = this._getArrowsDisplacement();
            } else if (itemRelativePosition + itemWidth > visibleAreaRightEnd - this._getArrowsDisplacement()) {
                scrollPosition = -itemRelativePosition + headerWrapperWidth - itemWidth -
                ((this.scrollable) ? (2 * this.arrowButtonSize - this._getArrowsDisplacement()) : 0);
                trackerPosition = headerWrapperWidth - itemWidth - this._getArrowsDisplacement();
            } else {
                this._moveSelectionTrack(index, this.selectionTrackerAnimationDuration);
                return true;
            }
            this._lockAnimation('unorderedList');
            this._unorderedList.animate({ 'left': scrollPosition }, this.scrollAnimationDuration, function () {
                self._unlockAnimation('unorderedList');
                self._moveSelectionTrack(self._selectedItem, 0);
                return true;
            });
            this._moveSelectionTrack(index, this.selectionTrackerAnimationDuration, trackerPosition);
            return true;
        },

        // gets whether an item is visible.
        isVisibleAt: function (index) {
            var self = this;
            if (index == undefined || index == -1 || index == null)
                index = this.selectedItem;
            if (!this._isValidIndex(index)) {
                return false;
            }
            var itemRelativePosition = parseInt(this._titleList[index].position().left) + parseInt(this._unorderedList.css('margin-left'));
            var unorderedListPosition = parseInt(this._unorderedList.css('left'));
            var headerWrapperWidth = parseInt(this._headerWrapper.outerWidth(true));
            var itemWidth = parseInt(this._titleList[index].outerWidth(true));
            var visibleAreaLeftEnd = unorderedListPosition - this._getArrowsDisplacement();
            var visibleAreaRightEnd = headerWrapperWidth - this._getArrowsDisplacement() - visibleAreaLeftEnd;
            var scrollPosition, trackerPosition;
            if (itemRelativePosition < -visibleAreaLeftEnd) {
                return false;
            } else if (itemRelativePosition + itemWidth > visibleAreaRightEnd) {
                return false;
            } else {
                return true;
            }
            return true;
        },

        //Return true if the tab is disabled and false if it is not
        isDisabled: function (index) {
            return this._titleList[index].disabled;
        },

        _lockAnimation: function (type) {
            if (this._isAnimated) {
                this._isAnimated[type] = true;
            }
        },

        _unlockAnimation: function (type) {
            if (this._isAnimated) {
                this._isAnimated[type] = false;
            }
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            this._validateProperties();
            switch (key) {
                case "touchMode":
                    if (value) {
                        object.enabledHover = false;
                        object.keyboardNavigation = false;
                    }
                    break;
                case "width":
                case "height":
                    object._performResize();
                    return;
                case 'disabled':
                    if (value) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                    return;
                case 'showCloseButtons':
                    if (value) {
                        this.showAllCloseButtons();
                    } else {
                        this.hideAllCloseButtons();
                    }
                    this._moveSelectionTrack(this._selectedItem, this.selectionTrackerAnimationDuration);
                    return;
                case 'selectedItem':
                    if (this._isValidIndex(value)) {
                        this.select(value);
                    }
                    return;
                case 'scrollStep':
                case 'contentTransitionDuration':
                case 'scrollAnimationDuration':
                case 'enableScrollAnimation':
                case 'enableDropAnimation':
                    return;
                case 'selectionTracker':
                    if (value) {
                        this._refresh();
                        this.select(this._selectedItem);
                    } else {
                        if (this._selectionTracker != null) {
                            this._selectionTracker.remove();
                        }
                    }
                    return;
                case 'scrollable':
                    if (value) {
                        this._refresh();
                        this.select(this._selectedItem);
                    } else {
                        this._leftArrow.remove();
                        this._rightArrow.remove();
                        this._performHeaderLayout();
                    }
                    return;
                case 'autoHeight':
                    this._performHeaderLayout();
                    return;
                case 'theme':
                    $.jqx.utilities.setTheme(oldvalue, value, this.host);
                    return;
            }
            this._unorderedList.css('left', '0px');
            this._refresh();
            this.select(this._selectedItem);
            this._addSelectStyle(this._selectedItem, true);
        }
    });
}(jQuery));
(function ($) {

    $.jqx.jqxWidget("jqxGrid", "", {});

    $.extend($.jqx._jqxGrid.prototype, {
        defineInstance: function () {
            // enables or disables the grid.
            this.disabled = false;
            // sets the width.
            this.width = 600;
            // sets the height.
            this.height = 400;
            // sets the pager's height.
            this.pagerheight = 28;
            // sets the group header's height.
            this.groupsheaderheight = 34;
            // sets the default page size.
            this.pagesize = 10;
            // sets the available page sizes.
            this.pagesizeoptions = ['5', '10', '20'];
            // sets the rows height.
            this.rowsheight = 25;
            // sets the columns height.
            this.columnsheight = 25;
            // sets the columns height.
            this.filterrowheight = 30;
            // sets the group indent size. This size is used when the grid is grouped.
            this.groupindentwidth = 30;
            // enables or disables row details.
            this.rowdetails = false;
            // indents the row's details with the sum of the grouping columns and row details column indents.
            this.enablerowdetailsindent = true;
            // enables or disables the built-in mouse-wheel behavior.
            this.enablemousewheel = true;
            // renders the row details.
            this.initrowdetails = null;
            // enables or disables editing.
            this.editable = false;
            // sets the edit mode. - click, dblclick, selectedcell or programmatic.
            this.editmode = 'selectedcell';
            // enables or disables paging.
            this.pageable = false;
            // enables or disables grouping.
            this.groupable = false;
            // enables or disables sorting.
            this.sortable = false;
            // enables or disables filtering.
            this.filterable = false;
            // displays the filter icon only when the column is filtered.
            this.autoshowfiltericon = true;
            // displays a background for the filtered column.
            this.showfiltercolumnbackground = true;
            // displays a background for the pinned column.
            this.showpinnedcolumnbackground = true;
            // displays a background for the sort column.
            this.showsortcolumnbackground = true;
            // enables or disables alternating rows.
            this.altrows = false;
            // sets the alternating rows start.
            this.altstart = 1;
            // sets the alternating rows step.
            this.altstep = 1;
            // shows or hides the details column.
            this.showrowdetailscolumn = true;
            // shows or hides the grid's toolbar.
            this.showtoolbar = false;
            this.toolbarheight = 34;
            this.showstatusbar = false;
            this.statusbarheight = 34;
            this.enableellipsis = true;
            // adds groups.
            this.groups = [];
            // custom groups renderer.
            this.groupsrenderer = null;
            // custom renderer for the grouping columns displayed in the grouping header.
            this.groupcolumnrenderer = null;
            // groups default expand state.
            this.groupsexpandedbydefault = false;
            // sets the pager renderer.
            this.pagerrenderer = null;
            this.touchmode = 'auto';
            // sets the grid columns.
            this.columns = [];
            // selected row index.
            this.selectedrowindex = -1;
            this.selectedrowindexes = new Array();
            this.selectedcells = new Array();
            this.selectedcell = null;
            this.tableZIndex = 799;
            this.headerZIndex = 499;
            this.updatefilterconditions = null;
            this.showaggregates = false;
            this.showfilterrow = false;
            this.autorowheight = false;
            this.autokoupdates = true;
            this.handlekeyboardnavigation = null;
            this.showsortmenuitems = true;
            this.showfiltermenuitems = true;
            this.showgroupmenuitems = true;
            this.enablebrowserselection = false;
            this.clipboard = true;
            // sets the grid source.
            this.source =
            {
                beforeprocessing: null,
                beforesend: null,
                loaderror: null,
                localdata: null,
                data: null,
                datatype: 'array',
                // {name: name, map: map}
                datafields: [],
                url: "",
                root: '',
                record: '',
                id: '',
                totalrecords: 0,
                recordstartindex: 0,
                recordendindex: 0,
                loadallrecords: true,
                sortcolumn: null,
                sortdirection: null,
                sort: null,
                filter: null,
                sortcomparer: null
            };
            // sets the grid data view.
            this.dataview = null;
            // sets the rendering delay. 
            this.updatedelay = 0;
            // sets the auto height option. This option is appropriate when the grid's paging is enables or when the grid has quite a few rows.
            this.autoheight = false;
            // shows or hides the grid's columns header.
            this.showheader = true;
            // shows or hides the grid's grouping header.
            this.showgroupsheader = true;
            // enables or disables the grouping closing buttons.
            this.closeablegroups = true;
            // sets the scrollbars size.
            this.scrollbarsize = 15;
            // enables or disables the virtual scrolling.
            this.virtualmode = false;
            // sets a custom sorting behavior.
            this.sort = null;
            // displays a dropdown button in each column.
            this.columnsmenu = true;
            // enables the resizing of grid columns.
            this.columnsresize = false;
            this.columnsreorder = false;
            // sets the width of the columns menu in each column.
            this.columnsmenuwidth = 15;
            this.autoshowcolumnsmenubutton = true;
            this.popupwidth = 'auto';
            // changes the sort state when the user clickes a column header.
            // 0 - disables toggling.
            // 1 - enables togging. Click on a column toggles the sort direction.
            // 2 - enables remove sorting option.
            this.sorttogglestates = 2;
            // callback function invoked when the rows are rendered.
            this.rendergridrows = null;
            // enables or disables the grid animations - slide and fade effects.
            this.enableanimations = true;
            // enables or disables the grid tooltips.
            this.enabletooltips = false;
            // enables or disables the selection.
            // possible values: 'none', 'singlerow', 'multiplerows, 'multiplerowsextended, 'singlecell, 'multiplecells, 'multiplecellsextended', 'multiplecellsadvanced'
            this.selectionmode = 'singlerow';
            // enables or disables the rows hover state.
            this.enablehover = true;
            // this message is displayed when the user tries to call a method before the binding complete.
            this.loadingerrormessage = "The data is still loading. When the data binding is completed, the Grid raises the 'bindingcomplete' event. Call this function in the 'bindingcomplete' event handler.";
            // vertical scroll step.
            this.verticalscrollbarstep = 5;
            // vertical large step.
            this.verticalscrollbarlargestep = 400;
            // horizontal step.
            this.horizontalscrollbarstep = 5;
            // horizontal large step.
            this.horizontalscrollbarlargestep = 50;
            this.keyboardnavigation = true;
            this.touchModeStyle = 'auto';
            this.autoshowloadelement = true;
            this.showdefaultloadelement = true;
            this.showemptyrow = true;
            this.autosavestate = false;
            this.autoloadstate = false;
            // private members
            this._updating = false;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this._cellscache = new Array();
            this._rowdetailscache = new Array();
            this._rowdetailselementscache = new Array();
            this._requiresupdate = false;
            this._hasOpenedMenu = false;

            this.events =
	   	    [
            /*0*/'initialized',
            /*1*/'rowclick',
            /*2*/'rowselect',
            /*3*/'rowunselect',
            /*4*/'groupexpand',
            /*5*/'groupcollapse',
            /*6*/'sort',
            /*7*/'columnclick',
            /*8*/'cellclick',
            /*9*/'pagechanged',
            /*10*/'pagesizechanged',
            /*11*/'bindingcomplete',
            /*12*/'groupschanged',
            /*13*/'filter',
            /*14*/'columnresized',
            /*15*/'cellselect',
            /*16*/'cellunselect',
            /*17*/'cellbeginedit',
            /*18*/'cellendedit',
            /*19*/'cellvaluechanged',
            /*20*/'rowexpand',
            /*21*/'rowcollapse',
            /*22*/'rowdoubleclick',
            /*23*/'celldoubleclick',
            /*24*/'columnreordered'
	   	    ];
        },

        createInstance: function (args) {
            var gridStructure = $("<div tabIndex=0 style='overflow: hidden; -webkit-appearance: none; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='wrapper" + this.element.id + "' tabIndex=1 style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='toolbar' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='groupsheader' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='content" + this.element.id + "' tabIndex=2 style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='verticalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='horizontalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/>" +
                "<div id='statusbar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='pager' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "</div>" +
                "</div>");

            this._fieldsmapping();
            this.element.innerText = '';
            this.element.innerHTML = '';
            this.host.append(gridStructure);
            this.host.addClass(this.toTP('jqx-grid'));
            this.host.addClass(this.toTP('jqx-reset'));
            this.host.addClass(this.toTP('jqx-rc-all'));
            this.host.addClass(this.toTP('jqx-widget'));
            this.host.addClass(this.toTP('jqx-widget-content'));

            this.wrapper = this.host.find("#wrapper" + this.element.id);
            this.content = this.host.find("#content" + this.element.id);
            this.content.addClass(this.toTP('jqx-reset'));

            var verticalScrollBar = this.host.find("#verticalScrollBar" + this.element.id);
            var horizontalScrollBar = this.host.find("#horizontalScrollBar" + this.element.id);
            this.bottomRight = this.host.find("#bottomRight").addClass(this.toTP('jqx-grid-bottomright'));

            if (!verticalScrollBar.jqxScrollBar) {
                alert('jqxscrollbar is not loaded.');
                return;
            }
            this.editors = new Array();

            this.vScrollBar = verticalScrollBar.jqxScrollBar({ 'vertical': true, touchMode: this.touchmode, step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep, theme: this.theme, _triggervaluechanged: false });
            this.hScrollBar = horizontalScrollBar.jqxScrollBar({ 'vertical': false, touchMode: this.touchmode, step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep, theme: this.theme, triggervaluechanged: false });

            this.pager = this.host.find("#pager");
            this.toolbar = this.host.find("#toolbar");
            this.toolbar[0].id = "toolbar" + this.element.id;
            this.toolbar.addClass(this.toTP('jqx-grid-toolbar'));
            this.toolbar.addClass(this.toTP('jqx-widget-header'));

            this.statusbar = this.host.find("#statusbar");
            this.statusbar[0].id = "statusbar" + this.element.id;
            this.statusbar.addClass(this.toTP('jqx-grid-statusbar'));
            this.statusbar.addClass(this.toTP('jqx-widget-header'));

            this.pager.addClass(this.toTP('jqx-grid-pager'));
            this.pager.addClass(this.toTP('jqx-widget-header'));

            this.groupsheader = this.host.find("#groupsheader");
            this.groupsheader.addClass(this.toTP('jqx-grid-groups-header'));
            this.groupsheader.addClass(this.toTP('jqx-widget-header'));

            this.vScrollBar.css('visibility', 'hidden');
            this.hScrollBar.css('visibility', 'hidden');

            this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;
            this.gridtable = null;

            this._builddataloadelement();
            this.isNestedGrid = this.host.parent() ? this.host.parent().css('z-index') == 2000 : false;

            if (this.localizestrings) {
                this.localizestrings();
            }

            if (this.rowdetailstemplate) {
                if (undefined == this.rowdetailstemplate.rowdetails) this.rowdetailstemplate.rowdetails = '<div></div>';
                if (undefined == this.rowdetailstemplate.rowdetailsheight) this.rowdetailstemplate.rowdetailsheight = 200;
                if (undefined == this.rowdetailstemplate.rowdetailshidden) this.rowdetailstemplate.rowdetailshidden = true;
            }

            // check for missing modules.
            if (this._testmodules()) {
                return;
            }
            this._cachedcolumns = this.columns;
            if (this.rowsheight != 25) {
                this._measureElement('cell');
            }
            if (this.columnsheight != 25) {
                this._measureElement('column');
            }

            this.databind(this.source);

            if (this.showtoolbar) {
                this.toolbar.css('visibility', 'visible');
            }
            if (this.showstatusbar) {
                this.statusbar.css('visibility', 'visible');
            }
            if (this.pageable && this._initpager) {
                this._initpager();
            }

            this._arrange();
            this.tableheight = null;
            var me = this;
            var clearoffset = function () {
                if (me.content) {
                    me.content[0].scrollTop = 0;
                    me.content[0].scrollLeft = 0;
                }
                if (me.gridcontent) {
                    me.gridcontent[0].scrollLeft = 0;
                    me.gridcontent[0].scrollTop = 0;
                }
            }

            this.content.bind('mousedown', function () {
                clearoffset();
            });

            this.content.bind('scroll', function (event) {
                clearoffset();
                return false;
            });

            if (!this.showfilterrow) {
                if (!this.showstatusbar && !this.showtoolbar) {
                    this.host.addClass('jqx-disableselect');
                }
                this.content.addClass('jqx-disableselect');
            }

            if (this.enablebrowserselection) {
                this.content.removeClass('jqx-disableselect');
                this.host.removeClass('jqx-disableselect');
            }

            this.addHandler(this.host, 'loadContent', function (event) {
                if (me.gridmenu && me.gridmenu.width() < 120) {
                    me._initmenu();
                    me.prerenderrequired = true;
                    me._rendercolumnheaders();
                }
                return false;
            });

            if ((this.width != null && this.width.toString().indexOf('%') != -1) || (this.height != null && this.height.toString().indexOf('%') != -1)) {
                this._updatesizeonwindowresize = true;
                $(window).bind('resize.' + this.element.id, function () {
                    var width = me.host.width();
                    var height = me.host.height();
                    if (me.autoheight) me._lastHeight = height;
                    if (me._lastWidth != width || me._lastHeight != height) {
                        me._updatesize(me._lastWidth != width, me._lastHeight != height);
                    }
                    me._lastWidth = width;
                    me._lastHeight = height;
                });
            }

            if (this.renderstatusbar) {
                this.renderstatusbar(this.statusbar);
            }
            if (this.rendertoolbar) {
                this.rendertoolbar(this.toolbar);
            }
            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
            this.hasTransform = $.jqx.utilities.hasTransform(this.host);
        },

        _builddataloadelement: function()
        {
            if (this.dataloadelement) {
                this.dataloadelement.remove();
            }

            this.dataloadelement = $('<div style="position: absolute;"></div>');
            if (this.showdefaultloadelement) {
                var table = $('<table cellspacing="0" cellpadding="0" style="z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 112px; height: 48px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;"><tbody><tr><td><div style="width: 32px; height: 32px;" class="jqx-grid-load"/></td><td><span style="margin-left: 5px;" >Loading...</span></td></tr></tbody></table>');
                table.addClass(this.toTP('jqx-rc-all'));
                this.dataloadelement.addClass(this.toTP('jqx-rc-all'));
                this.dataloadelement.append(table);
            }
            else {
                this.dataloadelement.addClass(this.toTP('jqx-grid-load'));
            }
            this.dataloadelement.width(this.width);
            this.dataloadelement.height(this.height);

            this.host.prepend(this.dataloadelement);
        },

        _measureElement: function(type)
        {
            var span = $("<span>measure Text</span>");
            span.addClass(this.toTP('jqx-widget'));
            span.addClass(this.toTP('jqx-grid-' + type));
            $(document.body).append(span);
            if (type == 'cell') {
                this._cellheight = span.height();
            }
            else this._columnheight = span.height();
            span.remove();
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        _testmodules: function () {
            var missingModules = "";
            var me = this;
            var addComma = function () {
                if (missingModules.length != "") missingModules += ",";
            }

            if (this.columnsmenu && !this.host.jqxMenu && (this.sortable || this.groupable || this.filterable)) {
                addComma();
                missingModules += " jqxmenu.js";
            }
            if (!this.host.jqxScrollBar) {
                addComma();
                missingModules += " jqxscrollbar.js";
            }
            if (!this.host.jqxButton) {
                addComma();
                missingModules += " jqxbuttons.js";
            }
            if (!$.jqx.dataAdapter) {
                addComma();
                missingModules += " jqxdata.js";
            }
            if (this.pageable && !this.gotopage) {
                addComma();
                missingModules += "jqxgrid.pager.js";
            }
            if (this.filterable && !this.applyfilters) {
                addComma();
                missingModules += " jqxgrid.filter.js";
            }
            if (this.groupable && !this._initgroupsheader) {
                addComma();
                missingModules += " jqxgrid.grouping.js";
            }
            if (this.columnsresize && !this.autoresizecolumns) {
                addComma();
                missingModules += " jqxgrid.columnsresize.js";
            }
            if (this.columnsreorder && !this.setcolumnindex) {
                addComma();
                missingModules += " jqxgrid.columnsreorder.js";
            }
            if (this.sortable && !this.sortby) {
                addComma();
                missingModules += " jqxgrid.sort.js";
            }
            if (this.editable && !this.begincelledit) {
                addComma();
                missingModules += " jqxgrid.edit.js";
            }
            if (this.showaggregates && !this.getcolumnaggregateddata) {
                addComma();
                missingModules += " jqxgrid.aggregates.js";
            }
            if (this.keyboardnavigation && !this.selectrow) {
                addComma();
                missingModules += " jqxgrid.selection.js";
            }
            if (missingModules != "" || this.editable || this.filterable || this.pageable) {
                var missingTypes = [];

                var addMissing = function (type) {
                    switch (type) {
                        case "checkbox":
                            if (!me.host.jqxCheckBox && !missingTypes['checkbox']) {
                                missingTypes['checkbox'] = true;
                                addComma();
                                missingModules += ' jqxcheckbox.js';
                            }
                            break;
                        case "numberinput":
                            if (!me.host.jqxNumberInput && !missingTypes['numberinput']) {
                                missingTypes['numberinput'] = true;
                                addComma();
                                missingModules += ' jqxnumberinput.js';
                            }
                            break;
                        case "datetimeinput":
                            if (!me.host.jqxDateTimeInput && !missingTypes['datetimeinput']) {
                                addComma();
                                missingTypes['datetimeinput'] = true;
                                missingModules += ' jqxdatetimeinput.js(requires: jqxcalendar.js, jquery.global.js)';
                            }
                            else if (!$.global && !missingTypes['global']) {
                                addComma();
                                missingModules += ' jquery.global.js';
                            }
                            else if (!me.host.jqxCalendar && !missingTypes['calendar']) {
                                addComma();
                                missingModules += ' jqxcalendar.js';
                            }
                            break;
                        case "combobox":
                            if (!me.host.jqxComboBox && !missingTypes['combobox']) {
                                addComma();
                                missingTypes['combobox'] = true;
                                missingModules += ' jqxcombobox.js(requires: jqxlistbox.js)';
                            }
                            else if (!me.host.jqxListBox && !missingTypes['listbox']) {
                                addComma();
                                missingTypes['listbox'] = true;
                                missingModules += ' jqxlistbox.js';
                            }
                            break;
                        case "dropdownlist":
                            if (!me.host.jqxDropDownList && !missingTypes['dropdownlist']) {
                                addComma();
                                missingTypes['dropdownlist'] = true;
                                missingModules += ' jqxdropdownlist.js(requires: jqxlistbox.js)';
                            }
                            else if (!me.host.jqxListBox && !missingTypes['listbox']) {
                                addComma();
                                missingTypes['listbox'] = true;
                                missingModules += ' jqxlistbox.js';
                            }
                            break;
                    }
                }

                if (this.filterable || this.pageable) {
                    addMissing('dropdownlist');
                }

                for (var i = 0; i < this.columns.length; i++) {
                    if (this.columns[i] == undefined)
                        continue;

                    var type = this.columns[i].columntype;
                    addMissing(type);
                    if (this.filterable && this.showfilterrow) {
                        var type = this.columns[i].filtertype;
                        if (type == 'checkedlist' || type == 'bool') {
                            addMissing('checkbox');
                        }
                        if (type == 'date') {
                            addMissing('datetimeinput');
                        }
                    }
                }
                if (missingModules != "") {
                    alert("Please, add references to the following module(s): " + missingModules);
                    this.host.remove();
                    return true;
                }
            }
            return false;
        },

        focus: function () {
            this.wrapper.focus();
            var me = this;
            setTimeout(function () {
                me.wrapper.focus();
            }, 10);
            this.focused = true;
        },

        hiddenParent: function () {
            var me = this;
            if (me.host.css('display') != 'block')
                return true;
            var hiddenParent = false;
            $.each(me.host.parents(), function () {
                if ($(this).css('display') == 'none') {
                    hiddenParent = true;
                    return false;
                }
            });
            return hiddenParent;
        },

        _updatesize: function (updateWidth, updateHeight) {
            if (this._loading) {
                return;
            }

            var me = this;

            if (this.hiddenParent()) {
                return;
            }

            var hostWidth = me.host.width();
            var hostHeight = me.host.height();

            if (!me._oldWidth) {
                me._oldWidth = hostWidth;
            }

            if (!me._oldHeight) {
                me._oldHeight = hostHeight;
            }

            if (me._resizeTimer) {
                clearTimeout(me._resizeTimer);
            }

            var delay = $.browser.msie ? 10 : 10;

            me._resizeTimer = setTimeout(function () {
                if (hostWidth != me._oldWidth || updateWidth == true) {
                    me._arrange();
                    me._updatecolumnwidths();
                    me._updatecellwidths();
                    if (!(updateWidth == false && me._oldWidth > hostWidth)) {
                        me._renderrows(me.virtualsizeinfo);
                    }
                }

                if (hostHeight != me._oldHeight || updateHeight == true) {
                    var hasgroups = me.groupable && me.groups.length > 0;
                    var isVScrollHidden = me.vScrollBar.css('visibility') != 'visible';

                    if (!me.autoheight) {
                        if (!hasgroups) {
                            me._arrange();
                            me.virtualsizeinfo = me._calculatevirtualheight();
                            if (parseInt(hostHeight) >= parseInt(me._oldHeight)) {
                                me.prerenderrequired = true;
                            }
                            me._renderrows(me.virtualsizeinfo);
                        }
                        else {
                            if (hostHeight >= me._oldHeight) {
                                me._render(true, false, false);
                            }
                            else {
                                me.rendergridcontent(true, false);
                            }
                        }

                        if (isVScrollHidden && me.vScrollBar.css('visibility') == 'visible') {
                            me._arrange();
                            me._updatecolumnwidths();
                            me._updatecellwidths();
                        }
                    }
                }

                me._oldWidth = hostWidth;
                me._oldHeight = hostHeight;
            }, delay);
        },

        _fieldsmapping: function () {
            if (this.showToolbar) {
                this._mapField("showtoolbar", this.showToolbar);
            }
            if (this.toolbarHeight) {
                this._mapField("toolbarheight", this.toolbarHeight);
            }
            if (this.pagerHeight) {
                this._mapField("pagerHeight", this.pagerHeight);
            }
            if (this.groupsHeaderHeight) {
                this._mapField("groupsHeaderHeight", this.groupsHeaderHeight);
            }
            if (this.pageSize) {
                this._mapField("pageSize", this.pageSize);
            }
            if (this.pagerHeight) {
                this._mapField("pagerHeight", this.pagerHeight);
            }
            if (this.pageSizeOptions) {
                this._mapField("pageSizeOptions", this.pageSizeOptions);
            }
            if (this.rowsHeight) {
                this._mapField("rowsHeight", this.rowsHeight);
            }
            if (this.columnsHeight) {
                this._mapField("columnsHeight", this.columnsHeight);
            }
            if (this.groupIndentWidth) {
                this._mapField("groupIndentWidth", this.groupIndentWidth);
            }
            if (this.rowDetails) {
                this._mapField("rowDetails", this.rowDetails);
            }
            if (this.enableRowDetailsIndent) {
                this._mapField("enableRowDetailsIndent", this.enableRowDetailsIndent);
            }
            if (this.enableMouseWheel) {
                this._mapField("enableMouseWheel", this.enableMouseWheel);
            }
            if (this.initRowDetails) {
                this._mapField("initRowDetails", this.initRowDetails);
            }
            if (this.editMode) {
                this._mapField("editMode", this.editMode);
            }
            if (this.autoShowFilterIcon) {
                this._mapField("autoShowFilterIcon", this.autoShowFilterIcon);
            }
            if (this.showFilterColumnBackground) {
                this._mapField("showFilterColumnBackground", this.showFilterColumnBackground);
            }
            if (this.showPinnedColumnBackground) {
                this._mapField("showPinnedColumnBackground", this.showPinnedColumnBackground);
            }
            if (this.showSortColumnBackground) {
                this._mapField("showSortColumnBackground", this.showSortColumnBackground);
            }
            if (this.altRows) {
                this._mapField("altRows", this.altRows);
            }
            if (this.altStart) {
                this._mapField("altStart", this.altStart);
            }
            if (this.altStep) {
                this._mapField("altStep", this.altStep);
            }
            if (this.showRowDetailsColumn) {
                this._mapField("showRowDetailsColumn", this.showRowDetailsColumn);
            }
            if (this.groupsRenderer) {
                this._mapField("groupsRenderer", this.groupsRenderer);
            }
            if (this.groupColumnRenderer) {
                this._mapField("groupColumnRenderer", this.groupColumnRenderer);
            }
            if (this.groupsExpandedByDefault) {
                this._mapField("groupsExpandedByDefault", this.groupsExpandedByDefault);
            }
            if (this.pagerRenderer) {
                this._mapField("pagerRenderer", this.pagerRenderer);
            }
            if (this.updateDelay) {
                this._mapField("updateDelay", this.updateDelay);
            }
            if (this.autoHeight) {
                this._mapField("autoHeight", this.autoHeight);
            }
            if (this.showHeader) {
                this._mapField("showHeader", this.showHeader);
            }
            if (this.showGroupsHeader) {
                this._mapField("showGroupsHeader", this.showGroupsHeader);
            }
            if (this.closeableGroups) {
                this._mapField("closeableGroups", this.closeableGroups);
            }
            if (this.scrollbarSize) {
                this._mapField("scrollbarSize", this.scrollbarSize);
            }
            if (this.virtualMode) {
                this._mapField("virtualMode", this.virtualMode);
            }
            if (this.columnsMenu) {
                this._mapField("columnsMenu", this.columnsMenu);
            }
            if (this.columnsResize) {
                this._mapField("columnsResize", this.columnsResize);
            }
            if (this.columnsMenuWidth) {
                this._mapField("columnsMenuWidth", this.columnsMenuWidth);
            }
            if (this.sortToggleStates) {
                this._mapField("sortToggleStates", this.sortToggleStates);
            }
            if (this.renderGridRows) {
                this._mapField("renderGridRows", this.renderGridRows);
            }
            if (this.enableAnimations) {
                this._mapField("enableAnimations", this.enableAnimations);
            }
            if (this.enableTooltips) {
                this._mapField("enableTooltips", this.enableTooltips);
            }
            if (this.selectionMode) {
                this._mapField("selectionMode", this.selectionMode);
            }
            if (this.enableHover) {
                this._mapField("enableHover", this.enableHover);
            }
            if (this.loadingErrorMessage) {
                this._mapField("loadingErrorMessage", this.loadingErrorMessage);
            }
            if (this.verticalScrollBarStep) {
                this._mapField("verticalScrollBarStep", this.verticalScrollBarStep);
            }
            if (this.verticalScrollBarLargeStep) {
                this._mapField("verticalScrollBarLargeStep", this.verticalScrollBarLargeStep);
            }
            if (this.horizontalScrollBarStep) {
                this._mapField("horizontalScrollBarStep", this.horizontalScrollBarStep);
            }
            if (this.horizontalScrollbarLargeStep) {
                this._mapField("horizontalScrollbarLargeStep", this.horizontalScrollbarLargeStep);
            }
            if (this.keyboardNavigation) {
                this._mapField("keyboardNavigation", this.keyboardNavigation);
            }
        },

        _mapField: function (name, value) {
            if (name == null)
                return false;

            this[name.toLowerCase()] = value;
        },

        getTouches: function (e) {
            if (e.originalEvent) {
                if (e.originalEvent.touches && e.originalEvent.touches.length) {
                    return e.originalEvent.touches;
                } else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
                    return e.originalEvent.changedTouches;
                }
            }

            if (!e.touches) {
                e.touches = new Array();
                e.touches[0] = e.originalEvent;
            }

            return e.touches;
        },

        _updateTouchScrolling: function () {
            var me = this;
            if (me.isTouchDevice()) {
                me.enablehover = false;
                if (me.gridcontent) {
                    me.gridcontent.unbind('touchstart.touchScroll');
                    me.gridcontent.unbind('touchmove.touchScroll');
                    me.gridcontent.unbind('touchend.touchScroll');
                    me.gridcontent.unbind('touchcancel.touchScroll');

                    $.jqx.mobile.touchScroll(me.gridcontent[0], me.vScrollInstance.max, function (left, top) {
                        if (me.vScrollBar.css('visibility') == 'visible') {
                            var oldValue = me.vScrollInstance.value;
                            me.vScrollInstance.setPosition(oldValue + top);
                        }
                        if (me.hScrollBar.css('visibility') == 'visible') {
                            var oldValue = me.hScrollInstance.value;
                            me.hScrollInstance.setPosition(oldValue + left);
                        }
                        me.vScrollInstance.thumbCapture = true;

                        me._lastScroll = new Date();
                    }, this.element.id);
                    if (me._overlayElement) {
                        me._overlayElement.unbind('touchstart.touchScroll');
                        me._overlayElement.unbind('touchmove.touchScroll');
                        me._overlayElement.unbind('touchend.touchScroll');
                        me._overlayElement.unbind('touchcancel.touchScroll');

                        $.jqx.mobile.touchScroll(me._overlayElement[0], me.vScrollInstance.max, function (left, top) {
                            if (me.vScrollBar.css('visibility') == 'visible') {
                                var oldValue = me.vScrollInstance.value;
                                me.vScrollInstance.setPosition(oldValue + top);
                            }
                            if (me.hScrollBar.css('visibility') == 'visible') {
                                var oldValue = me.hScrollInstance.value;
                                me.hScrollInstance.setPosition(oldValue + left);
                            }
                            me.vScrollInstance.thumbCapture = true;

                            me._lastScroll = new Date();
                        }, this.element.id);
                        this.host.bind('touchstart', function () {
                            if (!me.editcell)
                                me._overlayElement.css('visibility', 'visible');
                        });
                        this.host.bind('touchend', function () {
                            me._overlayElement.css('visibility', 'hidden');
                        });
                    }
                }
            }
        },

        isTouchDevice: function () {
            if (this.touchDevice != undefined)
                return this.touchDevice;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            this.touchDevice = isTouchDevice;
            if (this.touchmode == true) {
                isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.element);
                this.touchDevice = isTouchDevice;
            }
            else if (this.touchmode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice && this.touchModeStyle != false) {
                this.scrollbarsize = 10;
                this.touchDevice = true;
                this.host.addClass(this.toThemeProperty('jqx-touch'));
                this.host.find('jqx-widget-content').addClass(this.toThemeProperty('jqx-touch'));
                this.host.find('jqx-widget-header').addClass(this.toThemeProperty('jqx-touch'));
            }
            return isTouchDevice;
        },

        toTP: function (name) {
            return this.toThemeProperty(name);
        },

        localizestrings: function (localizationobj) {
            this._cellscache = new Array();
            if ($.jqx.dataFormat) {
                $.jqx.dataFormat.cleardatescache();
            }

            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            if (localizationobj != null) {
                if (localizationobj.pagergotopagestring) {
                    this.gridlocalization.pagergotopagestring = localizationobj.pagergotopagestring;
                }
                if (localizationobj.pagershowrowsstring) {
                    this.gridlocalization.pagershowrowsstring = localizationobj.pagershowrowsstring;
                }
                if (localizationobj.pagerrangestring) {
                    this.gridlocalization.pagerrangestring = localizationobj.pagerrangestring;
                }
                if (localizationobj.pagernextbuttonstring) {
                    this.gridlocalization.pagernextbuttonstring = localizationobj.pagernextbuttonstring;
                }
                if (localizationobj.pagerpreviousbuttonstring) {
                    this.gridlocalization.pagerpreviousbuttonstring = localizationobj.pagerpreviousbuttonstring;
                }
                if (localizationobj.groupsheaderstring) {
                    this.gridlocalization.groupsheaderstring = localizationobj.groupsheaderstring;
                }
                if (localizationobj.sortascendingstring) {
                    this.gridlocalization.sortascendingstring = localizationobj.sortascendingstring;
                }
                if (localizationobj.sortdescendingstring) {
                    this.gridlocalization.sortdescendingstring = localizationobj.sortdescendingstring;
                }
                if (localizationobj.sortremovestring) {
                    this.gridlocalization.sortremovestring = localizationobj.sortremovestring;
                }
                if (localizationobj.groupbystring) {
                    this.gridlocalization.groupbystring = localizationobj.groupbystring;
                }
                if (localizationobj.groupremovestring) {
                    this.gridlocalization.groupremovestring = localizationobj.groupremovestring;
                }
                if (localizationobj.firstDay) {
                    this.gridlocalization.firstDay = localizationobj.firstDay;
                }
                if (localizationobj.days) {
                    this.gridlocalization.days = localizationobj.days;
                }
                if (localizationobj.months) {
                    this.gridlocalization.months = localizationobj.months;
                }
                if (localizationobj.AM) {
                    this.gridlocalization.AM = localizationobj.AM;
                }
                if (localizationobj.PM) {
                    this.gridlocalization.PM = localizationobj.PM;
                }
                if (localizationobj.patterns) {
                    this.gridlocalization.patterns = localizationobj.patterns;
                }
                if (localizationobj.percentsymbol) {
                    this.gridlocalization.percentsymbol = localizationobj.percentsymbol;
                }
                if (localizationobj.currencysymbol) {
                    this.gridlocalization.currencysymbol = localizationobj.currencysymbol;
                }
                if (localizationobj.currencysymbolposition) {
                    this.gridlocalization.currencysymbolposition = localizationobj.currencysymbolposition;
                }
                if (localizationobj.decimalseparator) {
                    this.gridlocalization.decimalseparator = localizationobj.decimalseparator;
                }
                if (localizationobj.thousandsseparator) {
                    this.gridlocalization.thousandsseparator = localizationobj.thousandsseparator;
                }
                if (localizationobj.filterclearstring) {
                    this.gridlocalization.filterclearstring = localizationobj.filterclearstring;
                }
                if (localizationobj.filterstring) {
                    this.gridlocalization.filterstring = localizationobj.filterstring;
                }
                if (localizationobj.filtershowrowstring) {
                    this.gridlocalization.filtershowrowstring = localizationobj.filtershowrowstring;
                }
                if (localizationobj.filterselectallstring) {
                    this.gridlocalization.filterselectallstring = localizationobj.filterselectallstring;
                }
                if (localizationobj.filterchoosestring) {
                    this.gridlocalization.filterchoosestring = localizationobj.filterchoosestring;
                }
                if (localizationobj.filterorconditionstring) {
                    this.gridlocalization.filterorconditionstring = localizationobj.filterorconditionstring;
                }
                if (localizationobj.filterandconditionstring) {
                    this.gridlocalization.filterandconditionstring = localizationobj.filterandconditionstring;
                }
                if (localizationobj.filterstringcomparisonoperators) {
                    this.gridlocalization.filterstringcomparisonoperators = localizationobj.filterstringcomparisonoperators;
                }
                if (localizationobj.filternumericcomparisonoperators) {
                    this.gridlocalization.filternumericcomparisonoperators = localizationobj.filternumericcomparisonoperators;
                }
                if (localizationobj.filterdatecomparisonoperators) {
                    this.gridlocalization.filterdatecomparisonoperators = localizationobj.filterdatecomparisonoperators;
                }
                if (localizationobj.filterbooleancomparisonoperators) {
                    this.gridlocalization.filterbooleancomparisonoperators = localizationobj.filterbooleancomparisonoperators;
                }
                if (localizationobj.emptydatastring) {
                    this.gridlocalization.emptydatastring = localizationobj.emptydatastring;
                }
                if (localizationobj.filterselectstring) {
                    this.gridlocalization.filterselectstring = localizationobj.filterselectstring;
                }
                if (this._initpager) {
                    this._initpager();
                }
                if (this._initgroupsheader) {
                    this._initgroupsheader();
                }
                if (this._initmenu) {
                    this._initmenu();
                }
                if (localizationobj.validationstring) {
                    this.gridlocalization.validationstring = localizationobj.validationstring;
                }

                if (this.filterable && this.showfilterrow) {
                    if (this._updatefilterrow) {
                        for (var obj in this._filterrowcache) {
                            $(this._filterrowcache[obj]).remove();
                        }

                        this._filterrowcache = [];
                        this._updatefilterrow();
                    }
                }
                if (this.showaggregates && this.refresheaggregates) {
                    this.refresheaggregates();
                }
                this._renderrows(this.virtualsizeinfo);
            }
            else {
                this.gridlocalization = {
                    // separator of parts of a date (e.g. '/' in 11/05/1955)
                    '/': "/",
                    // separator of parts of a time (e.g. ':' in 05:44 PM)
                    ':': ":",
                    // the first day of the week (0 = Sunday, 1 = Monday, etc)
                    firstDay: 0,
                    days: {
                        // full day names
                        names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        // abbreviated day names
                        namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                        // shortest day names
                        namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                    },
                    months: {
                        // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                        names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                        // abbreviated month names
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
                    },
                    // AM and PM designators in one of these forms:
                    // The usual view, and the upper and lower case versions
                    //      [standard,lowercase,uppercase]
                    // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
                    //      null
                    AM: ["AM", "am", "AM"],
                    PM: ["PM", "pm", "PM"],
                    eras: [
                    // eras in reverse chronological order.
                    // name: the name of the era in this culture (e.g. A.D., C.E.)
                    // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                    // offset: offset in years from gregorian calendar
                    { "name": "A.D.", "start": null, "offset": 0 }
                    ],
                    twoDigitYearMax: 2029,
                    patterns: {
                        // short date pattern
                        d: "M/d/yyyy",
                        // long date pattern
                        D: "dddd, MMMM dd, yyyy",
                        // short time pattern
                        t: "h:mm tt",
                        // long time pattern
                        T: "h:mm:ss tt",
                        // long date, short time pattern
                        f: "dddd, MMMM dd, yyyy h:mm tt",
                        // long date, long time pattern
                        F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                        // month/day pattern
                        M: "MMMM dd",
                        // month/year pattern
                        Y: "yyyy MMMM",
                        // S is a sortable format that does not vary by culture
                        S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss",
                        // formatting of dates in MySQL DataBases
                        ISO: "yyyy-MM-dd hh:mm:ss",
                        ISO2: "yyyy-MM-dd HH:mm:ss",
                        d1: "dd.MM.yyyy",
                        d2: "dd-MM-yyyy",
                        d3: "dd-MMMM-yyyy",
                        d4: "dd-MM-yy",
                        d5: "H:mm",
                        d6: "HH:mm",
                        d7: "HH:mm tt",
                        d8: "dd/MMMM/yyyy",
                        d9: "MMMM-dd",
                        d10: "MM-dd",
                        d11: "MM-dd-yyyy"
                    },
                    percentsymbol: "%",
                    currencysymbol: "$",
                    currencysymbolposition: "before",
                    decimalseparator: '.',
                    thousandsseparator: ',',
                    pagergotopagestring: "Go to page:",
                    pagershowrowsstring: "Show rows:",
                    pagerrangestring: " of ",
                    pagerpreviousbuttonstring: "previous",
                    pagernextbuttonstring: "next",
                    groupsheaderstring: "Drag a column and drop it here to group by that column",
                    sortascendingstring: "Sort Ascending",
                    sortdescendingstring: "Sort Descending",
                    sortremovestring: "Remove Sort",
                    groupbystring: "Group By this column",
                    groupremovestring: "Remove from groups",
                    filterclearstring: "Clear",
                    filterstring: "Filter",
                    filtershowrowstring: "Show rows where:",
                    filterorconditionstring: "Or",
                    filterandconditionstring: "And",
                    filterselectallstring: "(Select All)",
                    filterchoosestring: "Please Choose:",
                    filterstringcomparisonoperators: ['empty', 'not empty', 'contains', 'contains(match case)',
                       'does not contain', 'does not contain(match case)', 'starts with', 'starts with(match case)',
                       'ends with', 'ends with(match case)', 'equal', 'equal(match case)', 'null', 'not null'],
                    filternumericcomparisonoperators: ['equal', 'not equal', 'less than', 'less than or equal', 'greater than', 'greater than or equal', 'null', 'not null'],
                    filterdatecomparisonoperators: ['equal', 'not equal', 'less than', 'less than or equal', 'greater than', 'greater than or equal', 'null', 'not null'],
                    filterbooleancomparisonoperators: ['equal', 'not equal'],
                    validationstring: "Entered value is not valid",
                    emptydatastring: "No data to display",
                    filterselectstring: "Select Filter"
                };
            }
        },

        _initmenu: function () {
            var self = this;

            if (this.host.jqxMenu) {
                if (this.gridmenu) {
                    if (this.filterable) {
                        if (this._destroyfilterpanel) {
                            this._destroyfilterpanel();
                        }
                    }
                    this.gridmenu.jqxMenu('destroy');
                    this.gridmenu.remove();
                }
                this.menuitemsarray = new Array();
                this.gridmenu = $('<div id="gridmenu' + this.element.id + '" style="z-index: 9999999999999;"></div>');
                this.host.append(this.gridmenu);
                var menuitems = $('<ul></ul>');
                var imgsortasc = '<div class="jqx-grid-sortasc-icon"></div>';
                var sortascendingitem = $('<li>' + imgsortasc + this.gridlocalization.sortascendingstring + '</li>');
                var imgsortdesc = '<div class="jqx-grid-sortdesc-icon"></div>';
                var sortdescendingitem = $('<li>' + imgsortdesc + this.gridlocalization.sortdescendingstring + '</li>');
                var imgsortclear = '<div class="jqx-grid-sortremove-icon"></div>';
                var sortremoveitem = $('<li>' + imgsortclear + this.gridlocalization.sortremovestring + '</li>');
                var imggroupby = '<div class="jqx-grid-groupby-icon"></div>';
                var groupbyitem = $('<li>' + imggroupby + this.gridlocalization.groupbystring + '</li>');
                var groupremoveitem = $('<li>' + imggroupby + this.gridlocalization.groupremovestring + '</li>');
                var separatoritem = $('<li type="separator"></li>');
                var filteritem = $('<li class="filter" style="height: 170px;" ignoretheme="true">' + '<div class="filter"></div>' + '</li>');

                var maxstringlength = this.gridlocalization.sortascendingstring.length;
                var maxstring = this.gridlocalization.sortascendingstring;
                if (this.gridlocalization.sortdescendingstring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.sortdescendingstring.length;
                    maxstring = this.gridlocalization.sortdescendingstring;
                }
                if (this.gridlocalization.sortremovestring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.sortremovestring.length;
                    maxstring = this.gridlocalization.sortremovestring;
                }
                if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                    if (this.gridlocalization.groupbystring.length > maxstringlength) {
                        maxstringlength = this.gridlocalization.groupbystring.length;
                        maxstring = this.gridlocalization.groupbystring;
                    }
                    if (this.gridlocalization.groupremovestring.length > maxstringlength) {
                        maxstringlength = this.gridlocalization.groupremovestring.length;
                        maxstring = this.gridlocalization.groupremovestring;
                    }
                }
                var stringwidth = 200;
                maxstring = $.trim(maxstring).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
                var measurestring = $('<span>' + maxstring + '</span>');
                measurestring.addClass(this.toThemeProperty('jqx-menu-item'));
                this.host.append(measurestring);
                stringwidth = measurestring.outerWidth() + 60;
                measurestring.remove();
                var itemscount = 0;
                if (this.sortable && this._togglesort && this.showsortmenuitems) {
                    menuitems.append(sortascendingitem);
                    this.menuitemsarray[0] = sortascendingitem[0];

                    menuitems.append(sortdescendingitem);
                    this.menuitemsarray[1] = sortdescendingitem[0];

                    menuitems.append(sortremoveitem);
                    this.menuitemsarray[2] = sortremoveitem[0];
                    itemscount = 3;
                }

                if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                    menuitems.append(groupbyitem);
                    this.menuitemsarray[3] = groupbyitem[0];

                    menuitems.append(groupremoveitem);
                    this.menuitemsarray[4] = groupremoveitem[0];
                    itemscount += 2;
                }

                var itemsheight = itemscount * 27 + 3;
                var closeonclick = true;
                if (this.filterable && !this.showfilterrow && this.showfiltermenuitems) {
                    if (this._initfilterpanel) {
                        this.menuitemsarray[5] = filteritem[0];
                        this.menuitemsarray[6] = filteritem[0];
                        menuitems.append(separatoritem);
                        menuitems.append(filteritem);
                        itemsheight += 176;
                        if ($.browser.msie && $.browser.version < 8) {
                            itemsheight += 20;
                        }

                        var filterpanel = $(filteritem).find('div:first');
                        stringwidth += 20;
                        this._initfilterpanel(this, filterpanel, "", stringwidth);
                        closeonclick = false;
                        this.removeHandler($(document), 'click.menu' + self.element.id, self._closemenuafterclick, self);
                        this.addHandler($(document), 'click.menu' + self.element.id, self._closemenuafterclick, self);
                    }
                    else {
                        alert('jqxgrid.filter.js is not loaded.');
                    }
                }

                this.gridmenu.append(menuitems);

                if ($.browser.msie && $.browser.version < 8 && this.filterable) {
                    $("#listBoxfilter1" + this.element.id).css('z-index', 4990);
                    $("#listBoxfilter2" + this.element.id).css('z-index', 4990);
                    $("#listBoxfilter3" + this.element.id).css('z-index', 4990);
                    $('#gridmenu' + this.element.id).css('z-index', 5000);
                    $('#gridmenu' + this.element.id).bind('initialized', function () {
                        $('#menuWrappergridmenu' + self.element.id).css('z-index', 4980);
                    });
                }

                if (this.menuitemsarray[0] == undefined) {
                    itemsheight = 65;
                }

                this.removeHandler(this.gridmenu, 'keydown');
                this.addHandler(this.gridmenu, 'keydown', function (event) {
                    if (event.keyCode == 27) {
                        self.gridmenu.jqxMenu('close');
                    }
                    else if (event.keyCode == 13 && self.filterable) {
                        if (self._buildfilter) {
                            var filter1 = $($.find('#filter1' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var filter2 = $($.find('#filter2' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var filter3 = $($.find('#filter3' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var clearButton = $($.find('#filterclearbutton' + self.element.id)).hasClass('jqx-fill-state-focus');
                            if (clearButton) {
                                var column = $.data(document.body, "contextmenu" + self.element.id).column;
                                self._clearfilter(self, self.element, column);
                                self.gridmenu.jqxMenu('close');
                            }
                            else {
                                if (!filter1 && !filter2 && !filter3) {
                                    var column = $.data(document.body, "contextmenu" + self.element.id).column;
                                    self.gridmenu.jqxMenu('close');
                                    self._buildfilter(self, filteritem, column);
                                }
                            }
                        }
                    }
                });
                if (this.popupwidth != 'auto') {
                    stringwidth = this.popupwidth;
                }

                this.gridmenu.jqxMenu({ width: stringwidth, height: itemsheight, autoCloseOnClick: closeonclick, autoOpenPopup: false, mode: 'popup', theme: this.theme, animationShowDuration: 0, animationHideDuration: 0, animationShowDelay: 0 });
                if (this.filterable) {
                    this.gridmenu.jqxMenu('_setItemProperty', filteritem[0].id, 'closeOnClick', false);
                }
                this._handlemenueevents();
            }
            else {
                this.columnsmenu = false;
            }
            //this._appendmenu();
        },

        _arrangemenu: function () {
            var maxstringlength = this.gridlocalization.sortascendingstring.length;
            var maxstring = this.gridlocalization.sortascendingstring;
            if (this.gridlocalization.sortdescendingstring.length > maxstringlength) {
                maxstringlength = this.gridlocalization.sortdescendingstring.length;
                maxstring = this.gridlocalization.sortdescendingstring;
            }
            if (this.gridlocalization.sortremovestring.length > maxstringlength) {
                maxstringlength = this.gridlocalization.sortremovestring.length;
                maxstring = this.gridlocalization.sortremovestring;
            }
            if (this.groupable && this._initgroupsheader) {
                if (this.gridlocalization.groupbystring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.groupbystring.length;
                    maxstring = this.gridlocalization.groupbystring;
                }
                if (this.gridlocalization.groupremovestring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.groupremovestring.length;
                    maxstring = this.gridlocalization.groupremovestring;
                }
            }
            var stringwidth = 200;
            maxstring = $.trim(maxstring).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            var measurestring = $('<span>' + maxstring + '</span>');
            measurestring.addClass(this.toThemeProperty('jqx-menu-item'));
            this.host.append(measurestring);
            stringwidth = measurestring.outerWidth() + 60;
            measurestring.remove();
            var itemscount = 0;
            if (this.sortable && this._togglesort && this.showsortmenuitems) {
                itemscount = 3;
            }

            if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                itemscount += 2;
            }

            var itemsheight = itemscount * 27 + 3;
            if (this.filterable && this.showfiltermenuitems) {
                if (this._initfilterpanel) {
                    itemsheight += 176;
                    stringwidth += 20;
                    if ($.browser.msie && $.browser.version < 8) {
                        itemsheight += 20;
                    }
                }
            }

            if (this.menuitemsarray[0] == undefined) {
                itemsheight = 65;
            }

            if (this.popupwidth != 'auto') {
                stringwidth = this.popupwidth;
            }

            this.gridmenu.jqxMenu({ width: stringwidth, height: itemsheight });
        },

        //_appendmenu: function () {
        //    var el = $.jqx.dataFormat._getmenuelement();
        //    var me = this;
        //    if (el != "") {
        //        setTimeout(function () {
        //            var e = $(el);
        //            e.css('position', 'absolute');
        //            var offset = me.host.offset();
        //            e.css('left', offset.left + me.content.width() - 60);
        //            var height = me.table.height();
        //            e.css('top', offset.top);
        //            me.host.append(e);
        //        }, 100);
        //    }
        //},

        _closemenuafterclick: function (event) {
            var me = event != null ? event.data : this;
            var matches = false;

            if (event.target.className.indexOf('filter') != -1) {
                return;
            }

            if (event.target.className.indexOf('jqx-grid-cell') != -1) {
                me.gridmenu.jqxMenu('close');
                return;
            }

            var gridbounds = me.host.offset();
            var x = event.pageX;
            var y = event.pageY;

            $.each($(event.target).parents(), function () {
                if (this.id != null && this.id.indexOf('filter') != -1) {
                    matches = true;
                    return false;
                }

                if (this.className.indexOf('filter') != -1) {
                    matches = true;
                    return false;
                }

                if (this.className.indexOf('jqx-grid-cell') != -1) {
                    me.gridmenu.jqxMenu('close');
                    return false;
                }
                if (this.className.indexOf('jqx-grid-column') != -1) {
                    me.gridmenu.jqxMenu('close');
                    return false;
                }
            });

            if (matches) {
                return;
            }

            try {
                var date1 = $($.find('#filter1' + me.element.id)).jqxDropDownList('listBox').vScrollInstance._mouseup;
                if (new Date() - date1 < 100)
                    return;

                var date2 = $($.find('#filter3' + me.element.id)).jqxDropDownList('listBox').vScrollInstance._mouseup;
                if (new Date() - date2 < 100)
                    return;
            }
            catch (error) {
            }

            me.gridmenu.jqxMenu('close');

            //            if (x < gridbounds.left || x > gridbounds.left + me.host.width()) {
            //                me.gridmenu.jqxMenu('close');
            //                return;
            //            }

            //            if (y < gridbounds.top || y > gridbounds.top + me.host.height()) {
            //                me.gridmenu.jqxMenu('close');
            //                return;
            //            }
        },

        _handlemenueevents: function () {
            var self = this;
            this.removeHandler(this.gridmenu, 'closed');
            this.addHandler(this.gridmenu, 'closed', function (event) {
                self._closemenu();
            });

            this.removeHandler(this.gridmenu, 'itemclick');
            this.addHandler(this.gridmenu, 'itemclick', function (event) {
                var clickeditem = event.args;

                for (var i = 0; i < self.menuitemsarray.length; i++) {
                    var currentitem = self.menuitemsarray[i];
                    if (clickeditem == currentitem) {
                        if ($(clickeditem).attr('ignoretheme') != undefined) {
                            return;
                        }

                        var menu = $.data(document.body, "contextmenu" + self.element.id);
                        var column = menu.column;
                        if (self.filterable) {
                            self.gridmenu.jqxMenu('close');
                        }
                        var displayfield = column.displayfield;
                        if (displayfield == null) displayfield = column.datafield;

                        if (menu != null) {
                            switch (i) {
                                case 0:
                                    self.sortby(displayfield, 'ascending', null);
                                    break;
                                case 1:
                                    self.sortby(displayfield, 'descending', null);
                                    break;
                                case 2:
                                    self.sortby(displayfield, null, null);
                                    break;
                                case 3:
                                    self.addgroup(column.datafield);
                                    break;
                                case 4:
                                    self.removegroup(column.datafield);
                                    break;
                                case 5:
                                    var filteritem = $(self.menuitemsarray[6]);
                                    $(filteritem).css('display', 'block');
                                    break;
                                case 7:
                                    break;
                            }
                        }
                        break;
                    }
                }
            });
        },

        // get information about the data records.
        getdatainformation: function () {
            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }

            return { rowscount: totalrecords, sortinformation: this.getsortinformation(), paginginformation: this.getpaginginformation() }
        },

        // gets sort information.
        getsortinformation: function () {
            return { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection };
        },

        // get paging information.
        getpaginginformation: function () {
            return { pagenum: this.dataview.pagenum, pagesize: this.pagesize, pagescount: Math.ceil(this.dataview.totalrecords / this.pagesize) };
        },

        _updaterowsproperties: function () {
            this._updatehiddenrows();
            this._updaterowheights();
            this._updaterowdetails();
        },

        _updatehiddenrows: function () {
            var me = this;
            this.hiddens = new Array();
            var hiddenboundrows = this.hiddenboundrows;
            $.each(hiddenboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.hiddens[visibleindex] = this.hidden;
                }
            });
        },

        _updaterowheights: function () {
            var me = this;
            this.heights = new Array();
            var heightboundrows = this.heightboundrows;
            $.each(heightboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.heights[visibleindex] = this.height;
                }
            });
        },

        _updaterowdetails: function () {
            var me = this;
            this.details = new Array();
            var detailboundrows = this.detailboundrows;
            $.each(detailboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.details[visibleindex] = this.details;
                }
            });
        },

        _getmenuitembyindex: function (index) {
            if (index == undefined)
                return null;

            return this.menuitemsarray[index];
        },

        _closemenu: function () {
            if (this._hasOpenedMenu) {
                if (this.gridmenu != null) {
                    this.gridmenu.jqxMenu('close');
                }

                var menu = $.data(document.body, "contextmenu" + this.element.id);
                var menuoffset = 16;
                if (menu != null && this.autoshowcolumnsmenubutton) {
                    if (this.enableanimations) {
                        $(menu.columnsmenu).animate({
                            'margin-left': 0
                        }, 'fast', function () {
                            $(menu.columnsmenu).css('display', 'none');
                        });
                        menu.column.iconscontainer.animate({
                            'margin-left': -32
                        }, 'fast');
                    }
                    else {
                        $(menu.columnsmenu).css('display', 'none');
                        menu.column.iconscontainer.css('margin-left', -32);
                    }

                    $.data(document.body, "contextmenu" + this.element.id, null)
                }
                this._hasOpenedMenu = false;


                var filteritem = this._getmenuitembyindex(5);
                if (filteritem) {
                    var condition = $(filteritem).find('#filter1' + this.element.id);
                    var filteroperator = $(filteritem).find('#filter2' + this.element.id);
                    var condition2 = $(filteritem).find('#filter3' + this.element.id);
                    condition.jqxDropDownList('hideListBox');
                    filteroperator.jqxDropDownList('hideListBox');
                    condition2.jqxDropDownList('hideListBox');
                }
            }
        },

        scrolloffset: function (top, left) {
            if (top == null || left == null || top == undefined || left == undefined)
                return;

            this.vScrollBar.jqxScrollBar('setPosition', top);
            this.hScrollBar.jqxScrollBar('setPosition', left);
        },

        scrollleft: function (left) {
            if (left == null || left == undefined)
                return;

            this.hScrollBar.jqxScrollBar('setPosition', left);
        },

        scrolltop: function (top) {
            if (top == null || top == undefined)
                return;

            this.vScrollBar.jqxScrollBar('setPosition', top);
        },

        beginupdate: function () {
            this._updating = true;
            this._datachanged = false;
        },

        endupdate: function () {
            this.resumeupdate();
        },

        resumeupdate: function () {
            this._updating = false;
            if (this._datachanged == true) {
                var verticalScrollValue = this.vScrollInstance.value;
                this.render(true, true, false);
                this._datachanged = false;
                if (verticalScrollValue != 0 && verticalScrollValue < this.vScrollInstance.max) {
                    this.scrolltop(verticalScrollValue);
                }
            }
            else {
                this.rendergridcontent(true);
                this._renderrows(this.virtualsizeinfo);
            }
        },

        updating: function () {
            return this._updating;
        },

        showloadelement: function () {
            if (this.renderloadelement) {
                this.dataloadelement.html(this.renderloadelement());
            }

            $(this.dataloadelement).css('visibility', 'visible');
            $(this.dataloadelement).css('display', 'block');
        },

        hideloadelement: function () {
            $(this.dataloadelement).css('visibility', 'hidden');
            $(this.dataloadelement).css('display', 'none');
        },

        _updatefocusedfilter: function () {
            var me = this;
            if (me.focusedfilter) {
                setTimeout(function () {
                    me.focusedfilter.focus();
                    if (me.focusedfilter[0].nodeName.toLowerCase() == "input") {
                        var start = me.focusedfilter.val().length;
                        try {
                            if ('selectionStart' in me.focusedfilter[0]) {
                                me.focusedfilter[0].setSelectionRange(start, start);
                            }
                            else {
                                var range = me.focusedfilter[0].createTextRange();
                                range.collapse(true);
                                range.moveEnd('character', start);
                                range.moveStart('character', start);
                                range.select();
                            }
                        }
                        catch (error) {
                        }
                    }
                }, 10);
            }
        },

        databind: function (source, reason) {
            if (this.host.css('display') == 'block') {
                if (this.autoshowloadelement) {
                    $(this.dataloadelement).css('visibility', 'visible');
                    $(this.dataloadelement).css('display', 'block');
                    this.dataloadelement.width(this.host.width());
                    this.dataloadelement.height(this.host.height());
                }
            }
            if (!this._initgroupsheader && this.groups.length > 0) {
                this.groups = new Array();
            }

            var me = this;
            if (source == null) {
                source = {};
            }

            if (!source.recordstartindex) {
                source.recordstartindex = 0;
            }
            if (!source.recordendindex) {
                source.recordendindex = 0;
            }
            if (source.loadallrecords == undefined || source.loadallrecords == null) {
                source.loadallrecords = true;
            }
            if (source.sortcomparer == undefined || source.sortcomparer == null) {
                source.sortcomparer = null;
            }
            if (source.filter == undefined || source.filter == null) {
                source.filter = null;
            }
            if (source.sort == undefined || source.sort == null) {
                source.sort = null;
            }
            if (source.data == undefined || source.data == null) {
                source.data = null;
            }

            var url = null;
            if (source != null) {
                url = source._source != undefined ? source._source.url : source.url;
            }
            this.dataview = this.dataview || new $.jqx.dataview();
            if ($.jqx.dataview.sort) {
                $.extend(this.dataview, new $.jqx.dataview.sort());
            }
            if ($.jqx.dataview.grouping) {
                $.extend(this.dataview, new $.jqx.dataview.grouping());
            }

            this.dataview.suspendupdate();
            this.dataview.pageable = this.pageable;
            this.dataview.groupable = this.groupable;
            this.dataview.groups = this.groups;
            this.dataview.virtualmode = this.virtualmode;
            this.dataview.grid = this;
            this.dataview._clearcaches();
            if (!me.initializedcall) {
                if (this.pageable) {
                    if (source._source) {
                        if (source._source.pagenum != undefined) {
                            this.dataview.pagenum = source._source.pagenum;
                        }
                        if (source._source.pagesize != undefined) {
                            this.pagesize = source._source.pagesize;
                            this.dataview.pagesize = source._source.pagesize;
                        }
                        else {
                            this.dataview.pagesize = source._source.pagesize;
                            if (this.dataview.pagesize == undefined)
                                this.dataview.pagesize = this.pagesize;
                        }
                    }
                }
                if (source.sortcolumn) {
                    this.dataview.sortfield = source.sortcolumn;
                }
                if (source.sortdirection) {
                    this.dataview.sortfielddirection = source.sortdirection;
                }
                if (this.autoloadstate) {
                    if (this.loadstate) {
                        this.loadstate();
                    }
                }
            }

            this._loading = true;

            this.dataview.update = function () {
                me._loading = false;
                if (me.dataview.isupdating()) {
                    me.dataview.resumeupdate(false);
                }
                if (me.pageable && me.pagerrenderer) {
                    if (me._initpager)
                        me._initpager();
                    else alert('jqxgrid.pager.js is not loaded.');
                }

                if (me.source.sortcolumn && me.sortby && !me.virtualmode) {
                    me.render();
                    me.sortby(me.source.sortcolumn, me.source.sortdirection, me.source.sortcomparer);
                    me.source.sortcolumn = null;
                }
                else {
                    var vvalue = me.vScrollInstance.value;
                    var hvalue = me.hScrollInstance.value;
                    var datatype = me.source.datatype;
                    if (datatype != 'local' || datatype != 'array') {
                        var virtualheight = me.virtualsizeinfo == null || (me.virtualsizeinfo != null && me.virtualsizeinfo.virtualheight == 0);
                        if (!me.virtualmode || virtualheight || (me.virtualmode && me.pageable)) {
                            if (me.initializedcall == true && reason == 'pagechanged') {
                                me.rendergridcontent(true);
                                if (me.pageable && me.updatepagerdetails) {
                                    me.updatepagerdetails();
                                    if (me.autoheight) {
                                        me._updatepageviews();
                                        if (me.autorowheight) {
                                            me._renderrows(this.virtualsizeinfo);
                                        }
                                    }
                                }

                                if (me.showaggregates && me._updateaggregates) {
                                    me._updateaggregates();
                                }
                           //     me._render(true, true, false, false);
                            }
                            else if (reason == 'filter') {
                                me._render(true, true, false, false, false);
                                me._updatefocusedfilter();
                                me._updatecolumnwidths();
                                me._updatecellwidths();
                                me._renderrows(me.virtualsizeinfo);
                            }
                            else if (reason == 'sort') {
                                me.rendergridcontent(true);
                                if (me.showaggregates && me._updateaggregates) {
                                    me._updateaggregates();
                                }
                            }
                            else if (reason == 'data') {
                                me._render(true, true, false, false, false);
                            }
                            else {
                                me._render(true, true, true, me.menuitemsarray && !me.virtualmode);
                            }
                        }
                        else {
                            if (me.virtualmode && me.dataview.totalrecords == 0 && me.dataview.filters.length > 0) {
                                me._render(true, true, true, me.menuitemsarray && !me.virtualmode);
                            }
                            else {
                                me._pagescache = new Array();
                                me._renderrows(me.virtualsizeinfo);
                            }
                        }
                        if (me.vScrollInstance.value != vvalue && vvalue <= me.vScrollInstance.max) {
                            me.vScrollInstance.setPosition(vvalue);
                        }
                        if (me.hScrollInstance.value != hvalue && hvalue <= me.hScrollInstance.max) {
                            me.hScrollInstance.setPosition(hvalue);
                        }
                    }
                }
                if (me.autoshowloadelement) {
                    $(me.dataloadelement).css('visibility', 'hidden');
                    $(me.dataloadelement).css('display', 'none');
                }
                if (me.pageable) {
                    if (me.pagerrightbutton) {
                        me.pagerrightbutton.jqxButton({ disabled: false });
                        me.pagerleftbutton.jqxButton({ disabled: false });
                        me.pagershowrowscombo.jqxDropDownList({ disabled: false });
                    }
                }

                me._raiseEvent(11);
                if (!me.initializedcall) {
                    me._raiseEvent(0);
                    me.initializedcall = true;
                    if (me.ready) {
                        me.ready();
                    }
                    if (me.autoloadstate) {
                        if (me.loadstate) {
                            me._loadselectionandcolumnwidths();
                        }
                    }
                    if ((me.width != null && me.width.toString().indexOf('%') != -1) || (me.height != null && me.height.toString().indexOf('%') != -1)) {
                        me._updatesize(true);
                    }

                    if (me.host.css('visibility') == 'hidden') {
                        var ie7 = $.browser.msie && $.browser.version < 8;

                        if (me.vScrollBar.css('visibility') == 'visible') {
                            me.vScrollBar.css('visibility', 'inherit');
                        }

                        if (me.hScrollBar.css('visibility') == 'visible') {
                            me.hScrollBar.css('visibility', 'inherit');
                        }

                        me._intervalTimer = setInterval(function () {
                            if (me.host.css('visibility') == 'visible') {
                                me._updatesize(true);
                                clearInterval(me._intervalTimer);
                            }
                        }, 100);
                    }
                }
                else me._updateTouchScrolling();
            }

            this.dataview.databind(source);

            if (this.dataview.isupdating()) {
                if (url != undefined) {
                    this.dataview.suspend = false;
                }
                else {
                    this.dataview.resumeupdate(false);
                }
            }

            this._initializeRows();
        },

        scrollto: function (left, top) {
            if (undefined != left) {
                this.hScrollInstance.setPosition(left);
            }

            if (undefined != top) {
                this.vScrollInstance.setPosition(top);
            }
        },

        scrollposition: function () {
            return { top: this.vScrollInstance.value, left: this.hScrollInstance.value }
        },

        ensurerowvisible: function (index) {
            var pagesize = this._getpagesize();
            var pagenumber = Math.floor(index / pagesize);

            if (!this._pageviews[pagenumber] && !this.pageable) {
                this._updatepageviews();
            }

            var result = false;
            if (this.pageable && this.gotopage && !this.virtualmode) {
                if (this.dataview.pagenum != pagenumber) {
                    this.gotopage(pagenumber);
                    result = true;
                }
            }

            var value = this.vScrollInstance.value;
            var height = this._gettableheight() - this.rowsheight;
            var rowindexinpage = pagesize * (index / pagesize - pagenumber);
            rowindexinpage = Math.round(rowindexinpage);

            if (this._pageviews[pagenumber]) {
                var top = this._pageviews[pagenumber].top;
                var rowposition = top + rowindexinpage * this.rowsheight;
                if (this.rowdetails) {
                    for (var i = pagesize * pagenumber; i < index; i++) {
                        if (this.details[i]) {
                            if (this.details[i].rowdetailshidden == false) {
                                rowposition += this.details[i].rowdetailsheight;
                            }
                        }
                    }
                }

                if (rowposition < value) {
                    this.scrolltop(rowposition);
                    result = true;
                }
                else if (rowposition > value + height + 2) {
                    this.scrolltop(rowposition - height);
                    result = true;
                }
            }
            else if (this.pageable) {
                var rowposition = rowindexinpage * this.rowsheight;
                if (this.rowdetails) {
                    for (var i = pagesize * pagenumber; i < pagesize * pagenumber + rowindexinpage; i++) {
                        if (this.details[i].rowdetailshidden == false) {
                            rowposition += this.details[i].rowdetailsheight;
                        }
                    }
                }

                if (rowposition < value || rowposition > value + height) {
                    this.scrollto(0, rowposition);
                    result = true;
                }
            }
            return result;
        },

        ensurecellvisible: function (index, datafield) {
            var hvalue = this.hScrollBar.jqxScrollBar('value');
            var result = this.ensurerowvisible(index);
            var left = 0;
            var self = this;
            if (this.columns.records) {
                var value = hvalue;
                var gridwidth = this.host.width();
                var columnindex = 0;
                var vScrollOffset = this.vScrollBar.css('visibility') == 'visible' ? 20 : 0;
                var hresult = false;
                $.each(this.columns.records, function () {
                    if (this.datafield == datafield) {
                        var newleft = 0;
                        if (left + this.width > value + gridwidth - vScrollOffset) {
                            newleft = left + this.width - value - gridwidth + vScrollOffset;
                            self.scrollleft(newleft + value);
                            hresult = true;
                        }
                        else if (left <= value) {
                            newleft = left - this.width;
                            self.scrollleft(newleft);
                            hresult = true;
                        }

                        if (columnindex == 0) {
                            self.scrollleft(0);
                            hresult = true;
                        }
                        else if (columnindex == self.columns.records.length - 1) {
                            if (self.hScrollBar.css('visibility') == 'visible') {
                                self.scrollleft(self.hScrollBar.jqxScrollBar('max'));
                                hresult = true;
                            }
                        }
                        return false;
                    }
                    columnindex++;
                    left += this.width;
                });
                if (!hresult) {
                    self.scrollleft(value);
                }
            }
            return result;
        },

        setrowheight: function (index, height) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            if (index == null || height == null)
                return false;

            this.heightboundrows[index] = { index: index, height: height };

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            if (this.rows.records[index]) {
                this.rows.records[index].height = height;
            }
            else {
                row = new jqxGridRow(this, null);
                row.height = height;
                this.rows.replace(index, row);
            }
            this.heights[index] = height;

            this.rendergridcontent(true);
            return true;
        },

        getrowheight: function (index) {
            if (index == null)
                return null;

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            if (this.rows.records[index]) {
                return this.rows.records[index].height;
            }
        },

        setrowdetails: function (index, details, height, hidden) {
            if (index == undefined || index == null || index < 0)
                return;

            var detailskey = this.dataview.generatekey();
            this.detailboundrows[index] = { index: index, details: { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, key: detailskey } };

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            return this._setrowdetails(index, details, height, hidden, detailskey);
        },

        getcolumn: function (datafield) {
            var column = null;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    if (this.datafield == datafield || this.displayfield == datafield) {
                        column = this;
                        return false;
                    }
                });
            }
            return column;
        },

        _getcolumnindex: function (datafield) {
            var index = -1;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    index++;
                    if (this.datafield == datafield) {
                        return false;
                    }
                });
            }
            return index;
        },

        _getcolumnat: function (index) {
            var column = this.columns.records[index];
            return column;
        },

        _getprevvisiblecolumn: function (index) {
            var self = this;
            while (index > 0) {
                index--;
                var column = self.getcolumnat(index);
                if (!column)
                    return null;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        _getnextvisiblecolumn: function (index) {
            var self = this;
            while (index < this.columns.records.length) {
                index++;
                var column = self.getcolumnat(index);

                if (!column)
                    return null;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        getcolumnat: function (index) {
            if (!isNaN(index)) {
                var column = this.columns.records[index];
                return column;
            }

            return null;
        },

        _getcolumn: function (datafield) {
            var column = null;
            $.each(this._columns, function () {
                if (this.datafield == datafield || this.displayfield == datafield) {
                    column = this;
                    return false;
                }
            });
            return column;
        },

        _setcolumnproperty: function (datafield, propertyname, value) {
            if (datafield == null || propertyname == null || value == null)
                return null;

            var column = this.getcolumn(datafield);
            if (column == null)
                return;

            var oldvalue = column[propertyname];
            column[propertyname] = value;

            var _cachedcolumn = this._getcolumn(datafield);
            if (_cachedcolumn != null) {
                _cachedcolumn[propertyname] = value;
            }
            this._cellscache = new Array();

            switch (propertyname) {
                case "text":
                    this.prerenderrequired = true;
                    this._rendercolumnheaders();
                    if (this._groupsheader()) {
                        if (this._initgroupsheader) {
                            this._initgroupsheader();
                        }
                    }
                    break;
                case "editable":
                case "resizable":
                case "draggable":
                    if (propertyname == "editable") {
                        if (value != oldvalue) {
                            if (this.editcell != null && this.endcelledit) {
                                this.endcelledit(this.editcell.row, this.editcell.column, true, true);
                            }
                            if (column.columntype == 'checkbox') {
                                this.prerenderrequired = true;
                                this.rendergridcontent(true, false);
                                if (this.updating()) {
                                    return false;
                                }
                            }
                            if (this.updating()) {
                                return false;
                            }
                            this._renderrows(this.virtualsizeinfo);
                        }
                    }
                    break;
                case "hidden":
                case "hideable":
                case "renderer":
                case "cellsrenderer":
                case "align":
                case "cellsalign":
                case "cellsformat":
                case "pinned":
                case "contenttype":
                case "filterable":
                case "groupable":
                case "cellclass":
                case "class":
                    this.prerenderrequired = true;
                    this.rendergridcontent(true);
                    if (this.updating()) {
                        return false;
                    }

                    this._renderrows(this.virtualsizeinfo);

                    break;
                case "width":
                case "minwidth":
                case "maxwidth":
                    if (this.updating()) {
                        return false;
                    }
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                    this._renderrows(this.virtualsizeinfo);
                    break;
            }
        },

        _getcolumnproperty: function (datafield, propertyname) {
            if (datafield == null || propertyname == null)
                return null;

            var column = this.getcolumn(datafield);
            return column[propertyname];
        },

        // sets a property of a column.
        setcolumnproperty: function (datafield, propertyname, value) {
            this._setcolumnproperty(datafield, propertyname, value);
        },

        // gets the value of a column property.
        getcolumnproperty: function (datafield, propertyname) {
            return this._getcolumnproperty(datafield, propertyname);
        },

        // hides a column.
        hidecolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'hidden', true);
        },

        // shows a column.
        showcolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'hidden', false);
        },

        // gets column's hidden.
        iscolumnvisible: function (datafield) {
            return !this._getcolumnproperty(datafield, 'hidden');
        },

        // pins the column.
        pincolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'pinned', true);
        },

        // unpins the column.
        unpincolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'pinned', false);
        },

        iscolumnpinned: function (datafield) {
            return this._getcolumnproperty(datafield, 'pinned');
        },

        _setrowdetails: function (index, details, height, hidden, detailskey) {
            if (height == 0) {
                height = 100;
            }

            if (index == null || height == null)
                return false;

            if (detailskey != null) {
                this.details[index] = { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, detailskey: detailskey };
            }
            else {
                var olddetailskey = this.details[index] != null ? this.details[index].detailskey : null;
                var newdetails = { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, detailskey: olddetailskey };

                var me = this;

                for (var i = 0; i < this.detailboundrows.length; i++) {
                    if (this.detailboundrows[i] != undefined) {
                        var olddetails = this.detailboundrows[i];
                        if (olddetails.details.key == olddetailskey) {
                            olddetails.details.rowdetailsheight = newdetails.rowdetailsheight;
                            olddetails.details.rowdetailshidden = newdetails.rowdetailshidden;
                            olddetails.details.rowdetails = newdetails.rowdetails;
                            break;
                        }
                    }
                }
                this.details[index] = newdetails;
            }

            this.rendergridcontent(true);
            return true;
        },

        // gets the row details.
        getrowdetails: function (index) {
            if (index == null)
                return false;

            index = this.getrowvisibleindex(index);
            return this._getrowdetails(index);
        },


        _getrowdetails: function (index) {
            if (index == null)
                return false;

            if (index < 0)
                return false;

            if (this.details[index]) {
                return this.details[index];
            }

            if (this.rowdetailstemplate) {
                return this.rowdetailstemplate;
            }
        },

        // gets all records count.
        getrecordscount: function () {
            return this.dataview.totalrecords;
        },

        // shows the row details.
        showrowdetails: function (index) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }
            if (index == null)
                return false;

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            var details = this._getrowdetails(index);
            return this._setrowdetailsvisibility(index, details, false);
        },

        // hides the row details.
        hiderowdetails: function (index) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            var details = this._getrowdetails(index);
            return this._setrowdetailsvisibility(index, details, true);
        },

        _togglerowdetails: function (row) {
            var index = row.visibleindex;
            var details = this._getrowdetails(index);
            if (details != null) {
                var hidden = !details.rowdetailshidden;
                return this._setrowdetailsvisibility(index, details, hidden);
            }
            return false;
        },

        _setrowdetailsvisibility: function (index, details, hidden) {
            if (this.rowdetailstemplate) {
                if (!this.details) this.details = new Array();
                if (!this.details[index]) {
                    this.details[index] = { rowdetailshidden: this.rowdetailstemplate.rowdetailshidden, rowdetailsheight: this.rowdetailstemplate.rowdetailsheight, rowdetails: this.rowdetailstemplate.rowdetails };
                    var detailskey = this.dataview.generatekey();
                    this.details[index].detailskey = detailskey;
                    this.detailboundrows[index] = { index: index, details: this.details[index] };

                }
            }

            if (details != null) {
                this.details[index].rowdetailshidden = hidden;
            }
            else {
                return false;
            }

            var newdetails = this.details[index];
            if (hidden) {
                this._raiseEvent(21, { rowindex: index, details: newdetails.rowdetails, height: newdetails.rowdetailsheight });
            }
            else {
                this._raiseEvent(20, { rowindex: index, details: newdetails.rowdetails, height: newdetails.rowdetailsheight });
            }
            return this._setrowdetails(index, newdetails.rowdetails, newdetails.rowdetailsheight, newdetails.rowdetailshidden);
        },

        // gets the row's visible index.
        getrowvisibleindex: function (boundindex) {
            if (boundindex == undefined || boundindex == null || boundindex < 0)
                return false;

            if (this.virtualmode) {
                var row = this.dataview.loadedrecords[boundindex];
                if (row == undefined) {
                    return -1;
                }
                return row.visibleindex;
            }

            var row = this.dataview.bounditems[boundindex];
            if (row == undefined) {
                return -1;
            }

            return row.visibleindex;
        },

        // hides a row.
        hiderow: function (index) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            if (index == undefined || index == null || index < 0)
                return false;

            if (index == null)
                return false;

            this.hiddenboundrows[index] = { index: index, hidden: true };
            index = this.getrowvisibleindex(index);

            return this._setrowvisibility(index, true);
        },

        // shows a row.
        showrow: function (index) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            if (index == undefined || index == null || index < 0)
                return false;

            if (index == null)
                return false;

            this.hiddenboundrows[index] = { index: index, hidden: false };
            index = this.getrowvisibleindex(index);

            return this._setrowvisibility(index, false);
        },
        // is row hidden
        isrowhiddenat: function (index) {
            if (index == null)
                return null;

            index = this.getrowvisibleindex(index);

            if (this.rows.records[index]) {
                return this.rows.records[index].hidden;
            }
        },

        _setrowvisibility: function (index, hidden, refresh) {
            if (index == null)
                return false;

            this.hiddens[index] = hidden;

            if (refresh == undefined || refresh) {
                this.rendergridcontent(true);
                return true;
            }
            return false;
        },

        _loadrows: function () {
            if (!this._pageviews[this.dataview.pagenum] && !this.pageable)
                return;

            var top = !this.pageable ? this._pageviews[this.dataview.pagenum].top : 0;
            if (!this.pageable && this._pagescache[this.dataview.pagenum] != undefined) {
                return null;
            }

            if (!this.virtualsizeinfo) {
                return;
            }

            var self = this;
            var storage = new Array();
            var datastorage = new Array();
            var hasgroups = self.groupable && self.groups.length > 0;
            var totalrows = this.dataview.totalrecords;
            var virtualheight = this.virtualsizeinfo.virtualheight;
            var rowindex = 0;

            this.rows.beginupdate();
            var pagesize = this.dataview.pagesize;
            if (this.pageable && hasgroups) {
                pagesize = this.dataview.rows.length;
            }

            for (var i = 0; i < pagesize; i++) {
                if (i >= this.dataview.rows.length)
                    break;

                var datarow = this.dataview.rows[i];
                var row = null;
                if (!self.rows.records[datarow.visibleindex]) {
                    row = new jqxGridRow(self, datarow);
                }
                else {
                    row = self.rows.records[datarow.visibleindex];
                    row.setdata(datarow);
                }

                row.hidden = this.hiddens[row.visibleindex];

                if (this.rowdetailstemplate) {
                    row.rowdetails = this.rowdetailstemplate.rowdetails;
                    row.rowdetailsheight = this.rowdetailstemplate.rowdetailsheight;
                    row.rowdetailshidden = this.rowdetailstemplate.rowdetailshidden;
                }

                var details = this.details[row.visibleindex];
                if (details) {
                    row.rowdetails = details.rowdetails;
                    row.rowdetailsheight = details.rowdetailsheight;
                    row.rowdetailshidden = details.rowdetailshidden;
                }
                else if (!this.rowdetailstemplate) {
                    row.rowdetails = null;
                }

                if (hasgroups && this.pageable && row.parentbounddata != null) {
                    var parentrow = storage[row.parentbounddata.uniqueid];
                    if (parentrow != null) {
                        var groupstate = this._findgroupstate(parentrow.uniqueid);

                        if (this._setsubgroupsvisibility) {
                            this._setsubgroupsvisibility(this, row.parentbounddata, !groupstate, false);
                        }

                        row.hidden = this.hiddens[row.visibleindex];
                    }

                    if (parentrow != null && parentrow != undefined) {
                        row.parentrow = parentrow;
                        parentrow.subrows[parentrow.subrows.length++] = row;
                    }
                }

                if (row.hidden)
                    continue;

                var num = datarow.visibleindex;
                if (!this.heights[num]) {
                    this.heights[num] = this.rowsheight;
                }

                row.height = this.heights[num];

                if (this.rowdetails) {
                    if (row.rowdetails && !row.rowdetailshidden) {
                        row.height += row.rowdetailsheight;
                    }
                }

                storage[row.uniqueid] = row;
                datastorage[rowindex++] = row;

                row.top = top;
                top += row.height;

                var recordindex = num;
                self.rows.replace(recordindex, row);
            }

            if (this.autoheight && this.autorowheight) {
                this._pageviews[0].height = top;
            }

            this.rows.resumeupdate();

            if (datastorage.length > 0) {
                this._pagescache[this.dataview.pagenum] = datastorage;
            }
        },

        _gettableheight: function () {
            if (this.tableheight != undefined)
                return this.tableheight;

            var realheight = this.host.height();

            if (this.columnsheader) {
                var columnheaderheight = this.columnsheader.outerHeight();
                if (!this.showheader) {
                    columnheaderheight = 0;
                }
            }

            realheight -= columnheaderheight;

            if (this.hScrollBar[0].style.visibility == 'visible') {
                realheight -= this.hScrollBar.outerHeight();
            }

            if (this.pageable) {
                realheight -= this.pager.outerHeight();
            }

            if (this._groupsheader()) {
                realheight -= this.groupsheader.outerHeight();
            }

            if (this.showtoolbar) {
                realheight -= this.toolbarheight;
            }

            if (this.showstatusbar) {
                realheight -= this.statusbarheight;
            }

            if (realheight > 0) {
                this.tableheight = realheight;
                return realheight;
            }

            return this.host.height();
        },

        _getpagesize: function () {
            if (this.pageable) {
                return this.pagesize;
            }

            if (this.virtualmode) {
                var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;

                var visiblerecords = Math.round(hostHeight / this.rowsheight);
                return visiblerecords;
            }

            if (this.autoheight || this.autorowheight) {
                if (this.dataview.totalrows == 0)
                    return 1;
                return this.dataview.totalrows;
            }

            if (this.dataview.totalrows < 100 && this.dataview.totalrecords < 100 && this.dataview.totalrows > 0) {
                return this.dataview.totalrows;
            }

            return 100;
        },

        _calculatevirtualheight: function () {
            var self = this;

            var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;
            realheight = this._gettableheight();
            var visiblerecords = Math.round(hostHeight / this.rowsheight);

            this.heights = new Array();
            this.hiddens = new Array();
            this.details = new Array();
            this.expandedgroups = new Array();
            this.hiddenboundrows = new Array();
            this.heightboundrows = new Array();
            this.detailboundrows = new Array();

            var totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
            if (this.pageable) {
                totalrows = this.pagesize;
                if (this.pagesize > Math.max(this.dataview.totalrows, this.dataview.totalrecords) && this.autoheight) {
                    totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
                }
            }

            var virtualheight = totalrows * this.rowsheight;
            var top = 0;
            var index = 0;
            var lasttop = 0;
            var pagesize = this._getpagesize();
            var pageheight = pagesize * this.rowsheight;
            var i = 0;
            if (totalrows + pagesize > 0) {
                while (i <= totalrows + pagesize) {
                    top += pageheight;
                    if (i - pagesize < totalrows && i >= totalrows) {
                        var rows = i - totalrows;
                        if (rows > 0) {
                            lasttop -= pageheight;
                            this._pageviews[index - 1] = { top: lasttop, height: pageheight - rows * this.rowsheight };
                        }
                        break;
                    }
                    else {
                        this._pageviews[index++] = { top: lasttop, height: pageheight };
                    }
                    lasttop = top;
                    i += pagesize;
                }
            }

            this.vScrollBar.jqxScrollBar({ value: 0 });
            if (virtualheight > realheight && !this.autoheight) {
                this.vScrollBar.css('visibility', 'visible');
                this.vScrollBar.jqxScrollBar({ max: virtualheight - realheight });
            }
            else {
                this.vScrollBar.css('visibility', 'hidden');
            }

            this.dataview.pagesize = pagesize;
            this.dataview.updateview();
            return { visiblerecords: visiblerecords, virtualheight: virtualheight };
        },

        _updatepageviews: function () {
            if (this.updating())
                return;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this.tableheight = null;
            var self = this;
            var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;
            var visiblerecords = Math.round(hostHeight / this.rowsheight);
            var totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
            var virtualheight = totalrows * this.rowsheight;
            var top = 0;
            var currentheight = 0;
            var index = 0;
            var lasttop = 0;
            var k = 0;
            var pagesize = this._getpagesize();

            if (!this.pageable) {
                for (var i = 0; i < totalrows; i++) {
                    var rowinfo = { index: i, height: this.heights[i], hidden: this.hiddens[i], details: this.details[i] }
                    if (this.heights[i] == undefined) {
                        this.heights[i] = this.rowsheight;
                        rowinfo.height = this.rowsheight;
                    }
                    if (this.hiddens[i] == undefined) {
                        this.hiddens[i] = false;
                        rowinfo.hidden = false;
                    }
                    if (this.details[i] == undefined) {
                        this.details[i] = null;
                    }
                    if (rowinfo.height != self.rowsheight) {
                        virtualheight -= self.rowsheight;
                        virtualheight += rowinfo.height;
                    }

                    if (rowinfo.hidden) {
                        virtualheight -= rowinfo.height;
                    }
                    else {
                        currentheight += rowinfo.height;
                        var detailsheight = 0;
                        if (this.rowdetails) {
                            if (this.rowdetailstemplate) {
                                if (!rowinfo.details) rowinfo.details = this.rowdetailstemplate;
                            }

                            if (rowinfo.details && rowinfo.details.rowdetails && !rowinfo.details.rowdetailshidden) {
                                detailsheight = rowinfo.details.rowdetailsheight;
                                currentheight += detailsheight;
                                virtualheight += detailsheight;
                            }
                        }
                        top += rowinfo.height + detailsheight;
                    }

                    k++;
                    if (k >= pagesize || i == totalrows - 1) {
                        this._pageviews[index++] = { top: lasttop, height: currentheight };
                        currentheight = 0;
                        lasttop = top;
                        k = 0;
                    }
                }
            }
            else {
                if (this._updatepagedview) {
                    virtualheight = this._updatepagedview(totalrows, virtualheight, 0);
                }
                if (this.autoheight) {
                    this._arrange();
                }
            }

            var tableheight = this._gettableheight();
            if (virtualheight > tableheight) {
                if (this.pageable && this.gotopage) {
                    virtualheight = this._pageviews[0].height; // -this._gettableheight();
                    if (virtualheight < 0) {
                        virtualheight = this._pageviews[0].height;
                    }
                }

                if (this.vScrollBar.css('visibility') != 'visible') {
                    this.vScrollBar.css('visibility', 'visible');
                }
                if (virtualheight <= tableheight || this.autoheight) {
                    this.vScrollBar.css('visibility', 'hidden');
                }

                if (virtualheight - tableheight > 0) {
                    var max = virtualheight - tableheight;
                    this.vScrollBar.jqxScrollBar({ max: max });
                }
                else {
                    this.vScrollBar.jqxScrollBar({ value: 0, max: virtualheight });
                }
            }
            else {
                if (!this._loading) {
                    this.vScrollBar.css('visibility', 'hidden');
                }
                this.vScrollBar.jqxScrollBar({ value: 0 });
            }

            this._arrange();

            if (this.autoheight) {
                visiblerecords = Math.round(this.host.height() / this.rowsheight);
            }

            this.virtualsizeinfo = { visiblerecords: visiblerecords, virtualheight: virtualheight };
        },

        updatebounddata: function (reason) {
            this.databind(this.source, reason);
        },

        refreshdata: function () {
            this._refreshdataview();
            this.render();
        },

        _updatevscrollbarmax: function () {
            if (this._pageviews && this._pageviews.length > 0) {
                var virtualheight = this._pageviews[0].height;
                var tableheight = this._gettableheight();
                if (virtualheight > tableheight) {
                    if (this.pageable && this.gotopage) {
                        virtualheight = this._pageviews[0].height;
                        if (virtualheight < 0) {
                            virtualheight = this._pageviews[0].height;
                        }
                    }

                    if (this.vScrollBar.css('visibility') != 'visible') {
                        this.vScrollBar.css('visibility', 'visible');
                    }
                    if (virtualheight <= tableheight || this.autoheight) {
                        this.vScrollBar.css('visibility', 'hidden');
                    }

                    if (virtualheight - tableheight > 0) {
                        var max = virtualheight - tableheight;
                        this.vScrollBar.jqxScrollBar({ max: max });
                    }
                    else {
                        this.vScrollBar.jqxScrollBar({ value: 0, max: virtualheight });
                    }
                }
                else {
                    this.vScrollBar.css('visibility', 'hidden');
                    this.vScrollBar.jqxScrollBar({ value: 0 });
                }
            }
        },

        _refreshdataview: function () {
            this.dataview.refresh();
        },

        refresh: function (initialRefresh) {
            if (initialRefresh != true) {
                if (this.virtualsizeinfo != null) {
                    //   this._requiresupdate = true;
                    this._cellscache = new Array();
                    this._renderrows(this.virtualsizeinfo);
                    this._updatesize();
                }
            }
        },

        render: function () {
            this._render(true, true, true, true);
        },

        clear: function () {
            this.databind(null);
            this.render();
        },

        _render: function (initialization, forceupdate, rendercolumns, rendermenu, updatelistfilter) {
            if (this.dataview == null)
                return;

            if (this.editcell != null && this.endcelledit) {
                this.endcelledit(this.editcell.row, this.editcell.column, true, false);
            }
            this.validationpopup = null;
            this._removeHandlers();
            this._addHandlers();
            this._initializeRows();

            this._requiresupdate = forceupdate != undefined ? forceupdate : true;

            if (rendercolumns) {
                if (!this._requiresupdate) {
                    if (rendermenu != false) {
                        this._initmenu();
                    }
                }

                if (this.columns == null) {
                    this.columns = new $.jqx.collection(this.element);
                }
                else {
                    this._initializeColumns();
                }
            }

            this.tableheight = null;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this.visiblerows = new Array();
            this.hittestinfo = new Array();

            if (this._requiresupdate) {
                this._clearcaches();
                if (rendermenu != false) {
                    this._initmenu();
                }
            }

            this.virtualsizeinfo = null;
            this.prerenderrequired = true;

            if ((this.groupable && this.groups.length > 0 && this.rowdetails) || (this.rowdetails)) {
                if (this.gridcontent) {
                    this._rowdetailscache = new Array();
                    this._rowdetailselementscache = new Array();
                    this.detailboundrows = new Array();
                    this.details = new Array();
                    this.gridcontent.html('');
                    this.gridcontent = null;
                }
            }

            if (rendercolumns) {
                if (this.filterrow) this.filterrow.detach();
                this.content.html('');
                this.columnsheader = this.columnsheader || $('<div style="overflow: hidden;"></div>');
                this.columnsheader.remove();
                this.columnsheader.addClass(this.toTP('jqx-widget-header'));
                this.columnsheader.addClass(this.toTP('jqx-grid-header'));
            }
            else {
                if (this.gridcontent) {
                    this.gridcontent.html('');
                }
            }

            if (!this.showheader) {
                this.columnsheader.css('display', 'none');
            }
            else {
                if (this.columnsheader) {
                    this.columnsheader.css('display', 'block');
                }
            }

            this.gridcontent = this.gridcontent || $('<div style="width: 100%; overflow: hidden; position: absolute;"></div>');
            this.gridcontent.remove();

            if (this.showfilterrow && this.filterable) {
                this.columnsheader.height(this.columnsheight + this.filterrowheight);
            }
            else {
                this.columnsheader.height(this.columnsheight);
            }

            this.content.append(this.columnsheader);
            this.content.append(this.gridcontent);
            this._arrange();

            if (this._initgroupsheader) {
                this._initgroupsheader();
            }

            this.selectionarea = this.selectionarea || $("<div style='z-index: 99999; visibility: hidden; position: absolute;'></div>");
            this.selectionarea.addClass(this.toThemeProperty('jqx-grid-selectionarea'));
            this.selectionarea.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.content.append(this.selectionarea);
            this.tableheight = null;

            this.rendergridcontent(false, rendercolumns);
            if (this.groups.length > 0 && this.groupable) {
                this.suspendgroupevents = true;
                if (this.collapseallgroups) {
                    if (!this.groupsexpandedbydefault) {
                        this.collapseallgroups(false);
                        this._updatescrollbarsafterrowsprerender();
                    }
                    else {
                        this.expandallgroups(false);
                    }
                }
                this.suspendgroupevents = false;
            }

            if (this.pageable && this.updatepagerdetails) {
                this.updatepagerdetails();
                if (this.autoheight) {
                    this._updatepageviews();
                    if (this.autorowheight) {
                        this._renderrows(this.virtualsizeinfo);
                    }
                }
            }

            if (this.showaggregates && this._updateaggregates) {
                this._updateaggregates();
            }

            var browserInfo = $.jqx.utilities.getBrowser();
            if ((browserInfo.browser == 'msie' && parseInt(browserInfo.version) < 9) || this.isTouchDevice()) {
                this._overlayElement = $("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>");
                this.content.prepend(this._overlayElement);
                this._overlayElement.css('background', 'white');
                this._overlayElement.css('z-index', 9999999);
                this._overlayElement.css('opacity', 0.0001);
            }
            this._updateTouchScrolling();
            if (this.showfilterrow && this.filterable && this.filterrow && (updatelistfilter == undefined || updatelistfilter == true)) {
                this._updatelistfilters();
            }

            // callback when the rendering is complete.
            if (this.rendered) {
                this.rendered('full');
            }
        },

        rendergridcontent: function (requiresupdate, rendercolumns) {
            if (this.updating()) {
                return false;
            }

            if (requiresupdate == undefined || requiresupdate == null) {
                requiresupdate = false;
            }

            this._requiresupdate = requiresupdate;

            var prerender = this.prerenderrequired;
            if (this.prerenderrequired) {
                this._arrange();
            }

            var me = this;
            var rendercolumns = rendercolumns;
            if (rendercolumns == null || rendercolumns == undefined) {
                rendercolumns = true;
            }

            this.tableheight = null;
            me.virtualsizeinfo = me.virtualsizeinfo || me._calculatevirtualheight();
            if (me.pageable && !me.autoheight) {
                if (me.dataview.totalrows < me.pagesize) {
                    me._requiresupdate = true;
                }
            }

            if (rendercolumns) {
                me._rendercolumnheaders();
            }
            else {
                if (this._rendersortcolumn) {
                    this._rendersortcolumn();
                }
                if (this._renderfiltercolumn) {
                    this._renderfiltercolumn();
                }
            }

            me._renderrows(me.virtualsizeinfo);

            if (this.gridcontent[0].scrollTop != 0) {
                this.gridcontent[0].scrollTop = 0;
            }

            if (this.gridcontent[0].scrollLeft != 0) {
                this.gridcontent[0].scrollLeft = 0;
            }

            if (prerender) {
                var tableheight = this.tableheight;
                this._arrange();
                if (tableheight != this.tableheight && this.autoheight) {
                    me._renderrows(me.virtualsizeinfo);
                }
            }

            if (this.autosavestate) {
                if (this.initializedcall != null) {
                    if (this.savestate) {
                        this.savestate();
                    }
                }
            }

            return true;
        },

        _updatecolumnwidths: function () {
            var totalwidth = this.host.width();
            var hostwidth = totalwidth;
            var allcharacters = '';
            if (this.columns == undefined || this.columns.records == undefined)
                return;

            var self = this;
            $.each(this.columns.records, function (i, value) {
                if (!(this.hidden && this.hideable)) {
                    if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                        var value = 0;
                        var offset = self.vScrollBar[0].style.visibility == 'hidden' ? 0 : self.scrollbarsize + 5;
                        value = parseInt(this.width) * hostwidth / 100;
                        if (this._percentagewidth != undefined) {
                            value = parseInt(this._percentagewidth) * (hostwidth - offset) / 100;
                        }

                        if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;
                        if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;
                        totalwidth -= Math.round(value);
                    }
                    else if (this.width != 'auto' && !this._width) {
                        totalwidth -= this.width;
                    }
                    else {
                        allcharacters += this.text;
                    }
                }
            });

            var tableheight = this._gettableheight();

            if (!this.autoheight) {
                if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > tableheight) {
                    if (this.groupable && this.groups.length > 0) {
                        if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {
                            var groupsheight = this.dataview.loadedrootgroups.length * this.rowsheight;
                            if (groupsheight > tableheight) {
                                totalwidth -= this.scrollbarsize + 5;
                                hostwidth -= this.scrollbarsize + 5;
                            }
                            else if (this.vScrollBar.css('visibility') == 'visible') {
                                totalwidth -= this.scrollbarsize + 5;
                                hostwidth -= this.scrollbarsize + 5;
                            }
                        }
                        else {
                            totalwidth -= this.scrollbarsize + 5;
                            hostwidth -= this.scrollbarsize + 5;
                        }
                    }
                    else {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
            }

            var columnheader = this.columnsheader.find('#columntable' + this.element.id);
            if (columnheader.length == 0)
                return;

            var columns = columnheader.find('.jqx-grid-column-header');
            var left = 0;
            $.each(this.columns.records, function (i, value) {
                var column = $(columns[i]);
                var percentage = false;
                var desiredwidth = this.width;
                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                    if (this._percentagewidth != undefined) {
                        desiredwidth = parseInt(this._percentagewidth) * hostwidth / 100;
                    }
                    else {
                        desiredwidth = parseInt(this.width) * hostwidth / 100;
                    }
                    percentage = true;
                }

                if (this.width != 'auto' && !this._width && !percentage) {
                    if (parseInt(column[0].style.width) != this.width) {
                        column.width(this.width);
                    }
                }
                else if (percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                        this.width = desiredwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                        this.width = desiredwidth;
                    }

                    if (parseInt(column[0].style.width) != desiredwidth) {
                        column.width(desiredwidth);
                        this.width = desiredwidth;
                    }
                }
                else {
                    var width = Math.round(totalwidth * (this.text.length / allcharacters.length));
                    if (isNaN(width)) {
                        width = this.minwidth;
                    }

                    if (width < 0) {
                        $element = $('<span>' + this.text + '</span>');
                        $(document.body).append($element);
                        width = 10 + $element.width();
                        $element.remove();
                    }
                    if (width < this.minwidth)
                        width = this.minwidth;
                    if (width > this.maxwidth) {
                        width = this.maxwidth;
                    }

                    this._width = 'auto';
                    this.width = width;
                    column.width(this.width);
                }
                if (parseInt(column[0].style.left) != left) {
                    column.css('left', left);
                }

                if (!(this.hidden && this.hideable)) {
                    left += this.width;
                }

                this._requirewidthupdate = true;
            });
            this.columnsheader.width(2 + left);
            columnheader.width(this.columnsheader.width());
            if (this.showfilterrow && this.filterrow) {
                this.filterrow.width(this.columnsheader.width());
                this._updatefilterrowui();
            }
        },

        _rendercolumnheaders: function () {
            var self = this;

            if (!this.prerenderrequired) {
                if (this._rendersortcolumn) {
                    this._rendersortcolumn();
                }
                if (this._renderfiltercolumn) {
                    this._renderfiltercolumn();
                }
                if (this.showfilterrow && this.filterrow) {
                    this.filterrow.width(this.columnsheader.width());
                    this._updatefilterrowui();
                }
                return;
            }

            this._columnsbydatafield = new Array();
            this.columnsheader.find('#columntable' + this.element.id).remove();
            var columnheader = $('<div id="columntable' + this.element.id + '" style="height: 100%; position: relative;"></div>')
            columnheader[0].cells = new Array();

            var k = 0;
            var left = 0;

            var allcharacters = "";
            var totalwidth = this.host.width();
            var hostwidth = totalwidth;

            var pinnedcolumns = new Array();
            var normalcolumns = new Array();

            $.each(this.columns.records, function (i, value) {
                if (!(this.hidden && this.hideable)) {
                    if (this.width != 'auto' && !this._width) {
                        if (this.width < this.minwidth && this.minwidth != 'auto') {
                            totalwidth -= this.minwidth;
                        }
                        else if (this.width > this.maxwidth && this.maxwidth != 'auto') {
                            totalwidth -= this.maxwidth;
                        }
                        else if (this.width.toString().indexOf('%') != -1) {
                            var value = 0;
                            value = parseInt(this.width) * hostwidth / 100;
                            if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;
                            if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;
                            totalwidth -= value;
                        }
                        else {
                            if (typeof this.width == 'string') this.width = parseInt(this.width);
                            totalwidth -= this.width;
                        }
                    }
                    else {
                        allcharacters += this.text;
                    }
                }
                if (this.pinned) {
                    pinnedcolumns[pinnedcolumns.length] = this;
                }
                else {
                    normalcolumns[normalcolumns.length] = this;
                }
            });

            for (var i = 0; i < pinnedcolumns.length; i++) {
                this.columns.replace(i, pinnedcolumns[i]);
            }
            for (var j = 0; j < normalcolumns.length; j++) {
                this.columns.replace(pinnedcolumns.length + j, normalcolumns[j]);
            }
            var zindex = this.headerZIndex;
            var groupslength = self.groupable ? self.groups.length : 0;
            if (this.rowdetails && this.showrowdetailscolumn) {
                groupslength++;
            }

            var headerheight = self.columnsheader.height();
            if (this.showfilterrow) headerheight = this.columnsheight;
            var tableheight = this._gettableheight();

            if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > tableheight) {
                if (this.groupable && this.groups.length > 0) {
                    if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {
                        var groupsheight = this.dataview.loadedrootgroups.length * this.rowsheight;
                        if (groupsheight > tableheight) {
                            totalwidth -= this.scrollbarsize + 5;
                            hostwidth -= this.scrollbarsize + 5;
                        }
                    }
                    else {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
                else {
                    if (!this.autoheight) {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
            }

            $.each(this.columns.records, function (i, value) {
                var classname = self.toTP('jqx-grid-column-header') + " " + self.toTP('jqx-widget-header');
                var column = $('<div style="position: absolute; height: 100%;" class="' + classname + '"></div>');

                this.uielement = column;
                if (this.classname != '' && this.classname) {
                    column.addClass(this.classname);
                }

                column.css('z-index', zindex--);
                var desiredwidth = this.width;
                var percentage = false;
                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                    if (this._percentagewidth != undefined) {
                        desiredwidth = parseInt(this._percentagewidth) * hostwidth / 100;
                    }
                    else {
                        desiredwidth = parseInt(this.width) * hostwidth / 100;
                    }
                    percentage = true;
                }

                if (this.width != 'auto' && !this._width && !percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                    }

                    column.width(desiredwidth);
                }
                else if (percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                    }

                    this._percentagewidth = this.width;
                    column.width(desiredwidth);
                    this.width = desiredwidth;
                }
                else {
                    var width = Math.round(totalwidth * (this.text.length / allcharacters.length));
                    if (isNaN(width)) {
                        width = this.minwidth;
                    }

                    if (width < 0) {
                        $element = $('<span>' + this.text + '</span>');
                        $(document.body).append($element);
                        width = 10 + $element.width();
                        $element.remove();
                    }
                    if (width < this.minwidth)
                        width = this.minwidth;
                    if (width > this.maxwidth) {
                        width = this.maxwidth;
                    }

                    this._width = 'auto';
                    this.width = width;
                    desiredwidth = this.width;
                    column.width(this.width);
                }

                if (this.hidden && this.hideable) {
                    column.css('display', 'none');
                }

                var columncontentcontainer = $('<div style="height: 100%; width: 100%;"></div>');

                var columnsmenu = $('<div style="display: none; left: 100%; top: 0%; position: absolute;"></div>');
                var menuinnerelement = $('<div style="width: 100%; height:100%;"></div>');
                menuinnerelement.addClass(self.toTP('jqx-grid-column-menubutton'));
                menuinnerelement.appendTo(columnsmenu);
                columnsmenu.height(headerheight);
                if (!self.enableanimations) {
                    columnsmenu.css('margin-left', -16);
                }

                var sortasc = $('<div class="sortasc" style="float: right; display: none; width: 16px;"><div style="width: 100%; height:100%;"></div></div>');
                var sortdesc = $('<div class="sortdesc" style="float: right; display: none; width: 16px;"><div style="width: 100%; height:100%;"></div></div>');
                var filtericon = $('<div class="filtericon" style="float: right; display: none; width: 16px;"><div style="width: 100%; height:100%;"></div></div>');

                if (!self.autoshowfiltericon && this.filterable) {
                    filtericon.css('display', 'block');
                }

                sortasc.height(headerheight);
                sortdesc.height(headerheight);
                filtericon.height(headerheight);

                sortasc.find('div').addClass(self.toTP('jqx-grid-column-sortascbutton'));
                sortdesc.find('div').addClass(self.toTP('jqx-grid-column-sortdescbutton'));
                filtericon.find('div').addClass(self.toTP('jqx-grid-column-filterbutton'));

                this.sortasc = sortasc[0];
                this.sortdesc = sortdesc[0];
                this.filtericon = filtericon[0];
                this.columnsmenu = columnsmenu[0];
                columnheader[0].cells[i] = column[0];
                columnsmenu.width(self.columnsmenuwidth);
                var showcolumnsmenu = self.columnsmenu;
                var shouldhandledragdrop = false;
                var detailscolumn = false;

                if ((self.groupable && groupslength > 0 && k < groupslength) || (self.rowdetails && k < groupslength)) {
                    k++;
                    showcolumnsmenu &= false;
                    this.sortable = false;
                    this.editable = false;
                    detailscolumn = true;
                }
                else {
                    var columnContent = this.renderer != null ? this.renderer(this.text, this.align) : self._rendercolumnheader(this.text, this.align);
                    if (columnContent == null) {
                        columnContent = self._rendercolumnheader(this.text, this.align);
                    }
                    if (this.renderer != null) columnContent = $(columnContent);
                    showcolumnsmenu &= true;
                    shouldhandledragdrop = true;
                }
                columncontentcontainer.append(columnContent);

                if (columnContent != null) {
                    var iconscontainer = $('<div class="iconscontainer" style="margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;"></div>');
                    columnsmenu.addClass(self.toTP('jqx-widget-header'));
                    iconscontainer.height(headerheight);
                    columncontentcontainer.append(iconscontainer);
                    iconscontainer.append(filtericon);
                    iconscontainer.append(sortasc);
                    iconscontainer.append(sortdesc);
                    sortdesc.addClass(self.toTP('jqx-widget-header'));
                    sortasc.addClass(self.toTP('jqx-widget-header'));
                    filtericon.addClass(self.toTP('jqx-widget-header'));
                    this.iconscontainer = iconscontainer;
                }

                if (showcolumnsmenu) {
                    self._handlecolumnsmenu(self, columncontentcontainer, column, columnsmenu, this);
                    if (!this.menu) columnsmenu.hide();
                }

                column.append(columncontentcontainer);
                columnheader.append(column);

                if (self.groupable && shouldhandledragdrop) {
                    column[0].id = self.dataview.generatekey();
                    if (self._handlecolumnstogroupsdragdrop) {
                        self._handlecolumnstogroupsdragdrop(this, column);
                    }
                    else alert('jqxgrid.grouping.js is not loaded');
                }
                if (self.columnsreorder && this.draggable && self._handlecolumnsdragreorder) {
                    self._handlecolumnsdragreorder(this, column);
                }

                var columnitem = this;
                self.addHandler(column, 'click', function (event) {
                    if (self.sorttogglestates > 0 && self._togglesort) {
                        self._togglesort(columnitem);
                    }
                    event.preventDefault();
                    self._raiseEvent(7, { column: columnitem.getcolumnproperties(), datafield: columnitem.datafield, originalEvent: event });
                });

                if (columnitem.resizable && self.columnsresize && !detailscolumn) {
                    var isTouchDevice = false;
                    var eventname = 'mousemove';
                    if (self.isTouchDevice()) {
                        isTouchDevice = true;
                        eventname = 'touchstart';
                    }
                    self.addHandler(column, eventname, function (event) {
                        var pagex = parseInt(event.pageX);
                        var offset = 5;
                        var columnleft = parseInt(column.offset().left);
                        if (self.hasTransform) {
                            columnleft = $.jqx.utilities.getOffset(column).left;
                        }

                        if (self._handlecolumnsresize) {
                            if (isTouchDevice) {
                                var touches = self.getTouches(event);
                                var touch = touches[0];
                                pagex = touch.pageX;
                                offset = 40;
                                if (pagex >= columnleft + columnitem.width - offset) {
                                    self.resizablecolumn = { columnelement: column, column: columnitem };
                                    column.css('cursor', "col-resize");
                                }
                                else {
                                    column.css('cursor', "");
                                    self.resizablecolumn = null;
                                }
                                return true;
                            }

                            if (pagex >= columnleft + columnitem.width - offset) {
                                if (pagex <= columnleft + columnitem.width + offset) {
                                    self.resizablecolumn = { columnelement: column, column: columnitem };
                                    column.css('cursor', "col-resize");
                                    return false;
                                }
                            }
                            else {
                                column.css('cursor', "");
                                self.resizablecolumn = null;
                            }
                        }
                    });
                }

                column.css('left', left);

                if (!(this.hidden && this.hideable)) {
                    left += desiredwidth;
                }

                if (columnitem.rendered) {
                    columnitem.rendered(columnContent);
                    if (iconscontainer != null) iconscontainer.hide();
                }
            });

            if (left > 0) {
                this.columnsheader.width(2 + left);
            }
            else {
                this.columnsheader.width(left);
            }

            this.columnsrow = columnheader;
            self.columnsheader.append(columnheader);
            if (this.showfilterrow && this._updatefilterrow) {
                columnheader.height(this.columnsheight);
                if (!this.filterrow) {
                    var filterrow = $("<div></div>");
                    filterrow[0].id = "filterrow." + this.element.id;
                    filterrow.height(this.filterrowheight);
                    this.filterrow = filterrow;
                }
                this.columnsheader.append(this.filterrow);
                this._updatefilterrow();
            }

            columnheader.width(left);
            if (this._handlecolumnsdragdrop) {
                this._handlecolumnsdragdrop();
            }
            if (this._handlecolumnsreorder) {
                this._handlecolumnsreorder();
            }
            if (this._rendersortcolumn) {
                this._rendersortcolumn();
            }
            if (this._renderfiltercolumn) {
                this._renderfiltercolumn();
            }
            if (this._handlecolumnsresize) {
                this._handlecolumnsresize();
            }
        },

        _handlecolumnsmenu: function (self, columncontentcontainer, column, columnsmenu, columnitem) {
            self.dragmousedown = null;
            columnsmenu[0].id = self.dataview.generatekey();

            columncontentcontainer.append(columnsmenu);
            column[0].columnsmenu = columnsmenu[0];
            columnitem.element = column[0];

            var menuoffset = 16;

            var showcolumnsmenu = function () {
                if (!columnitem.menu)
                    return false;

                if (!self.resizing) {
                    if (self.menuitemsarray.length > 0) {
                        if (!self.enableanimations) {
                            columnsmenu.css('display', 'block');
                            columnitem.iconscontainer.css('margin-left', '-48px');
                        }
                        else {
                            columnsmenu.css('display', 'block');
                            columnsmenu.stop();
                            columnitem.iconscontainer.stop();
                            columnsmenu.css('margin-left', '0px');
                            columnsmenu.animate({
                                'margin-left': -menuoffset
                            }, 'fast', function () {
                                columnsmenu.css('display', 'block');
                            }
                            );
                            columnitem.iconscontainer.animate({
                                'margin-left': -48
                            }, 'fast');
                        }
                    }
                }
            }

            self.addHandler(column, 'mouseenter', function (event) {
                if (columnitem.menu && self.autoshowcolumnsmenubutton) {
                    showcolumnsmenu();
                }
            });

            if (!self.autoshowcolumnsmenubutton) {
                columnsmenu.css('display', 'block');
                columnitem.iconscontainer.css('margin-left', '-48px');
                columnsmenu.css({ 'margin-left': -menuoffset });
            }

            self.addHandler(column, 'mouseleave', function (event) {
                if (self.menuitemsarray.length > 0 && columnitem.menu) {
                    var menu = $.data(document.body, "contextmenu" + self.element.id);
                    if (menu != undefined && columnsmenu[0].id == menu.columnsmenu.id) {
                        return;
                    }

                    if (self.autoshowcolumnsmenubutton) {
                        if (!self.enableanimations) {
                            columnsmenu.css('display', 'none');
                            columnitem.iconscontainer.css('margin-left', '-32px');
                        }
                        else {
                            columnsmenu.css('margin-left', -menuoffset);
                            columnsmenu.stop();
                            columnitem.iconscontainer.stop();
                            columnsmenu.animate({
                                'margin-left': 0
                            }, 'fast', function () {
                                columnsmenu.css('display', 'none');
                            });
                            columnitem.iconscontainer.animate({
                                'margin-left': -32
                            }, 'fast');
                        }
                    }
                }
            });

            var canopen = true;
            var openedmenu = "";
            var $filtericon = $(columnitem.filtericon);

            self.addHandler(columnsmenu, 'mousedown', function (event) {
                canopen = !$.data(self.gridmenu[0], 'contextMenuOpened' + self.gridmenu[0].id);
                openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                if (openedmenu != null) {
                    openedmenu = openedmenu.column.datafield;
                }
            });

            self.addHandler($filtericon, 'mousedown', function (event) {
                canopen = !$.data(self.gridmenu[0], 'contextMenuOpened' + self.gridmenu[0].id);
                openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                if (openedmenu != null) {
                    openedmenu = openedmenu.column.datafield;
                }
            });

            var opencolumnsmenu = function () {
                if (!columnitem.menu)
                    return false;

                var offset = columnsmenu.offset();
                var top = columnsmenu.height();

                if (!canopen) {
                    canopen = true;

                    if (openedmenu == columnitem.datafield) {
                        self._closemenu();
                        return false;
                    }
                }

                var hostOffset = self.host.offset();
                if (self.hasTransform) {
                    hostOffset = $.jqx.utilities.getOffset(self.host);
                    offset = $.jqx.utilities.getOffset(columnsmenu);
                }

                if (hostOffset.left + self.host.width() > parseInt(offset.left) + self.gridmenu.width()) {
                    self.gridmenu.jqxMenu('open', offset.left, offset.top + top);
                }
                else {
                    self.gridmenu.jqxMenu('open', columnsmenu.width() + offset.left - self.gridmenu.width(), offset.top + top);
                }
                if (self.gridmenu.width() < 100) {
                    self._arrangemenu();
                }
                self._hasOpenedMenu = true;

                var sortascmenuitem = self._getmenuitembyindex(0);
                var sortdescmenuitem = self._getmenuitembyindex(1);
                var sortremovemenuitem = self._getmenuitembyindex(2);
                var groupmenuitem = self._getmenuitembyindex(3);
                var groupremoveitem = self._getmenuitembyindex(4);
                var filteritem = self._getmenuitembyindex(5);

                if (sortascmenuitem != null && sortdescmenuitem != null && sortremovemenuitem != null) {
                    var sortable = columnitem.sortable && self.sortable;
                    self.gridmenu.jqxMenu('disable', sortascmenuitem.id, !sortable);
                    self.gridmenu.jqxMenu('disable', sortdescmenuitem.id, !sortable);
                    self.gridmenu.jqxMenu('disable', sortremovemenuitem.id, !sortable);

                    if (columnitem.datafield) {
                        if (self.sortcolumn == columnitem.datafield) {
                            var sortinfo = self.getsortinformation();
                            if (sortable) {
                                if (sortinfo.sortdirection.ascending) {
                                    self.gridmenu.jqxMenu('disable', sortascmenuitem.id, true);
                                }
                                else {
                                    self.gridmenu.jqxMenu('disable', sortdescmenuitem.id, true);
                                }
                            }
                        }
                        else {
                            self.gridmenu.jqxMenu('disable', sortremovemenuitem.id, true);
                        }
                    }
                }
                if (groupmenuitem != null && groupremoveitem != null) {
                    if (!self.groupable || !columnitem.groupable) {
                        self.gridmenu.jqxMenu('disable', groupremoveitem.id, true);
                        self.gridmenu.jqxMenu('disable', groupmenuitem.id, true);
                    }
                    else {
                        if (self.groups && self.groups.indexOf(columnitem.datafield) != -1) {
                            self.gridmenu.jqxMenu('disable', groupmenuitem.id, true);
                            self.gridmenu.jqxMenu('disable', groupremoveitem.id, false);
                        }
                        else {
                            self.gridmenu.jqxMenu('disable', groupmenuitem.id, false);
                            self.gridmenu.jqxMenu('disable', groupremoveitem.id, true);
                        }
                    }
                }
                if (filteritem != null) {
                    self._updatefilterpanel(self, filteritem, columnitem);
                    var itemscount = 0;
                    if (self.sortable && self._togglesort && self.showsortmenuitems) {
                        itemscount += 3;
                    }

                    if (self.groupable && self.addgroup && self.showgroupmenuitems) {
                        itemscount += 2;
                    }

                    var height = itemscount * 27 + 3;
                    if ($.browser.msie && $.browser.version < 8) {
                        height += 20;
                        $(filteritem).height(190);
                    }

                    if (self.filterable && self.showfiltermenuitems) {
                        if (!columnitem.filterable) {
                            self.gridmenu.height(height);
                            $(filteritem).css('display', 'none');
                        }
                        else {
                            self.gridmenu.height(height + 176);
                            $(filteritem).css('display', 'block');
                        }
                    }
                }
                $.data(document.body, "contextmenu" + self.element.id, { column: columnitem, columnsmenu: columnsmenu[0] });
            }

            self.addHandler($filtericon, 'click', function (event) {
                if (!columnitem.menu)
                    return false;
                if (!self.showfilterrow) {
                    showcolumnsmenu();
                    opencolumnsmenu();
                }
                return false;
            });

            self.addHandler(columnsmenu, 'click', function (event) {
                if (!columnitem.menu)
                    return false;

                opencolumnsmenu();
                return false;
            });
        },

        _removecolumnhandlers: function (columnitem) {
            var self = this;
            var column = $(columnitem.element);
            if (column.length > 0) {
                self.removeHandler(column, 'mouseenter');
                self.removeHandler(column, 'mouseleave');
                var $filtericon = $(columnitem.filtericon);
                self.removeHandler($filtericon, 'mousedown');
                self.removeHandler($filtericon, 'click');
                self.removeHandler(column, 'click');
                if (column[0].columnsmenu) {
                    var columnsmenu = $(column[0].columnsmenu);
                    self.removeHandler(columnsmenu, 'click');
                    self.removeHandler(columnsmenu, 'mousedown');
                }
            }
        },

        _rendercolumnheader: function (text, align) {
            var margin = '4px';
            if (this.columnsheight != 25) {
                margin = (this.columnsheight / 2 - this._columnheight / 2) + 'px';
            }

            if (this.enableellipsis) {
                return $('<div style="overflow: hidden; text-overflow: ellipsis; text-align: ' + align + '; margin-left: 4px; margin-right: 2px; margin-top: ' + margin + ';">' + '<span style="text-overflow: ellipsis; cursor: default;">' + text + '</span>' + '</div>');
            }

            if (align == 'center')
                return $('<div style="text-align: center; margin-top: ' + margin + ';">' + '<a href="#">' + text + '</a>' + '</div>');

            var link = $('<a style="margin-top: ' + margin + '; float: ' + align + ';" href="#">' + text + '</a>');
            return link;
        },

        _renderrows: function (virtualsizeinfo) {
            var self = this;

            if ((this.pageable || this.groupable) && this.autoheight) {
                if (this.table != null && this.table[0].rows != null && this.table[0].rows.length < this.dataview.rows.length) {
                    self.prerenderrequired = true;
                }
            }

            if (!this.pageable && this.autoheight && (this.virtualmode || this.unboundmode)) {
                var recordscount = this.source.totalrecords;
                if (!isNaN(recordscount)) {
                    if (this.table != null && this.table[0].rows != null && this.table[0].rows.length != recordscount) {
                        self.prerenderrequired = true;
                    }
                }
            }
            if (this.autoheight && !self.prerenderrequired) {
                if (this.table && this.table[0].rows) {
                    if (this.table[0].rows.length < this.dataview.records.length) {
                        if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {
                            self.prerenderrequired = true;
                        }
                        else if (!this.pageable) {
                            self.prerenderrequired = true;
                        }
                    }
                    if (this.table[0].rows.length < this.dataview.cachedrecords.length) {
                        if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {
                            self.prerenderrequired = true;
                        }
                        else if (!this.pageable) {
                            self.prerenderrequired = true;
                        }
                    }
                }
            }

            self._prerenderrows(virtualsizeinfo);
            if (self._requiresupdate) {
                self._requiresupdate = false;
                self._updatepageviews();
            }

            var callrenderrows = function () {
                if (self._loading) return;

                if (self.WinJS) {
                    MSApp.execUnsafeLocalFunction(function () {
                        self._rendervisualrows();
                    });
                }
                else self._rendervisualrows();

                if (self.virtualmode && self.showaggregates && self._updateaggregates) {
                    self.refreshaggregates();
                }
            }

            if (this.virtualmode) {
                var loadondemand = function () {
                    if (self.rendergridrows) {
                        var startboundindex = self._startboundindex;
                        if (startboundindex == undefined) startboundindex = 0;
                        var endboundindex = startboundindex + 1 + self.dataview.pagesize;
                        if (startboundindex != null && endboundindex != null) {
                            var isdataadapter = self.source._source ? true : false;
                            var sourcestartindex = !isdataadapter ? self.source.recordstartindex : self.source._source.recordstartindex;
                            if (sourcestartindex != startboundindex) {
                                if (!isdataadapter) {
                                    self.source.recordstartindex = startboundindex;
                                    self.source.recordendindex = endboundindex;
                                }
                                else {
                                    self.source._source.recordstartindex = startboundindex;
                                    self.source._source.recordendindex = endboundindex;
                                }
                                self.updatebounddata();
                            }
                        }
                    }
                }

                if (this.loadondemand) {
                    loadondemand();
                    this.loadondemand = false;
                }
                var ie10 = this._browser == undefined ? this._isIE10() : this._browser;
                if (this.editable && this.editcell && !this.vScrollInstance.isScrolling() && !this.hScrollInstance.isScrolling()) {
                    callrenderrows();
                }
                else {
                    if (ie10 || $.browser.mozilla || (navigator && navigator.userAgent.indexOf('Safari') != -1)) {
                        if (this._scrolltimer != null) {
                            clearTimeout(this._scrolltimer);
                        }
                        this._scrolltimer = setTimeout(function () {
                            callrenderrows();
                        }, 5);
                    }
                    else {
                        callrenderrows();
                    }
                }
            }
            else {
                if (navigator && navigator.userAgent.indexOf('Chrome') == -1 && navigator.userAgent.indexOf('Safari') != -1) {
                    this.updatedelay = 1;
                }
                if (this.touchDevice != undefined && this.touchDevice == true) {
                    this.updatedelay = 5;
                }

                var ie10 = this._browser == undefined ? this._isIE10() : this._browser;

                if (ie10) {
                    this.updatedelay = 5;
                }

                if ((ie10 || $.browser.mozilla) && this.hScrollInstance.isScrolling()) {
                    callrenderrows();
                    return;
                }

                if ($.browser.mozilla && this.updatedelay == 0 && (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling())) {
                    timer = setTimeout(function () {
                        callrenderrows();
                    }, 0.01);
                    return;
                }

                if (this.updatedelay == 0) {
                    callrenderrows();
                }
                else {
                    var timer = $.data(document.body, "Grid" + this.element.id);
                    if (timer != null) {
                        clearTimeout(timer);
                    }
                    if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {
                        timer = setTimeout(function () {
                            callrenderrows();
                        }, this.updatedelay);
                        $.data(document.body, "Grid" + this.element.id, timer);
                    }
                    else {
                        $.data(document.body, "Grid" + this.element.id, null);
                        callrenderrows();
                    }
                }
            }
        },

        _renderhorizontalscroll: function () {
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            if (this.table == null)
                return;

            var rows = this.table[0].rows.length;
            var columnsrow = this.columnsrow;
            var columnstart = this.groupable && this.groups.length > 0 ? this.groups.length : 0;
            var columnend = this.columns.records.length - columnstart;
            var columns = this.columns.records;
            var isempty = this.dataview.rows.length == 0;

            if (isempty) {
                for (var j = 0; j < columnstart + columnend; j++) {
                    var column = columns[j];
                    if (!column.pinned) {
                        {
                            var columncell = columnsrow[0].cells[j];
                            columncell.style.marginLeft = -left + 'px';
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < rows; i++) {
                    var tablerow = this.table[0].rows[i];
                    for (var j = 0; j < columnstart + columnend; j++) {
                        var tablecell = tablerow.cells[j];
                        if (tablecell != undefined) {
                            var column = columns[j];
                            if (!column.pinned) {
                                tablecell.style.marginLeft = -left + 'px';
                                if (i == 0) {
                                    var columncell = columnsrow[0].cells[j];
                                    columncell.style.marginLeft = -left + 'px';
                                }
                            }
                        }
                    }
                }
            }
            //if (rows == 0) {
            //    for (var j = 0; j < columnstart + columnend; j++) {
            //        var column = columns[j];
            //        if (!column.pinned) {
            //            if (i == 0) {
            //                var columncell = columnsrow[0].cells[j];
            //                columncell.style.marginLeft = -left + 'px';
            //            }
            //        }
            //    }
            //}

            if (this.showaggregates) {
                if (this.statusbar[0].cells) {
                    for (var j = 0; j < columnstart + columnend; j++) {
                        var tablecell = this.statusbar[0].cells[j];
                        if (tablecell != undefined) {
                            var column = columns[j];
                            if (!column.pinned) {
                                tablecell.style.marginLeft = -left + 'px';
                            }
                        }
                    }
                }
            }
            if (this.showfilterrow && this.filterrow) {
                if (this.filterrow[0].cells) {
                    for (var j = 0; j < columnstart + columnend; j++) {
                        var tablecell = this.filterrow[0].cells[j];
                        if (tablecell != undefined) {
                            var column = columns[j];
                            if (!column.pinned) {
                                tablecell.style.marginLeft = -left + 'px';
                            }
                        }
                    }
                }
            }

            if (this.editcell && !this.editrow) {
                if (this._showcelleditor && this.editcell.editing) {
                    this._showcelleditor(this.editcell.row, this.getcolumn(this.editcell.column), this.editcell.element, this.editcell.init);
                }
            }
        },

        _updaterowdetailsvisibility: function () {
            if (this.rowdetails) {
                for (var i = 0; i < this._rowdetailselementscache.length; i++) {
                    $(this._rowdetailselementscache[i]).css('display', 'none');
                }
            }
        },

        _getvisualcolumnsindexes: function (left, tablewidth, columnstart, columnend, hasgroups) {
            if (this.rowdetails) {
                return { start: 0, end: columnstart + columnend };
            }

            var xcolumn = 0;
            var hcolumnstart = -1;
            var hcolumnend = columnstart + columnend;
            var haspinnedcolumn = false;

            if (!hasgroups) {
                for (var j = 0; j < columnstart + columnend; j++) {
                    var rendercolumn = j;

                    if (!haspinnedcolumn) {
                        if (this.columns.records[j].pinned) {
                            haspinnedcolumn = true;
                        }
                    }

                    if (!this.columns.records[j].hidden) {
                        xcolumn += this.columns.records[j].width;
                    }

                    if (xcolumn >= left && hcolumnstart == -1) {
                        hcolumnstart = j;
                    }

                    if (xcolumn > tablewidth + left) {
                        hcolumnend = j
                        break;
                    }
                }
            }

            hcolumnend++;
            if (hcolumnend > columnstart + columnend) {
                hcolumnend = columnstart + columnend;
            }

            if (hcolumnstart == -1 || haspinnedcolumn) {
                hcolumnstart = 0;
            }

            return { start: hcolumnstart, end: hcolumnend };
        },

        _rendervisualrows: function () {
            if (!this.virtualsizeinfo)
                return;

            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var verticalscrollvalue = vScrollInstance.value;
            var horizontalscrollvalue = hScrollInstance.value;
            var top = parseInt(verticalscrollvalue);
            var left = parseInt(horizontalscrollvalue);
            var tableheight = this._gettableheight();
            var tablewidth = this._hostwidth != undefined ? this._hostwidth : this.host.width();
            if (this.hScrollBar[0].style.visibility == 'visible') {
                tableheight += this.rowsheight;
            }

            var hasgroups = this.groupable && this.groups.length > 0;
            this.visiblerows = new Array();
            this.hittestinfo = new Array();

            if (this.editcell && this.editrow == undefined) {
                this._hidecelleditor();
            }
            if (this.editrow != undefined) {
                this._hideeditors();
            }

            if (this.virtualmode && !this.pageable) {
                this._pagescache = new Array();
            }

            if (this._pagescache.length == 0) {
                this.dataview.updateview();
                this._loadrows();
            }

            if (this.vScrollBar[0].style.visibility != 'visible') {
                top = 0;
            }

            if (!this.pageable) {
                var pagenum = this._findvisiblerow(top, this._pageviews);

                if (pagenum == -1) {
                    this._clearvisualrows();
                    this._renderemptyrow();
                    this._updaterowdetailsvisibility();
                    return;
                }

                if (pagenum != this.dataview.pagenum) {
                    this.dataview.pagenum = pagenum;
                    this.dataview.updateview();
                    this._loadrows();
                }
                else if (!this._pagescache[this.dataview.pagenum]) {
                    this._loadrows();
                }
            }

            var columnstart = this.groupable && this.groups.length > 0 ? this.groups.length : 0;
            var columnend = this.columns.records.length - columnstart;
            var firstvisiblerow = this._findvisiblerow(top, this._pagescache[this.dataview.pagenum]);
            var rowstorender = this._pagescache[this.dataview.pagenum];
            var startindex = firstvisiblerow;
            if (startindex < 0) startindex = 0;

            var emptyheight = 0;
            var renderedrows = 0;
            var renderedheight = 0;
            var tableoffset = 0;
            var pagesize = this.virtualsizeinfo.visiblerecords;
            var groupslength = this.groupable ? this.groups.length : 0;
            var cellclass = this.toTP('jqx-grid-cell');

            if (this.autoheight && this.pageable) {
                if (!this.groupable) {
                    pagesize = this.dataview.pagesize;
                }
            }
            if (hasgroups) {
                cellclass = ' ' + this.toTP('jqx-grid-group-cell');
            }

            if (this.isTouchDevice()) {
                cellclass += ' ' + this.toTP('jqx-touch');
            }

            if (this.autorowheight) {
                cellclass += ' jqx-grid-cell-wrap'
            }

            var rowheight = this.rowsheight;
            var altrowindex = startindex;
            var rendercellfunc = this._rendercell;
            var enableselection = true;

            var visualcolumnsindexes = this._getvisualcolumnsindexes(left, tablewidth, columnstart, columnend, hasgroups);
            var hcolumnstart = visualcolumnsindexes.start;
            var hcolumnend = visualcolumnsindexes.end;
            if (this.autoheight && this.autorowheight) {
                this._oldpageviewheight = this._pageviews[0].height;
            }

            if (startindex >= 0) {
                this._updaterowdetailsvisibility();
                this._startboundindex = rowstorender != null ? rowstorender[startindex].bounddata.boundindex : 0;
                for (var renderindex = 0; renderindex < pagesize && renderedrows < pagesize; renderindex++) {
                    var renderrow = rowstorender != undefined ? rowstorender[startindex + renderindex] : null;

                    if (renderrow == null) {
                        startindex = -renderindex;
                        if (this._pagescache[this.dataview.pagenum + 1]) {
                            rowstorender = this._pagescache[this.dataview.pagenum + 1];
                            this.dataview.pagenum++;
                        }
                        else {
                            var pageviewslength = this._pageviews.length;
                            do {
                                if (this.dataview.pagenum < this._pageviews.length - 1) {
                                    this.dataview.pagenum++;
                                    rowstorender = undefined;
                                    if (this._pageviews[this.dataview.pagenum].height > 0) {
                                        this.dataview.updateview();
                                        this._loadrows();
                                        rowstorender = this._pagescache[this.dataview.pagenum];
                                    }
                                }
                                else {
                                    rowstorender = undefined;
                                    break;
                                }
                            } while (rowstorender == undefined && this.dataview.pagenum < pageviewslength);
                        }

                        if (rowstorender != undefined) {
                            renderrow = rowstorender[startindex + renderindex]
                        }
                    }

                    if (renderrow != null) {
                        if (renderrow.hidden)
                            continue;

                        this._endboundindex = this._startboundindex + renderindex;
                        if (renderindex == 0) {
                            var topoffset = Math.abs(top - renderrow.top);
                            // this.table.css('top', -topoffset);
                            this.table[0].style.top = -topoffset + 'px';
                            tableoffset = -topoffset;
                        }

                        var tablerow = this.table[0].rows[renderedrows];
                        if (!tablerow) continue;
                        if (parseInt(tablerow.style.height) != renderrow.height) {
                            tablerow.style.height = parseInt(renderrow.height) + 'px';
                        }

                        renderedheight += renderrow.height;
                        var hasdetails = this.rowdetails && renderrow.rowdetails;
                        var showdetails = !renderrow.rowdetailshidden;
                        if (hasdetails && showdetails) {
                            tablerow.style.height = parseInt(renderrow.height - renderrow.rowdetailsheight) + 'px';
                            pagesize++;
                        }

                        var selected = this._isrowselected(enableselection, renderrow);
                        for (var cindex = hcolumnstart; cindex < hcolumnend; cindex++) {
                            var rendercolumn = cindex;
                            this._rendervisualcell(rendercellfunc, cellclass, selected, hasdetails, showdetails, hasgroups, groupslength, tablerow, renderrow, rendercolumn, renderedrows);
                        }
                        if (this.autorowheight && this.autoheight) {
                            var rowheight = this.rowsheight;
                            for (var cindex = hcolumnstart; cindex < hcolumnend; cindex++) {
                                rowheight = Math.max(rowheight, 8 + $(tablerow.cells[cindex].firstChild).height());
                            }
                            tablerow.style.height = parseInt(rowheight) + 'px';
                            this.heights[this._startboundindex + renderindex] = rowheight;
                            if (hasdetails && showdetails) {
                                rowheight += renderrow.rowdetailsheight;
                            }
                            renderrow.height = rowheight;
                        }

                        if (renderrow.group != undefined && this._rendergroup) {
                            this._rendergroup(groupslength, tablerow, renderrow, columnstart, columnend, renderedrows, tablewidth);
                        }

                        this.visiblerows[this.visiblerows.length] = renderrow;
                        this.hittestinfo[this.hittestinfo.length] = { row: renderrow, visualrow: tablerow, details: false };

                        if (hasdetails && showdetails) {
                            renderedrows++;
                            var tablerow = this.table[0].rows[renderedrows];
                            this._renderrowdetails(cellclass, tablerow, renderrow, columnstart, columnend, renderedrows);

                            this.visiblerows[this.visiblerows.length] = renderrow;
                            this.hittestinfo[this.hittestinfo.length] = { row: renderrow, visualrow: tablerow, details: true };
                        }

                        if (renderedheight + tableoffset >= tableheight)
                            break;
                    }
                    else {
                        cansetheight = true;
                        this._clearvisualrow(left, hasgroups, renderedrows, columnstart, columnend);
                        if (renderedheight + emptyheight + tableoffset <= tableheight) {
                            emptyheight += rowheight;
                        }
                    }
                    renderedrows++;
                }
                this._horizontalvalue = left;

                if (emptyheight > 0) {
                    if (this.vScrollBar[0].style.visibility == 'visible') {
                        var tabletop = parseInt(this.table.css('top'));
                        var lastpageview = this._pageviews[this._pageviews.length - 1];
                        var oldmax = vScrollInstance.max;
                        var newmax = lastpageview.top + lastpageview.height - tableheight; //tabletop + this.visiblerows[this.visiblerows.length - 1].top + tableheight; //offset + vScrollInstance.max - emptyheight;
                        if (this.hScrollBar.css('visibility') == 'visible') {
                            newmax += this.scrollbarsize + 20;
                        }

                        if (oldmax != newmax) {
                            if (newmax >= 0) {
                                vScrollInstance.max = newmax;
                                vScrollInstance.setPosition(vScrollInstance.max);
                            }
                        }
                    }
                }
            }

            if (this.autoheight && this.autorowheight) {
                this._pagescache = new Array();
                this._loadrows();
                this.visiblerows = new Array();

                for (var i = 0; i < this._pagescache[this.dataview.pagenum].length; i++) {
                    var row = this._pagescache[this.dataview.pagenum][i];
                    this.visiblerows[this.visiblerows.length] = row;
                    var hasdetails = this.rowdetails && row.rowdetails;
                    var showdetails = !row.rowdetailshidden;
                    if (hasdetails && showdetails) {
                        this.visiblerows[this.visiblerows.length] = row;
                    }
                }

                this._arrange();
            }
            this._renderemptyrow();
        },

        _renderemptyrow: function () {
            if (this._loading) {
                return;
            }

            if (this.dataview.records.length == 0 && this.showemptyrow) {
                var rendered = false;
                if (this.table && this.table.length > 0 && this.table[0].rows && this.table[0].rows.length > 0) {
                    var row = this.table[0].rows[0];
                    for (var i = 0; i < row.cells.length; i++) {
                        var cell = $(row.cells[i]);
                        if (cell.css('display') != 'none' && !rendered) {
                            rendered = true;
                            cell[0].innerHTML = "";
                            var span = $("<span style='white-space: nowrap; float: left; margin-left: 50%; position: relative;'></span>");
                            span.text(this.gridlocalization.emptydatastring);
                            cell.append(span);
                            span.css('left', -span.width() / 2);
                            span.css('top', this._gettableheight() / 2 - span.height() / 2);
                            if ($.browser.msie && $.browser.version < 8) {
                                span.css('margin-left', '0px');
                                span.css('left', this.host.width() / 2 - span.width() / 2);
                            }
                            var top = Math.abs(parseInt(this.table[0].style.top));
                            if (isNaN(top)) top = 0;
                            $(row).height(this._gettableheight() + top);
                            cell.css('margin-left', '0px');
                            cell.width(this.host.width());
                        }
                        cell.addClass(this.toThemeProperty('jqx-grid-empty-cell'));
                    }
                }
            }
        },

        _clearvisualrows: function () {
            var pagesize = this.virtualsizeinfo.visiblerecords;
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            var hasgroups = this.groupable && this.groups.length > 0;

            for (var renderindex = 0; renderindex < pagesize; renderindex++) {
                this._clearvisualrow(left, hasgroups, renderindex, 0, this.columns.records.length);
            }
        },

        _isrowselected: function (enableselection, row) {
            var selected = false;

            if (enableselection && row.bounddata != null) {
                if (this.selectionmode != "singlerow") {
                    if (this.selectedrowindexes.indexOf(row.bounddata.boundindex) != -1) {
                        selected = true;
                    }
                }
                else {
                    if (row.bounddata.boundindex == this.selectedrowindex) {
                        selected = true;
                    }
                }
            }

            return selected;
        },

        _rendervisualcell: function (rendercellfunc, cellclass, selected, hasdetails, showdetails, hasgroups, groupslength, tablerow, renderrow, rendercolumn, renderedrows) {
            var cell = null;
            var column = this.columns.records[rendercolumn];
            if (column.hidden) {
                var tablecell = tablerow.cells[rendercolumn];
                tablecell.innerHTML = "";
                return;
            }

            cellvalue = this._getcellvalue(column, renderrow);
            var tablecell = tablerow.cells[rendercolumn];
            var classname = cellclass;

            if (column.cellclassname != '' && column.cellclassname) {
                classname += ' ' + column.cellclassname;
            }

            if (this.selectionmode.indexOf('cell') != -1) {
                if (this.selectedcells[renderrow.boundindex + '_' + column.datafield]) {
                    selected = true;
                }
                else selected = false;
            }

            var issortcolumn = this.showsortcolumnbackground && this.sortcolumn && column.displayfield == this.sortcolumn;
            if (issortcolumn) {
                classname += ' ' + this.toTP('jqx-grid-cell-sort');
            }

            if (column.filter && this.showfiltercolumnbackground) {
                classname += ' ' + this.toTP('jqx-grid-cell-filter');
            }

            if (column.pinned && this.showpinnedcolumnbackground) {
                classname += ' ' + this.toTP('jqx-grid-cell-pinned');
            }

            if (this.altrows && renderrow.group == undefined) {
                var altrowindex = renderrow.visibleindex;
                if (altrowindex >= this.altstart) {
                    if ((this.altstart + altrowindex) % (1 + this.altstep) == 0) {
                        if (!issortcolumn) {
                            classname += ' ' + this.toTP('jqx-grid-cell-alt');
                        }
                        else classname += ' ' + this.toTP('jqx-grid-cell-sort-alt');

                        if (column.filter && this.showfiltercolumnbackground) {
                            classname += ' ' + this.toTP('jqx-grid-cell-filter-alt');
                        }

                        if (column.pinned && this.showpinnedcolumnbackground) {
                            classname += ' ' + this.toTP('jqx-grid-cell-pinned-alt');
                        }
                    }
                }
            }

            if (rendercolumn <= groupslength) {
                if (hasgroups || this.rowdetails) {
                    var $tablecell = $(tablecell);
                    var cellwidth = this.columns.records[rendercolumn].width;

                    if (parseInt(tablecell.style.width) != cellwidth) {
                        $tablecell.width(cellwidth);
                    }
                }
            }

            var selectedstate = true;
            if (this.rowdetails && hasdetails) {
                if (showdetails && !hasgroups) {
                    classname += ' ' + this.toTP('jqx-grid-details-cell');
                }
                else if (hasgroups) {
                    classname += ' ' + this.toTP('jqx-grid-group-details-cell');
                }

                if (this.showrowdetailscolumn) {
                    if (renderrow.group == undefined && rendercolumn == groupslength) {
                        if (showdetails) {
                            classname += ' ' + this.toTP('jqx-grid-group-expand');
                        }
                        else {
                            classname += ' ' + this.toTP('jqx-grid-group-collapse');
                        }
                        selectedstate = false;
                    }
                }
            }

            if (selected && selectedstate) {
                classname += ' ' + this.toTP('jqx-grid-cell-selected');
                classname += ' ' + this.toTP('jqx-fill-state-pressed');
            }

            if (tablecell.className != classname) {
                tablecell.className = classname;
            }

            if (renderrow.group != undefined) {
                cellvalue = "";
                tablecell.title = "";
                tablecell.innerHTML = "";

                return;
            }
            rendercellfunc(this, column, renderrow, cellvalue, tablecell);
        },

        _rendercell: function (me, column, row, value, tablecell) {
            var lookupkey = value + "_" + column.visibleindex;
            //row.uniqueid + "_" + column.visibleindex;
            if (column.columntype == "number" || column.cellsrenderer != null) {
                var lookupkey = row.uniqueid + "_" + column.visibleindex;
            }

            if (me.editcell && me.editrow == undefined) {
                if (me.editcell.row == row.boundindex && me.editcell.column == column.datafield) {
                    me.editcell.element = tablecell;
                    if (me.editcell.editing) {
                        if (me._showcelleditor) {
                            me._showcelleditor(me.editcell.row, column, me.editcell.element, me.editcell.init);
                            return;
                        }
                    }
                }
            }
            else if (me.editrow != undefined) {
                if (me.editrow == row.boundindex) {
                    me.editcells[column.datafield].element = tablecell;
                    if (me.editcells[column.datafield].editing) {
                        if (me._showcelleditor) {
                            me._showcelleditor(me.editcells[column.datafield].row, column, tablecell, me.editcells[column.datafield].init);
                            return;
                        }
                    }
                }
            }

            var cachedcell = me._cellscache[lookupkey];
            //   var ie10 = me._browser == undefined ? me._isIE10() : me._browser;
            if (cachedcell) {
                if (column.columntype == "checkbox") {
                    if (me.host.jqxCheckBox) {
                        if (value === "") value = null;
                        var empty = tablecell.innerHTML.toString().length == 0;
                        if (tablecell.checkbox && !me.groupable && !empty) {
                            tablecell.checkboxrow = row.boundindex;
                            if (value == "") value = false;
                            if (value == "1") value = true;
                            if (value == "0") value = false;
                            if (value == 1) value = true;
                            if (value == 0) value = false;
                            if (value == 'true') value = true;
                            if (value == 'false') value = false;
                            if (value == null && !column.threestatecheckbox) {
                                value = false;
                            }

                            tablecell.checkbox.jqxCheckBox('_setState', value);
                        }
                        else {
                            me._rendercheckboxcell(me, tablecell, column, row, value);
                        }
                        if (column.cellsrenderer != null) {
                            var newvalue = column.cellsrenderer(row.boundindex, column.datafield, value, defaultcellsrenderer, column.getcolumnproperties());
                            if (newvalue != undefined) {
                                tablecell.innerHTML = newvalue;
                            }
                        }

                        return;
                    }
                }
                else if (column.columntype == "button") {
                    if (me.host.jqxButton) {
                        if (value == "") value = false;
                        if (column.cellsrenderer != null) {
                            value = column.cellsrenderer(row.boundindex, column.datafield, value, defaultcellsrenderer, column.getcolumnproperties());
                        }

                        if (tablecell.innerHTML == "") {
                            tablecell.buttonrow = row.boundindex;
                            tablecell.button = null;
                            me._renderbuttoncell(me, tablecell, column, row, value);
                        }

                        if (tablecell.button && !me.groupable) {
                            tablecell.buttonrow = row.boundindex;
                            tablecell.button.val(value);
                        }
                        else {
                            me._renderbuttoncell(me, tablecell, column, row, value);
                        }
                        return;
                    }
                }

                var cellelement = cachedcell.element;

                if (tablecell.firstChild != undefined && tablecell.firstChild.firstChild != undefined && tablecell.firstChild.firstChild.nodeValue != value) {
                    var nodeValue = tablecell.firstChild.firstChild.nodeValue;
                    if (column.cellsrenderer || column.cellsformat != '' || !nodeValue) {
                        tablecell.innerHTML = cellelement;
                    }
                    else {
                        tablecell.firstChild.firstChild.nodeValue = value;
                    }

                    if (me.enabletooltips) {
                        tablecell.title = cachedcell.title;
                    }
                    return;
                }

                if (tablecell.innerHTML != cellelement) {
                    tablecell.innerHTML = cellelement;
                    if (me.enabletooltips) {
                        tablecell.title = cachedcell.title;
                    }
                }
                return;
            }

            if (me.enabletooltips) {
                if (column.cellsformat != '') {
                    if ($.jqx.dataFormat) {
                        if ($.jqx.dataFormat.isNumber(value)) {
                            value = $.jqx.dataFormat.formatnumber(value, column.cellsformat, me.gridlocalization);
                        }
                        else if ($.jqx.dataFormat.isDate(value)) {
                            value = $.jqx.dataFormat.formatdate(value, column.cellsformat, me.gridlocalization);
                        }
                    }
                }
                tablecell.title = value;
            }

            if (column.columntype == "checkbox") {
                me._rendercheckboxcell(me, tablecell, column, row, value);
                me._cellscache[lookupkey] = { element: "", title: value };
                return;
            }
            else if (column.columntype == "button") {
                if (column.cellsrenderer != null) {
                    value = column.cellsrenderer(row.boundindex, column.datafield, value, defaultcellsrenderer, column.getcolumnproperties());
                }
                me._renderbuttoncell(me, tablecell, column, row, value);
                me._cellscache[lookupkey] = { element: "", title: value };
                return;
            }
            else if (column.columntype == "number") {
                value = row.visibleindex;
            }

            var defaultcellsrenderer = me._defaultcellsrenderer(value, column);
            var cellelement = null;
            if (column.cellsrenderer != null) {
                cellelement = column.cellsrenderer(row.boundindex, column.datafield, value, defaultcellsrenderer, column.getcolumnproperties());
            }
            else {
                cellelement = defaultcellsrenderer;
            }

            if (cellelement == null) {
                cellelement = defaultcellsrenderer;
            }

            if (me.WinJS) {
                WinJS.Utilities.setInnerHTMLUnsafe(tablecell, cellelement);
            }
            else {
                tablecell.innerHTML = cellelement;
            }
            me._cellscache[lookupkey] = { element: tablecell.innerHTML, title: value };
            return true;
        },

        _isIE10: function () {
            if (this._browser == undefined) {
                var browserInfo = $.jqx.utilities.getBrowser();
                if (browserInfo.browser == 'msie' && parseInt(browserInfo.version) > 9)
                    this._browser = true;
                else this._browser = false;
            }
            return this._browser;
        },

        _rendercheckboxcell: function (me, tablecell, column, row, value) {
            if (me.host.jqxCheckBox) {
                var $tablecell = $(tablecell);
                if (value === "") value = null;
                if (value == "1") value = true;
                if (value == "0") value = false;
                if (value == 1) value = true;
                if (value == 0) value = false;
                if (value == 'true') value = true;
                if (value == 'false') value = false;

                if ($tablecell.find('.jqx-checkbox').length == 0) {
                    tablecell.innerHTML = '<div tabIndex=0 style="opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>';
                    $(tablecell.firstChild).jqxCheckBox({ hasInput: false, hasThreeStates: column.threestatecheckbox, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, locked: true, theme: me.theme, checked: value });

                    if (this.editable && column.editable) {
                        $(tablecell.firstChild).jqxCheckBox({ locked: false });
                    }

                    tablecell.checkbox = $(tablecell.firstChild);
                    tablecell.checkboxrow = row.boundindex;
                    var checkinstance = $.data(tablecell.firstChild, "jqxCheckBox").instance;
                    checkinstance.updated = function (event, checked, oldchecked) {
                        if (column.editable) {
                            var totalrows = me.table[0].rows.length;
                            var columnindex = me._getcolumnindex(column.datafield);

                            if (me.editrow == undefined) {
                                if (column.cellbeginedit) {
                                    var beginEdit = column.cellbeginedit(row.boundindex, column.datafield, column.columntype, !checked);
                                    if (beginEdit == false) {
                                        me.setcellvalue(tablecell.checkboxrow, column.datafield, !checked, true);
                                        return;
                                    }
                                }

                                for (var currentCheckbox = 0; currentCheckbox < totalrows; currentCheckbox++) {
                                    var checkboxcell = me.table[0].rows[currentCheckbox].cells[columnindex].firstChild;
                                    $(checkboxcell).jqxCheckBox('destroy');
                                }

                                if (me.editcell && me.editcell.validated == false) {
                                    me.setcellvalue(tablecell.checkboxrow, column.datafield, !checked, true);
                                }
                                else {
                                    me._raiseEvent(17, { rowindex: tablecell.checkboxrow, datafield: column.datafield, value: oldchecked, columntype: column.columntype });
                                    me.setcellvalue(tablecell.checkboxrow, column.datafield, checked, true);
                                    me._raiseEvent(18, { rowindex: tablecell.checkboxrow, datafield: column.datafield, oldvalue: oldchecked, value: checked, columntype: column.columntype });
                                }
                            }
                        }
                    }
                }
                else {
                    tablecell.checkboxrow = row.boundindex;
                    $(tablecell.firstChild).jqxCheckBox('_setState', value);
                }
            }
        },

        _renderbuttoncell: function (me, tablecell, column, row, value) {
            if (me.host.jqxButton) {
                var $tablecell = $(tablecell);
                if (value == "") value = false;
                if ($tablecell.find('.jqx-button').length == 0) {
                    tablecell.innerHTML = '<input type="button" style="opacity: 0.99; position: absolute; top: 0%; left: 0%; padding: 0px; margin-top: 2px; margin-left: 2px;"/>';
                    $(tablecell.firstChild).val(value);
                    $(tablecell.firstChild).attr("hideFocus", "true");
                    $(tablecell.firstChild).jqxButton({ theme: me.theme, height: me.rowsheight - 4, width: column.width - 4 });
                    tablecell.button = $(tablecell.firstChild);
                    tablecell.buttonrow = row.boundindex;
                    $(tablecell.firstChild).bind('click', function (event) {
                        if (column.buttonclick) {
                            column.buttonclick(tablecell.buttonrow, event);
                        }
                    });
                }
                else {
                    tablecell.buttonrow = row.boundindex;
                    $(tablecell.firstChild).val(value);
                }
            }
        },

        _clearvisualrow: function (left, hasgroups, renderedrows, columnstart, columnend) {
            var cellclass = this.toTP('jqx-grid-cell');
            if (hasgroups) {
                cellclass = ' ' + this.toTP('jqx-grid-group-cell');
            }

            var rows = this.table[0].rows;
            for (var j = 0; j < columnstart + columnend; j++) {
                if (rows[renderedrows]) {
                    var tablecell = rows[renderedrows].cells[j];
                    if (tablecell.className != cellclass) {
                        tablecell.className = cellclass;
                    }
                    var columnrecord = this.columns.records[j];
                    if (this._horizontalvalue != left && !columnrecord.pinned) {
                        //      $(tablecell).css('margin-left', -left);
                        var margin = -left;
                        tablecell.style.marginLeft = -left + 'px';
                    }
                    var cellwidth = columnrecord.width;
                    if (cellwidth < columnrecord.minwidth) cellwidth = columnrecord.minwidth;
                    if (cellwidth > columnrecord.maxwidth) cellwidth = columnrecord.maxwidth;

                    if (parseInt(tablecell.style.width) != cellwidth) {
                        $(tablecell).width(cellwidth);
                    }
                    if (tablecell.title != "") {
                        tablecell.title = "";
                    }
                    if (tablecell.innerHTML != "") {
                        tablecell.innerHTML = "";
                    }
                }
            }
            if (rows[renderedrows]) {
                if (parseInt(rows[renderedrows].style.height) != this.rowsheight) {
                    $(rows[renderedrows]).height(this.rowsheight);
                }
            }
        },

        _findgroupstate: function (uniqueid) {
            var group = this._findgroup(uniqueid);
            if (group == null) {
                return false;
            }
            return group.expanded;
        },

        _findgroup: function (uniqueid) {
            var group = null;

            if (this.expandedgroups[uniqueid])
                return this.expandedgroups[uniqueid];

            return group;
        },

        _clearcaches: function () {
            this._columnsbydatafield = new Array();
            this._pagescache = new Array();
            this._pageviews = new Array();
            this._cellscache = new Array();
            this.heights = new Array();
            this.hiddens = new Array();
            this.hiddenboundrows = new Array();
            this.heightboundrows = new Array();
            this.detailboundrows = new Array();
            this.details = new Array();
            this.expandedgroups = new Array();
            this._rowdetailscache = new Array();
            this._rowdetailselementscache = new Array();
            if ($.jqx.dataFormat) {
                $.jqx.dataFormat.cleardatescache();
            }
            this.tableheight = null;
        },

        _getColumnText: function (datafield) {
            if (this._columnsbydatafield == undefined) {
                this._columnsbydatafield = new Array();
            }

            if (this._columnsbydatafield[datafield])
                return this._columnsbydatafield[datafield];

            var columnname = datafield;
            var column = null;
            $.each(this.columns.records, function () {
                if (this.datafield == datafield) {
                    columnname = this.text;
                    column = this;
                    return false;
                }
            });

            this._columnsbydatafield[datafield] = { label: columnname, column: column };
            return this._columnsbydatafield[datafield];
        },

        _getcolumnbydatafield: function (datafield) {
            if (this.__columnsbydatafield == undefined) {
                this.__columnsbydatafield = new Array();
            }

            if (this.__columnsbydatafield[datafield])
                return this.__columnsbydatafield[datafield];

            var columnname = datafield;
            var column = null;
            $.each(this.columns.records, function () {
                if (this.datafield == datafield || this.displayfield == datafield) {
                    columnname = this.text;
                    column = this;
                    return false;
                }
            });

            this.__columnsbydatafield[datafield] = column;
            return this.__columnsbydatafield[datafield];
        },

        isscrollingvertically: function () {
            var isscrolling = (this.vScrollBar.jqxScrollBar('isScrolling'))
            return isscrolling;
        },

        _renderrowdetails: function (cellclass, tablerow, renderrow, columnstart, columnend, renderedrows) {
            var $tablerow = $(tablerow);
            var cellindex = 0;
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth;
            if (this.groupable && this.groups.length > 0) {
                for (var detailsIndex = 0; detailsIndex <= columnend; detailsIndex++) {
                    var tablecell = $(tablerow.cells[detailsIndex]);
                    tablecell[0].innerHTML = "";
                    tablecell[0].className = 'jqx-grid-details-cell';
                }
            }
            var tablecell = $(tablerow.cells[cellindex]);
            tablecell.css('width', '100%');
            $tablerow.height(renderrow.rowdetailsheight);
            tablecell[0].className = cellclass;

            var boundindex = renderrow.bounddata.boundindex;
            var lookupkey = boundindex + "_";

            if (this._rowdetailscache[lookupkey]) {
                var cache = this._rowdetailscache[lookupkey];
                var $detailselement = cache.html;

                if (this.initrowdetails) {
                    if (this._rowdetailscache[lookupkey].element) {
                        var element = this._rowdetailscache[lookupkey].element;
                        var tablecelloffset = tablecell.offset();
                        var gridcontentoffset = this.gridcontent.offset();
                        var top = parseInt(tablecelloffset.top) - parseInt(gridcontentoffset.top);
                        var left = parseInt(tablecelloffset.left) - parseInt(gridcontentoffset.left);

                        $(element).css('top', top);
                        $(element).css('left', left);
                        $(element).css('display', 'block');
                    }
                }
                else {
                    tablecell[0].innerHTML = $detailselement;
                }
                return;
            }

            tablecell[0].innerHTML = '';
            if (!this.enablerowdetailsindent) {
                indent = 0;
            }

            var detailselement = '<div style="overflow: hidden; width: 100%; height: 100%; margin-left: ' + indent + 'px;">' + renderrow.rowdetails + '</div>';
            this._rowdetailscache[lookupkey] = { id: tablerow.id, html: detailselement }
            if (this.initrowdetails) {
                var element = $(detailselement)[0];
                $(this.gridcontent).prepend($(element));

                $(element).css('position', 'absolute');
                $(element).width(this.host.width() - indent);
                $(element).height(tablecell.height());

                var tablecelloffset = tablecell.offset();
                $(element).css('z-index', 2000);
                if (this.isTouchDevice()) {
                    $(element).css('z-index', 99999);
                }
                var tablecelloffset = tablecell.offset();
                var gridcontentoffset = this.gridcontent.offset();
                var top = parseInt(tablecelloffset.top) - parseInt(gridcontentoffset.top);
                var left = parseInt(tablecelloffset.left) - parseInt(gridcontentoffset.left);

                $(element).css('top', top);
                $(element).css('left', left);

                this.content[0].scrollTop = 0;
                this.content[0].scrollLeft = 0;

                this.initrowdetails(boundindex, element, this.element, this.getrowdata(boundindex));

                this._rowdetailscache[lookupkey].element = element;
                this._rowdetailselementscache[boundindex] = element;
            }
            else {
                tablecell[0].innerHTML = detailselement;
            }
        },

        _defaultcellsrenderer: function (value, column) {
            if (column.cellsformat != '') {
                if (!this.enabletooltips) {
                    if ($.jqx.dataFormat) {
                        if ($.jqx.dataFormat.isDate(value)) {
                            value = $.jqx.dataFormat.formatdate(value, column.cellsformat, this.gridlocalization);
                        }
                        else if ($.jqx.dataFormat.isNumber(value)) {
                            value = $.jqx.dataFormat.formatnumber(value, column.cellsformat, this.gridlocalization);
                        }
                    }
                }
            }

            var margin = '4px';
            if (this.rowsheight != 25) {
                margin = (this.rowsheight / 2 - this._cellheight / 2) + 'px';
            }

            if (this.enableellipsis) {
                if (column.cellsalign == 'center') {
                    margin = '5px';
                    return '<div style="text-overflow: ellipsis; overflow: hidden; padding-bottom: 2px; text-align: center; margin-top: ' + margin + ';">' + value + '</div>';
                }

                if (column.cellsalign == 'left')
                    return '<div style="overflow: hidden; text-overflow: ellipsis; padding-bottom: 2px; text-align: left; margin-right: 2px; margin-left: 4px; margin-top: ' + margin + ';">' + value + '</div>';

                if (column.cellsalign == 'right')
                    return '<div style="overflow: hidden;  text-overflow: ellipsis; padding-bottom: 2px; text-align: right; margin-right: 2px; margin-left: 4px; margin-top: ' + margin + ';">' + value + '</div>';
            }

            if (column.cellsalign == 'center') {
                margin = '5px';
                return '<div style="text-align: center; margin-top: ' + margin + ';">' + value + '</div>';
            }
            return '<span style="margin-left: 4px; margin-right: 2px; margin-top: ' + margin + '; float: ' + column.cellsalign + ';">' + value + '</span>';
        },

        _getcellvalue: function (column, row) {
            var value = null;
            value = row.bounddata[column.datafield];
            if (column.displayfield != null) {
                value = row.bounddata[column.displayfield];
            }
 
            if (value == null) value = "";
            return value;
        },

        // gets a cell.
        getcell: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            var value = '';

            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            if (datarow != null) {
                value = datarow[datafield];
            }

            return this._getcellresult(value, row, datafield);
        },
        // gets the rendered cell data.
        getrenderedcell: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            var value = '';

            if (!isNaN(rowindex)) {
                datarow = this.getrenderedrowdata(rowindex);
            }

            if (datarow != null) {
                value = datarow[datafield];
            }
            return this._getcellresult(value, row, datafield);
        },

        _getcellresult: function (value, row, datafield) {
            var column = this.getcolumn(datafield);
            if (column == null || column == undefined) {
                return null;
            }

            var properties = column.getcolumnproperties();

            var hidden = properties.hidden;
            var width = properties.width;
            var pinned = properties.pinned;
            var align = properties.cellsalign;
            var format = properties.cellsformat;
            var height = this.getrowheight(row);

            // invalid row.
            if (height == false) {
                return null;
            }

            return { value: value, row: row, column: datafield, width: width, height: height, hidden: hidden, pinned: pinned, align: align, format: format };
        },

        setcellvalue: function (row, datafield, value, refresh, sync) {
            if (row == null || datafield == null)
                return false;

            var rowindex = parseInt(row);
            var datasourcerowindex = rowindex;

            var datarow = row;
            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            var hasfilter = false;
            if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {
                hasfilter = true;
            }
            if (this.virtualmode) {
                this._pagescache = new Array();
            }

            var oldvalue = "";
            if (datarow != null && datarow[datafield] != value) {
                var column = this._getcolumnbydatafield(datafield);
                var type = 'string';
                var datafields = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null);

                if (datafields) {
                    var foundType = "";
                    $.each(datafields, function () {
                        if (this.name == column.displayfield) {
                            if (this.type) {
                                foundType = this.type;
                            }
                            return false;
                        }
                    });
                    if (foundType)
                        type = foundType;
                }

                oldvalue = datarow[datafield];
                if ($.jqx.dataFormat.isNumber(oldvalue) || type == 'number' || type == 'float' || type == 'int' || type == 'decimal' && type != 'date') {
                    value = new Number(value);
                    value = parseFloat(value);
                    if (isNaN(value)) {
                        value = 0;
                    }
                }
                else if ($.jqx.dataFormat.isDate(oldvalue) || type == 'date') {
                    if (value != '') {
                        var tmp = value;
                        tmp = new Date(tmp);
                        if (tmp != 'Invalid Date' && tmp != null) {
                            value = tmp;
                        }
                        else if (tmp == 'Invalid Date') {
                            tmp = new Date();
                            value = tmp;
                        }
                    }
                }

                datarow[datafield] = value;
                var renderedrow = this.getrenderedrowdata(rowindex, true);
                renderedrow[datafield] = value;

                if (value != null && value.label != null) {
                    var column = this._getcolumnbydatafield(datafield);
                    datarow[column.displayfield] = value.label;
                    renderedrow[column.displayfield] = value.label;
                    datarow[datafield] = value.value;
                    renderedrow[datafield] = value.value;
                    value = value.label;
                }

                if (hasfilter) {
                    if (datarow.dataindex != undefined) {
                        datasourcerowindex = datarow.dataindex;
                        this.dataview.cachedrecords[datarow.dataindex][datafield] = value;
                    }
                }
            }
            else {
                this._renderrows(this.virtualsizeinfo);
                return false;
            }

            if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) {
                if (this.source._source._localdata) {
                    var olditem = this.source._source._localdata()[rowindex];
                    this.source.suspendKO = true;
                    this.source._source._localdata.replace(olditem, $.extend({}, datarow));
                    this.source.suspendKO = false;
                }
            }

            if (this.sortcolumn && this.dataview.sortby) {
                var sortinformation = this.getsortinformation();
                this.dataview.clearsortdata();
                this.dataview.sortby(sortinformation.sortcolumn, sortinformation.sortdirection.ascending);
            }

            this._cellscache = new Array();

            if (this.source.updaterow && (sync == undefined || sync == true)) {
                var success = false;
                var me = this;
                var result = function (param) {
                    if (false == param) {
                        me.setcellvalue(row, datafield, oldvalue, true, false);
                    }
                }
                try {
                    var rowid = this.getrowid(datasourcerowindex);
                    success = this.source.updaterow(rowid, datarow, result);
                    if (success == undefined) success = true;
                }
                catch (error) {
                    success = false;
                    me.setcellvalue(row, datafield, oldvalue, true, false);
                    return;
                }
            }

            //     var rowid = this.getrowid(row);
            var scrollvalue = this.vScrollInstance.value;

            if (this._updating && refresh == undefined) {
                refresh = false;
            }

            if (refresh == true || refresh == undefined) {
                var me = this;
                var updatepager = function () {
                    if (me.pageable && me.updatepagerdetails) {
                        me.updatepagerdetails();
                        if (me.autoheight) {
                            me._updatepageviews();
                        }
                    }
                }

                if (hasfilter) {
                    if (this.autoheight) this.prerenderrequired = true;
                    this.dataview.refresh();
                    this.rendergridcontent(true, false);
                    updatepager();
                    this._renderrows(this.virtualsizeinfo);
                }
                else if (this.sortcolumn) {
                    if (this.autoheight) this.prerenderrequired = true;
                    this.dataview.reloaddata();
                    this.rendergridcontent(true, false);
                    updatepager();
                    this._renderrows(this.virtualsizeinfo);
                }
                else if (this.groupable && this.groups.length > 0) {
                    if (this.autoheight) this.prerenderrequired = true;
                    if (this.pageable) {
                        if (this.groups.indexOf(datafield) != -1) {
                            this.dataview.refresh();
                            this.render(true, true, false, false);
                        }
                        else {
                            this._pagescache = new Array();
                            this._cellscache = new Array();
                            this.dataview.updateview();
                            this._renderrows(this.virtualsizeinfo);
                        }
                    }
                    else {
                        this._pagescache = new Array();
                        this._cellscache = new Array();
                        this.dataview.updateview();
                        this._renderrows(this.virtualsizeinfo);

                        //     this.dataview.updateview();
                   //     this._renderrows(this.virtualsizeinfo);
                    }
                    //                    this.dataview.reloaddata();
                    //                    this.render(true, true, false, false);
                    //                    var datarow = this.getrowdata(row);
                    //                    var renderedrow = this.getrenderedrowdata(rowindex, true);
                    //                    var parentItem = renderedrow.parentItem;
                    //                    this._setgroupstate(parentItem, true, true);
                }
                else {
                    this.dataview.updateview();
                    this._renderrows(this.virtualsizeinfo);
                }
            }
            this.vScrollInstance.setPosition(scrollvalue);
            if (this.showaggregates && this._updatecolumnsaggregates) {
                this._updatecolumnsaggregates();
            }
            if (this.showfilterrow && this.filterable && this.filterrow) {
                var filtertype = this.getcolumn(datafield).filtertype;
                if (filtertype == 'list' || filtertype == 'checkedlist') {
                    this._updatelistfilters(true);
                }
            }

            this._raiseEvent(19, { rowindex: row, datafield: datafield, newvalue: value, oldvalue: oldvalue });
            return true;
        },

        // get cell's bound value.
        getcellvalue: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            if (datarow != null) {
                var value = datarow[datafield];
                return value;
            }

            return null;
        },

        getrows: function () {
            var length = this.dataview.records.length;
            if (this.dataview.sortdata) {
                var rows = new Array();
                for (var i = 0; i < length; i++) {
                    var item = {};
                    item = $.extend({}, this.dataview.sortdata[i].value);
                    rows[i] = item;
                }
                return rows;
            }
            else return this.dataview.records;
        },

        // get getrowdata.
        getrowdata: function (boundindex) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var record = this.dataview.records[boundindex];
                return record;
            }
            else if (boundindex >= 0 && boundindex < this.dataview.bounditems.length) {
                var record = this.dataview.records[boundindex];
                return record;
            }

            return null;
        },
        // get visible row data.
        getrenderedrowdata: function (boundindex, bypasspaging) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var visibleindex = this.getrowvisibleindex(boundindex);
                var record = this.dataview.loadedrecords[visibleindex];
                return record;
            }

            if (boundindex >= 0 && boundindex < this.dataview.bounditems.length) {
                if (this.groupable && this.groups.length > 0) {
                    var visibleindex = this.getrowvisibleindex(boundindex);
                    var record = this.dataview.loadedrecords[visibleindex];
                }
                else {
                    var record = this.dataview.loadedrecords[boundindex];
                    if (this.pageable && (bypasspaging == undefined || bypasspaging == false)) {
                        var record = this.dataview.loadedrecords[this.dataview.pagesize * this.dataview.pagenum + boundindex];
                    }
                }
                return record;
            }

            return null;
        },

        getloadedrows: function () {
            return this.dataview.loadedrecords;
        },

        getvisiblerows: function () {
            if (this.virtualmode) {
                return this.dataview.loadedrecords
            }

            if (this.pageable) {
                var rows = [];
                for (var i = 0; i < this.dataview.pagesize; i++) {
                    var record = this.dataview.loadedrecords[i + (this.dataview.pagesize * this.dataview.pagenum)];
                    if (record == undefined) break;
                    rows.push(record);
                }
                return rows;
            }
            else {
                if (this._startboundindex != undefined && this._endboundindex != undefined) {
                    var rows = [];
                    for (var i = this._startboundindex; i <= this._endboundindex; i++) {
                        var record = this.dataview.loadedrecords[i];
                        if (record == undefined) break;
                        rows.push(record);
                    }
                    return rows;
                }
            }

            return this.dataview.loadedrecords;
        },

        // get row id.
        getrowid: function (boundindex) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var visibleindex = this.getrowvisibleindex(boundindex);
                var record = this.dataview.loadedrecords[visibleindex];
                if (record)
                    return record.uid;
            }
            else {
                var record = null;
                if (boundindex >= 0 && boundindex < this.dataview.bounditems.length) {
                    if (this.groupable && this.groups.length > 0) {
                        var visibleindex = this.getrowvisibleindex(boundindex);
                        var record = this.dataview.loadedrecords[visibleindex];
                    }
                    else {
                        var record = this.dataview.loadedrecords[boundindex];
                    }
                    if (record)
                        return record.uid;
                }
                if (this.dataview.filters.length > 0 && this.filterable) {
                    if (this.groupable && this.groups.length > 0) {
                        var visibleindex = this.getrowvisibleindex(boundindex);
                        var record = this.dataview.cachedrecords[visibleindex];
                    }
                    else {
                        var record = this.dataview.cachedrecords[boundindex];
                    }
                    if (record)
                        if (record.uid != null) {
                            return record.uid;
                        }

                    record.uid = this.dataview.getid(this.dataview.source.id, record, boundindex);
                    return record.uid;
                }
            }

            return null;
        },

        _updateGridData: function () {
            var hasfilter = false;
            if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {
                hasfilter = true;
            }
            if (hasfilter) {
                this.dataview.refresh();
                this.render();
            }
            else if (this.sortcolumn || (this.groupable && this.groups.length > 0)) {
                this.dataview.reloaddata();
                this.render();
            }
            else {
                this._cellscache = new Array();
                this._pagescache = new Array();
                this._renderrows(this.virtualsizeinfo);
            }
            if (this.showfilterrow && this.filterable && this.filterrow) {
                this._updatelistfilters();
            }
        },

        // update row.
        updaterow: function (rowid, rowdata, refresh) {
            if (rowid != undefined && rowdata != undefined) {
                var me = this;
                var success = false;
                me._datachanged = true;
                var applychanges = function (me, rowid, rowdata) {
                    var success = false;
                    if (!$.isArray(rowid)) {
                        success = me.dataview.updaterow(rowid, rowdata);
                    }
                    else {
                        $.each(rowid, function (index, value) {
                            success = me.dataview.updaterow(this, rowdata[index], false);
                        });
                        me.dataview.refresh();
                    }

                    var scrollvalue = me.vScrollInstance.value;
                    if (refresh == undefined || refresh == true) {
                        if (me._updating == undefined || me._updating == false) {
                            me._updateGridData();
                        }
                    }

                    if (me.showaggregates && me._updatecolumnsaggregates) {
                        me._updatecolumnsaggregates();
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            var record = me.dataview.recordsbyid["id" + rowid];
                            var recordindex = me.dataview.records.indexOf(record);
                            var olditem = me.source._source._localdata()[recordindex];
                            me.source.suspendKO = true;
                            me.source._source._localdata.replace(olditem, $.extend({}, record));
                            me.source.suspendKO = false;
                        }
                    }

                    me.vScrollInstance.setPosition(scrollvalue);
                    return success;
                }

                if (this.source.updaterow) {
                    var done = function (result) {
                        if (result == true || result == undefined) {
                            applychanges(me, rowid, rowdata);
                        }
                    }
                    try {
                        success = this.source.updaterow(rowid, rowdata, done);
                        if (success == undefined) success = true;
                    }
                    catch (error) {
                        success = false;
                    }
                }
                else {
                    success = applychanges(me, rowid, rowdata);
                }

                return success;
            }

            return false;
        },

        // delete row.
        deleterow: function (rowid) {
            if (rowid != undefined) {
                this._datachanged = true;
                var success = false;
                var me = this;

                var applychanges = function (me, rowid) {
                    var success = false;
                    var scrollvalue = me.vScrollInstance.value;
                    if (!$.isArray(rowid)) {
                        var success = me.dataview.deleterow(rowid);
                    }
                    else {
                        $.each(rowid, function () {
                            success = me.dataview.deleterow(this, false);
                        });
                        me.dataview.refresh();
                    }
                    if (me._updating == undefined || me._updating == false) {
                        me._render(true, true, false, false);
                        if (me.vScrollBar.css('visibility') != 'visible') {
                            me._arrange();
                            me._updatecolumnwidths();
                            me._updatecellwidths();
                            me._renderrows(me.virtualsizeinfo);
                        }
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            me.source.suspendKO = true;
                            me.source._source._localdata.pop(rowdata);
                            me.source.suspendKO = false;
                        }
                    }

                    me.vScrollInstance.setPosition(scrollvalue);
                    return success;
                }

                if (this.source.deleterow) {
                    var done = function (result) {
                        if (result == true || result == undefined) {
                            applychanges(me, rowid);
                        }
                    }
                    try {
                        this.source.deleterow(rowid, done);
                        if (success == undefined) success = true;
                    }
                    catch (error) {
                        success = false;
                    }
                }
                else {
                    success = applychanges(me, rowid);
                }
                return success;
            }

            return false;
        },

        // add row.
        addrow: function (rowid, rowdata, position) {
            if (rowdata != undefined) {
                this._datachanged = true;
                if (position == undefined) {
                    position = 'last';
                }

                var success = false;
                var me = this;
                var applychanges = function (me, rowid, rowdata, position) {
                    var scrollvalue = me.vScrollInstance.value;
                    var success = false;
                    if (!$.isArray(rowdata)) {
                        success = me.dataview.addrow(rowid, rowdata, position);
                    }
                    else {
                        $.each(rowdata, function (index, value) {
                            var id = null;
                            if (rowid != null && rowid[index] != null) id = rowid[index];
                            success = me.dataview.addrow(id, this, position, false);
                        });
                        me.dataview.refresh();
                    }

                    if (me._updating == undefined || me._updating == false) {
                        me._render(true, true, false, false);
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            me.source.suspendKO = true;
                            me.source._source._localdata.push(rowdata);
                            me.source.suspendKO = false;
                        }
                    }

                    me.vScrollInstance.setPosition(scrollvalue);
                    return success;
                }

                if (this.source.addrow) {
                    var done = function (result) {
                        if (result == true || result == undefined) {
                            applychanges(me, rowid, rowdata, position);
                        }
                    }
                    // undefined or true response code are handled as success. false or exception as failure
                    try {
                        success = this.source.addrow(rowdata.uid, rowdata, position, done);
                        if (success == undefined) success = true;
                    }
                    catch (e) {
                        success = false;
                    }
                    if (success == false) {
                        return false;
                    }
                }
                else {
                    applychanges(this, rowid, rowdata, position);
                }

                return success;
            }
            return false;
        },

        _findvisiblerow: function (value, collection) {
            if (value == undefined) {
                value = parseInt(this.vScrollInstance.value);
            }
            var min = 0;
            if (collection == undefined || collection == null) {
                collection = this.rows.records;
            }

            var max = collection.length;
            while (min <= max) {
                mid = parseInt((min + max) / 2)
                var item = collection[mid];

                if (item == undefined)
                    break;

                if (item.top > value && item.top + item.height > value) {
                    max = mid - 1;
                } else if (item.top < value && item.top + item.height < value) {
                    min = mid + 1;
                } else {
                    return mid;
                    break;
                }
            }

            return -1;
        },

        _updatecellwidths: function () {
            var virtualsizeinfo = this.virtualsizeinfo;
            var me = this;

            if (this.gridcontent == undefined)
                return;

            if (this.table == undefined) {
                this.table = this.gridcontent.find('#contenttable' + this.element.id);
            }

            var hasgroups = this.groupable && this.groups.length > 0;
            var tablewidth = 0;
            var pagesize = virtualsizeinfo.visiblerecords;

            if (this.pageable && this.autoheight) {
                pagesize = this.dataview.pagesize;
                if (this.groupable) {
                    this.dataview.updateview();
                    pagesize = this.dataview.rows.length;
                }
            }

            if (!this.pageable && this.autoheight) {
                pagesize = this.dataview.totalrecords;
            }

            if (this.rowdetails) {
                pagesize += this.dataview.pagesize;
            }

            var columnslength = this.columns.records.length;
            var rows = this.table[0].rows;
            for (var i = 0; i < pagesize; i++) {
                var tablerow = rows[i];
                if (!tablerow)
                    break;

                var cells = tablerow.cells;
                var left = 0;
                for (var j = 0; j < columnslength; j++) {
                    var columnrecord = this.columns.records[j];
                    var width = columnrecord.width;
                    var tablecolumn = $(cells[j]);
                    if (parseInt(tablecolumn[0].style.left) != left) {
                        tablecolumn.css('left', left);
                    }

                    if (parseInt(tablecolumn[0].style.width) != width) {
                        tablecolumn.width(width);
                    }
                    tablecolumn[0].left = left;
                    if (!(columnrecord.hidden && columnrecord.hideable)) {
                        left += width;
                    }
                    else {
                        tablecolumn.css('display', 'none');
                    }
                }

                if (tablewidth == 0) {
                    this.table.width(parseInt(left) + 2);
                    tablewidth = left;
                }
            }

            if (this.showaggregates && this._updateaggregates) {
                this._updateaggregates();
            }
            if (this.showfilterrow && this.filterable && this._updatefilterrowui) {
                this._updatefilterrowui();
            }
            this._updatescrollbarsafterrowsprerender();
        },

        _updatescrollbarsafterrowsprerender: function () {
            var hscrollbarvisibility = this.hScrollBar.css('visibility');
            var offset = 0;
            if (this.vScrollBar.css('visibility') == 'visible') {
                offset = this.scrollbarsize + 3;
            }
            if (this.table.width() - 2 > this.host.width() - offset) {
                if (hscrollbarvisibility != 'visible') {
                    this.hScrollBar.css('visibility', 'visible');
                    this._arrange();
                }

                if (this.vScrollBar.css('visibility') == 'visible') {
                    var vscrollbarmax = this.vScrollBar.jqxScrollBar('max');
                    this.vScrollBar.jqxScrollBar('max', vscrollbarmax + this.scrollbarsize + 4);
                }

                this.hScrollBar.jqxScrollBar('max', offset + this.table.width() - this.host.width());
            }
            else {
                if (hscrollbarvisibility != 'hidden') {
                    this.hScrollBar.css('visibility', 'hidden');
                    this._arrange();
                }
            }
            this._renderhorizontalscroll();
        },

        _prerenderrows: function (virtualsizeinfo) {
            var me = this;
            if (this.prerenderrequired == true) {
                this.prerenderrequired = false;
                if (this.editable && this._destroyeditors) {
                    this._destroyeditors();
                }

                if (this.gridcontent == undefined)
                    return;

                this.gridcontent.find('#contenttable' + this.element.id).remove();
                if (this.table != null) {
                    this.table.remove();
                    this.table = null;
                }

                this.table = $('<div id="contenttable' + this.element.id + '" style="overflow: hidden; position: relative;" height="100%"></div>');
                this.gridcontent.addClass(this.toTP('jqx-grid-content'));
                this.gridcontent.addClass(this.toTP('jqx-widget-content'));
                this.gridcontent.append(this.table);
                var hasgroups = this.groupable && this.groups.length > 0;
                var tablewidth = 0;
                this.table[0].rows = new Array();
                var cellclass = this.toTP('jqx-grid-cell');
                if (hasgroups) {
                    cellclass = ' ' + this.toTP('jqx-grid-group-cell');
                }

                var pagesize = virtualsizeinfo.visiblerecords;

                if (this.pageable && this.autoheight) {
                    pagesize = this.dataview.pagesize;
                    if (this.groupable) {
                        this.dataview.updateview();
                        pagesize = this.dataview.rows.length;
                    }
                }

                if (!this.pageable && this.autoheight) {
                    pagesize = this.dataview.totalrecords;
                }

                if (this.groupable && this.autoheight && !this.pageable) {
                    pagesize = this.dataview.rows.length;
                }

                if (this.rowdetails) {
                    pagesize += this.dataview.pagesize;
                }

                var columnslength = this.columns.records.length;

                if ($.browser.msie && $.browser.version > 8) {
                    this.table.css('opacity', '0.99');
                }

                if ($.browser.mozilla) {
                    this.table.css('opacity', '0.99');
                }

                if (navigator.userAgent.indexOf('Safari') != -1) {
                    this.table.css('opacity', '0.99');
                }

                var isIE7 = $.browser.msie && $.browser.version < 8;
                if (isIE7) {
                    this.host.attr("hideFocus", "true");
                }

                var zindex = this.tableZIndex;
                if (pagesize * columnslength > zindex) {
                    zindex = pagesize * columnslength;
                }
                var isempty = this.dataview.records.length == 0;
                for (var i = 0; i < pagesize; i++) {
                    var tablerow = $('<div style="position: relative;" id="row' + i + this.element.id + '"></div>');
                    var left = 0;
                    this.table[0].rows[i] = tablerow[0];
                    this.table[0].rows[i].cells = new Array();

                    for (var j = 0; j < columnslength; j++) {
                        var columnrecord = this.columns.records[j];
                        var width = columnrecord.width;
                        if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                        if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                        var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%; left: ' + left + 'px; z-index: ' + zindex-- + '; width:' + width + 'px;" class="' + cellclass + '"></div>');
                        tablerow.append(tablecolumn);

                        if (!(columnrecord.hidden && columnrecord.hideable)) {
                            left += width;
                        }
                        else {
                            tablecolumn.css('display', 'none');
                            zindex++;
                        }

                        this.table[0].rows[i].cells[j] = tablecolumn[0];
                    }

                    if (isIE7) {
                        tablerow.css('z-index', zindex--);
                    }

                    if (tablewidth == 0) {
                        this.table.width(parseInt(left) + 2);
                        tablewidth = left;
                    }

                    this.table.append(tablerow);
                    tablerow.height(this.rowsheight);
                }
                if (pagesize == 0) {
                    var left = 0;
                    if (this.showemptyrow) {
                        var tablerow = $('<div style="position: relative;" id="row0' + this.element.id + '"></div>');
                        this.table.append(tablerow);
                        tablerow.height(this.rowsheight);
                        this.table[0].rows[0] = tablerow[0];
                        this.table[0].rows[0].cells = new Array();
                    }
                    for (var j = 0; j < columnslength; j++) {
                        var columnrecord = this.columns.records[j];
                        var width = columnrecord.width;
                        if (this.showemptyrow) {
                            var tablecolumn = $('<div style="position: absolute; height: 100%; left: ' + left + 'px; z-index: ' + zindex-- + '; width:' + width + 'px;" class="' + cellclass + '"></div>');
                            tablecolumn.height(this.rowsheight);
                            tablerow.append(tablecolumn);
                            this.table[0].rows[0].cells[j] = tablecolumn[0];
                        }
                        if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                        if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                        if (!(columnrecord.hidden && columnrecord.hideable)) {
                            left += width;
                        }
                    }
                    this.table.width(parseInt(left) + 2);
                    tablewidth = left;
                }

                this._updatescrollbarsafterrowsprerender();
                // callback when the rendering is complete.
                if (this.rendered) {
                    this.rendered('rows');
                }
            }
        },

        _groupsheader: function () {
            return this.groupable && this.showgroupsheader;
        },

        _arrange: function () {
            var width = null;
            var height = null;
            this.tableheight = null;
            var me = this;
            var isPercentageWidth = false;
            var isPercentageHeight = false;

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                width = this.width;
                isPercentageWidth = true;
            }

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                height = this.height;
                isPercentageHeight = true;
            }

            var baseheight = function () {
                var height = 0;
                var columnheaderheight = me.showheader ? me.columnsheader != null ? me.columnsheader.height() + 2 : 0 : 0;
                height += columnheaderheight;
                if (me.pageable) {
                    height += me.pagerheight;
                }
                if (me._groupsheader()) {
                    height += me.groupsheaderheight;
                }
                if (me.showtoolbar) {
                    height += me.toolbarheight;
                }
                if (me.showstatusbar) {
                    height += me.statusbarheight;
                }
                if (me.hScrollBar[0].style.visibility == 'visible') {
                    height += 20;
                }

                return height;
            }

            if (this.autoheight && this.virtualsizeinfo) {
                if (this.pageable && this.gotopage) {
                    //var newheight = this.host.height() - this._gettableheight();
                    var newheight = 0;
                    height = newheight + (this._pageviews[0] ? this._pageviews[0].height : 0);
                    //if (height == 0) {
                    height += baseheight();
                    //}
                    if (this.showemptyrow && this.dataview.totalrecords == 0) {
                        height += this.rowsheight;
                    }
                }
                else {
                    var newheight = this.host.height() - this._gettableheight();
                    if (this._pageviews.length > 0) {
                        height = newheight + this._pageviews[this._pageviews.length - 1].height + this._pageviews[this._pageviews.length - 1].top;
                        this.vScrollBar[0].style.visibility = 'hidden';
                    }
                    else {
                        height = baseheight();
                        if (this.showemptyrow) {
                            height += this.rowsheight;
                        }
                    }
                }
            }
            else if (this.autoheight) {
                height = this.dataview.totalrecords * this.rowsheight;
                if (this._loading) {
                    height = 250;
                    this.dataloadelement.height(height);
                }
                height += baseheight();

                if (height > 10000)
                    height = 10000;
            }

            var hostBorderSize = this.host.css('border-width');
            if (hostBorderSize == null) {
                hostBorderSize = 0;
            }

            if (width != null) {
                width = parseInt(width);
                this.host.width(this.width);
                if (isPercentageWidth) {
                    width = this.host.width();
                    if (width <= 2) {
                        width = 600;
                        this.host.width(width);
                    }
                    if (!this._oldWidth) {
                        this._oldWidth = width;
                    }
                }
            }
            else this.host.width(250);

            if (height != null) {
                if (!isPercentageHeight) {
                    height = parseInt(height);
                }

                this.host.height(height);
                if (isPercentageHeight && !this.autoheight) {
                    height = this.host.height();
                    if (height == 0) {
                        height = 400;
                        this.host.height(height);
                    }
                    if (!this._oldHeight) {
                        this._oldHeight = height;
                    }
                }
            }
            else this.host.height(250);

            if (this.autoheight) {
                this.tableheight = null;
                this._gettableheight()
            }

            var top = 0;

            if (this.showtoolbar) {
                this.toolbar.width(width);
                this.toolbar.height(this.toolbarheight - 1);
                this.toolbar.css('top', 0);
                top += this.toolbarheight;
                height -= parseInt(this.toolbarheight);
            }
            else this.toolbar.height(0);

            if (this.showstatusbar) {
                this.statusbar.width(width);
                this.statusbar.height(this.statusbarheight - 1);
            }
            else this.statusbar.height(0);

            if (this._groupsheader()) {
                this.groupsheader.width(width);
                this.groupsheader.height(this.groupsheaderheight);
                this.groupsheader.css('top', top);
                var groupsheaderheight = this.groupsheader.height() + 1;
                top += groupsheaderheight;
                if (height > groupsheaderheight) {
                    height -= parseInt(groupsheaderheight);
                }
            }
            else {
                this.groupsheader.width(width);
                this.groupsheader.height(this.groupsheaderheight);
                this.groupsheader.css('top', top);
                this.content.css('top', top + this.groupsheader.height());
            }

            // scrollbar Size.
            var scrollSize = this.scrollbarsize;
            if (isNaN(scrollSize)) {
                scrollSize = parseInt(scrollSize);
                if (isNaN(scrollSize)) {
                    scrollSize = '17px';
                }
                else scrollSize = scrollSize + 'px';
            }

            scrollSize = parseInt(scrollSize);
            var scrollOffset = 4;
            var bottomSizeOffset = 2;
            var rightSizeOffset = 0;

            // right scroll offset. 
            if (this.vScrollBar[0].style.visibility == 'visible') {
                rightSizeOffset = scrollSize + scrollOffset;
            }

            // bottom scroll offset.
            if (this.hScrollBar[0].style.visibility == 'visible') {
                bottomSizeOffset = scrollSize + scrollOffset + 2;
            }

            var pageheight = 0;
            if (this.pageable) {
                pageheight = this.pagerheight;
                bottomSizeOffset += this.pagerheight;
            }
            if (this.showstatusbar) {
                bottomSizeOffset += this.statusbarheight;
                pageheight += this.statusbarheight;
            }

            this.hScrollBar.height(scrollSize);
            this.hScrollBar.css({ top: top + height - scrollOffset - scrollSize - pageheight + 'px', left: '0px' });
            this.hScrollBar.width(width - scrollSize - scrollOffset + 'px');

            if (rightSizeOffset == 0) {
                this.hScrollBar.width(width - 2);
            }

            this.vScrollBar.width(scrollSize);
            this.vScrollBar.height(parseInt(height) - bottomSizeOffset + 'px');
            this.vScrollBar.css({ left: parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px', top: top });
            var vScrollInstance = this.vScrollInstance;
            vScrollInstance.disabled = this.disabled;
            vScrollInstance.refresh();

            var hScrollInstance = this.hScrollInstance;
            hScrollInstance.disabled = this.disabled;
            hScrollInstance.refresh();

            var updateBottomRight = function (me) {
                if ((me.vScrollBar[0].style.visibility == 'visible') && (me.hScrollBar[0].style.visibility == 'visible')) {
                    me.bottomRight[0].style.visibility = 'visible';
                    me.bottomRight.css({ left: 1 + parseInt(me.vScrollBar.css('left')), top: parseInt(me.hScrollBar.css('top')) });
                    me.bottomRight.width(parseInt(scrollSize) + 3);
                    me.bottomRight.height(parseInt(scrollSize) + 4);
                    if (me.showaggregates) {
                        me.bottomRight.css('z-index', 99);
                        me.bottomRight.height(parseInt(scrollSize) + 4 + me.statusbarheight);
                        me.bottomRight.css({ top: parseInt(me.hScrollBar.css('top')) - me.statusbarheight });
                    }
                }
                else me.bottomRight[0].style.visibility = 'hidden';
            }

            updateBottomRight(this);
            this.content.width(width - rightSizeOffset);
            this.content.height(height - bottomSizeOffset + 2);
            this.content.css('top', top);

            if (this.showstatusbar) {
                this.statusbar.css('top', top + height - this.statusbarheight - (this.pageable ? this.pagerheight : 0));
                if (this.showaggregates) {
                    if (this.hScrollBar.css('visibility') == 'visible') {
                        this.hScrollBar.css({ top: top + height - scrollOffset - scrollSize - pageheight + this.statusbarheight + 'px', left: '0px' });
                        this.statusbar.css('top', 1 + top + height - scrollSize - 5 - this.statusbarheight - (this.pageable ? this.pagerheight : 0));
                    }
                    //                    if (this.vScrollBar.css('visibility') == 'visible') {
                    //                        this.vScrollBar.height(this.vScrollBar.height() + this.statusbarheight);
                    //                        this.vScrollBar.css('z-index', 100);
                    //                        this.vScrollBar.jqxScrollBar('_arrange');
                    //                    }
                    updateBottomRight(this);
                }
            }

            if (this.pageable) {
                this.pager.width(width);
                this.pager.height(this.pagerheight);
                this.pager.css('top', top + height - this.pagerheight);
            }
            else this.pager.height(0);

            if (this.table != null) {
                var offset = 0;
                if (this.vScrollBar[0].style.visibility == 'visible') {
                    offset = this.scrollbarsize + 4;
                }

                var newoffset = offset + this.table.width() - this.host.width();

                this.hScrollBar.jqxScrollBar('max', newoffset);
                if (this.hScrollBar[0].style.visibility == 'visible' && newoffset == 0) {
                    this.hScrollBar[0].style.visibility = 'hidden';
                    this._arrange();
                }
            }
            this.dataloadelement.width(this.host.width());
            this.dataloadelement.height(this.host.height());
            this._hostwidth = this.host.width();
        },

        // destroy grid.
        destroy: function () {
            if (this.host.jqxDropDownList) {
                var clearbutton = $($.find('#filterclearbutton' + this.element.id));
                var filterbutton = $($.find('#filterbutton' + this.element.id));
                var condition = $($.find('#filter1' + this.element.id));
                var filteroperator = $($.find('#filter2' + this.element.id));
                var condition2 = $($.find('#filter3' + this.element.id));
                var input1 = $($.find('.filtertext1' + this.element.id));
                var input2 = $($.find('.filtertext2' + this.element.id));
                if (input1.length > 0 && input2.length > 0) {
                    input1.removeClass();
                    input2.removeClass();
                    input1.remove();
                    input2.remove();
                }

                this.removeHandler(clearbutton, 'click');
                this.removeHandler(filterbutton, 'click');
                condition.jqxDropDownList('destroy');
                filteroperator.jqxDropDownList('destroy');
                condition2.jqxDropDownList('destroy');
            }

            if (this.host.jqxMenu) {
                if (this.gridmenu) {
                    this.removeHandler($(document), 'click.menu' + this.element.id);
                    this.removeHandler(this.gridmenu, 'keydown');
                    this.removeHandler(this.gridmenu, 'closed');
                    this.removeHandler(this.gridmenu, 'itemclick');
                    this.gridmenu.jqxMenu('destroy');
                }
            }

            if (this.pagershowrowscombo) {
                this.pagershowrowscombo.jqxDropDownList('destroy');
            }

            if (this.pagerrightbutton) {
                this.removeHandler(this.pagerrightbutton, 'mousedown');
                this.removeHandler(this.pagerrightbutton, 'mouseup');
                this.removeHandler(this.pagerrightbutton, 'click');
                this.pagerrightbutton.jqxButton('destroy');
            }

            if (this.pagerleftbutton) {
                this.removeHandler(this.pagerleftbutton, 'mousedown');
                this.removeHandler(this.pagerleftbutton, 'mouseup');
                this.removeHandler(this.pagerleftbutton, 'click');
                this.pagerleftbutton.jqxButton('destroy');
            }

            this.removeHandler($(document), 'mousedown.resize' + this.element.id);
            this.removeHandler($(document), 'mouseup.resize' + this.element.id);
            this.removeHandler($(document), 'mousemove.resize' + this.element.id);
            this.removeHandler($(document), 'mousedown.reorder' + this.element.id);
            this.removeHandler($(document), 'mouseup.reorder' + this.element.id);
            this.removeHandler($(document), 'mousemove.reorder' + this.element.id);

            this.columns = new $.jqx.collection(this.element);
            this.rows = new $.jqx.collection(this.element);
            this.hScrollInstance.destroy();
            this.vScrollInstance.destroy();
            this.hScrollBar.remove();
            this.vScrollBar.remove();
            this._removeHandlers();
            this._clearcaches();
            this.dataview._clearcaches();
            this.content.removeClass();
            this.content.remove();
            this.content = null;
            this.vScrollBar = null;
            this.hScrollBar = null;
            if (this.gridmenu)
                this.gridmenu = null;

            this.host.removeData();
            this.host.removeClass();
            this.host.remove();
            this.host = null;
        },

        _initializeColumns: function () {
            if (this.columns && this.columns.records) {
                for (var i = 0; i < this.columns.records.length; i++) {
                    this._removecolumnhandlers(this.columns.records[i]);
                }
            }
            var me = this;
            var _columns = new $.jqx.collection(this.element);
            var visibleindex = 0;

            if (!this._columns) {
                this._columns = this.columns;
            }
            else {
                this.columns = this._columns;
            }

            if (this.groupable) {
                $.each(this.groups, function (index) {
                    var column = new jqxGridColumn(me, this);
                    column.visibleindex = visibleindex++;
                    column.width = me.groupindentwidth;
                    _columns.add(column);
                });
            }

            if (this.rowdetails && this.showrowdetailscolumn) {
                var column = new jqxGridColumn(me, this);
                column.visibleindex = visibleindex++;
                column.width = me.groupindentwidth;
                column.pinned = true;
                _columns.add(column);
            }

            $.each(this.columns, function (index) {
                if (me.columns[index] != undefined) {
                    var column = new jqxGridColumn(me, this);
                    column.visibleindex = visibleindex++;
                    if (this.dataField != undefined) {
                        this.datafield = this.dataField;
                    }
                    _columns.add(column);
                }
            });

            this.columns = _columns;
        },

        _initializeRows: function () {
            var _rows = new $.jqx.collection(this.element);
            if (this.rows) {
                this.rows.clear();
            }
            this.rows = _rows;
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            var result = this.host.trigger(event);
            // save the new event arguments.
            arg = event.args;
            return result;
        },

        // performs mouse wheel.
        wheel: function (event, self) {
            if (self.autoheight && self.hScrollBar.css('visibility') != 'visible') {
                event.returnValue = true;
                return true;
            }

            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;

            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }

            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);
                if (result) {
                    if (event.preventDefault)
                        event.preventDefault();

                    if (event.originalEvent != null) {
                        event.originalEvent.mouseHandled = true;
                    }

                    if (event.stopPropagation != undefined) {
                        event.stopPropagation();
                    }
                }

                if (result) {
                    result = false;
                    event.returnValue = result;
                    return result;
                }
                else {
                    return false;
                }
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            if (this.vScrollBar.css('visibility') != 'hidden') {
                var oldvalue = this.vScrollInstance.value;
                if (delta < 0) {
                    this.scrollDown();
                }
                else this.scrollUp();
                var newvalue = this.vScrollInstance.value;
                if (oldvalue != newvalue) {
                    return true;
                }
            }
            else if (this.hScrollBar.css('visibility') != 'hidden') {
                var oldvalue = this.hScrollInstance.value;
                if (delta > 0) {
                    if (this.hScrollInstance.value > 2 * this.horizontalscrollbarstep) {
                        this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * this.horizontalscrollbarstep);
                    }
                    else {
                        this.hScrollInstance.setPosition(0);
                    }
                }
                else {
                    if (this.hScrollInstance.value < this.hScrollInstance.max) {
                        this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * this.horizontalscrollbarstep);
                    }
                    else this.hScrollInstance.setPosition(this.hScrollInstance.max);

                }
                var newvalue = this.hScrollInstance.value;
                if (oldvalue != newvalue) {
                    return true;
                }
            }

            return false;
        },

        // scrolls down.
        scrollDown: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value + this.rowsheight <= vScrollInstance.max) {
                vScrollInstance.setPosition(parseInt(vScrollInstance.value) + this.rowsheight);
            }
            else vScrollInstance.setPosition(vScrollInstance.max);
        },

        // scrolls up.
        scrollUp: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value - this.rowsheight >= vScrollInstance.min) {
                vScrollInstance.setPosition(parseInt(vScrollInstance.value) - this.rowsheight);
            }
            else vScrollInstance.setPosition(vScrollInstance.min);
        },

        _removeHandlers: function () {
            var self = this;
            this.removeHandler(this.vScrollBar, 'valuechanged');
            this.removeHandler(this.hScrollBar, 'valuechanged');
            this.vScrollInstance.valuechanged = null;
            this.hScrollInstance.valuechanged = null;

            var eventname = 'mousedown';

            if (this.isTouchDevice()) {
                eventname = 'touchend';
            }

            this.removeHandler(this.host, 'dblclick');
            this.removeHandler(this.host, eventname);
            this.removeHandler(this.content, 'mousemove', this._mousemovefunc);
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.content, 'mouseenter');
            this.removeHandler(this.content, 'mouseleave');
            this.removeHandler(this.content, 'selectstart.' + this.element.id);
            this.removeHandler(this.host, 'dragstart.' + this.element.id);
            this.removeHandler(this.host, 'keydown.edit' + this.element.id);
            this.removeHandler($(document), 'keydown.edit' + this.element.id);
            this.removeHandler($(document), 'mousemove.selection' + this.element.id);
            this.removeHandler($(document), 'mouseup.selection' + this.element.id);
            if (this.editable) {
                this.removeHandler($(document), 'mousedown.gridedit' + this.element.id);
            }
        },

        _addHandlers: function () {
            var self = this;
            var isTouch = self.isTouchDevice();

            if (!isTouch) {
                this.addHandler(this.host, 'dragstart.' + this.element.id, function (event) {
                    return false;
                });
            }

            if (this.editable) {
                this.addHandler($(document), 'mousedown.gridedit' + this.element.id, function (event) {
                    if (self.editable && self.begincelledit) {
                        if (self.editcell) {
                            if (!self.vScrollInstance.isScrolling() && !self.vScrollInstance.isScrolling()) {
                                var gridOffset = self.host.offset();
                                var gridWidth = self.host.width();
                                var gridHeight = self.host.height();
                                var close = false;
                                if (event.pageY < gridOffset.top || event.pageY > gridOffset.top + gridHeight)
                                    close = true;
                                if (event.pageX < gridOffset.left || event.pageX > gridOffset.left + gridWidth)
                                    close = true;
                                
                                if (close) {
                                    var stopPropagation = false;
                                    switch (self.editcell.columntype) {
                                        case "datetimeinput":
                                            if (self.editcell.editor.jqxDateTimeInput && self.editcell.editor.jqxDateTimeInput('container')[0].style.display == 'block') {
                                                self.editcell.editor.jqxDateTimeInput('close');
                                            }
                                            break;
                                        case "combobox":
                                            if (self.editcell.editor.jqxComboBox && self.editcell.editor.jqxComboBox('container')[0].style.display == 'block') {
                                                self.editcell.editor.jqxComboBox('close');
                                            }
                                            break;
                                        case "dropdownlist":
                                            if (self.editcell.editor.jqxDropDownList && self.editcell.editor.jqxDropDownList('container')[0].style.display == 'block') {
                                                self.editcell.editor.jqxDropDownList('close');
                                            }
                                            break;
                                    }
                                    
                                    self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                }
                            }
                        }
                    }
                });
            }

            this.vScrollInstance.valuechanged = function (params) {
                if (self.virtualsizeinfo) {
                    self._closemenu();
                    self._renderrows(self.virtualsizeinfo);
                    if (!self.pageable && !self.groupable && self.dataview.virtualmode) {
                        if (self.loadondemandupdate) {
                            clearTimeout(self.loadondemandupdate);
                        }

                        self.loadondemandupdate = setTimeout(function () {
                            self.loadondemand = true;
                            self._renderrows(self.virtualsizeinfo);
                        }, 100);
                    }
                    if (isTouch) {
                        self._lastScroll = new Date();
                    }
                }
            }

            this.hScrollInstance.valuechanged = function (params) {
                if (self.virtualsizeinfo) {
                    self._closemenu();
                    var doHScroll = function () {
                        self._renderhorizontalscroll();
                        self._renderrows(self.virtualsizeinfo);
                        if (self.editcell && !self.editrow) {
                            if (self._showcelleditor && self.editcell.editing) {
                                self._showcelleditor(self.editcell.row, self.getcolumn(self.editcell.column), self.editcell.element, self.editcell.init);
                            }
                        }
                    }
                    var ie10 = self._browser == undefined ? self._isIE10() : self._browser;
                    if (navigator && navigator.userAgent.indexOf('Safari') != -1) {
                        if (this._hScrollTimer) clearTimeout(this._hScrollTimer);
                        this._hScrollTimer = setTimeout(function () {
                            doHScroll();
                        }, 1);
                    }
                    else if ($.browser.mozilla || ie10) {
                        if (this._hScrollTimer) clearTimeout(this._hScrollTimer);
                        this._hScrollTimer = setTimeout(function () {
                            doHScroll();
                        }, 0.01);
                    }
                    else {
                        doHScroll();
                    }
                    if (isTouch) {
                        self._lastScroll = new Date();
                    }
                }
            }

            this._mousewheelfunc = this._mousewheelfunc || function (event) {
                if (!self.editcell && self.enablemousewheel) {
                    self.wheel(event, self);
                    return false;
                }
            };

            this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);

            var eventname = 'mousedown';

            if (isTouch) {
                eventname = 'touchend';
            }

            this.addHandler(this.host, eventname, function (event) {
                if (self.isTouchDevice()) {
                    self._newScroll = new Date();
                    if (self._newScroll - self._lastScroll < 500) {
                        return false;
                    }
                    if ($(event.target).ischildof(self.vScrollBar)) {
                        return false;
                    }
                    if ($(event.target).ischildof(self.hScrollBar)) {
                        return false;
                    }
                }
                self._mousedown = new Date();
                var result = self._handlemousedown(event, self);
                if (self.isNestedGrid) {
                    if (!self.resizablecolumn && !self.columnsreorder) {
                        event.stopPropagation();
                    }
                }

                self._lastmousedown = new Date();
                return result;
            });

            if (!isTouch) {
                this.addHandler(this.host, 'dblclick', function (event) {
                    if (self.editable && self.begincelledit && self.editmode == 'dblclick') {
                        self._handledblclick(event, self);
                    }
                    else if ($.browser.msie && $.browser.version < 9) {
                        var result = self._handlemousedown(event, self);
                    }

                    self.mousecaptured = false;
                    self._lastmousedown = new Date();
                    return true;
                });

                this._mousemovefunc = function (event) {
                    if (self._handlemousemove) {
                        return self._handlemousemove(event, self);
                    };
                }

                this.addHandler(this.content, 'mousemove', this._mousemovefunc);

                this.addHandler($(document), 'mousemove.selection' + this.element.id, function (event) {
                    if (self._handlemousemoveselection) {
                        return self._handlemousemoveselection(event, self);
                    }
                });

                this.addHandler($(document), 'mouseup.selection' + this.element.id, function (event) {
                    if (self._handlemouseupselection) {
                        self._handlemouseupselection(event, self);
                    }
                });
            }

            if (document.referrer != "" || window.frameElement) {
                if (window.top != null) {
                    if (window.parent && document.referrer) {
                        parentLocation = document.referrer;
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            if (self._handlemouseupselection) {
                                self._handlemouseupselection(event, self);
                            }
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mouseup', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }
                }
            }

            this.focused = false;

            if (!isTouch) {
                this.addHandler(this.content, 'mouseenter', function (event) {
                    self.focused = true;
                    if (self._overlayElement) {
                        if (self.vScrollInstance.isScrolling() || self.hScrollInstance.isScrolling()) {
                            self._overlayElement[0].style.visibility = 'visible';
                        }
                        else {
                            self._overlayElement[0].style.visibility = 'hidden';
                        }
                    }
                });

                this.addHandler(this.content, 'mouseleave', function (event) {
                    if (self._handlemousemove) {
                        if (self.enablehover) {
                            self._clearhoverstyle();
                        }
                    }
                    if (self._overlayElement) {
                        self._overlayElement[0].style.visibility = 'hidden';
                    }
                    self.focused = false;
                });

                this.addHandler(this.content, 'selectstart.' + this.element.id, function (event) {
                    if (self.enablebrowserselection) {
                        return true;
                    }

                    if (!self.editcell && !self.showfilterrow) {
                        return false;
                    }
                });

                this.addHandler($(document), 'keydown.edit' + this.element.id, function (event) {
                    var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                    if (self.handlekeyboardnavigation) {
                        var handled = self.handlekeyboardnavigation(event);
                        if (handled == true)
                            return false;
                    }

                    if (self.editable && self.editcell) {
                        if (key == 13 || key == 27) {
                            if (self._handleeditkeydown) {
                                result = self._handleeditkeydown(event, self);
                            }
                        }
                    }
                    if (key == 27) {
                        self.mousecaptured = false;
                        if (self.selectionarea.css('visibility') == 'visible') {
                            self.selectionarea.css('visibility', 'hidden');
                        }
                    }
                    if ($.browser.msie && self.focused && !self.isNestedGrid) {
                        var result = true;
                        var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                        if (!self.editcell && self.editable && self.editmode != 'programmatic') {
                            if (self._handleeditkeydown) {
                                result = self._handleeditkeydown(event, self);
                            }
                        }
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            if (!result) {
                                if (event.preventDefault)
                                    event.preventDefault();

                                if (event.stopPropagation != undefined) {
                                    event.stopPropagation();
                                }
                            }
                            return result;
                        }
                    }

                    return true;
                });

                this.addHandler(this.host, 'keydown.edit' + this.element.id, function (event) {
                    var result = true;
                    if (self.handlekeyboardnavigation) {
                        var handled = self.handlekeyboardnavigation(event);
                        if (handled == true) {
                            return false;
                        }
                    }

                    if (self.editable && self.editmode != 'programmatic') {
                        if (self._handleeditkeydown) {
                            result = self._handleeditkeydown(event, self);
                        }
                    }
                    if (!$.browser.msie) {
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            if (self.isNestedGrid) {
                                event.stopPropagation();
                            }
                        }
                    }
                    else if (self.isNestedGrid) {
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            event.stopPropagation();
                        }
                    }

                    if (!result) {
                        if (event.preventDefault)
                            event.preventDefault();

                        if (event.stopPropagation != undefined) {
                            event.stopPropagation();
                        }
                    }
                    return result;
                });
            }
        },

        _hittestrow: function (x, y) {
            if (this.vScrollInstance == null || this.hScrollInstance == null)
                return;

            if (x == undefined) x = 0;
            if (y == undefined) y == 0;

            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var verticalscrollvalue = vScrollInstance.value;
            if (this.vScrollBar.css('visibility') != 'visible') {
                verticalscrollvalue = 0;
            }
            var horizontalscrollvalue = hScrollInstance.value;
            if (this.hScrollBar.css('visibility') != 'visible') {
                horizontalscrollvalue = 0;
            }
            var top = parseInt(verticalscrollvalue) + y;
            var left = parseInt(horizontalscrollvalue) + x;

            if (this.visiblerows == null) {
                return;
            }
            var details = false;
            var hitIndex = this._findvisiblerow(top, this.visiblerows);
            if (hitIndex >= 0) {
                var hitRow = this.visiblerows[hitIndex];
                var hasdetails = this.rowdetails && hitRow.rowdetails;
                var showdetails = !hitRow.rowdetailshidden;
                if (hasdetails) {
                    var prevRow = this.visiblerows[hitIndex - 1];
                    if (prevRow == hitRow) {
                        hitRow = prevRow;
                        hitIndex--;
                    }

                    if (showdetails) {
                        var rowstop = $(this.hittestinfo[hitIndex].visualrow).position().top + parseInt(this.table.css('top'));
                        var rowsheight = $(this.hittestinfo[hitIndex].visualrow).height();
                        if (!(y >= rowstop && y <= rowstop + rowsheight)) {
                            hitIndex++;
                            hitRow = this.visiblerows[hitIndex];
                            details = true;
                        }
                    }
                }
            }
            return { index: hitIndex, row: hitRow, details: details };
        },

        getcellatposition: function (left, top) {
            var self = this;
            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
            var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
            groupsheaderheight += toolbarheight;

            var hostoffset = this.host.offset();
            if (this.hasTransform) {
                hostoffset = $.jqx.utilities.getOffset(this.host);
            }
            var x = left - hostoffset.left;
            var y = top - columnheaderheight - hostoffset.top - groupsheaderheight;
            var rowinfo = this._hittestrow(x, y);
            var row = rowinfo.row;
            var index = rowinfo.index;
            var tablerow = this.table[0].rows[index];

            if (this.dataview && this.dataview.records.length == 0) {
                var rows = this.table[0].rows;
                var rowY = 0;
                for (var i = 0; i < rows.length; i++) {
                    if (y >= rowY && y < rowY + this.rowsheight) {
                        tablerow = rows[i];
                        break;
                    }
                    rowY += this.rowsheight;
                }
                row = { boundindex: i };
            }

            if (tablerow == null)
                return true;

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var cellindex = 0;
            var groupslength = this.groupable ? this.groups.length : 0;

            for (var i = 0; i < tablerow.cells.length; i++) {
                var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                var left = columnleft - horizontalscrollvalue;
                if (self.columns.records[i].pinned) {
                    left = columnleft;
                }

                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    break;
                }
            }

            if (row != null) {
                var column = this._getcolumnat(cellindex);
                return { row: row.boundindex, column: column.datafield, value: this.getcellvalue(row.boundindex, column.datafield) };
            }

            return null;
        },

        _handlemousedown: function (event, self) {
            if (event.target == null) {
                return true;
            }

            if (self.disabled) {
                return true;
            }

            if ($(event.target).ischildof(this.columnsheader)) {
                return true;
            }

            var rightclick;
            if (event.which) rightclick = (event.which == 3);
            else if (event.button) rightclick = (event.button == 2);

            var middleclick;
            if (event.which) middleclick = (event.which == 2);
            else if (event.button) middleclick = (event.button == 1);

            if (middleclick) {
                return true;
            }

            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar))
                    return true;
                if (event.target == this.statusbar[0])
                    return true;
            }

            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
            var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
            groupsheaderheight += toolbarheight;

            var hostoffset = this.host.offset();
            if (this.hasTransform) {
                hostoffset = $.jqx.utilities.getOffset(this.host);
            }

            var bodyOffset = this._getBodyOffset();
            hostoffset.left += bodyOffset.left;
            hostoffset.top += bodyOffset.top;

            var left = parseInt(event.pageX);
            var top = parseInt(event.pageY);

            if (this.isTouchDevice()) {
                var touches = self.getTouches(event);
                var touch = touches[0];
                left = parseInt(touch.pageX);
                top = parseInt(touch.pageY);
                if (self.touchmode == true) {
                    left = parseInt(touch._pageX);
                    top = parseInt(touch._pageY);
                }
            }
            var x = left - hostoffset.left;
            var y = top - columnheaderheight - hostoffset.top - groupsheaderheight;
            var rowinfo = this._hittestrow(x, y);
            if (!rowinfo)
                return;

            if (rowinfo.details)
                return;

            var row = rowinfo.row;
            var index = rowinfo.index;
            var targetclassname = event.target.className;
            var tablerow = this.table[0].rows[index];
            if (tablerow == null) {
                if (self.editable && self.begincelledit) {
                    if (self.editcell) {
                        self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                    }
                }
                return true;
            }

            self.mousecaptured = true;
            self.mousecaptureposition = { left: event.pageX, top: event.pageY - groupsheaderheight, clickedrow: tablerow };

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var cellindex = -1;
            var groupslength = this.groupable ? this.groups.length : 0;

            for (var i = 0; i < tablerow.cells.length; i++) {
                var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                var left = columnleft - horizontalscrollvalue;
                if (self.columns.records[i].pinned) {
                    left = columnleft;
                }

                var column = this._getcolumnat(i);
                if (column != null && column.hidden) {
                    continue;
                }

                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    self.mousecaptureposition.clickedcell = i;
                    break;
                }
            }

            if (row != null && cellindex >= 0) {
                this._raiseEvent(1, { rowindex: row.boundindex, visibleindex: row.visibleindex, group: row.group, rightclick: rightclick, originalEvent: event });
                var column = this._getcolumnat(cellindex);
                var cellvalue = this.getcellvalue(row.boundindex, column.datafield);
                this._raiseEvent(8, { rowindex: row.boundindex, column: column ? column.getcolumnproperties() : null, datafield: column ? column.datafield : null, columnindex: cellindex, value: cellvalue, rightclick: rightclick, originalEvent: event });

                // handle double clicks.
                var _triggeredEvents = false;
                if (this._lastmousedown != null) {
                    if (this._mousedown - this._lastmousedown < 300) {
                        if (this._clickedrowindex == row.boundindex) {
                            this._raiseEvent(22, { rowindex: row.boundindex, visibleindex: row.visibleindex, group: row.group, rightclick: rightclick, originalEvent: event });
                            if (this._clickedcolumn == column.datafield) {
                                this._raiseEvent(23, { rowindex: row.boundindex, column: column ? column.getcolumnproperties() : null, datafield: column ? column.datafield : null, columnindex: cellindex, value: cellvalue, rightclick: rightclick, originalEvent: event });
                            }
                            _triggeredEvents = true;
                            this._clickedrowindex = -1;
                            this._clickedcolumn = null;
                            if (event.isPropagationStopped && event.isPropagationStopped()) {
                                return false;
                            }
                        }
                    }
                }

                if (rightclick) return true;

                if (!_triggeredEvents) {
                    this._clickedrowindex = row.boundindex;
                    this._clickedcolumn = column.datafield;
                }
                // end of handle double clicks.

                var browserInfo = $.jqx.utilities.getBrowser();
                if (browserInfo.browser == 'msie' && parseInt(browserInfo.version) <= 7) {
                    if (cellindex == 0 && this.rowdetails) {
                        targetclassname = "jqx-grid-group-collapse";
                    }
                    if (groupslength > 0) {
                        if (cellindex <= groupslength) {
                            targetclassname = "jqx-grid-group-collapse";
                        }
                    }
                }

                if (targetclassname.indexOf('jqx-grid-group-expand') != -1 || targetclassname.indexOf('jqx-grid-group-collapse') != -1) {
                    if (groupslength > 0 && cellindex < groupslength && this._togglegroupstate) {
                        this._togglegroupstate(row.bounddata, true);
                    }
                    else if (cellindex == groupslength && this.rowdetails && this.showrowdetailscolumn) {
                        this._togglerowdetails(row.bounddata, true);
                        this.gridcontent[0].scrollTop = 0;
                        this.gridcontent[0].scrollLeft = 0;
                    }
                }
                else {
                    if (row.boundindex != -1) {
                        var oldselectedrowindexes = this.selectedrowindexes.slice(0);
                        var isoldcell = false;
                        if (self.selectionmode != 'none' && this._selectrowwithmouse) {
                            if (self.selectionmode == 'multiplecellsadvanced' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplerowsextended') {
                                if (!event.ctrlKey && !event.shiftKey) {
                                    self.selectedrowindexes = new Array();
                                    self.selectedcells = new Array();
                                }
                            }

                            if (self.selectionmode.indexOf('cell') == -1) {
                                if ((self.selectionmode != 'singlerow') || (self.selectedrowindex != row.boundindex && self.selectionmode == 'singlerow')) {
                                    this._applyrowselection(row.boundindex, true, false, null, column.datafield);
                                    this._selectrowwithmouse(self, rowinfo, oldselectedrowindexes, column.datafield, event.ctrlKey, event.shiftKey);
                                }
                            }
                            else {
                                if (column.datafield != null) {
                                    this._selectrowwithmouse(self, rowinfo, oldselectedrowindexes, column.datafield, event.ctrlKey, event.shiftKey);
                                    this._applycellselection(row.boundindex, column.datafield, true, false);
                                }
                            }

                            if (self._oldselectedcell) {
                                if (self._oldselectedcell.datafield == self.selectedcell.datafield && self._oldselectedcell.rowindex == self.selectedcell.rowindex) {
                                    isoldcell = true;
                                }
                            }
                            self._oldselectedcell = self.selectedcell;
                        }
                        if (self.autosavestate) {
                            if (self.savestate) self.savestate();
                        }
                        if (self.editable && self.begincelledit) {
                            var canselect = self.editmode == 'click' || (isoldcell && self.editmode == 'selectedcell');
                            if (self.selectionmode.indexOf('cell') == -1) {
                                if (self.editmode != 'dblclick') {
                                    canselect = true;
                                }
                            }

                            if (canselect) {
                                if (row.boundindex != undefined && column.editable) {
                                    var result = self.begincelledit(row.boundindex, column.datafield, column.defaulteditorvalue);
                                    if (result)
                                        return true;
                                }
                            }

                            if (self.selectionmode.indexOf('cell') != -1) {
                                if (self.editmode == 'selectedcell' && !isoldcell && self.editcell) {
                                    self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                }
                            }
                            return true;
                        }
                    }
                }
            }
            return true;
        },

        _columnPropertyChanged: function (column, key, oldvalue, value) {
        },

        _rowPropertyChanged: function (row, key, oldvalue, value) {
        },

        _serializeObject: function(data)
        {
            if (data == null) return "";
            var str = "";
            $.each(data, function (index) {
                var val = this;
                if (index > 0) str += ', ';
                str += "[";
                var m = 0;
                for (obj in val) {
                    if (m > 0) str += ', ';
                    str += '{' + obj + ":" + val[obj] + '}';
                    m++;
                }
                str += "]";
            });
            return str;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            switch (key) {
                case "showdefaultloadelement":
                    object._builddataloadelement();
                    break;
                case "showfiltermenuitems":
                case "showsortmenuitems":
                case "showgroupmenuitems":
                    object._initmenu();
                    break;
                case "touchmode":
                    if (oldvalue != value) {
                        object._removeHandlers();
                        object.touchDevice = null;
                        object.vScrollBar.jqxScrollBar({ touchMode: value });
                        object.hScrollBar.jqxScrollBar({ touchMode: value });
                        object._updateTouchScrolling();
                        object._addHandlers();
                    }
                    break;
                case "autoshowcolumnsmenubutton":
                    if (oldvalue != value) {
                        object._rendercolumnheaders();
                    }
                    break;
                case "rendergridrows":
                    if (oldvalue != value) {
                        object.updatebounddata();
                    }
                    break;
                case "editmode":
                    if (oldvalue != value) {
                        object._removeHandlers();
                        object._addHandlers();
                    }
                    break;
                case "source":
                    object.virtualsizeinfo = null;
                    if (object.showfilterrow && object.filterable && object.filterrow) {
                        object.filterrow.remove();
                        object._filterrowcache = new Array();
                        object.filterrow = null;
                    }

                    object.updatebounddata();
                    if (object.virtualmode && !object._loading) {
                        object.loadondemand = true;
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "horizontalscrollbarstep":
                case "verticalscrollbarstep":
                case "horizontalscrollbarlargestep":
                case "verticalscrollbarlargestep":
                    this.vScrollBar.jqxScrollBar({ step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep });
                    this.hScrollBar.jqxScrollBar({ step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep });
                    break;
                case "closeablegroups":
                    if (object._initgroupsheader) {
                        object._initgroupsheader();
                    }
                    break;
                case "showgroupsheader":
                    if (oldvalue != value) {
                        object.rendergridcontent();
                    }
                    break;
                case "theme":
                    if (value != oldvalue) {
                        if (object.pager) {
                            object.pager.removeClass();
                            object.pager.addClass(object.toTP('jqx-grid-pager'));
                            object.pager.addClass(object.toTP('jqx-widget-header'));
                            if (object.pageable && object._updatepagertheme) {
                                object._updatepagertheme();
                            }
                        }
                        if (object.groupsheader) {
                            object.groupsheader.removeClass();
                            object.groupsheader.addClass(object.toTP('jqx-grid-groups-header'));
                            object.groupsheader.addClass(object.toTP('jqx-widget-header'));
                        }
                        object.toolbar.removeClass();
                        object.toolbar.addClass(object.toTP('jqx-grid-toolbar'));
                        object.toolbar.addClass(object.toTP('jqx-widget-header'));
                        object.statusbar.removeClass();
                        object.statusbar.addClass(object.toTP('jqx-grid-statusbar'));
                        object.statusbar.addClass(object.toTP('jqx-widget-content'));
                        object.vScrollBar.jqxScrollBar({ theme: object.theme });
                        object.hScrollBar.jqxScrollBar({ theme: object.theme });
                        object.host.removeClass();
                        object.host.addClass(object.toTP('jqx-grid'));
                        object.host.addClass(object.toTP('jqx-reset'));
                        object.host.addClass(object.toTP('jqx-rc-all'));
                        object.host.addClass(object.toTP('jqx-widget'));
                        object.host.addClass(object.toTP('jqx-widget-content'));
                        object.bottomRight.removeClass();
                        object.bottomRight.addClass(object.toTP('jqx-grid-bottomright'));
                        object.toolbar.addClass(object.toTP('jqx-grid-toolbar'));
                        object.toolbar.addClass(object.toTP('jqx-widget-header'));
                        object.statusbar.addClass(object.toTP('jqx-grid-statusbar'));
                        object.statusbar.addClass(object.toTP('jqx-widget-header'));

                        object.render();
                    }
                    break;
                case "showtoolbar":
                case "toolbarheight":
                    if (oldvalue != value) {
                        object._arrange();
                        object.refresh();
                    }
                    break;
                case "showstatusbar":
                case "statusbarheight":
                    if (oldvalue != value) {
                        object._arrange();
                        object.refresh();
                    }
                    break;
                case "filterable":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "autoshowfiltericon":
                case "showfiltercolumnbackground":
                case "showpinnedcolumnbackground":
                case "showsortcolumnbackground":
                    if (oldvalue != value) {
                        object.rendergridcontent();
                    }
                    break;
                case "showrowdetailscolumn":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "scrollbarsize":
                    if (oldvalue != value) {
                        object._arrange();
                    }
                    break;
                case "width":
                    if (oldvalue != value) {
                        if (!this._loading) {
                            if (value != oldvalue) {
                                object._arrange();
                                object._updatecolumnwidths();
                                object._updatecellwidths();
                                object._renderrows(object.virtualsizeinfo);
                            }
                        }
                    }
                    break;
                case "height":
                    if (oldvalue != value) {
                        if (!this._loading) {
                            if (value != oldvalue) {
                                var hasgroups = object.groupable && object.groups.length > 0;
                                var isVScrollHidden = object.vScrollBar.css('visibility') != 'visible';

                                if (!hasgroups) {
                                    object._arrange();
                                    object.virtualsizeinfo = object._calculatevirtualheight();
                                    if (parseInt(value) >= parseInt(oldvalue)) {
                                        object.prerenderrequired = true;
                                    }
                                    if (value != null && value.toString().indexOf('%') != -1) {
                                        object.prerenderrequired = true;
                                    }

                                    object._renderrows(object.virtualsizeinfo);
                                }
                                else {
                                    if (value >= oldvalue) {
                                        object._render(true, false, false);
                                    }
                                    else {
                                        object.rendergridcontent(true, false);
                                    }
                                }

                                if (isVScrollHidden && object.vScrollBar.css('visibility') == 'visible') {
                                    object._arrange();
                                    object._updatecolumnwidths();
                                    object._updatecellwidths();
                                }
                            }
                        }
                    }
                    break;
                case "altrows":
                case "altstart":
                case "altstep":
                    if (oldvalue != value) {
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "groupsheaderheight":
                    if (oldvalue != value) {
                        object._arrange();
                        if (object._initgroupsheader) {
                            object._initgroupsheader();
                        }
                    }
                    break;
                case "pagerheight":
                    if (oldvalue != value)
                        object._initpager();
                    break;
                case "selectedrowindex":
                    object.selectrow(value);
                    break;
                case "selectionmode":
                    if (oldvalue != value) {
                        if (value == 'none') {
                            object.selectedrowindexes = new Array();
                            object.selectedcells = new Array();
                            object.selectedrowindex = -1;
                        }
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "showheader":
                    if (value) {
                        object.columnsheader.css('display', 'block');
                    }
                    else {
                        object.columnsheader.css('display', 'none');
                    }
                    break;
                case "virtualmode":
                    if (oldvalue != value) {
                        object.dataview.virtualmode = object.virtualmode;
                        object.dataview.refresh(false);
                        object._render(false, false, false);
                    }
                    break;
                case "columnsmenu":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "columns":
                    if (object._serializeObject(object._cachedcolumns) !== object._serializeObject(value)) {
                        object._columns = null;
                        object._filterrowcache = [];
                        object.render();
                    }
                    break;
                case "autoheight":
                    if (oldvalue != value) {
                        object._render(false, false, true);
                    }
                    break;
                case "pagesizeoptions":
                case "pageable":
                case "pagesize":
                    if (oldvalue != value) {
                        if (object._loading) {
                            alert(object.loadingerrormessage);
                            return;
                        }
                        if (object._initpager) {
                            object.dataview.pageable = object.pageable;
                            object.dataview.pagenum = 0;
                            object.dataview.pagesize = object._getpagesize();
                            if (object.virtualmode) {
                                object.updatebounddata();
                            }
                            object.dataview.refresh(true);
                            object._initpager();
                            if (key == "pagesizeoptions") {
                                if (value != null && value.length > 0) {
                                    object.pagesize = value[0];
                                    object.dataview.pagesize = value[0];
                                    object.prerenderrequired = true;
                                    object._requiresupdate = true;
                                    object.dataview.pagenum = -1;
                                    object.gotopage(0);
                                }
                            }
                        }
                        object._render(false, false, false);
                    }
                    break;
                case "groups":
                    if (object._serializeObject(oldvalue) !== object._serializeObject(value)) {
                        object.dataview.groups = value;
                        object._refreshdataview();
                        object._render(true, true, true, false);
                    }
                    break;
                case "groupable":
                    if (oldvalue != value) {
                        object.dataview.groupable = object.groupable;
                        object.dataview.pagenum = 0;
                        object.dataview.refresh(false);
                        object._render(false, false, true);
                    }
                    break;
                case "disabled":
                    if (value) {
                        object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    else object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));
                    break;
            }
        }
    });

    function jqxGridColumn(owner, data) {
        this.owner = owner;
        this.datafield = null;
        this.displayfield = null;
        this.text = '';
        this.sortable = true;
        this.hideable = true;
        this.editable = true;
        this.hidden = false;
        this.groupable = true;
        this.renderer = null;
        this.cellsrenderer = null;
        // checkbox column, number column, button column
        this.checkchange = null,
        this.threestatecheckbox = false;
        this.buttonclick = null,
        this.columntype = null;
        this.cellsformat = "";
        this.align = 'left';
        this.cellsalign = 'left';
        this.width = 'auto';
        this.minwidth = 25;
        this.maxwidth = 'auto';
        this.pinned = false;
        this.visibleindex = -1;
        this.filterable = true;
        this.filter = null;
        this.filteritems = [];
        this.resizable = true;
        this.initeditor = null;
        this.createeditor = null;
        this.validation = null;
        this.classname = '';
        this.cellclassname = '';
        this.cellendedit = null;
        this.cellbeginedit = null;
        this.cellvaluechanging = null;
        this.aggregates = null;
        this.aggregatesrenderer = null;
        this.menu = true;
        this.createfilterwidget = null;
        this.filtertype = 'default';
        this.filtercondition = null;
        this.rendered = null;
        this.exportable = true;
        this.draggable = true;

        this.getcolumnproperties = function () {
            return {
                sortable: this.sortable, hideable: this.hideable,
                hidden: this.hidden, groupable: this.groupable, width: this.width, align: this.align, editable: this.editable,
                minwidth: this.minwidth, maxwidth: this.maxwidth, resizable: this.resizable, datafield: this.datafield, text: this.text,
                exportable: this.exportable, cellsalign: this.cellsalign, pinned: this.pinned, cellsformat: this.cellsformat, columntype: this.columntype, classname: this.classname, cellclassname: this.cellclassname, menu: this.menu
            };
        },

        this.setproperty = function (propertyname, value) {
            if (this[propertyname]) {
                var oldvalue = this[propertyname];
                this[propertyname] = value;
                this.owner._columnPropertyChanged(this, propertyname, value, oldvalue);
            }
        }

        this._initfields = function (data) {
            if (data != null) {
                if (data.datafield != undefined) {
                    this.datafield = data.datafield;
                }
                if (data.dataField != undefined) {
                    this.datafield = data.dataField;
                }
                if (data.displayfield != undefined) {
                    this.displayfield = data.displayfield;
                }
                else {
                    this.displayfield = this.datafield;
                }
                if (data.text != undefined) {
                    this.text = data.text;
                }
                if (data.sortable != undefined) {
                    this.sortable = data.sortable;
                }
                if (data.hideable != undefined) {
                    this.hideable = data.hideable;
                }
                if (data.hidden != undefined) {
                    this.hidden = data.hidden;
                }
                if (data.groupable != undefined) {
                    this.groupable = data.groupable;
                }
                if (data.renderer != undefined) {
                    this.renderer = data.renderer;
                }
                if (data.align != undefined) {
                    this.align = data.align;
                }
                if (data.cellsalign != undefined) {
                    this.cellsalign = data.cellsalign;
                }
                if (data.cellsformat != undefined) {
                    this.cellsformat = data.cellsformat;
                }
                if (data.width != undefined) {
                    this.width = data.width;
                }
                if (data.minwidth != undefined) {
                    this.minwidth = data.minwidth;
                }
                if (data.maxwidth != undefined) {
                    this.maxwidth = data.maxwidth;
                }
                if (data.cellsrenderer != undefined) {
                    this.cellsrenderer = data.cellsrenderer;
                }
                if (data.columntype != undefined) {
                    this.columntype = data.columntype;
                }
                if (data.checkchange != undefined) {
                    this.checkchange = data.checkchange;
                }
                if (data.buttonclick != undefined) {
                    this.buttonclick = data.buttonclick;
                }
                if (data.pinned != undefined) {
                    this.pinned = data.pinned;
                }
                if (data.visibleindex != undefined) {
                    this.visibleindex = data.visibleindex;
                }
                if (data.filterable != undefined) {
                    this.filterable = data.filterable;
                }
                if (data.filter != undefined) {
                    this.filter = data.filter;
                }
                if (data.resizable != undefined) {
                    this.resizable = data.resizable;
                }
                if (data.editable != undefined) {
                    this.editable = data.editable;
                }
                if (data.initeditor != undefined) {
                    this.initeditor = data.initeditor;
                }
                if (data.createeditor != undefined) {
                    this.createeditor = data.createeditor;
                }
                if (data.validation != undefined) {
                    this.validation = data.validation;
                }
                if (data.cellbeginedit != undefined) {
                    this.cellbeginedit = data.cellbeginedit;
                }
                if (data.cellendedit != undefined) {
                    this.cellendedit = data.cellendedit;
                }
                if (data.classname != undefined) {
                    this.classname = data.classname;
                }
                if (data.cellclassname != undefined) {
                    this.cellclassname = data.cellclassname;
                }
                if (data.menu != undefined) {
                    this.menu = data.menu;
                }
                if (data.aggregates != undefined) {
                    this.aggregates = data.aggregates;
                }
                if (data.aggregatesrenderer != undefined) {
                    this.aggregatesrenderer = data.aggregatesrenderer;
                }
                if (data.createfilterwidget != undefined) {
                    this.createfilterwidget = data.createfilterwidget;
                }
                if (data.filtertype != undefined) {
                    this.filtertype = data.filtertype;
                }
                if (data.rendered != undefined) {
                    this.rendered = data.rendered;
                }
                if (data.exportable != undefined) {
                    this.exportable = data.exportable;
                }
                if (data.filteritems != undefined) {
                    this.filteritems = data.filteritems;
                }
                if (data.cellvaluechanging != undefined) {
                    this.cellvaluechanging = data.cellvaluechanging;
                }
                if (data.draggable != undefined) {
                    this.draggable = data.draggable;
                }
                if (data.filtercondition != undefined) {
                    this.filtercondition = data.filtercondition;
                }
                if (data.threestatecheckbox != undefined) {
                    this.threestatecheckbox = data.threestatecheckbox;
                }
            }
        }

        this._initfields(data);
        return this;
    }

    function jqxGridRow(owner, data) {
        this.setdata = function (data) {
            if (data != null) {
                this.bounddata = data;
                this.boundindex = data.boundindex;
                this.visibleindex = data.visibleindex;
                this.group = data.group;
                this.parentbounddata = data.parentItem;
                this.uniqueid = data.uniqueid;
                this.level = data.level;
            }
        }
        this.setdata(data);
        this.parentrow = null;
        this.subrows = new Array();
        this.owner = owner;
        this.height = 25;
        this.hidden = false;
        this.rowdetails = null;
        this.rowdetailsheight = 100;
        this.rowdetailshidden = true;
        this.top = -1;

        //        this.getrowinfo = function () {
        //            return { hidden: this.hidden, rowdetails: this.rowdetails, rowdetailsheight: this.rowdetailsheight,
        //                showdetails: !this.rowdetailshidden, height: this.height, index: this.visibleindex
        //            };
        //        }

        this.setrowinfo = function (data) {
            this.hidden = data.hidden;
            this.rowdetails = data.rowdetails;
            this.rowdetailsheight = data.rowdetailsheight;
            this.rowdetailshidden = !data.showdetails;
            this.height = data.height;
        }

        return this;
    }

    $.jqx.collection = function (owner) {
        this.records = new Array();
        this.owner = owner;
        this.updating = false;
        this.beginupdate = function () {
            this.updating = true;
        }

        this.resumeupdate = function () {
            this.updating = false;
        }

        if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (elt /*, from*/) {
                var len = this.length;

                var from = Number(arguments[1]) || 0;
                from = (from < 0)
                    ? Math.ceil(from)
                    : Math.floor(from);
                if (from < 0)
                    from += len;

                for (; from < len; from++) {
                    if (from in this &&
                    this[from] === elt)
                        return from;
                }
                return -1;
            };
        }

        this._raiseEvent = function (args) {
            //var event = new jQuery.Event('collectionchanged');
            //event.owner = this.owner;
            //event.args = args;
            //$(this.owner).trigger(event);
        }

        this.clear = function () {
            this.records = new Array();
        }

        this.replace = function (index, object) {
            this.records[index] = object;
            if (!this.updating) {
                this._raiseEvent({ type: 'replace', element: object });
            }
        }

        this.isempty = function (index) {
            if (this.records[index] == undefined) {
                return true;
            }

            return false;
        }

        this.initialize = function (size) {
            if (size < 1) size = 1;
            this.records[size - 1] = -1;
        }

        this.length = function () {
            return this.records.length;
        }

        this.indexOf = function (object) {
            return this.records.indexOf(object);
        }

        this.add = function (object) {
            if (object == null)
                return false;

            this.records[this.records.length] = object;
            if (!this.updating) {
                this._raiseEvent({ type: 'add', element: object });
            }
            return true;
        }

        this.insertAt = function (index, object) {
            if (index == null || index == undefined)
                return false;

            if (object == null)
                return false;

            if (index >= 0) {
                if (index < this.records.length) {
                    this.records.splice(index, 0, object);
                    if (!this.updating) {
                        this._raiseEvent({ type: 'insert', index: index, element: object });
                    }
                    return true;
                }
                else return this.add(object);
            }

            return false;
        }

        this.remove = function (object) {
            if (object == null || object == undefined)
                return false;

            var index = this.records.indexOf(object);
            if (index != -1) {
                this.records.splice(index, 1);
                if (!this.updating) {
                    this._raiseEvent({ type: 'remove', element: object });
                }
                return true;
            }

            return false;
        }

        this.removeAt = function (index) {
            if (index == null || index == undefined)
                return false;

            if (index < 0)
                return false;

            if (index < this.records.length) {
                var object = this.records[index];
                this.records.splice(index, 1);
                if (!this.updating) {
                    this._raiseEvent({ type: 'removeAt', index: index, element: object });
                }
                return true;
            }

            return false;
        }

        return this;
    }

    $.jqx.dataview = function () {
        this.self = this;
        this.grid = null;
        this.uniqueId = "id";
        this.records = [];
        this.rows = [];
        this.columns = [];
        this.groups = [];
        this.filters = new Array();
        this.updated = null;
        this.update = null;
        this.suspend = false;
        this.pagesize = 0;
        this.pagenum = 0;
        this.totalrows = 0;
        this.totalrecords = 0;
        this.groupable = true;
        this.loadedrecords = [];
        this.loadedrootgroups = [];
        this.loadedgroups = [];
        this.loadedgroupsByKey = [];
        this.virtualmode = true;
        this._cachegrouppages = new Array();
        this.source = null;
        this.changedrecords = new Array();
        this.rowschangecallback = null;

        this.suspendupdate = function () {
            this.suspend = true;
        },

        this.isupdating = function () {
            return this.suspend;
        },

        this.resumeupdate = function (refresh) {
            this.suspend = false;

            if (refresh == undefined)
                refresh = true;

            this.refresh(refresh);
        },

        this.getrecords = function () {
            return this.records;
        },

        this.clearrecords = function () {
            this.recordids = new Array();
        }

        this.databind = function (source, objectuniqueId) {
            var isdataadapter = source._source ? true : false;
            var dataadapter = null;

            if (isdataadapter) {
                dataadapter = source;
                source = source._source;
            }
            else {
                dataadapter = new $.jqx.dataAdapter(source,
                {
                    autoBind: false
                });
            }

            var initadapter = function (me) {
                dataadapter.recordids = [];
                dataadapter.records = new Array();
                dataadapter.cachedrecords = new Array();
                dataadapter.originaldata = new Array();
                dataadapter._options.virtualmode = me.virtualmode;
                dataadapter._options.totalrecords = me.totalrecords;
                dataadapter._options.originaldata = me.originaldata;
                dataadapter._options.recordids = me.recordids;
                dataadapter._options.cachedrecords = new Array();
                dataadapter._options.pagenum = me.pagenum;
                dataadapter._options.pageable = me.pageable;
                if (source.type != undefined) {
                    dataadapter._options.type = source.type;
                }
                if (source.formatdata != undefined) {
                    dataadapter._options.formatData = source.formatdata;
                }
                if (source.contenttype != undefined) {
                    dataadapter._options.contentType = source.contenttype;
                }
                if (source.async != undefined) {
                    dataadapter._options.async = source.async;
                }
                if (source.updaterow != undefined) {
                    dataadapter._options.updaterow = source.updaterow;
                }
                if (source.addrow != undefined) {
                    dataadapter._options.addrow = source.addrow;
                }
                if (source.deleterow != undefined) {
                    dataadapter._options.deleterow = source.deleterow;
                }

                if (me.pagesize == 0) me.pagesize = 10;
                dataadapter._options.pagesize = me.pagesize;
            }

            var updatefromadapter = function (me) {
                me.totalrecords = dataadapter.totalrecords;
                if (!me.virtualmode) {
                    me.originaldata = dataadapter.originaldata;
                    me.records = dataadapter.records;
                    me.recordids = dataadapter.recordids;
                    me.cachedrecords = dataadapter.cachedrecords;
                }
                else {
                    var rendergridrowsobj = { startindex: me.pagenum * me.pagesize, endindex: (me.pagenum * me.pagesize + me.pagesize) };
                    if (source.recordstartindex) {
                        rendergridrowsobj.startindex = source.recordstartindex;
                    }
                    if (source.recordendindex) {
                        rendergridrowsobj.endindex = source.recordendindex;
                    }
                    else if (!me.grid.pageable) {
                        rendergridrowsobj.endindex = rendergridrowsobj.startindex + 100;
                        if (me.grid.autoheight) {
                            rendergridrowsobj.endindex = rendergridrowsobj.startindex + me.totalrecords;
                        }
                    }
                    rendergridrowsobj.data = dataadapter.records;
                    if (me.grid.rendergridrows && me.totalrecords > 0) {
                        source.records = me.grid.rendergridrows(rendergridrowsobj);
                    }

                    if (!source.records || me.totalrecords == 0) {
                        source.records = new Array();
                    }

                    me.originaldata = source.records;
                    me.records = source.records;
                    me.cachedrecords = source.records;
                }
            }

            initadapter(this);

            this.source = source;
            if (objectuniqueId !== undefined) {
                uniqueId = objectuniqueId;
            }

            var me = this;
            switch (source.datatype) {
                case "local":
                case "array":
                default:
                    if (source.localdata == null) {
                        source.localdata = [];
                    }

                    if (source.localdata != null) {
                        dataadapter.unbindBindingUpdate(me.grid.element.id);
                        dataadapter.dataBind();

                        var updateFunc = function (changeType) {
                            if (changeType != undefined) {
                                var dataItem = dataadapter._changedrecords[0];
                                if (dataItem) {
                                    $.each(dataadapter._changedrecords, function () {
                                        var index = this.index;
                                        var item = this.record;

                                        me.grid._updateFromAdapter = true;
                                        switch (changeType) {
                                            case "update":
                                                var id = me.grid.getrowid(index);
                                                me.grid.updaterow(id, item);
                                                me.grid._updateFromAdapter = false;
                                                return;
                                            case "add":
                                                me.grid.addrow(null, item);
                                                me.grid._updateFromAdapter = false;
                                                return;
                                            case "remove":
                                                var id = me.grid.getrowid(index);
                                                me.grid.deleterow(id);
                                                me.grid._updateFromAdapter = false;
                                                return;
                                        }
                                    });
                                }
                            }

                            updatefromadapter(me, changeType);

                            if (changeType == 'updateData') {
                                me.refresh();
                                me.grid._updateGridData();
                            }
                            else {
                                if (source.recordstartindex && this.virtualmode) {
                                    me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                                }
                                else {
                                    me.refresh();
                                }
                                me.update();
                            }
                        }

                        updateFunc();
                        dataadapter.bindBindingUpdate(me.grid.element.id, updateFunc);
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                case "csv":
                case "tab":
                    {
                        if (source.localdata != null) {
                            dataadapter.unbindBindingUpdate(me.grid.element.id);
                            dataadapter.dataBind();

                            var updateFunc = function (changeType) {
                                updatefromadapter(me);

                                if (changeType == 'updateData') {
                                    me.refresh();
                                    me.grid._updateGridData();
                                }
                                else {
                                    if (source.recordstartindex) {
                                        me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                                    }
                                    else {
                                        me.refresh();
                                    }

                                    me.update();
                                }
                            }

                            updateFunc();
                            dataadapter.bindBindingUpdate(me.grid.element.id, updateFunc);
                            return;
                        }

                        var filterdata = {};
                        var filterslength = 0;
                        var postdata = {};
                        for (var x = 0; x < this.filters.length; x++) {
                            var filterdatafield = this.filters[x].datafield;
                            var filter = this.filters[x].filter;
                            var filters = filter.getfilters();
                            postdata[filterdatafield + "operator"] = filter.operator;
                            for (var m = 0; m < filters.length; m++) {
                                filters[m].datafield = filterdatafield;
                                postdata["filtervalue" + filterslength] = filters[m].value;
                                postdata["filtercondition" + filterslength] = filters[m].condition;
                                postdata["filteroperator" + filterslength] = filters[m].operator;
                                postdata["filterdatafield" + filterslength] = filterdatafield;

                                filterslength++;
                            }
                        }

                        postdata.filterscount = filterslength;
                        postdata.groupscount = me.groups.length;
                        for (var x = 0; x < me.groups.length; x++) {
                            postdata["group" + x] = me.groups[x];
                        }

                        if (source.recordstartindex == undefined) source.recordstartindex = 0;
                        if (source.recordendindex == undefined || source.recordendindex == 0) {
                            if (me.grid.height && me.grid.height.toString().indexOf('%') == -1) {
                                source.recordendindex = parseInt(me.grid.height) / me.grid.rowsheight;
                                source.recordendindex += 2;
                            }
                            else {
                                source.recordendindex = $(window).height() / me.grid.rowsheight;
                            }
                        }

                        $.extend(postdata, { sortdatafield: me.sortfield, sortorder: me.sortfielddirection, pagenum: me.pagenum, pagesize: me.grid.pagesize, recordstartindex: source.recordstartindex, recordendindex: source.recordendindex });

                        if (dataadapter._options.data) {
                            $.extend(dataadapter._options.data, postdata);
                        }
                        else {
                            if (source.data) {
                                $.extend(postdata, source.data);
                            }
                            dataadapter._options.data = postdata;
                        }

                        var updateFunc = function () {
                            updatefromadapter(me);

                            if (source.recordstartindex) {
                                me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                            }
                            else {
                                me.refresh();
                            }

                            me.update();
                        }

                        dataadapter.unbindDownloadComplete(me.grid.element.id);
                        dataadapter.bindDownloadComplete(me.grid.element.id, updateFunc);
                        dataadapter.dataBind();
                    }
            }
        }

        this.getid = function (id, record, index) {
            if ($(id, record).length > 0) {
                return $(id, record).text();
            }

            if (id) {
                if (id.toString().length > 0) {
                    var result = $(record).attr(id);
                    if (result != null && result.toString().length > 0) {
                        return result;
                    }
                }
            }

            return index;
        }

        this.getvaluebytype = function (value, datafield) {
            var originalvalue = value;
            if (datafield.type == 'date') {
                var tmpvalue = new Date(value);

                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    if ($.jqx.dataFormat) {
                        value = $.jqx.dataFormat.tryparsedate(value);
                    }
                    else value = tmpvalue;
                }
                else {
                    value = tmpvalue;
                }

                if (value == null) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'float') {
                var value = parseFloat(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'int') {
                var value = parseInt(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'bool') {
                if (value != null) {
                    if (value.toLowerCase() == 'false') {
                        value = false;
                    }
                    else if (value.toLowerCase() == 'true') {
                        value = true;
                    }
                }

                if (value == 1) {
                    value = true;
                }
                else if (value == 0) {
                    value = false;
                }
                else value = '';
            }

            return value;
        }

        this.setpaging = function (args) {
            if (args.pageSize != undefined) {
                this.pagesize = args.pageSize;
            }

            if (args.pageNum != undefined) {
                this.pagenum = Math.min(args.pageNum, Math.ceil(this.totalrows / this.pagesize));
            }

            this.refresh();
        }

        this.getpagingdetails = function () {
            return { pageSize: this.pagesize, pageNum: this.pagenum, totalrows: this.totalrows };
        }

        this._clearcaches = function () {
            this.sortcache = {};
            this.sortdata = null;
            this.changedrecords = new Array();
            this.records = new Array();
            this.rows = new Array();
            this.cacheddata = new Array();
            this.originaldata = new Array();
            this.bounditems = new Array();
            this.loadedrecords = new Array();
            this.loadedrootgroups = new Array();
            this.loadedgroups = new Array();
            this.loadedgroupsByKey = new Array();
            this._cachegrouppages = new Array();
            this.recordsbyid = new Array();
            this.cachedrecords = new Array();
            this.recordids = new Array();
        }

        this.addfilter = function (field, filter) {
            var filterindex = -1;
            for (var m = 0; m < this.filters.length; m++) {
                if (this.filters[m].datafield == field) {
                    filterindex = m;
                    break;
                }
            }

            if (filterindex == -1) {
                this.filters[this.filters.length] = { filter: filter, datafield: field };
            }
            else {
                this.filters[filterindex] = { filter: filter, datafield: field };
            }
        }

        this.removefilter = function (field) {
            for (var i = 0; i < this.filters.length; i++) {
                if (this.filters[i].datafield == field) {
                    this.filters.splice(i, 1);
                    break;
                }
            }
        }

        this.getItemFromIndex = function (i) {
            return this.records[i];
        }

        this.updaterow = function (rowid, rowdata, refresh) {
            if (rowdata != undefined && rowid != undefined) {

                rowdata.uid = rowid;
                if (!(rowdata[this.source.id])) {
                    rowdata[this.source.id] = rowdata.uid;
                }

                var record = this.recordsbyid["id" + rowid];
                var recordindex = this.records.indexOf(record);
                this.records[recordindex] = rowdata;
                if (this.cachedrecords) {
                    this.cachedrecords[recordindex] = rowdata;
                }
                if (refresh == true || refresh == undefined) {
                    this.refresh();
                }
                this.changedrecords[rowdata.uid] = { Type: "Update", OldData: record, Data: rowdata };
                return true;
            }
            else if (this.filters && this.filters.length > 0) {
                var records = this.cachedrecords;
                var record = null;
                var recordindex = -1;
                for (var i = 0; i < records.length; i++) {
                    if (records[i].uid == rowid) {
                        record = records[i];
                        recordindex = i;
                        break;
                    }
                }
                if (record) {
                    this.cachedrecords[recordindex] = rowdata;
                    if (refresh == true || refresh == undefined) {
                        this.refresh();
                    }
                    return true;
                }
            }

            return false;
        }

        this.addrow = function (rowid, rowdata, position, refresh) {
            if (rowdata != undefined) {
                if (!rowid) {
                    rowdata.uid = this.getid(this.source.id, rowdata, this.totalrecords);
                    var record = this.recordsbyid["id" + rowdata.uid];
                    while (record != null) {
                        var uid = Math.floor(Math.random() * 10000).toString();
                        rowdata.uid = uid;
                        record = this.recordsbyid["id" + uid];
                    }
                }
                else rowdata.uid = rowid;

                if (!(rowdata[this.source.id])) {
                    if (this.source.id != undefined) {
                        rowdata[this.source.id] = rowdata.uid;
                    }
                }

                if (position == 'last') {
                    this.records.push(rowdata);
                }
                else {
                    this.records.splice(0, 0, rowdata);
                }
                if (this.filters && this.filters.length > 0) {
                    if (position == 'last') {
                        this.cachedrecords.push(rowdata);
                    }
                    else {
                        this.cachedrecords.splice(0, 0, rowdata);
                    }
                }

                this.totalrecords++;
                if (refresh == true || refresh == undefined) {
                    this.refresh();
                }

                this.changedrecords[rowdata.uid] = { Type: "New", Data: rowdata };
                return true;
            }
            return false;
        }

        this.deleterow = function (rowid, refresh) {
            if (rowid != undefined) {
                if (this.recordsbyid["id" + rowid]) {
                    var record = this.recordsbyid["id" + rowid];
                    var recordindex = this.records.indexOf(record);
                    this.changedrecords[rowid] = { Type: "Delete", Data: this.records[recordindex] };
                    this.records.splice(recordindex, 1);
                    this.totalrecords--;
                    if (refresh == true || refresh == undefined) {
                        this.refresh();
                    }
                    return true;
                }
                else if (this.filters && this.filters.length > 0) {
                    var records = this.cachedrecords;
                    var record = null;
                    var recordindex = -1;
                    for (var i = 0; i < records.length; i++) {
                        if (records[i].uid == rowid) {
                            record = records[i];
                            recordindex = i;
                            break;
                        }
                    }
                    if (record) {
                        this.cachedrecords.splice(recordindex, 1);
                        if (refresh == true || refresh == undefined) {
                            this.refresh();
                        }
                        return true;
                    }
                }

                return false;
            }

            return false;
        }

        this.reload = function (_records, _rows, _filter, _updated, fullupdate, startindex, endindex) {
            var self = this;
            var diff = new Array();
            var records = _records;
            var rows = _rows;
            var filter = _filter;
            var updated = _updated;

            var rl = rows.length;
            var currentRowIndex = 0;
            var currentPageIndex = 0;
            var item, id;
            this.columns = [];
            this.bounditems = new Array();
            this.loadedrecords = new Array();
            this.loadedrootgroups = new Array();
            this.loadedgroups = new Array();
            this.loadedgroupsByKey = new Array();
            this._cachegrouppages = new Array();
            this.recordsbyid = {};

            if (this.totalrecords == 0) {
                Object.size = function (obj) {
                    var size = 0, key;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) size++;
                    }
                    return size;
                };

                var totalrecords = Object.size(records);
                this.totalrecords = totalrecords;

                $.each(this.records, function (i) {
                    var item = this;
                    var index = 0;
                    $.each(item, function (columnName, value) {
                        self.columns[index++] = columnName;
                    });

                    return false;
                });
            }

            if (this.virtualmode) {
                if (this.pageable) {
                    this.updateview();
                    return;
                }

                var startindex = 0;
                if (!this.groupable) {
                    this.updateview();
                    return;
                }
                else {
                    var endindex = this.totalrecords;
                }
            }
            else {
                var startindex = 0;
                var endindex = this.totalrecords;
            }

            if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {
                var visualRows = startindex;
                visualRows = this.loadgrouprecords(0, startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff);
            }
            else {
                currentRowIndex = this.loadflatrecords(startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff);
            }

            if (rl > currentPageIndex)
                rows.splice(currentPageIndex, rl - currentPageIndex);


            if (this.groups.length > 0 && this.groupable) {
                this.totalrows = visualRows;
            }
            else {
                this.totalrows = currentRowIndex;
            }

            return diff;
        }

        this.loadflatrecords = function (startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff) {
            var self = this;
            var i = startindex;
            var currentRowIndex = startindex;
            endindex = Math.min(endindex, this.totalrecords);

            var hassortdata = this.sortdata != null;
            var localdata = this.source.id && (this.source.datatype == 'local' || this.source.datatype == 'array' || this.source.datatype == '');

            var data = hassortdata ? this.sortdata : this.records;

            for (var obj = startindex; obj < endindex; obj++) {
                var item = {};
                if (!hassortdata) {
                    item = $.extend({}, data[obj]);
                    id = item[self.uniqueId];
                    item.boundindex = i;
                    self.loadedrecords[i] = item;

                    //       if (item.uid == undefined) {
                    item.uid = self.getid(self.source.id, item, i);
                    //        }
                    self.recordsbyid["id" + item.uid] = data[obj];
                    item.uniqueid = self.generatekey();
                    self.bounditems[this.bounditems.length] = item;
                }
                else {
                    item = $.extend({}, data[obj].value);
                    id = item[self.uniqueId];
                    item.boundindex = data[obj].index;
                    //       if (item.uid == undefined) {
                    item.uid = self.getid(self.source.id, item, item.boundindex);
                    //      }
                    self.recordsbyid["id" + item.uid] = data[obj].value;
                    self.loadedrecords[i] = item;
                    item.uniqueid = self.generatekey();
                    self.bounditems[item.boundindex] = item;
                }

                if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                    diff[diff.length] = currentPageIndex;

                rows[currentPageIndex] = item;
                currentPageIndex++;

                item.visibleindex = currentRowIndex;
                currentRowIndex++;
                i++;
            }

            if (self.grid.summaryrows) {
                var rowindex = i;
                $.each(self.grid.summaryrows, function () {
                    var item = $.extend({}, this);
                    item.boundindex = endindex++;
                    self.loadedrecords[rowindex] = item;
                    item.uniqueid = self.generatekey();
                    self.bounditems[self.bounditems.length] = item;
                    rows[currentPageIndex] = item;
                    currentPageIndex++;
                    item.visibleindex = currentRowIndex;
                    currentRowIndex++;
                    rowindex++;
                });
            }

            return currentRowIndex;
        },

        this.updateview = function (from, to) {
            var self = this;
            var currentRowIndex = this.pagesize * this.pagenum;
            var currentPageIndex = 0;
            var rows = new Array();
            var filter = this.filters;
            var updated = this.updated;
            var rl = rows.length;

            if (this.pageable) {
                if (this.virtualmode) {
                    if (!this.groupable || this.groups.length == 0) {
                        this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), filter, currentPageIndex, updated, rows, rl, []);
                        this.totalrows = rows.length;
                    }
                    else if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {
                        if (this._cachegrouppages[this.pagenum + '_' + this.pagesize] != undefined) {
                            this.rows = this._cachegrouppages[this.pagenum + '_' + this.pagesize];
                            this.totalrows = this.rows.length;
                            return;
                        }

                        this.loadgrouprecords(0, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), filter, currentPageIndex, updated, rows, rl, []);
                        this._cachegrouppages[this.pagenum + '_' + this.pagesize] = this.rows;
                        this.totalrows = this.rows.length;
                        return;
                    }
                }
            }
            else {
                if (this.virtualmode && (!this.groupable || this.groups.length == 0)) {
                    var pagesize = this.pagesize;
                    if (pagesize == 0) {
                        pagesize = Math.min(100, this.totalrecords);
                    }
                    var start = pagesize * this.pagenum;
                    if (this.loadedrecords.length == 0) start = 0;

                    if (from != null && to != null) {
                        this.loadflatrecords(from, to, filter, currentPageIndex, updated, rows, rl, []);
                    }
                    else {
                        this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), filter, currentPageIndex, updated, rows, rl, []);
                    }
                    this.totalrows = this.loadedrecords.length;
                    this.rows = rows;
                    if (rows.length >= pagesize) {
                        return;
                    }
                }
            }

            if (this.groupable && this.pageable && this.groups.length > 0 && this._updategroupsinpage) {
                rows = this._updategroupsinpage(self, filter, currentRowIndex, currentPageIndex, rl, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum));
            }
            else {
                for (var i = this.pagesize * this.pagenum; i < this.pagesize * (1 + this.pagenum) ; i++) {
                    var item = i < this.loadedrecords.length ? this.loadedrecords[i] : null;
                    if (item == null) continue;

                    if (!this.pagesize || (currentRowIndex >= this.pagesize * this.pagenum && currentRowIndex <= this.pagesize * (this.pagenum + 1))) {
                        rows[currentPageIndex] = item;
                        currentPageIndex++;
                    }

                    currentRowIndex++;
                }
            }

            if ((rows.length == 0 || rows.length < this.pagesize) && !this.pageable && this.virtualmode) {
                currentPageIndex = rows.length;
                var startlength = rows.length;
                for (var i = this.pagesize * this.pagenum; i < this.pagesize * (1 + this.pagenum) - startlength; i++) {
                    var item = {};
                    item.boundindex = i + startlength;
                    item.visibleindex = i + startlength;
                    item.uniqueid = self.generatekey();
                    item.empty = true;
                    self.bounditems[i + startlength] = item;
                    rows[currentPageIndex] = item;
                    currentPageIndex++;
                }
            }

            this.rows = rows;
        }

        this.generatekey = function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        }

        this.reloaddata = function () {
            this.reload(this.records, this.rows, this.filter, this.updated, true);
        }

        this.refresh = function (fullupdate) {
            if (this.suspend) return;

            if (fullupdate == undefined) {
                fullupdate = true;
            }

            var countBefore = this.rows.length;
            var totalrowsBefore = this.totalrows;

            if (this.filters.length > 0 && !this.virtualmode) {
                var filter = "";
                var length = this.cachedrecords.length;
                var filtereddata = new Array();
                this.totalrecords = 0;
                var data = this.cachedrecords;
                this._dataIndexToBoundIndex = new Array();
                var filterslength = this.filters.length;

                if (this.source != null && this.source.filter != undefined && this.source.localdata != undefined) {
                    filtereddata = this.source.filter(this.filters, data, length);
                    if (filtereddata == undefined) {
                        filtereddata = new Array();
                    }
                    this.records = filtereddata;
                }
                else if (this.source.filter == null || this.source.filter == undefined) {
                    for (var row = 0; row < length; row++) {
                        var datarow = data[row];
                        var filterresult = undefined;
                        for (var j = 0; j < filterslength; j++) {
                            var filter = this.filters[j].filter;
                            var value = datarow[this.filters[j].datafield];
                            var result = filter.evaluate(value);

                            if (filterresult == undefined) filterresult = result;
                            else {
                                if (filter.operator == 'or') {
                                    filterresult = filterresult || result;
                                }
                                else {
                                    filterresult = filterresult && result;
                                }
                            }
                        }

                        if (filterresult) {
                            filtereddata[filtereddata.length] = $.extend({ dataindex: row }, datarow);
                            this._dataIndexToBoundIndex[row] = { boundindex: filtereddata.length - 1 };
                        }
                        else this._dataIndexToBoundIndex[row] = null;
                    }
                    this.records = filtereddata;
                }
                if (this.sortdata) {
                    var lookupkey = this.sortfield;
                    if (this.sortcache[lookupkey]) {
                        this.sortdata = null;
                        var direction = this.sortcache[lookupkey].direction;
                        this.sortcache[lookupkey] = null;
                        this.sortby(this.sortfield, direction);
                        return;
                    }
                }
            }
            else if (this.filters.length == 0 && !this.virtualmode) {
                if (this.cachedrecords) {
                    this.totalrecords = 0;
                    var data = this.cachedrecords;
                    this.records = data;
                    if (this.sortdata) {
                        var lookupkey = this.sortfield;
                        if (this.sortcache[lookupkey]) {
                            this.sortdata = null;
                            var direction = this.sortcache[lookupkey].direction;
                            this.sortcache[lookupkey] = null;
                            this.sortby(this.sortfield, direction);
                            return;
                        }
                    }
                }
            }

            var diff = this.reload(this.records, this.rows, this.filter, this.updated, fullupdate);
            this.updated = null;

            if (this.rowschangecallback != null) {
                if (totalrowsBefore != totalrows) this.rowschangecallback({ type: "PagingChanged", data: getpagingdetails() });
                if (countBefore != rows.length) this.rowschangecallback({ type: "RowsCountChanged", data: { previous: countBefore, current: rows.length } });
                if (diff.length > 0 || countBefore != rows.length) this.rowschangecallback({ type: "RowsChanged", data: { previous: countBefore, current: rows.length, diff: diff } });
            }
        }

        return this;
    }
})(jQuery);(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        // selects a row by index.
        selectrow: function (index, refresh) {
            this._applyrowselection(index, true, refresh);
        },

        selectallrows: function () {
            this.clearselection(false);
            var length = this.dataview.records.length;
            if (length > 0) {
                for (var i = 0; i < length; i++) {
                    if (i < length - 1) {
                        this.selectrow(i, false);
                    }
                    else this.selectrow(i, true);
                }
            }
        },

        // unselects a row by index.
        unselectrow: function (index, refresh) {
            this._applyrowselection(index, false, refresh);
        },

        // selects a cell.
        selectcell: function (row, datafield) {
            this._applycellselection(row, datafield, true);
        },

        // unselects a cell.
        unselectcell: function (row, datafield) {
            this._applycellselection(row, datafield, false);
        },

        // clears the selection.
        clearselection: function (refresh) {
            this.selectedrowindex = -1;

            for (var i = 0; i < this.selectedrowindexes.length; i++) {
                this._raiseEvent(3, { rowindex: this.selectedrowindexes[i] });
            }

            this.selectedrowindexes = new Array();
            this.selectedcells = new Array();
            if (!refresh)
                return;

            this._renderrows(this.virtualsizeinfo);
        },

        // gets the selected row index.
        getselectedrowindex: function () {
            return this.selectedrowindex;
        },

        // gets the selected row index.
        getselectedrowindexes: function () {
            return this.selectedrowindexes;
        },

        // gets the selected cell.
        getselectedcell: function () {
            return this.selectedcell;
        },

        // gets the selected cells.
        getselectedcells: function () {
            var cells = new Array();
            for (obj in this.selectedcells) {
                cells[cells.length] = this.selectedcells[obj];
            }

            return cells;
        },

        _getcellsforcopypaste: function()
        {
            var cells = new Array();
            if (this.selectionmode.indexOf('cell') == -1) {
                var rows = this.selectedrowindexes;
                for (var j = 0; j < rows.length; j++) {
                    var index = rows[j];
                    for (var i = 0; i < this.columns.records.length; i++) {
                        var uniquekey = index + "_" + this.columns.records[i].datafield;
                        var cell = { rowindex: index, datafield: this.columns.records[i].datafield };
                        cells.push(cell);
                    }
                }
            }
            return cells;
        },

        deleteselection: function()
        {
            var self = this;
            var cells = self.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }
            if (cells != null && cells.length > 0) {
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var cell = cells[cellIndex];
                    var column = self.getcolumn(cell.datafield);
                    var cellValue = self.getcellvalue(cell.rowindex, cell.datafield);
                    if (cellValue != "") {
                        self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: cellValue });
                        if (cellIndex == cells.length - 1) {
                            self.setcellvalue(cell.rowindex, cell.datafield, "", true);
                        }
                        else self.setcellvalue(cell.rowindex, cell.datafield, "", false);
                        self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: cellValue, value: "" });
                    }
                }
                this.dataview.updateview();
                this._renderrows(this.virtualsizeinfo);
            }
        },

        copyselection: function()
        {
            var selectedtext = "";
            var self = this;
            this.clipboardselection = {};
            this._clipboardselection = [];
            var cells = self.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }

            if (cells != null && cells.length > 0) {
                var minrowindex = 999999999999999;
                var maxrowindex = -1;
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var cell = cells[cellIndex];
                    var column = self.getcolumn(cell.datafield);
                    var cellValue = self.getcellvalue(cell.rowindex, cell.datafield);
                    if (!this.clipboardselection[cell.rowindex]) this.clipboardselection[cell.rowindex] = {};
                    this.clipboardselection[cell.rowindex][cell.datafield] = cellValue;
                    minrowindex = Math.min(minrowindex, cell.rowindex);
                    maxrowindex = Math.max(maxrowindex, cell.rowindex);
                }
                for (var i = minrowindex; i <= maxrowindex; i++) {
                    var x = 0;
                    this._clipboardselection[this._clipboardselection.length] = {};
                    if (this.clipboardselection[i] != undefined) {
                        $.each(this.clipboardselection[i], function (index, value) {
                            if (x > 0) selectedtext += "\t";
                            var text = value;
                            if (value == null) text = "";
                            self._clipboardselection[self._clipboardselection.length - 1][x] = text;
                            x++;
                            selectedtext += text;
                        });
                    }
                    if (i < maxrowindex) {
                        selectedtext += '\n';
                    }
                }
            }
            this.clipboardselectedtext = selectedtext;
            return selectedtext;
        },

        pasteselection: function()
        {
            var self = this;
            var cells = self.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }
            if (cells != null && cells.length > 0) {
                var rowindex = 0;
                var lastrowindex = undefined;
                var x = 0;
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var cell = cells[cellIndex];
                    var column = self.getcolumn(cell.datafield);
                    if (lastrowindex != undefined) {
                        if (cell.rowindex != lastrowindex) {
                            rowindex++;
                            x = 0;
                        }
                    }
                    lastrowindex = cell.rowindex;
                    if (self._clipboardselection[rowindex]) {
                        var cellvalue = null;
                        cellvalue = self._clipboardselection[rowindex][x++];      
                        if (cellvalue != null) {
                            self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: cellvalue });
                            self.setcellvalue(cell.rowindex, cell.datafield, cellvalue, false);
                            self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: self.getcellvalue(cell.rowindex, cell.datafield), value: cellvalue });
                        }
                    }
                }
                this.dataview.updateview();
                this._renderrows(this.virtualsizeinfo);
            }
        },

        _applyrowselection: function (index, select, refresh, multiplerows, column) {
            if (index == null)
                return false;

            var oldindex = this.selectedrowindex;

            if (this.selectionmode == 'singlerow') {
                if (select) {
                    this._raiseEvent(2, { rowindex: index, row: this.getrowdata(index) });
                }
                else {
                    this._raiseEvent(3, { rowindex: index, row: this.getrowdata(index) });
                }

                this._raiseEvent(3, { rowindex: oldindex });
                this.selectedrowindexes = new Array();
                this.selectedcells = new Array();
            }

            if (multiplerows == true) {
                this.selectedrowindexes = new Array();
            }

            var indexIn = this.selectedrowindexes.indexOf(index);

            if (select) {
                this.selectedrowindex = index;

                if (this.selectedrowindexes.indexOf(index) == -1) {
                    this.selectedrowindexes.push(index);

                    if (this.selectionmode != 'singlerow') {
                        this._raiseEvent(2, { rowindex: index, row: this.getrowdata(index) });
                    }
                }
                else if (this.selectionmode == 'multiplerows') {
                    this.selectedrowindexes.splice(indexIn, 1);
                    this._raiseEvent(3, { rowindex: this.selectedrowindex, row: this.getrowdata(index) });
                    this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[this.selectedrowindexes.length - 1] : -1;
                }
            }
            else if (indexIn >= 0 || this.selectionmode == 'singlerow' || this.selectionmode == 'multiplerowsextended') {
                this.selectedrowindexes.splice(indexIn, 1);
                this._raiseEvent(3, { rowindex: this.selectedrowindex, row: this.getrowdata(index) });
                this.selectedrowindex = -1;
            }

            if (refresh == undefined || refresh) {
                this._rendervisualrows();
            }

            return true;
        },

        _applycellselection: function (index, column, select, refresh) {
            if (index == null)
                return false;

            if (column == null)
                return false;

            var oldindex = this.selectedrowindex;

            if (this.selectionmode == 'singlecell') {
                var oldcell = this.selectedcell;
                if (oldcell != null) {
                    this._raiseEvent(16, { rowindex: oldcell.rowindex, datafield: oldcell.datafield });
                }
                this.selectedcells = new Array();
            }

            if (this.selectionmode == 'multiplecellsextended' || this.selectionmode == 'multiplecellsadvanced') {
                var oldcell = this.selectedcell;
                if (oldcell != null) {
                    this._raiseEvent(16, { rowindex: oldcell.rowindex, datafield: oldcell.datafield });
                }
            }

            var uniquekey = index + "_" + column;

            var cell = { rowindex: index, datafield: column };
            if (select) {
                this.selectedcell = cell;
                if (!this.selectedcells[uniquekey]) {
                    this.selectedcells[uniquekey] = cell;
                    this.selectedcells.length++;
                    this._raiseEvent(15, cell);
                }
                else if (this.selectionmode == "multiplecells") {
                    this.selectedcells[uniquekey] = undefined;
                    this.selectedcells.length--;
                    this._raiseEvent(16, cell);
                }
            }
            else {
                this.selectedcells[uniquekey] = undefined;
                this.selectedcells.length--;
                this._raiseEvent(16, cell);
            }

            if (refresh == undefined || refresh) {
                this._rendervisualrows();
            }

            return true;
        },

        _getcellindex: function (uniquekey) {
            var id = -1;
            $.each(this.selectedcells, function () {
                id++;
                if (this[uniquekey]) {
                    return false;
                }
            });
            return id;
        },

        _clearhoverstyle: function () {
            if (undefined == this.hoveredrow || this.hoveredrow == -1)
                return;

            if (this.vScrollInstance.isScrolling())
                return;

            if (this.hScrollInstance.isScrolling())
                return;

            var cells = this.table.find('.jqx-grid-cell-hover');

            if (cells.length > 0) {
                cells.removeClass(this.toTP('jqx-grid-cell-hover'));
                cells.removeClass(this.toTP('jqx-fill-state-hover'));
            }
            this.hoveredrow = -1;
        },

        _clearselectstyle: function () {
            var rowscount = this.table[0].rows.length;
            var rows = this.table[0].rows;
            var selectclass = this.toTP('jqx-grid-cell-selected');
            var selectclass2 = this.toTP('jqx-fill-state-pressed');
            var hoverclass = this.toTP('jqx-grid-cell-hover');
            var hoverclass2 = this.toTP('jqx-fill-state-hover');

            for (var i = 0; i < rowscount; i++) {
                var tablerow = rows[i];
                var cellslength = tablerow.cells.length;
                var cells = tablerow.cells;
                for (var j = 0; j < cellslength; j++) {
                    var tablecell = cells[j];
                    var $tablecell = $(tablecell);
                    if (tablecell.className.indexOf('jqx-grid-cell-selected') != -1) {
                        $tablecell.removeClass(selectclass);
                        $tablecell.removeClass(selectclass2);
                    }

                    if (tablecell.className.indexOf('jqx-grid-cell-hover') != -1) {
                        $tablecell.removeClass(hoverclass);
                        $tablecell.removeClass(hoverclass2);
                    }
                }
            }
        },

        _selectpath: function (row, column) {
            var self = this;
            var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row) : 0;
            var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row) : 0;
            if (minRow <= maxRow) {
                var index1 = this._getcolumnindex(this._lastClickedCell.column);
                var index2 = this._getcolumnindex(column);
                var minColumn = Math.min(index1, index2);
                var maxColumn = Math.max(index1, index2);
                this.selectedcells = new Array();

                for (var r = minRow; r <= maxRow; r++) {
                    for (var c = minColumn; c <= maxColumn; c++) {
                        this._applycellselection(r, self._getcolumnat(c).datafield, true, false);
                    }
                }
                this._rendervisualrows();
            }
        },

        _selectrowpath: function (row) {
            if (this.selectionmode == 'multiplerowsextended') {
                var self = this;
                var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row) : 0;
                var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row) : 0;
                if (minRow <= maxRow) {
                    this.selectedrowindexes = new Array();
                    for (var r = minRow; r <= maxRow; r++) {
                        this._applyrowselection(r, true, false);
                    }
                    this._rendervisualrows();
                }
            }
        },

        _selectrowwithmouse: function (self, rowinfo, oldindexes, column, ctrlKey, shiftKey) {
            var row = rowinfo.row;

            if (row == undefined)
                return;

            var index = rowinfo.index;
            var tablerow = this.hittestinfo[index].visualrow;

            if (this.hittestinfo[index].details) {
                return;
            }

            var cellclass = tablerow.cells[0].className;
            if (row.group) {
                return;
            }

            if (this.selectionmode == 'multiplerows' || this.selectionmode == 'multiplecells' || (this.selectionmode.indexOf('multiple') != -1 && (shiftKey == true || ctrlKey == true))) {
                var hasindex = oldindexes.indexOf(row.boundindex) != -1;
                var key = row.boundindex + "_" + column;

                if (this.selectionmode.indexOf('cell') != -1) {
                    var hascellindex = this.selectedcells[key] != undefined;
                    if (this.selectedcells[key] != undefined && hascellindex) {
                        this._selectcellwithstyle(self, false, index, column, tablerow);
                    }
                    else {
                        this._selectcellwithstyle(self, true, index, column, tablerow);
                    }
                    if (shiftKey && this._lastClickedCell == undefined) {
                        var cells = this.getselectedcells();
                        if (cells && cells.length > 0) {
                            this._lastClickedCell = {row: cells[0].rowindex, column: cells[0].datafield}; 
                        }
                    }
                    if (shiftKey && this._lastClickedCell) {
                        this._selectpath(row.boundindex, column);
                        this.mousecaptured = false;
                        if (this.selectionarea.css('visibility') == 'visible') {
                            this.selectionarea.css('visibility', 'hidden');
                        }
                    }
                }
                else {
                    if (hasindex) {
                        if (ctrlKey) {
                            this._applyrowselection(row.boundindex, false);
                        }
                        else {
                            this._selectrowwithstyle(self, tablerow, false, column);
                        }
                    }
                    else {
                        this._selectrowwithstyle(self, tablerow, true, column);
                    }

                    if (shiftKey && this._lastClickedCell == undefined) {
                        var indexes = this.getselectedrowindexes();
                        if (indexes && indexes.length > 0) {
                            this._lastClickedCell = { row: indexes[0], column: column };
                        }
                    }
                    if (shiftKey && this._lastClickedCell) {
                        this.selectedrowindexes = new Array();
                        var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row.boundindex) : 0;
                        var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row.boundindex) : 0;
                        for (var r = minRow; r <= maxRow; r++) {
                            this._applyrowselection(r, true, false, false);
                        }
                        this._rendervisualrows();
                    }
                }
            }
            else {
                this._clearselectstyle();
                this._selectrowwithstyle(self, tablerow, true, column);
                if (this.selectionmode.indexOf('cell') != -1) {
                    this._selectcellwithstyle(self, true, index, column, tablerow);
                }
            }
            if (!shiftKey) {
                this._lastClickedCell = { row: row.boundindex, column: column };
            }
        },

        _selectcellwithstyle: function (self, select, row, column, tablerow) {
            var cell = $(tablerow.cells[self._getcolumnindex(column)]);
            cell.removeClass(this.toTP('jqx-grid-cell-hover'));
            cell.removeClass(this.toTP('jqx-fill-state-hover'));
            if (select) {
                cell.addClass(this.toTP('jqx-grid-cell-selected'));
                cell.addClass(this.toTP('jqx-fill-state-pressed'));
            }
            else {
                cell.removeClass(this.toTP('jqx-grid-cell-selected'));
                cell.removeClass(this.toTP('jqx-fill-state-pressed'));
            }
        },

        _selectrowwithstyle: function (self, tablerow, select, column) {
            var cellslength = tablerow.cells.length;

            var startindex = 0;
            if (self.rowdetails && self.showrowdetailscolumn) {
                startindex = 1;
            }

            for (var i = startindex; i < cellslength; i++) {
                var tablecell = tablerow.cells[i];
                if (select) {
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-hover'));

                    if (self.selectionmode.indexOf('cell') == -1) {
                        $(tablecell).addClass(this.toTP('jqx-grid-cell-selected'));
                        $(tablecell).addClass(this.toTP('jqx-fill-state-pressed'));
                    }
                }
                else {
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-selected'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-pressed'));
                }
            }
        },

        _handlemousemoveselection: function (event, self) {
            if ((self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') && self.mousecaptured) {
                var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                groupsheaderheight += toolbarheight;
                var hostoffset = this.host.offset();
                if (this.hasTransform) {
                    hostoffset = $.jqx.utilities.getOffset(this.host);
                }
                var bodyOffset = this._getBodyOffset();
                hostoffset.left += bodyOffset.left;
                hostoffset.top += bodyOffset.top;
                var x = event.pageX;
                var y = event.pageY - groupsheaderheight;

                if (Math.abs(this.mousecaptureposition.left - x) > 3 || Math.abs(this.mousecaptureposition.top - y) > 3) {
                    var columnheadertop = parseInt(this.columnsheader.offset().top);
                    if (this.hasTransform) {
                        columnheadertop = $.jqx.utilities.getOffset(this.columnsheader).top;
                    }
                    if (x < hostoffset.left) {
                        x = hostoffset.left;
                    }

                    if (x > hostoffset.left + this.host.width()) {
                        x = hostoffset.left + this.host.width();
                    }
                    var columnheaderbottom = hostoffset.top + columnheaderheight;
                    if (y < columnheaderbottom) y = columnheaderbottom + 5;
                    var rectleft = parseInt(Math.min(self.mousecaptureposition.left, x));
                    var recttop = -5 + parseInt(Math.min(self.mousecaptureposition.top, y));
                    var rectwidth = parseInt(Math.abs(self.mousecaptureposition.left - x));
                    var rectheight = parseInt(Math.abs(self.mousecaptureposition.top - y));
                    rectleft -= hostoffset.left;
                    recttop -= hostoffset.top;

                    this.selectionarea.css('visibility', 'visible');

                    if (self.selectionmode == 'multiplecellsadvanced') {
                        var x = rectleft;
                        var arearight = x + rectwidth;
                        var arealeft = x;
                        var hScrollInstance = self.hScrollInstance;
                        var horizontalscrollvalue = hScrollInstance.value;
                        var tablerow = self.table[0].rows[0];
                        var p = 0;

                        var leftcellindex = self.mousecaptureposition.clickedcell;
                        var rightcellindex = leftcellindex;
                        var found = false;

                        var starti = 0;
                        var endi = tablerow.cells.length;
                        if (self.mousecaptureposition.left <= event.pageX) {
                            starti = leftcellindex;
                        }

                        for (var i = starti; i < endi; i++) {
                            var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                            var left = columnleft - horizontalscrollvalue;
                            if (self.columns.records[i].pinned) {
                                left = columnleft;
                                continue;
                            }

                            var column = this._getcolumnat(i);
                            if (column != null && column.hidden) {
                                continue;
                            }

                            if (self.groupable && self.groups.length > 0) {
                                if (i < self.groups.length) {
                                    continue;
                                }
                            }

                            var right = left + $(this.columnsrow[0].cells[i]).width();
                            if (self.mousecaptureposition.left > event.pageX) {
                                if (right >= x && x >= left) {
                                    rightcellindex = i;
                                    found = true;
                                    break;
                                }
                            }
                            else {
                                if (right >= arearight && arearight >= left) {
                                    rightcellindex = i;
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (!found) {
                            if (self.mousecaptureposition.left > event.pageX) {
                                $.each(this.columns.records, function (index, value) {
                                    if (self.groupable && self.groups.length > 0) {
                                        if (index < self.groups.length) {
                                            return true;
                                        }
                                    }

                                    if (!this.pinned && !this.hidden) {
                                        rightcellindex = index;
                                        return false;
                                    }
                                });
                            }
                            else {
                                if (!self.groupable || (self.groupable && !self.groups.length > 0)) {
                                    rightcellindex = tablerow.cells.length - 1;
                                }
                            }
                        }
                        var tmpindex = leftcellindex;
                        leftcellindex = Math.min(leftcellindex, rightcellindex);
                        rightcellindex = Math.max(tmpindex, rightcellindex);
                        recttop += 5;
                        recttop += groupsheaderheight;
                        var startrowindex = self.table[0].rows.indexOf(self.mousecaptureposition.clickedrow);
                        var increaseheight = 0;
                        var startrow = -1;
                        var endrow = -1;
                        var offsettop = 0;
                        for (var i = 0; i < self.table[0].rows.length; i++) {
                            var row = $(self.table[0].rows[i]);
                            if (i == 0) offsettop = row.offset().top;
                            var rowheight = row.height();
                            var rowtop = offsettop - hostoffset.top;
                            if (startrow == -1 && rowtop + rowheight >= recttop) {
                                var toContinue = false;
                                for (var q = 0; q < self.groups.length; q++) {
                                    var className = row[0].cells[q].className;
                                    if (className.indexOf('jqx-grid-group-collapse') != -1 || className.indexOf('jqx-grid-group-expand') != -1) {
                                        toContinue = true;
                                        break;
                                    }
                                }
                                if (toContinue) continue;


                                startrow = i;
                            }
                            offsettop += rowheight;

                            if (self.groupable && self.groups.length > 0) {
                                var toContinue = false;
                                for (var q = 0; q < self.groups.length; q++) {
                                    var className = row[0].cells[q].className;
                                    if (className.indexOf('jqx-grid-group-collapse') != -1 || className.indexOf('jqx-grid-group-expand') != -1) {
                                        toContinue = true;
                                        break;
                                    }
                                }
                                if (toContinue) continue;

                                var p = 0;
                                for (var k = self.groups.length; k < row[0].cells.length; k++) {
                                    var cell = row[0].cells[k];
                                    if ($(cell).html() == "") {
                                        p++;
                                    }
                                }
                                if (p == row[0].cells.length - self.groups.length) {
                                    continue;
                                }
                            }

                            if (startrow != -1) {
                                increaseheight += rowheight;
                            }

                            if (rowtop + rowheight > recttop + rectheight) {
                                endrow = i;
                                break;
                            }
                        }


                        if (startrow != -1) {
                            recttop = $(self.table[0].rows[startrow]).offset().top - hostoffset.top - groupsheaderheight - 2;
                            var additionalHeight = 0;
                            if (this.filterable && this.showfilterrow) {
                                additionalHeight = this.filterrowheight;
                            }

                            if (parseInt(self.table[0].style.top) < 0 && recttop < this.rowsheight + additionalHeight) {
                                recttop -= parseInt(self.table[0].style.top);
                                increaseheight += parseInt(self.table[0].style.top);
                            }

                            rectheight = increaseheight;
                            var leftcell = $(this.columnsrow[0].cells[leftcellindex]);
                            var rightcell = $(this.columnsrow[0].cells[rightcellindex]);
                            rectleft = parseInt(leftcell.css('left'));
                            rectwidth = parseInt(rightcell.css('left')) - parseInt(rectleft) + rightcell.width() - 2;
                            rectleft -= horizontalscrollvalue;
                            if (self.editcell && self.editable && self.endcelledit && (leftcellindex != rightcellindex || startrow != endrow)) {
                                self.endcelledit(self.editcell.row, self.editcell.column, true, true);
                            }
                        }
                    }

                    this.selectionarea.width(rectwidth);
                    this.selectionarea.height(rectheight);
                    this.selectionarea.css('left', rectleft);
                    this.selectionarea.css('top', recttop);
                }
            }
        },

        _handlemouseupselection: function (event, self) {
            if (this.selectionarea.css('visibility') != 'visible') {
                self.mousecaptured = false;
                return true;
            }

            if (self.mousecaptured && (self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced')) {
                self.mousecaptured = false;
                if (this.selectionarea.css('visibility') == 'visible') {
                    this.selectionarea.css('visibility', 'hidden');

                    var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                    var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                    var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                    groupsheaderheight += toolbarheight;
                    var areaoffset = this.selectionarea.offset();
                    var hostoffset = this.host.offset();
                    if (this.hasTransform) {
                        hostoffset = $.jqx.utilities.getOffset(this.host);
                        areaoffset = $.jqx.utilities.getOffset(this.selectionarea);
                    }

                    var x = areaoffset.left - hostoffset.left;
                    var y = areaoffset.top - columnheaderheight - hostoffset.top - groupsheaderheight;
                    var m = y;
                    var arearight = x + this.selectionarea.width();
                    var arealeft = x;

                    var rows = new Array();
                    var indexes = new Array();

                    if (self.selectionmode == 'multiplerowsextended') {
                        while (y < m + this.selectionarea.height()) {
                            var rowinfo = this._hittestrow(x, y);
                            var row = rowinfo.row;
                            var index = rowinfo.index;
                            if (index != -1) {
                                if (!indexes[index]) {
                                    indexes[index] = true;
                                    rows[rows.length] = rowinfo;
                                }
                            }
                            y += 20;
                        }
                        var m = 0;
                        $.each(rows, function () {
                            var rowinfo = this;
                            var row = this.row;
                            if (self.selectionmode != 'none' && self._selectrowwithmouse) {
                                if (event.ctrlKey) {
                                    self._applyrowselection(row.boundindex, true, false, false);
                                }
                                else {
                                    if (m == 0) {
                                        self._applyrowselection(row.boundindex, true, false, true);
                                    }
                                    else {
                                        self._applyrowselection(row.boundindex, true, false, false);
                                    }
                                }
                                m++;
                            }
                        });
                    }
                    else {
                        if (self.selectionmode == 'multiplecellsadvanced') {
                            y += 2;
                        }
                        var hScrollInstance = self.hScrollInstance;
                        var horizontalscrollvalue = hScrollInstance.value;
                        var tablerow = self.table[0].rows[0];
                        var selectionheight = self.selectionarea.height();
                        if (!event.ctrlKey && selectionheight > 0) {
                            self.selectedcells = new Array();
                        }

                        var selectionHeight = selectionheight;
                        while (y < m + selectionHeight) {
                            var rowinfo = self._hittestrow(x, y);
                            var row = rowinfo.row;
                            var index = rowinfo.index;
                            if (index != -1) {
                                if (!indexes[index]) {
                                    indexes[index] = true;
                                    for (var i = 0; i < tablerow.cells.length; i++) {
                                        var left = parseInt($(self.columnsrow[0].cells[i]).css('left')) - horizontalscrollvalue;
                                        var right = left + $(self.columnsrow[0].cells[i]).width();
                                        if ((arealeft >= left && arealeft <= right) || (arearight >= left && arearight <= right)
                                        || (left >= arealeft && left <= arearight)) {
                                            self._applycellselection(row.boundindex, self._getcolumnat(i).datafield, true, false);
                                        }
                                    }
                                }
                            }
                            y += 5;
                        }
                    }
                    if (self.autosavestate) {
                        if (self.savestate) self.savestate();
                    }
                    self._renderrows(self.virtualsizeinfo);
                }
            }
        },

        selectprevcell: function (row, datafield) {
            var columnindex = this._getcolumnindex(datafield);
            var columnscount = this.columns.records.length;
            var prevcolumn = this._getprevvisiblecolumn(columnindex);
            if (prevcolumn != null) {
                this.clearselection();
                this.selectcell(row, prevcolumn.datafield);
            }
        },

        selectnextcell: function (row, datafield) {
            var columnindex = this._getcolumnindex(datafield);
            var columnscount = this.columns.records.length;
            var nextcolumn = this._getnextvisiblecolumn(columnindex);
            if (nextcolumn != null) {
                this.clearselection();
                this.selectcell(row, nextcolumn.datafield);
            }
        },

        _getfirstvisiblecolumn: function () {
            var self = this;
            var length = this.columns.records.length;
            for (var i = 0; i < length; i++) {
                var column = this.columns.records[i];
                if (!column.hidden && column.datafield != null)
                    return column;
            }

            return null;
        },

        _getlastvisiblecolumn: function () {
            var self = this;
            var length = this.columns.records.length;
            for (var i = length - 1; i >= 0; i--) {
                var column = this.columns.records[i];
                if (!column.hidden && column.datafield != null)
                    return column;
            }

            return null;
        },

        _handlekeydown: function (event, self) {
            var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
            if (self.editcell && self.selectionmode != 'multiplecellsadvanced') {
                return true;
            }
            else if (self.editcell && self.selectionmode == 'multiplecellsadvanced') {
                if (key >= 33 && key <= 40) {
                    if (!event.altKey) {
                        if (self._cancelkeydown == undefined || self._cancelkeydown == false) {
                            self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                            self._cancelkeydown = false;
                        }
                        else {
                            self._cancelkeydown = false;
                            return true;
                        }
                    }
                    else {
                        self._cancelkeydown = false;
                        return true;
                    }
                }
                else return true;
            }

            if (self.selectionmode == 'none')
                return true;

            if (self.showfilterrow && self.filterable) {
                if (this.filterrow) {
                    if ($(event.target).ischildof(this.filterrow))
                        return true;
                }
            }

            if (self.pageable) {
                if ($(event.target).ischildof(this.pager)) {
                    return true;
                }
            }

            if (this.showtoolbar) {
                if ($(event.target).ischildof(this.toolbar)) {
                    return true;
                }
            }
            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar)) {
                    return true;
                }
            }

            var selectionchanged = false;
            if (event.altKey) {
                return true;
            }

            if (event.ctrlKey) {
                if (this.clipboard) {
                    var pressedkey = String.fromCharCode(key).toLowerCase();

                    if (pressedkey == 'c' || pressedkey == 'x') {
                        var text = this.copyselection();
                        if (window.clipboardData) {
                            window.clipboardData.setData("Text", text);
                        }
                    }
                    else if (pressedkey == 'v') {
                        this.pasteselection();
                    }
                    if (pressedkey == 'x') {
                        this.deleteselection();
                    }
                }
            }

            var hostHeight = Math.round(self._gettableheight());
            // get records per page.
            var pagesize = Math.round(hostHeight / self.rowsheight);
            var datainfo = self.getdatainformation();

            switch (self.selectionmode) {
                case 'singlecell':
                case 'multiplecells':
                case 'multiplecellsextended':
                case 'multiplecellsadvanced':
                    var selectedcell = self.getselectedcell();

                    if (selectedcell != null) {
                        var visibleindex = this.getrowvisibleindex(selectedcell.rowindex);
                        var rowindex = visibleindex;
                        var datafield = selectedcell.datafield;
                        var columnindex = self._getcolumnindex(datafield);
                        var columnscount = self.columns.records.length;
                        var selectgridcell = function (row, datafield, clearselection) {
                            var tryselect = function (row, datafield) {
                                var datarow = self.dataview.loadedrecords[row];
                                if (datarow != undefined && datafield != null) {
                                    if (clearselection || clearselection == undefined) {
                                        self.clearselection();
                                    }
                                    var visibleindex = datarow.boundindex;
                                    self.selectcell(visibleindex, datafield);
                                    self._oldselectedcell = self.selectedcell;
                                    selectionchanged = true;
                                    self.ensurecellvisible(row, datafield);
                                    return true;
                                }
                                return false;
                            }

                            if (!tryselect(row, datafield)) {
                                self.ensurecellvisible(row, datafield);
                                tryselect(row, datafield);
                                if (self.virtualmode) {
                                    self.host.focus();
                                }
                            }

                            if (event.shiftKey && key != 9) {
                                if (self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') {
                                    if (self._lastClickedCell) {
                                        self._selectpath(row, datafield);
                                        self.selectedcell = { rowindex: row, datafield: datafield };
                                        return;
                                    }
                                }
                            }
                            else if (!event.shiftKey) {
                                self._lastClickedCell = { row: row, column: datafield };
                            }
                        }
                        var shift = event.shiftKey && self.selectionmode != 'singlecell' && self.selectionmode != 'multiplecells';
                        var home = function () {
                            selectgridcell(0, datafield, !shift);
                        }
                        var end = function () {
                            var newindex = datainfo.rowscount - 1;
                            selectgridcell(newindex, datafield, !shift);
                        }

                        var tab = key == 9 && !event.shiftKey;
                        var shifttab = key == 9 && event.shiftKey;
                        if (tab || shifttab) shift = false;
                        var ctrl = event.ctrlKey;
                        if (ctrl && key == 37) {
                            var previouscolumn = self._getfirstvisiblecolumn(columnindex);
                            if (previouscolumn != null) {
                                selectgridcell(rowindex, previouscolumn.datafield);
                            }
                        }
                        else if (ctrl && key == 39) {
                            var next = self._getlastvisiblecolumn(columnindex);
                            if (next != null) {
                                selectgridcell(rowindex, next.datafield);
                            }
                        }
                        else if (key == 39 || tab) {
                            var nextcolumn = self._getnextvisiblecolumn(columnindex);
                            if (nextcolumn != null) {
                                selectgridcell(rowindex, nextcolumn.datafield, !shift);
                            }
                            else {
                                if (!tab) {
                                    selectionchanged = true;
                                }
                            }
                        }
                        else if (key == 37 || shifttab) {
                            var previouscolumn = self._getprevvisiblecolumn(columnindex);
                            if (previouscolumn != null) {
                                selectgridcell(rowindex, previouscolumn.datafield, !shift);
                            }
                            else {
                                if (!shifttab) {
                                    selectionchanged = true;
                                }
                            }
                        }
                        else if (key == 36) {
                            home();
                        }
                        else if (key == 35) {
                            end();
                        }
                        else if (key == 33) {
                            if (rowindex - pagesize >= 0) {
                                var newindex = rowindex - pagesize;
                                selectgridcell(newindex, datafield, !shift);
                            }
                            else {
                                home();
                            }
                        }
                        else if (key == 34) {
                            if (datainfo.rowscount > rowindex + pagesize) {
                                var newindex = rowindex + pagesize;
                                selectgridcell(newindex, datafield, !shift);
                            }
                            else {
                                end();
                            }
                        }
                        else if (key == 38) {
                            if (ctrl) {
                                home();
                            }
                            else {
                                if (rowindex > 0) {
                                    selectgridcell(rowindex - 1, datafield, !shift);
                                }
                                else selectionchanged = true;
                            }
                        }
                        else if (key == 40) {
                            if (ctrl) {
                                end();
                            }
                            else {
                                if (datainfo.rowscount > rowindex + 1) {
                                    selectgridcell(rowindex + 1, datafield, !shift);
                                }
                                else selectionchanged = true;
                            }
                        }
                    }
                    break;
                case 'singlerow':
                case 'multiplerows':
                case 'multiplerowsextended':
                    var rowindex = self.getselectedrowindex();
                    if (rowindex == null || rowindex == -1)
                        return true;

                    rowindex = this.getrowvisibleindex(rowindex);
                    var selectgridrow = function (index, clearselection) {
                        var tryselect = function (index) {
                            var datarecord = self.dataview.loadedrecords[index];
                            if (datarecord != undefined) {
                                var visibleindex = datarecord.boundindex;
                                var tmpindex = self.selectedrowindex;
                                if (clearselection || clearselection == undefined) {
                                    self.clearselection();
                                }
                                self.selectedrowindex = tmpindex;
                                self.selectrow(visibleindex, false);
                                var scrolled = self.ensurerowvisible(index);
                                if (!scrolled) {
                                    self._rendervisualrows();
                                }
                                selectionchanged = true;
                                return true;
                            }
                            return false;
                        }
                        if (!tryselect(index)) {
                            self.ensurerowvisible(index);
                            tryselect(index, clearselection);
                            if (self.virtualmode) {
                                self.host.focus();
                            }
                        }
                        if (event.shiftKey && key != 9) {
                            if (self.selectionmode == 'multiplerowsextended') {
                                if (self._lastClickedCell) {
                                    self._selectrowpath(index);
                                    self.selectedrowindex = index;
                                    return;
                                }
                            }
                        }
                        else if (!event.shiftKey) {
                            self._lastClickedCell = { row: index };
                        }
                    }
                    var shift = event.shiftKey && self.selectionmode != 'singlerow' && self.selectionmode != 'multiplerows';

                    var home = function () {
                        selectgridrow(0, !shift);
                    }
                    var end = function () {
                        var newindex = datainfo.rowscount - 1;
                        selectgridrow(newindex, !shift);
                    }

                    var ctrl = event.ctrlKey;
                    if (key == 36 || (ctrl && key == 38)) {
                        home();
                    }
                    else if (key == 35 || (ctrl && key == 40)) {
                        end();
                    }
                    else if (key == 33) {
                        if (rowindex - pagesize >= 0) {
                            var newindex = rowindex - pagesize;
                            selectgridrow(newindex, !shift);
                        }
                        else {
                            home();
                        }
                    }
                    else if (key == 34) {
                        if (datainfo.rowscount > rowindex + pagesize) {
                            var newindex = rowindex + pagesize;
                            selectgridrow(newindex, !shift);
                        }
                        else {
                            end();
                        }
                    }
                    else if (key == 38) {
                        if (rowindex > 0) {
                            selectgridrow(rowindex - 1, !shift);
                        }
                        else selectionchanged = true;
                    }
                    else if (key == 40) {
                        if (datainfo.rowscount > rowindex + 1) {
                            selectgridrow(rowindex + 1, !shift);
                        }
                        else selectionchanged = true;
                    }
                    break;
            }

            if (selectionchanged) {
                if (self.autosavestate) {
                    if (self.savestate) self.savestate();
                }

                if (self.editcell != null && self.endcelledit) {
                    self.endcelledit(self.editcell.row, self.editcell.column, true, true);
                }
                return false;
            }
            return true;
        },

        _handlemousemove: function (event, self) {
            if (self.vScrollInstance.isScrolling())
                return;

            if (self.hScrollInstance.isScrolling())
                return;

            var columnheaderheight;
            var groupsheaderheight;
            var hostoffset;
            var x;
            var y;

            if (self.enablehover || self.selectionmode == 'multiplerows') {
                columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                groupsheaderheight += toolbarheight;
                hostoffset = this.host.offset();
                if (this.hasTransform) {
                    hostoffset = $.jqx.utilities.getOffset(this.host);
                }
                var bodyOffset = this._getBodyOffset();
                hostoffset.left += bodyOffset.left;
                hostoffset.top += bodyOffset.top;
                x = event.pageX - hostoffset.left;
                y = event.pageY - columnheaderheight - hostoffset.top - groupsheaderheight;
            }

            if (self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') {
                if (self.mousecaptured == true) {
                    return;
                }
            }

            if (self.enablehover) {
                if (self.disabled) {
                    return;
                }

                if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {
                    return;
                }

                var rowinfo = this._hittestrow(x, y);
                if (!rowinfo)
                    return;

                var row = rowinfo.row;
                var index = rowinfo.index;

                // if the new index is the same as the last, do nothing.
                if (this.hoveredrow != -1 && index != -1 && this.hoveredrow == index && this.selectionmode.indexOf('cell') == -1) {
                    return;
                }

                this._clearhoverstyle();

                if (index == -1 || row == undefined)
                    return;

                var tablerow = this.hittestinfo[index].visualrow;
                if (tablerow == null)
                    return;

                if (this.hittestinfo[index].details) {
                    return;
                }

                if (event.clientX > $(tablerow).width() + $(tablerow).offset().left) return;

                var startindex = 0;
                if (self.rowdetails && self.showrowdetailscolumn) {
                    startindex = 1;
                }

                if (tablerow.cells.length == 0)
                    return;

                var cellclass = tablerow.cells[startindex].className;
                if (row.group || cellclass.indexOf('jqx-grid-cell-selected') != -1)
                    return;

                this.hoveredrow = index;

                if (this.selectionmode.indexOf('cell') != -1) {
                    var cellindex = -1;
                    var hScrollInstance = this.hScrollInstance;
                    var horizontalscrollvalue = hScrollInstance.value;

                    for (var i = 0; i < tablerow.cells.length; i++) {
                        var left = parseInt($(this.columnsrow[0].cells[i]).css('left')) - horizontalscrollvalue;
                        var right = left + $(this.columnsrow[0].cells[i]).width();
                        if (right >= x && x >= left) {
                            cellindex = i;
                            break;
                        }
                    }

                    if (cellindex != -1) {
                        var tablecell = tablerow.cells[cellindex];
                        if (tablecell.className.indexOf('jqx-grid-cell-selected') == -1) {
                            if (tablecell.className.indexOf('jqx-grid-group') == -1) {
                                $(tablecell).addClass(this.toTP('jqx-grid-cell-hover'));
                                $(tablecell).addClass(this.toTP('jqx-fill-state-hover'));
                            }
                        }
                    }
                    return;
                }

                for (var i = startindex; i < tablerow.cells.length; i++) {
                    var tablecell = tablerow.cells[i];
                    if (tablecell.className.indexOf('jqx-grid-group') == -1) {
                        $(tablecell).addClass(this.toTP('jqx-grid-cell-hover'));
                        $(tablecell).addClass(this.toTP('jqx-fill-state-hover'));
                    }
                }
            }
            else return true;
        }
    });
})(jQuery);


(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        autoresizecolumns: function(resizetype)
        {
            if (resizetype != 'cells' && resizetype != 'all' && resizetype != 'column') resizetype = 'all';
            var me = this;
            var rows = this.getrows();
            if (this.pageable) {
                rows = this.dataview.rows;
            }

            var length = rows.length;
            if (length == undefined && rows != undefined) {
                var rowsArr = new Array();
                $.each(rows, function (index) {
                    rowsArr.push(this);
                });
                rows = rowsArr;
                length = rows.length;
            }

            var span = $("<span></span>");
            span.addClass('jqx-grid-cell');
            $(document.body).append(span);
            var textlength = [];
            var maxLength = [];
            var maxText = [];
            var hostwidth = me.host.width();
            if (me.vScrollBar[0].style.visibility != 'hidden') {
                hostwidth -= this.scrollbarsize + 5;
            }
            if (hostwidth < 0) hostwidth = 0;

            for (var i = 0; i < length; i++) {
                var row = rows[i];

                for (var j = 0; j < this.columns.records.length; j++) {
                    var column = this.columns.records[j];
                    if (column.hidden) continue;

                    if (maxLength[column.datafield] == undefined) {
                        maxLength[column.datafield] = 0;
                    }

                    if (maxText[column.datafield] == undefined) {
                        maxText[column.datafield] = "";
                    }

                    var text = row[column.datafield];
                    if (column.cellsformat != '') {
                        if ($.jqx.dataFormat) {
                            if ($.jqx.dataFormat.isDate(text)) {
                                text = $.jqx.dataFormat.formatdate(text, column.cellsformat, this.gridlocalization);
                            }
                            else if ($.jqx.dataFormat.isNumber(text)) {
                                text = $.jqx.dataFormat.formatnumber(text, column.cellsformat, this.gridlocalization);
                            }
                        }
                    }
                    else if (column.cellsrenderer)
                        text = column.cellsrenderer(row, column, text).toString();

                    if (resizetype == undefined || resizetype == 'cells' || resizetype == 'all') {
                        var textlength = text.toString().length;
                        if (textlength > maxLength[column.datafield]) {
                            maxLength[column.datafield] = textlength;
                            maxText[column.datafield] = text;
                        }
                    }

                    if (resizetype == 'column' || resizetype == 'all') {
                        if (column.text.toString().length > maxLength[column.datafield]) {
                            maxText[column.datafield] = column.text;
                        }
                    }
                }
            }

            for (var j = 0; j < this.columns.records.length; j++) {
                var column = this.columns.records[j];
                if (maxText[column.datafield] == undefined) {
                    maxText[column.datafield] = column.text;
                }

                span[0].innerHTML = maxText[column.datafield];
                var maxWidth = span.outerWidth() + 20;
                if (span.children().length > 0) {
                    maxWidth = span.children().outerWidth() + 20;
                }
                if ($.browser.msie && $.browser.version < 8) {
                    maxWidth += 10;
                }

                if (maxWidth > column.maxwidth) maxWidth = column.maxwidth;

                if (column._width != undefined) column.__width = column._width;
                column._width = null;
                if (column.maxwidth == 'auto' || maxWidth <= column.maxwidth) {
                    var oldwidth = column.width;
                    column.width = maxWidth;
                    if (column._percentagewidth != undefined) {
                        column._percentagewidth = (column.width / hostwidth) * 100;
                    }
                    this._raiseEvent(14, { columntext: column.text, column: column.getcolumnproperties(), datafield: column.datafield, oldwidth: oldwidth, newwidth: maxWidth });
                }
            }

            span.remove();
            this._updatecolumnwidths();
            this._updatecellwidths();
            this._renderrows(this.virtualsizeinfo);
            for (var j = 0; j < this.columns.records.length; j++) {
                var column = this.columns.records[j];
                if (column.__width != undefined) {
                    column._width = column.__width;
                }
            }
        },

        autoresizecolumn: function(datafield, resizetype)
        {
            if (resizetype != 'cells' && resizetype != 'all' && resizetype != 'column') resizetype = 'all';
            if (datafield == undefined) return false;

            var rows = this.getrows();
            if (this.pageable) {
                rows = this.dataview.rows;
            }

            var column = this.getcolumn(datafield);
            if (column == undefined) return false;

            var length = rows.length;
            var span = $("<span></span>");
            span.addClass('jqx-grid-cell');
            $(document.body).append(span);
            var maxLength = 0;
            var maxText = "";
            var me = this;
            var hostwidth = me.host.width();
            if (me.vScrollBar[0].style.visibility != 'hidden') {
                hostwidth -= this.scrollbarsize + 5;
            }
            if (hostwidth < 0) hostwidth = 0;


            if (resizetype == undefined || resizetype == 'cells' || resizetype == 'all') {
                for (var i = 0; i < length; i++) {
                    var text = rows[i][datafield];
                    if (column.cellsformat != '') {
                        if ($.jqx.dataFormat) {
                            if ($.jqx.dataFormat.isDate(text)) {
                                text = $.jqx.dataFormat.formatdate(text, column.cellsformat, this.gridlocalization);
                            }
                            else if ($.jqx.dataFormat.isNumber(text)) {
                                text = $.jqx.dataFormat.formatnumber(text, column.cellsformat, this.gridlocalization);
                            }
                        }                
                    } else if (column.cellsrenderer)
                        text = column.cellsrenderer(row, column, text).toString();

                    var textlength = text.toString().length;
                    if (textlength > maxLength) {
                        maxLength = textlength;
                        maxText = text;
                    }
                }
            }

            if (resizetype == 'column' || resizetype == 'all') {
                if (column.text.toString().length > maxLength) {
                    maxText = column.text;
                }
            }
            if (maxText == undefined) {
                maxText = column.text;
            }

            span[0].innerHTML = maxText;
            var maxWidth = span.outerWidth() + 10;
            if ($.browser.msie && $.browser.version < 8) {
                maxWidth += 5;
            }

            span.remove();
            if (maxWidth > column.maxwidth) maxWidth = column.maxwidth;

            if (column.maxwidth == 'auto' || maxWidth <= column.maxwidth) {
                var oldwidth = column.width;
                column.width = maxWidth;
                if (column._width != undefined) column.__width = column._width;
                column._width = null;
                if (column._percentagewidth != undefined) {
                    column._percentagewidth = (column.width / hostwidth) * 100;
                }
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._raiseEvent(14, { columntext: column.text, column: column.getcolumnproperties(), datafield: datafield, oldwidth: oldwidth, newwidth: maxWidth });
                this._renderrows(this.virtualsizeinfo);
                if (column._width != undefined)
                    column._width = column.__width;
            }
        },

        _handlecolumnsresize: function () {
            var self = this;
            if (this.columnsresize) {
                var touchdevice = false;
                if (self.isTouchDevice()) {
                    touchdevice = true;
                }
                var mousemove = 'mousemove.resize' + this.element.id;
                var mousedown = 'mousedown.resize' + this.element.id;
                var mouseup = 'mouseup.resize' + this.element.id;
                if (touchdevice) {
                    var mousemove = 'touchmove.resize' + this.element.id;
                    var mousedown = 'touchstart.resize' + this.element.id;
                    var mouseup = 'touchend.resize' + this.element.id;
                }

                this.removeHandler($(document), mousemove);
                this.addHandler($(document), mousemove, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null)
                        return true;

                    if (self.resizablecolumn != null && !self.disabled && self.resizing) {
                        if (self.resizeline != null) {
                            var hostoffset = self.host.offset();
                            var startleft = parseInt(self.resizestartline.offset().left);

                            var minleft = startleft - self._startcolumnwidth
                            var mincolumnwidth = self.resizablecolumn.column.minwidth;
                            if (mincolumnwidth == 'auto') mincolumnwidth = 0;
                            else mincolumnwidth = parseInt(mincolumnwidth);
                            var maxcolumnwidth = self.resizablecolumn.column.maxwidth;
                            if (maxcolumnwidth == 'auto') maxcolumnwidth = 0;
                            else maxcolumnwidth = parseInt(maxcolumnwidth);
                            var pageX = event.pageX;
                            if (touchdevice) {
                                var touches = self.getTouches(event);
                                var touch = touches[0];
                                pageX = touch.pageX;
                            }

                            minleft += mincolumnwidth;

                            var maxleft = maxcolumnwidth > 0 ? startleft + maxcolumnwidth : 0;
                            var canresize = maxcolumnwidth == 0 ? true : self._startcolumnwidth + pageX - startleft < maxcolumnwidth ? true : false;

                            if (canresize) {
                                if (pageX >= hostoffset.left && pageX >= minleft && pageX <= hostoffset.left + self.host.width()) {
                                    if (maxleft != 0 && event.pageX < maxleft) {
                                        self.resizeline.css('left', pageX);
                                    }
                                    else if (maxleft == 0) {
                                        self.resizeline.css('left', pageX);
                                    }

                                    if (touchdevice)
                                        return false;
                                }
                            }
                        }
                    }

                    if (!touchdevice)
                        return false;
                });

                this.removeHandler($(document), mousedown);
                this.addHandler($(document), mousedown, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null)
                        return true;

                    if (self.resizablecolumn != null && !self.disabled) {
                        var resizeElement = self.resizablecolumn.columnelement;
                        if (resizeElement.offset().top + resizeElement.height() + 5 < event.pageY) {
                            self.resizablecolumn = null;
                            return;
                        }

                        self._startcolumnwidth = self.resizablecolumn.column.width;
                        self.resizablecolumn.column._width = null;
                        $(document.body).addClass('jqx-disableselect');
                        self._mouseDownResize = new Date();
                        self.resizing = true;

                        self._resizecolumn = self.resizablecolumn.column;
                        self.resizeline = self.resizeline || $('<div style="position: absolute;"></div>');
                        self.resizestartline = self.resizestartline || $('<div style="position: absolute;"></div>');

                        self.resizebackground = self.resizebackground || $('<div style="position: absolute; left: 0; top: 0; background: #000;"></div>');
                        self.resizebackground.css('opacity', 0.01);
                        self.resizebackground.css('cursor', "col-resize");
                        self.resizeline.css('cursor', 'col-resize');
                        self.resizestartline.css('cursor', 'col-resize');

                        self.resizeline.addClass(self.toThemeProperty('jqx-grid-column-resizeline'));
                        self.resizestartline.addClass(self.toThemeProperty('jqx-grid-column-resizestartline'));

                        $(document.body).append(self.resizeline);
                        $(document.body).append(self.resizestartline);
                        $(document.body).append(self.resizebackground);
                        var resizelineoffset = self.resizablecolumn.columnelement.offset();

                        self.resizebackground.css('left', self.host.offset().left);
                        self.resizebackground.css('top', self.host.offset().top);
                        self.resizebackground.width(self.host.width());
                        self.resizebackground.height(self.host.height());
                        self.resizebackground.css('z-index', 999999999);

                        var positionline = function (resizeline) {
                            resizeline.css('left', parseInt(resizelineoffset.left) + self._startcolumnwidth);
                            var hasgroups = self._groupsheader();
                            var groupsheaderheight = hasgroups ? self.groupsheader.height() : 0;
                            var toolbarheight = self.showtoolbar ? self.toolbarheight : 0;
                            groupsheaderheight += toolbarheight;
                            var statusbarheight = self.showstatusbar ? self.statusbarheight : 0;
                            groupsheaderheight += statusbarheight;

                            var pagerheight = 0;
                            if (self.pageable) {
                                pagerheight = self.pagerheight;
                            }
                            var scrollbaroffset = self.hScrollBar.css('visibility') == 'visible' ? 17 : 0;

                            resizeline.css('top', parseInt(resizelineoffset.top));
                            resizeline.css('z-index', 9999999999);
                            resizeline.height(self.host.height() - pagerheight - groupsheaderheight - scrollbaroffset);
                            if (self.enableanimations) {
                                resizeline.show('fast');
                            }
                            else {
                                resizeline.show();
                            }
                        }
                        positionline(self.resizeline);
                        positionline(self.resizestartline);
                    }
                });

                var doresize = function () {
                    $(document.body).removeClass('jqx-disableselect');
                    if (!self.resizing)
                        return;

                    self._mouseUpResize = new Date();
                    var timeout = self._mouseUpResize - self._mouseDownResize;
                    if (timeout < 200) {
                        self.resizing = false;
                        if (self._resizecolumn != null && self.resizeline != null && self.resizeline.css('display') == 'block') {
                            self._resizecolumn = null;
                            self.resizeline.hide();
                            self.resizestartline.hide();
                            self.resizebackground.remove();
                        }
                        return;
                    }

                    self.resizing = false;

                    if (self.disabled)
                        return;

                    var hostwidth = self.host.width();
                    if (self.vScrollBar[0].style.visibility != 'hidden') hostwidth -= 20;
                    if (hostwidth < 0) hostwidth = 0;

                    if (self._resizecolumn != null && self.resizeline != null && self.resizeline.css('display') == 'block') {
                        var resizelineleft = parseInt(self.resizeline.css('left'));
                        var resizestartlineleft = parseInt(self.resizestartline.css('left'));

                        var newwidth = self._startcolumnwidth + resizelineleft - resizestartlineleft;
                        var oldwidth = self._resizecolumn.width;
                        self._closemenu();
                        self._resizecolumn.width = newwidth;
                        if (self._resizecolumn._percentagewidth != undefined) {
                            self._resizecolumn._percentagewidth = (newwidth / hostwidth) * 100;
                        }
                        self._updatecolumnwidths();
                        self._updatecellwidths();
                        self._raiseEvent(14, { columntext: self._resizecolumn.text, column: self._resizecolumn.getcolumnproperties(), datafield: self._resizecolumn.datafield, oldwidth: oldwidth, newwidth: newwidth });
                        self._renderrows(self.virtualsizeinfo);
                        if (self.autosavestate) {
                            if (self.savestate) self.savestate();
                        }
                        self._resizecolumn = null;

                        self.resizeline.hide();
                        self.resizestartline.hide();
                        self.resizebackground.remove();
                    }
                    else {
                        self.resizablecolumn = null;
                    }
                }

                if (window.frameElement) {
                    if (document.referrer != "" || window.top != null) {
                        var parentLocation = '';
                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }

                        if (parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                doresize();
                            };

                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }
                    }
                }

                this.removeHandler($(document), mouseup);
                this.addHandler($(document), mouseup, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null)
                        return true;

                    doresize();
                });
            }
        }
    });
})(jQuery);


(function ($) {
    $.jqx.dataview.sort = function () {
        this.sortby = function (field, ascending, comparer) {
            var tmpToString = Object.prototype.toString;
            if (ascending == null) {
                this.sortdata = null;
                this.refresh();
                return;
            }

            if (ascending == undefined) {
                ascending = true;
            }

            if (ascending == 'a' || ascending == 'asc' || ascending == 'ascending' || ascending == true) {
                ascending = true;
            }
            else {
                ascending = false;
            }

            var lookupkey = field;
            this.sortfield = field;
            this.sortfielddirection = ascending ? "asc" : "desc";

            if (this.sortcache == undefined) {
                this.sortcache = {};
            }

            this.sortdata = [];
            var _sortdata = [];
            var sorted = false;
            if (lookupkey == 'constructor') lookupkey = "";

            if (!this.virtualmode && this.sortcache[lookupkey] != null) {
                var cache = this.sortcache[lookupkey];
                _sortdata = cache._sortdata;

                if (cache.direction == ascending) {
                    _sortdata.reverse();
                }
                else {
                    if (!cache.direction && ascending) {
                        _sortdata.reverse();
                    }

                    sorted = true;
                }

                if (_sortdata.length < this.totalrecords) {
                    this.sortcache = {};
                    sorted = false;
                    _sortdata = [];
                }
            }

            Object.prototype.toString = (typeof field == "function") ? field : function () { return this[field] };
            var records = this.records;

            var me = this;

            var datatype = '';

            if (this.source.datafields) {
                $.each(this.source.datafields, function () {
                    if (this.name == field) {
                        if (this.type) {
                            datatype = this.type;
                        }
                        return false;
                    }
                });
            }

            if (_sortdata.length == 0) {
                if (records.length) {
                    var length = records.length;
                    // tries to loop through the records with for loop for better performance.
                    for (var i = 0; i < length; i++) {
                        var record = records[i];
                        if (record != null) {
                            var recordvalue = record;
                            var sortkey = recordvalue.toString();
                            _sortdata.push({ sortkey: sortkey, value: recordvalue, index: i });
                        }
                    }
                }
                else {
                    var caniterate = false;
                    // tries to loop through the records with for..in for better performance.
                    for (obj in records) {
                        var record = records[obj];
                        if (record == undefined) {
                            caniterate = true;
                            break;
                        }

                        var recordvalue = record;
                        _sortdata.push({ sortkey: recordvalue.toString(), value: recordvalue, index: obj });
                    }

                    if (caniterate) {
                        $.each(records, function (i, value) {
                            _sortdata.push({ sortkey: value.toString(), value: value, index: i });
                        });
                    }
                }
            }

            if (!sorted) {
                if (comparer == null) {
                    _sortdata.sort(this._compare);
                }
                else {
                    _sortdata.sort(comparer);
                }
            }

            if (!ascending) {
                _sortdata.reverse();
            }

            Object.prototype.toString = tmpToString;
            this.sortdata = _sortdata;

            this.sortcache[lookupkey] = { _sortdata: _sortdata, direction: ascending };
            this.reload(this.records, this.rows, this.filters, this.updated, true);
        },

        this.clearsortdata = function () {
            this.sortcache = {};
            this.sortdata = [];
        }

        this._compare = function (value1, value2) {
            var value1 = value1.sortkey;
            var value2 = value2.sortkey;
            if (value1 === undefined) { value1 = null; }
            if (value2 === undefined) { value2 = null; }
            if (value1 === null && value2 === null) {
                return 0;
            }
            if (value1 === null && value2 !== null) {
                return 1;
            }
            if (value1 !== null && value2 === null) {
                return -1;
            }

            if ($.jqx.dataFormat) {
                if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {
                    if (value1 < value2) { return -1; }
                    if (value1 > value2) { return 1; }
                    return 0;
                }
                else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {
                    if (value1 < value2) { return -1; }
                    if (value1 > value2) { return 1; }
                    return 0;
                }
                else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {
                    value1 = String(value1).toLowerCase();
                    value2 = String(value2).toLowerCase();
                }
            }
            try {
                if (value1 < value2) { return -1; }
                if (value1 > value2) { return 1; }
            }
            catch (error) {
                var er = error;
            }

            return 0;
        };

        this._equals = function (value1, value2) {
            return (this._compare(value1, value2) === 0);
        };
    }

    $.extend($.jqx._jqxGrid.prototype, {
        //[optimize]
        _rendersortcolumn: function () {
            var self = this;
            var sortcolumn = this.getsortcolumn();

            if (this.sortdirection) {
                $.each(this.columns.records, function (i, value) {
                    var groupingsortelements = $.data(document.body, "groupsortelements" + this.displayfield);

                    if (sortcolumn == null || this.displayfield != sortcolumn) {
                        $(this.sortasc).hide();
                        $(this.sortdesc).hide();

                        if (groupingsortelements != null) {
                            groupingsortelements.sortasc.hide();
                            groupingsortelements.sortdesc.hide();
                        }
                    }
                    else {
                        if (self.sortdirection.ascending) {
                            $(this.sortasc).show();
                            $(this.sortdesc).hide();
                            if (groupingsortelements != null) {
                                groupingsortelements.sortasc.show();
                                groupingsortelements.sortdesc.hide();
                            }
                        }
                        else {
                            $(this.sortasc).hide();
                            $(this.sortdesc).show();
                            if (groupingsortelements != null) {
                                groupingsortelements.sortasc.hide();
                                groupingsortelements.sortdesc.show();
                            }
                        }
                    }
                });
            }
        },

        // gets the sort column.
        getsortcolumn: function () {
            if (this.sortcolumn) {
                return this.sortcolumn;
            }

            return null;
        },
        // removes the sorting.
        removesort: function () {
            this.sortby(null);
        },

        // sorts by a column.
        sortby: function (datafield, sortdirection, comparer) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            // clear the sorting.
            if (datafield == null) {
                sortdirection = null;
                datafield = this.sortcolumn;
            }

            if (datafield) {
                var self = this;
                if (comparer == undefined && self.source.sortcomparer != null) {
                    comparer = self.source.sortcomparer;
                }

                if (sortdirection == 'a' || sortdirection == 'asc' || sortdirection == 'ascending' || sortdirection == true) {
                    ascending = true;
                }
                else {
                    ascending = false;
                }

                //var columnbydatafield = self.getcolumn(datafield);
                //if (columnbydatafield == undefined || columnbydatafield == null)
                //    return;

                if (sortdirection != null) {
                    self.sortdirection = { 'ascending': ascending, 'descending': !ascending };
                }
                else {
                    self.sortdirection = { 'ascending': false, 'descending': false };
                }

                if (sortdirection != null) {
                    self.sortcolumn = datafield;
                }
                else {
                    self.sortcolumn = null;
                }

                if (self.source.sort || self.virtualmode) {
                    self.dataview.sortfield = datafield;
                    if (sortdirection == null) {
                        self.dataview.sortfielddirection = "";
                    }
                    else {
                        self.dataview.sortfielddirection = ascending ? "asc" : "desc";
                    }
                    if (self.source.sort) {
                        self.source.sort(datafield, sortdirection);
                    } 
                }
                else {
                    self.dataview.sortby(datafield, sortdirection, comparer);
                }

                // if grouping is enabled, we need to refresh the groups too.
                if (self.groupable && self.groups.length > 0) {
                    self._render(true, false, false);
                    if (self._updategroupheadersbounds) {
                        self._updategroupheadersbounds();
                    }
                }
                else {
                    if (self.pageable) {
                        self.dataview.updateview();
                    }
                    self._updaterowsproperties();
                    self.rendergridcontent(true);
                }
                self._raiseEvent(6, { sortinformation: self.getsortinformation() });
            }
        },

        _togglesort: function (column) {
            var self = this;
            if (column.sortable && self.sortable) {
                var sortinformation = self.getsortinformation();
                var checked = null;
                if (sortinformation.sortcolumn != null && sortinformation.sortcolumn == column.displayfield) {
                    checked = sortinformation.sortdirection.ascending;
                    if (self.sorttogglestates > 1) {
                        if (checked == true) {
                            checked = false;
                        }
                        else {
                            checked = null;
                        }
                    }
                    else {
                        checked = !checked;
                    }
                }
                else {
                    checked = true;
                }

                self.sortby(column.displayfield, checked, null);
            }
        }
    });
})(jQuery);


(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        _updatefilterrowui: function (forceupdateui) {
            var columnslength = this.columns.records.length;
            var left = 0;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                var tablecolumn = $(this.filterrow[0].cells[j]);
                tablecolumn.css('left', left);
                var updateui = true;
                if (tablecolumn.width() == width)
                    updateui = false;
                if (forceupdateui) updateui = true;
                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                if (!updateui)
                    continue;

                if (columnrecord.createfilterwidget && columnrecord.filtertype == 'custom') {
                    columnrecord.createfilterwidget(columnrecord, tablecolumn);
                }
                else {
                    if (columnrecord.filterable) {
                        var addtextfilter = function (me, tablecolumn) {
                            var textbox = $(tablecolumn.children()[0]);
                            textbox.width(width - 10);
                        }

                        switch (columnrecord.filtertype) {
                            case 'number':
                                $(tablecolumn.children()[0]).width(width);
                                tablecolumn.find('input').width(width - 30);
                                break;
                            case 'date':
                                if (this.host.jqxDateTimeInput) {
                                    $(tablecolumn.children()[0]).jqxDateTimeInput({ width: width - 10 });
                                }
                                else addtextfilter(this, tablecolumn);
                                break;
                            case 'textbox':
                            case 'default':
                                addtextfilter(this, tablecolumn);
                                break;
                            case 'list':
                            case 'checkedlist':
                                if (this.host.jqxDropDownList) {
                                    $(tablecolumn.children()[0]).jqxDropDownList({ width: width - 10 });
                                }
                                else addtextfilter(this, tablecolumn);
                                break;
                            case 'bool':
                            case 'boolean':
                                if (!this.host.jqxCheckBox) {
                                    addtextfilter(this, tablecolumn);
                                }
                                break;
                        }
                    }
                }
            }
            var tablerow = $(this.filterrow.children()[0]);
            tablerow.width(parseInt(left) + 2);
            tablerow.height(this.filterrowheight);
        },

        clearfilterrow: function () {
            this._disablefilterrow = true;
            var columnslength = this.columns.records.length;
            var left = 0;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var tablecolumn = $(this.filterrow[0].cells[j]);

                if (columnrecord.filterable) {
                    var addtextfilter = function (me, tablecolumn) {
                        var textbox = $(tablecolumn.children()[0]);
                        textbox.val("");
                    }

                    switch (columnrecord.filtertype) {
                        case 'number':
                            tablecolumn.find('input').val("");
                            break;
                        case 'date':
                            if (this.host.jqxDateTimeInput) {
                                $(tablecolumn.children()[0]).jqxDateTimeInput('setDate', null);
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'textbox':
                        case 'default':
                            addtextfilter(this, tablecolumn);
                            break;
                        case 'list':
                            if (this.host.jqxDropDownList) {
                                $(tablecolumn.children()[0]).jqxDropDownList('clearSelection');
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'checkedlist':
                            if (this.host.jqxDropDownList) {
                                $(tablecolumn.children()[0]).jqxDropDownList('checkAll', false);
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'bool':
                        case 'boolean':
                            if (!this.host.jqxCheckBox) {
                                addtextfilter(this, tablecolumn);
                            }
                            else $(tablecolumn.children()[0]).jqxCheckBox({ checked: null });
                            break;
                    }

                }
            }
            this._disablefilterrow = false;
        },

        _applyfilterfromfilterrow: function () {
            if (this._disablefilterrow == true)
                return;

            var columnslength = this.columns.records.length;
            var me = this;

            for (var j = 0; j < columnslength; j++) {
                var filtergroup = new $.jqx.filter();
                var columnrecord = this.columns.records[j];
                if (!columnrecord.filterable) continue;

                var type = me._getcolumntypebydatafield(columnrecord);
                var filtertype = me._getfiltertype(type);
                var filter_or_operator = 1;
                var hasFilter = true;
                var columnrecordfiltertype = columnrecord.filtertype;
                var addstringfilter = function (columnrecord, filtertype, filtergroup) {
                    var result = true;
                    if (columnrecord._filterwidget) {
                        var filtervalue = columnrecord._filterwidget.val();
                        if (filtervalue != "") {
                            var filtercondition = 'equal';
                            if (filtertype == 'stringfilter') {
                                var filtercondition = 'contains';
                            }
                            if (filtertype != 'stringfilter') {
                                var hasoperator = 0;
                                if (filtervalue.indexOf('>') != -1) {
                                    filtercondition = "greater_than";
                                    hasoperator = 1;
                                }
                                if (filtervalue.indexOf('<') != -1) {
                                    filtercondition = "less_than";
                                    hasoperator = 1;
                                }
                                if (filtervalue.indexOf('=') != -1) {
                                    if (filtercondition == "greater_than") {
                                        filtercondition = "greater_than_or_equal";
                                        hasoperator = 2;
                                    }
                                    else if (filtercondition == "less_than") {
                                        filtercondition = "less_than_or_equal";
                                        hasoperator = 2;
                                    }
                                    else {
                                        filtercondition = "equal";
                                        hasoperator = 1;
                                    }
                                }
                                if (hasoperator != 0) {
                                    filtervalue = filtervalue.substring(hasoperator);
                                    if (filtervalue.length < 1) return false;
                                }
                            }

                            if (columnrecord.filtercondition != undefined) filtercondition = columnrecord.filtercondition;
                            var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter);
                        }
                        else result = false;
                    }
                    return result;
                }

                switch (columnrecord.filtertype) {
                    case 'date':
                        if (columnrecord._filterwidget.jqxDateTimeInput) {
                            var filtervalue = columnrecord._filterwidget.jqxDateTimeInput('getRange');
                            if (filtervalue != null && filtervalue.from != null && filtervalue.to != null) {
                                var filtercondition = 'GREATER_THAN_OR_EQUAL';
                                var date1 = new Date(0);
                                date1.setHours(0);
                                date1.setFullYear(filtervalue.from.getFullYear(), filtervalue.from.getMonth(), filtervalue.from.getDate());
                                var date2 = new Date(0);
                                date2.setHours(0);
                                date2.setFullYear(filtervalue.to.getFullYear(), filtervalue.to.getMonth(), filtervalue.to.getDate());

                                var filter1 = filtergroup.createfilter(filtertype, date1, filtercondition);
                                filtergroup.addfilter(0, filter1);

                                var filtercondition2 = 'LESS_THAN_OR_EQUAL';
                                var filter2 = filtergroup.createfilter(filtertype, date2, filtercondition2);
                                filtergroup.addfilter(0, filter2);
                            }
                            else hasFilter = false;
                        }
                        else {
                            hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        }
                        break;
                    case 'number':
                        if (columnrecord._filterwidget) {
                            var filtervalue = columnrecord._filterwidget.find('input').val();
                            var index = columnrecord._filterwidget.find('.filter').jqxDropDownList('selectedIndex');
                            var condition = filtergroup.getoperatorsbyfiltertype(filtertype)[index];
                            if (me.updatefilterconditions) {
                                var newfilterconditions = me.updatefilterconditions(filtertype, filtergroup.getoperatorsbyfiltertype(filtertype));
                                if (newfilterconditions != undefined) {
                                    filtergroup.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                                }
                                var condition = filtergroup.getoperatorsbyfiltertype(filtertype)[index];
                            }
                            var nullcondition1 = condition == "NULL" || condition == "NOT_NULL";
                            var emptycondition1 = condition == "EMPTY" || condition == "NOT_EMPTY";
                            if (filtervalue != undefined && filtervalue.length > 0 || nullcondition1 || emptycondition1) {
                                filter1 = filtergroup.createfilter(filtertype, filtervalue, condition, null, columnrecord.cellsformat, me.gridlocalization);
                                filtergroup.addfilter(0, filter1);
                            }
                            else hasFilter = false;
                        }
                        else {
                            hasFilter = false;
                        }
                        break;
                    case 'textbox':
                    case 'default':
                        hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                    case 'bool':
                    case 'boolean':
                        if (columnrecord._filterwidget.jqxCheckBox) {
                            var filtervalue = columnrecord._filterwidget.jqxCheckBox('checked');
                            if (filtervalue != null) {
                                var filtercondition = 'equal';
                                var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                filtergroup.addfilter(filter_or_operator, filter);
                            }
                            else hasFilter = false;
                        } else hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                    case 'list':
                        var widget = columnrecord._filterwidget.jqxDropDownList('listBox');
                        if (widget.selectedIndex > 0) {
                            var selectedItem = widget.getItem(widget.selectedIndex);
                            var filtervalue = selectedItem.value;
                            var filtercondition = 'equal';
                            var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter);
                        } else {
                            hasFilter = false;
                        }
                        break;
                    case 'checkedlist':
                        if (columnrecord._filterwidget.jqxDropDownList) {
                            var widget = columnrecord._filterwidget.jqxDropDownList('listBox');
                            var checkedItems = widget.getCheckedItems();
                            if (checkedItems.length == 0) {
                                for (var i = 1; i < widget.items.length; i++) {
                                    var filtervalue = widget.items[i].value;
                                    var filtercondition = 'not_equal';
                                    var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                    filtergroup.addfilter(0, filter);
                                }

                                hasFilter = true;
                            }
                            else {
                                if (checkedItems.length != widget.items.length) {
                                    for (var i = 0; i < checkedItems.length; i++) {
                                        var filtervalue = checkedItems[i].value;
                                        var filtercondition = 'equal';
                                        var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                        filtergroup.addfilter(filter_or_operator, filter);
                                    }
                                }
                                else hasFilter = false;
                            }
                        }
                        else hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                }

                if (!this._loading) {
                    if (hasFilter) {
                        this.addfilter(columnrecord.displayfield, filtergroup, false);
                    }
                    else {
                        this.removefilter(columnrecord.displayfield, false);
                    }
                }
            }
            if (!this._loading) {
                this.applyfilters();
            }
        },

        _updatefilterrow: function () {
            var tablerow = $('<div style="position: relative;" id="row00' + this.element.id + '"></div>');
            var left = 0;
            var columnslength = this.columns.records.length;
            var cellclass = this.toThemeProperty('jqx-grid-cell');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            var zindex = columnslength + 10;
            var cells = new Array();
            var me = this;
            this.filterrow[0].cells = cells;
            tablerow.height(this.filterrowheight);
            this.filterrow.children().detach();
            this.filterrow.append(tablerow);
            if (!this._filterrowcache)
                this._filterrowcache = new Array();

            var usefromcache = false;
            var _newfilterrowcache = new Array();
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;

                var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + cellclass + '"></div>');
                tablerow.append(tablecolumn);
                tablecolumn.css('left', left);
                tablecolumn.css('z-index', zindex--);
                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                cells[cells.length] = tablecolumn[0];

                var addFilterWidget = true;
                if (this.groupable) {
                    var detailsoffset = this.rowdetails ? 1 : 0;
                    if (this.groups.length + detailsoffset > j) {
                        addFilterWidget = false;
                    }
                }
                if (this.rowdetails && j == 0) addFilterWidget = false;

                if (addFilterWidget) {
                    if (columnrecord.filtertype == 'custom' && columnrecord.createfilterwidget) {
                        var applyfilter = function () {
                            me._applyfilterfromfilterrow();
                        }
                        columnrecord.createfilterwidget(columnrecord, tablecolumn, applyfilter);
                    }
                    else {
                        if (columnrecord.filterable) {
                            if (this._filterrowcache[columnrecord.datafield]) {
                                usefromcache = true;
                                tablecolumn.append(this._filterrowcache[columnrecord.datafield]);
                                columnrecord._filterwidget = this._filterrowcache[columnrecord.datafield];
                            }
                            else {
                                this._addfilterwidget(columnrecord, tablecolumn, width);
                                _newfilterrowcache[columnrecord.datafield] = columnrecord._filterwidget;
                            }
                        }
                    }
                }
            }
            this._filterrowcache = _newfilterrowcache;
            if ($.browser.msie && $.browser.version < 8) {
                tablerow.css('z-index', zindex--);
            }

            tablerow.width(parseInt(left) + 2);
            this.filterrow.addClass(cellclass);
            this.filterrow.css('border-top-width', '1px');
            if (usefromcache) {
                this._updatefilterrowui(true);
            }
        },

        _addfilterwidget: function (columnrecord, tablecolumn, width) {
            var me = this;
            var filtervalue = "";
            for (var f = 0; f < me.dataview.filters.length; f++) {
                var currentfilter = me.dataview.filters[f];
                if (currentfilter.datafield && currentfilter.datafield == columnrecord.datafield) {
                    filtervalue = currentfilter.filter.getfilters()[0].value;
                    break;
                }
            }

            var addtextfilter = function (me, tablecolumn) {
                var textbox = $('<input autocomplete="off" type="textarea"/>');
                textbox[0].id = $.jqx.utilities.createId();
                textbox.addClass(me.toThemeProperty('jqx-input'));
                textbox.addClass(me.toThemeProperty('jqx-widget-content'));
                textbox.appendTo(tablecolumn);
                textbox.width(width - 10);
                textbox.height(me.filterrowheight - 10);
                textbox.css('margin', '4px');
                if (columnrecord.createfilterwidget) {
                    columnrecord.createfilterwidget(columnrecord, tablecolumn, textbox);
                }
                columnrecord._filterwidget = textbox;

                textbox.focus(function () {
                    me.focusedfilter = textbox;
                });

                textbox.bind('keydown', function (event) {
                    if (event.keyCode == '13')
                        me._applyfilterfromfilterrow();
                    if (textbox[0]._writeTimer) clearTimeout(textbox[0]._writeTimer);
                    textbox[0]._writeTimer = setTimeout(function () {
                        if (!me._loading) {
                            if (me["_oldWriteText" + textbox[0].id] != textbox.val()) {
                                me._applyfilterfromfilterrow();
                                me["_oldWriteText" + textbox[0].id] = textbox.val();
                            }
                        }
                    }, 400);
                    me.focusedfilter = textbox;
                });
                me.host.removeClass('jqx-disableselect');
                me.content.removeClass('jqx-disableselect');
                textbox.val(filtervalue);
            }

            switch (columnrecord.filtertype) {
                case 'number':
                    var numberwidget = $("<div></div>");
                    numberwidget.width(tablecolumn.width());
                    numberwidget.height(this.filterrowheight);
                    tablecolumn.append(numberwidget);
                    var width = tablecolumn.width() - 20;
                    var addInput = function (element, width, sign) {
                        var textbox = $('<input style="float: left;" autocomplete="off" type="textarea"/>');
                        textbox[0].id = $.jqx.utilities.createId();
                        textbox.addClass(me.toThemeProperty('jqx-input'));
                        textbox.addClass(me.toThemeProperty('jqx-widget-content'));
                        textbox.appendTo(element);
                        textbox.width(width - 10);
                        textbox.height(me.filterrowheight - 10);
                        textbox.css('margin', '4px');
                        textbox.css('margin-right', '2px');
                        textbox.bind('keydown', function (event) {
                            if (event.keyCode == '13')
                                me._applyfilterfromfilterrow();
                            if (textbox[0]._writeTimer) clearTimeout(textbox[0]._writeTimer);
                            textbox[0]._writeTimer = setTimeout(function () {
                                if (!me._loading) {

                                    if (me["_oldWriteText" + textbox[0].id] != textbox.val()) {
                                        me._applyfilterfromfilterrow();
                                        me["_oldWriteText" + textbox[0].id] = textbox.val();
                                    }
                                }
                            }, 400);
                            me.focusedfilter = textbox;
                        });
                        textbox.val(filtervalue);
                        return textbox;
                    }

                    addInput(numberwidget, width);
                    var source = me._getfiltersbytype('number');
                    var dropdownlist = $("<div class='filter' style='float: left;'></div>");
                    dropdownlist.css('margin-top', '4px');
                    dropdownlist.appendTo(numberwidget);

                    var selectedIndex = 2;
                    if (columnrecord.filtercondition != null) {
                        var newIndex = source.indexOf(columnrecord.filtercondition);
                        if (newIndex != -1)
                            selectedIndex = newIndex;
                    }

                    dropdownlist.jqxDropDownList({ dropDownHorizontalAlignment: 'right', enableBrowserBoundsDetection: true, selectedIndex: selectedIndex, width: 18, height: 20, dropDownHeight: 150, dropDownWidth: 170, source: source, theme: me.theme });
                    dropdownlist.jqxDropDownList({
                        selectionRenderer: function (element) {
                            return "";
                        }
                    });
                    dropdownlist.jqxDropDownList('setContent', "");
                    dropdownlist.find('.jqx-dropdownlist-content').hide();
                    if (columnrecord.createfilterwidget) {
                        columnrecord.createfilterwidget(columnrecord, tablecolumn, numberwidget);
                    }
                    columnrecord._filterwidget = numberwidget;
                    dropdownlist.bind('select', function () {
                        if (columnrecord._filterwidget.find('input').val().length > 0) {
                            me._applyfilterfromfilterrow();
                        }
                    });
                    break;
                case 'textbox':
                case 'default':
                default:
                    addtextfilter(this, tablecolumn);
                    break;
                case 'date':
                    if (this.host.jqxDateTimeInput) {
                        var datetimeinput = $("<div></div>");
                        datetimeinput.css('margin', '4px');
                        datetimeinput.appendTo(tablecolumn);
                        datetimeinput.jqxDateTimeInput({ showFooter: true, formatString: columnrecord.cellsformat, selectionMode: 'range', value: null, theme: this.theme, width: width - 10, height: this.filterrowheight - 10 });
                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, datetimeinput);
                        }
                        columnrecord._filterwidget = datetimeinput;
                        datetimeinput.bind('valuechanged', function (event) {
                            me._applyfilterfromfilterrow();
                            me.focusedfilter = null;
                        });
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
                case 'list':
                case 'checkedlist':
                    if (this.host.jqxDropDownList) {
                        var dataadapter = this._getfilterdataadapter(columnrecord);

                        var autoheight = true;
                        var dropdownlist = $("<div></div>");
                        dropdownlist.css('margin', '4px');
                        var datafield = columnrecord.datafield;
                        var checkboxes = columnrecord.filtertype == 'checkedlist' ? true : false;
                        dropdownlist.jqxDropDownList({ checkboxes: checkboxes, source: dataadapter, autoDropDownHeight: autoheight, theme: this.theme, width: width - 10, height: this.filterrowheight - 10, displayMember: columnrecord.displayfield, valueMember: datafield });
                        dropdownlist.appendTo(tablecolumn);
                        var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                        var listbox = dropdownlist.jqxDropDownList('listBox');
                        if (dropdownitems.length < 8) {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', true);
                        }
                        else {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', false);
                            autoheight = false;
                        }
                        if (checkboxes) {
                            dropdownlist.jqxDropDownList({
                                selectionRenderer: function () {
                                    return me.gridlocalization.filterselectstring;
                                }
                            });
                            var spanElement = $('<span style="top: 2px; position: relative; color: inherit; border: none; background-color: transparent;">' + me.gridlocalization.filterselectstring + '</span>');
                            spanElement.addClass(this.toThemeProperty('jqx-item'));
                            if (listbox != undefined) {
                                if (!autoheight) {
                                    listbox.host.height(200);
                                }
                                listbox.insertAt(me.gridlocalization.filterselectallstring, 0);
                                dropdownlist.jqxDropDownList('setContent', spanElement);
                                var handleCheckChange = true;
                                var checkedItems = new Array();
                                listbox.checkAll(false);
                                listbox.host.bind('checkChange', function (event) {
                                    dropdownlist[0]._selectionChanged = true;
                                    if (!handleCheckChange)
                                        return;

                                    if (event.args.label != me.gridlocalization.filterselectallstring) {
                                        handleCheckChange = false;
                                        listbox.host.jqxListBox('checkIndex', 0, true, false);
                                        var checkedItems = listbox.host.jqxListBox('getCheckedItems');
                                        var items = listbox.host.jqxListBox('getItems');

                                        if (checkedItems.length == 1) {
                                            listbox.host.jqxListBox('uncheckIndex', 0, true, false);
                                        }
                                        else if (items.length != checkedItems.length) {
                                            listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                                        }
                                        handleCheckChange = true;
                                    }
                                    else {
                                        handleCheckChange = false;
                                        if (event.args.checked) {
                                            listbox.host.jqxListBox('checkAll', false);
                                        }
                                        else {
                                            listbox.host.jqxListBox('uncheckAll', false);
                                        }

                                        handleCheckChange = true;
                                    }
                                });
                            }
                        }
                        else {
                            listbox.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0);
                            dropdownlist.jqxDropDownList({ selectedIndex: 0 });
                        }

                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, dropdownlist);
                        }
                        columnrecord._filterwidget = dropdownlist;

                        var dropdownlistWrapper = dropdownlist.jqxDropDownList('dropdownlistWrapper');
                        if (columnrecord.filtertype == 'list') {
                            this.addHandler(dropdownlist, 'select', function (event) {
                                if (event.args && event.args.type != 'none') {
                                    me._applyfilterfromfilterrow();
                                    me.focusedfilter = null;
                                }
                            });
                        }
                        else {
                            this.addHandler(dropdownlist, 'close', function (event) {
                                if (dropdownlist[0]._selectionChanged) {
                                    me._applyfilterfromfilterrow();
                                    me.focusedfilter = null;
                                    dropdownlist[0]._selectionChanged = false;
                                }
                            });
                        }
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
                case 'bool':
                case 'boolean':
                    if (this.host.jqxCheckBox) {
                        var checkbox = $('<div tabIndex=0 style="opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>');
                        checkbox.appendTo(tablecolumn);
                        checkbox.jqxCheckBox({ enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, hasThreeStates: true, theme: this.theme, checked: null });
                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, checkbox);
                        }
                        if (filtervalue === true || filtervalue == "true") {
                            checkbox.jqxCheckBox({ checked: true });
                        }
                        else if (filtervalue === false || filtervalue == "false") {
                            checkbox.jqxCheckBox({ checked: false });
                        }

                        columnrecord._filterwidget = checkbox;
                        checkbox.bind('change', function (event) {
                            if (event.args) {
                                me.focusedfilter = null;
                                me._applyfilterfromfilterrow();
                            }
                        });
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
            }
        },

        _getfilterdataadapter: function (columnrecord) {
            var isdataadapter = this.source._source ? true : false;

            if (!isdataadapter) {
                dataadapter = new $.jqx.dataAdapter(this.source,
                            {
                                autoBind: false,
                                uniqueDataFields: [columnrecord.displayfield],
                                async: false
                            });
            }
            else {
                var dataSource =
                {
                    localdata: this.source.records,
                    datatype: this.source.datatype,
                    async: false
                }

                dataadapter = new $.jqx.dataAdapter(dataSource,
                {
                    autoBind: false,
                    async: false,
                    uniqueDataFields: [columnrecord.displayfield]
                });
            }
            if (columnrecord.filteritems && columnrecord.filteritems.length > 0) {
                var dataSource =
                {
                    localdata: columnrecord.filteritems,
                    datatype: this.source.datatype,
                    async: false
                }

                dataadapter = new $.jqx.dataAdapter(dataSource,
                {
                    autoBind: false,
                    async: false
                });
            }
            return dataadapter;
        },

        refreshfilterrow: function () {
            this._updatefilterrowui();
            this._updatelistfilters();
        },

        _updatelistfilters: function (endcelledit) {
            var me = this;
            var columnslength = this.columns.records.length;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                if (columnrecord.filterable) {
                    if (columnrecord.filtertype == 'list' || columnrecord.filtertype == 'checkedlist') {
                        var dropdownlist = columnrecord._filterwidget;
                        if (!endcelledit) {
                            if (columnrecord.filter == undefined) {
                                dropdownlist.jqxDropDownList('renderSelection');
                                continue;
                            }
                        }
                        else {
                            var dataadapter = this._getfilterdataadapter(columnrecord);
                            dataadapter.dataBind();
                            var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                            var equalSources = true;
                            if (dropdownitems.length != dataadapter.records.length + 1)
                                equalSources = false;

                            if (equalSources) {
                                for (var i = 1; i < dropdownitems.length; i++) {
                                    if (dropdownitems[i].label != dataadapter.records[i - 1][columnrecord.displayfield]) {
                                        equalSources = false;
                                        break;
                                    }
                                }
                            }
                            if (equalSources)
                                continue;
                        }

                        dropdownlist.jqxDropDownList('dataBind');
                        var checkboxes = columnrecord.filtertype == 'checkedlist' ? true : false;
                        var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                        var listbox = dropdownlist.jqxDropDownList('listBox');

                        if (checkboxes) {
                            dropdownlist.jqxDropDownList({
                                selectionRenderer: function () {
                                    return me.gridlocalization.filterselectstring;
                                }
                            });
                            var spanElement = $('<span style="top: 2px; position: relative; color: inherit; border: none; background-color: transparent;">' + this.gridlocalization.filterselectstring + '</span>');
                            spanElement.addClass(this.toThemeProperty('jqx-item'));
                            listbox.insertAt(this.gridlocalization.filterselectallstring, 0);
                            dropdownlist.jqxDropDownList('setContent', spanElement);
                            listbox.checkAll(false);
                            if (columnrecord.filter) {
                                listbox.uncheckAll(false);
                                var filters = columnrecord.filter.getfilters();

                                for (var i = 0; i < listbox.items.length; i++) {
                                    var label = listbox.items[i].label;
                                    $.each(filters, function () {
                                        if (this.condition == "NOT_EQUAL") return true;
                                        if (label == this.value) {
                                            listbox.checkIndex(i, false, false);
                                        }
                                    });
                                }
                                listbox._updateCheckedItems();
                                var checkedItemsLength = listbox.getCheckedItems().length;
                                if (listbox.items.length != checkedItemsLength && checkedItemsLength > 0) {
                                    listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                                }
                            }
                        }
                        else {
                            listbox.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0);
                            dropdownlist.jqxDropDownList({ selectedIndex: 0 });
                        }
                        if (dropdownitems.length < 8) {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', true);
                        }
                        else {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', false);
                        }
                    }
                }
            }
        },

        _renderfiltercolumn: function () {
            var self = this;

            if (this.filterable) {
                $.each(this.columns.records, function (i, value) {
                    if (self.autoshowfiltericon) {
                        if (this.filter) {
                            $(this.filtericon).show();
                        }
                        else {
                            $(this.filtericon).hide();
                        }
                    }
                    else {
                        if (this.filterable) {
                            $(this.filtericon).show();
                        }
                    }
                });
            }
        },

        _getcolumntypebydatafield: function (column) {
            var me = this;
            var type = 'string';
            var datafields = me.source.datafields || ((me.source._source) ? me.source._source.datafields : null);

            if (datafields) {
                var foundType = "";
                $.each(datafields, function () {
                    if (this.name == column.displayfield) {
                        if (this.type) {
                            foundType = this.type;
                        }
                        return false;
                    }
                });
                if (foundType)
                    return foundType;
            }

            if (column != null) {
                if (this.dataview.cachedrecords == undefined) {
                    return type;
                }

                var cell = null;

                if (!this.virtualmode) {
                    if (this.dataview.cachedrecords.length == 0)
                        return type;

                    cell = this.dataview.cachedrecords[0][column.displayfield];
                    if (cell != null && cell.toString() == "") {
                        return "string";
                    }
                }
                else {
                    $.each(this.dataview.cachedrecords, function () {
                        cell = this[column.displayfield];
                        return false;
                    });
                }

                if (cell != null) {
                    if (typeof cell == 'boolean') {
                        type = 'boolean';
                    }
                    else if ($.jqx.dataFormat.isNumber(cell)) {
                        type = 'number';
                    }
                    else {
                        var tmpvalue = new Date(cell);

                        if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                            if ($.jqx.dataFormat) {
                                tmpvalue = $.jqx.dataFormat.tryparsedate(cell);
                                if (tmpvalue != null) {
                                    return 'date';
                                }
                                else {
                                    type = 'string';
                                }
                            }
                            else type = 'string';
                        }
                        else {
                            type = 'date';
                        }
                    }
                }
            }
            return type;
        },

        _getfiltersbytype: function (type) {
            var me = this;
            var source = '';
            switch (type) {
                case "number":
                case "float":
                case "int":
                    source = me.gridlocalization.filternumericcomparisonoperators;
                    break;
                case "date":
                    source = me.gridlocalization.filterdatecomparisonoperators;
                    break;
                case "boolean":
                case "bool":
                    source = me.gridlocalization.filterbooleancomparisonoperators;
                    break;
                case "string":
                default:
                    source = me.gridlocalization.filterstringcomparisonoperators;
                    break;

            }
            return source;
        },

        _updatefilterpanel: function (me, element, column) {
            if (me == null || me == undefined) me = this;
            var type = me._getcolumntypebydatafield(column);
            var source = me._getfiltersbytype(type);

            if (!me.host.jqxDropDownList) {
                alert('jqxdropdownlist is not loaded.');
                return;
            }

            var $element = $(element);
            var clearbutton = $element.find('#filterclearbutton' + me.element.id);
            var filterbutton = $element.find('#filterbutton' + me.element.id);
            var condition = $element.find('#filter1' + me.element.id);
            var filteroperator = $element.find('#filter2' + me.element.id);
            var condition2 = $element.find('#filter3' + me.element.id);
            var input1 = $element.find('.filtertext1' + me.element.id);
            var input2 = $element.find('.filtertext2' + me.element.id);
            input1.val('');
            input2.val('');

            this.removeHandler(filterbutton, 'click');
            this.addHandler(filterbutton, 'click', function () {
                me._buildfilter(me, element, column);
                me._closemenu();
            });

            this.removeHandler(clearbutton, 'click');
            this.addHandler(clearbutton, 'click', function () {
                me._clearfilter(me, element, column);
                me._closemenu();
            });

            if (condition.jqxDropDownList('source') != source) {
                condition.jqxDropDownList({ enableBrowserBoundsDetection: false, source: source });
                condition2.jqxDropDownList({ enableBrowserBoundsDetection: false, source: source });
            }

            if (type == 'boolean' || type == 'bool') {
                condition.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 });
                condition2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 });
            }
            else {
                var autoDropDownHeight = false;
                if (source && source.length) {
                    if (source.length < 5) {
                        autoDropDownHeight = true;
                    }
                }

                condition.jqxDropDownList({ autoDropDownHeight: autoDropDownHeight, selectedIndex: 2 });
                condition2.jqxDropDownList({ autoDropDownHeight: autoDropDownHeight, selectedIndex: 2 });
            }
            filteroperator.jqxDropDownList({ selectedIndex: 0 });

            var filter = column.filter;
            if (filter != null) {
                var filter1 = filter.getfilterat(0);
                var filter2 = filter.getfilterat(1);
                var operator = filter.getoperatorat(0);
                var conditions = [];
                var filtertype = "";
                switch (type) {
                    case "number":
                    case "int":
                    case "float":
                    case "decimal":
                        filtertype = 'numericfilter';
                        conditions = filter.getoperatorsbyfiltertype('numericfilter');
                        break;
                    case "boolean":
                    case "bool":
                        filtertype = 'booleanfilter';
                        conditions = filter.getoperatorsbyfiltertype('booleanfilter');
                        break;
                    case "date":
                    case "time":
                        filtertype = 'datefilter';
                        conditions = filter.getoperatorsbyfiltertype('datefilter');
                        break;
                    case "string":
                        filtertype = 'stringfilter';
                        conditions = filter.getoperatorsbyfiltertype('stringfilter');
                        break;
                }
                if (me.updatefilterconditions) {
                    var newfilterconditions = me.updatefilterconditions(filtertype, conditions);
                    if (newfilterconditions != undefined) {
                        filter.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                        conditions = newfilterconditions;
                    }
                }

                var animationtype = this.enableanimations ? 'default' : 'none';
                if (filter1 != null) {
                    var index1 = conditions.indexOf(filter1.comparisonoperator);
                    var value1 = filter1.filtervalue;
                    input1.val(value1);
                    condition.jqxDropDownList({ selectedIndex: index1, animationType: animationtype });
                }
                if (filter2 != null) {
                    var index2 = conditions.indexOf(filter2.comparisonoperator);
                    var value2 = filter2.filtervalue;
                    input2.val(value2);
                    condition2.jqxDropDownList({ selectedIndex: index2, animationType: animationtype });
                }
                if (filter.getoperatorat(0) == undefined) {
                    filteroperator.jqxDropDownList({ selectedIndex: 0, animationType: animationtype });
                }
                else {
                    if (filter.getoperatorat(0) == 'and' || filter.getoperatorat(0) == 0) {
                        filteroperator.jqxDropDownList({ selectedIndex: 0 });
                    }
                    else {
                        filteroperator.jqxDropDownList({ selectedIndex: 1 });
                    }
                }
            }
            if (me.updatefilterpanel) {
                me.updatefilterpanel(condition, condition2, filteroperator, input1, input2, filterbutton, clearbutton, filter, filtertype, conditions);
            }
            input1.focus();
            setTimeout(function () {
                input1.focus();
            }, 10);
        },

        _getfiltertype: function (type) {
            var filtertype = "stringfilter";
            switch (type) {
                case "number":
                case "int":
                case "float":
                case "decimal":
                    filtertype = 'numericfilter';
                    break;
                case "boolean":
                case "bool":
                    filtertype = 'booleanfilter';
                    break;
                case "date":
                case "time":
                    filtertype = 'datefilter';
                    break;
                case "string":
                    filtertype = 'stringfilter';
                    break;
            }
            return filtertype;
        },

        _buildfilter: function (me, element, column) {
            var condition = $(element).find('#filter1' + me.element.id);
            var operator = $(element).find('#filter2' + me.element.id);
            var condition2 = $(element).find('#filter3' + me.element.id);
            var input1 = $(element).find('.filtertext1' + me.element.id);
            var input2 = $(element).find('.filtertext2' + me.element.id);
            var value1 = input1.val();
            var value2 = input2.val();
            var type = me._getcolumntypebydatafield(column);
            var source = me._getfiltersbytype(type);
            var index1 = condition.jqxDropDownList('selectedIndex');
            var operatorindex = operator.jqxDropDownList('selectedIndex');
            var index2 = condition2.jqxDropDownList('selectedIndex');
            var filtergroup = new $.jqx.filter();

            var filter1 = null;
            var filter2 = null;
            var filtertype = me._getfiltertype(type);

            if (me.updatefilterconditions) {
                var newfilterconditions = me.updatefilterconditions(filtertype, filtergroup.getoperatorsbyfiltertype(filtertype));
                if (newfilterconditions != undefined) {
                    filtergroup.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                }
            }

            var isvalidfilter = false;
            var condition1 = filtergroup.getoperatorsbyfiltertype(filtertype)[index1];
            var condition2 = filtergroup.getoperatorsbyfiltertype(filtertype)[index2];
            var nullcondition1 = condition1 == "NULL" || condition1 == "NOT_NULL";
            var emptycondition1 = condition1 == "EMPTY" || condition1 == "NOT_EMPTY";

            if (condition1 == undefined) condition1 = filtergroup.getoperatorsbyfiltertype(filtertype)[0];
            if (condition2 == undefined) condition2 = filtergroup.getoperatorsbyfiltertype(filtertype)[0];

            if (value1.length > 0 || nullcondition1 || emptycondition1) {
                filter1 = filtergroup.createfilter(filtertype, value1, condition1, null, column.cellsformat, me.gridlocalization);
                filtergroup.addfilter(operatorindex, filter1);
                isvalidfilter = true;
            }

            var nullcondition2 = condition2 == "NULL" || condition2 == "NOT_NULL";
            var emptycondition2 = condition2 == "EMPTY" || condition2 == "NOT_EMPTY";

            if (value2.length > 0 || nullcondition2 || emptycondition2) {
                filter2 = filtergroup.createfilter(filtertype, value2, condition2, null, column.cellsformat, me.gridlocalization);
                filtergroup.addfilter(operatorindex, filter2);
                isvalidfilter = true;
            }

            if (isvalidfilter) {
                var datafield = column.displayfield;
                this.addfilter(datafield, filtergroup, true);
            }
            else {
                this._clearfilter(me, element, column);
            }
        },

        _clearfilter: function (me, element, column) {
            var datafield = column.displayfield;
            this.removefilter(datafield, true);
        },

        addfilter: function (datafield, filter, apply) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            var columnbydatafield = this.getcolumn(datafield);
            var _columnbydatafield = this._getcolumn(datafield);
            if (columnbydatafield == undefined || columnbydatafield == null)
                return;

            columnbydatafield.filter = filter;
            _columnbydatafield.filter = filter;

            this.dataview.addfilter(datafield, filter);
            if (apply == true && apply != undefined) {
                this.applyfilters();
            }
        },

        // removes a filter.
        removefilter: function (datafield, apply) {
            if (this._loading) {
                alert(this.loadingerrormessage);
                return false;
            }

            var columnbydatafield = this.getcolumn(datafield);
            var _columnbydatafield = this._getcolumn(datafield);
            if (columnbydatafield == undefined || columnbydatafield == null)
                return;

            if (columnbydatafield.filter == null)
                return;

            this.dataview.removefilter(datafield, columnbydatafield.filter);
            columnbydatafield.filter = null;
            _columnbydatafield.filter = null;

            if (apply == true || apply != undefined) {
                this.applyfilters();
            }
        },

        applyfilters: function () {
            var customfilter = false;
            if (this.dataview.filters.length >= 0 && (this.virtualmode || !this.source.localdata)) {
                if (this.source != null && this.source.filter) {
                    var tmppage = -1;
                    if (this.pageable) {
                        tmppage = this.dataview.pagenum;
                        this.dataview.pagenum = 0;
                    }
                    this.source.filter(this.dataview.filters, this.dataview.records, this.dataview.records.length);
                    if (this.pageable) {
                        this.dataview.pagenum = tmppage;
                    }
                }
            }

            if (!this.virtualmode) {
                var selectedrowindexes = this.selectedrowindexes;
                var me = this;
                if (selectedrowindexes.length > 0) {
                    if (this.dataview.filters && this.dataview.filters.length == 0) {
                        var newSelectedRowIndexes = new Array();
                        $.each(selectedrowindexes, function () {
                            var datarow = me.getrowdata(this);
                            if (datarow && datarow.dataindex) {
                                newSelectedRowIndexes[newSelectedRowIndexes.length] = datarow.dataindex;
                            }
                        });
                        this.selectedrowindexes = newSelectedRowIndexes;
                        this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[0] : -1;
                    }
                }

                this.dataview.refresh();
                if (selectedrowindexes.length > 0) {
                    if (this.dataview.filters && this.dataview.filters.length > 0) {
                        var newSelectedRowIndexes = new Array();
                        $.each(selectedrowindexes, function () {
                            var data = me.dataview._dataIndexToBoundIndex[this];
                            if (data != null) {
                                newSelectedRowIndexes[newSelectedRowIndexes.length] = data.boundindex;
                            }
                        });
                        this.selectedrowindexes = newSelectedRowIndexes;
                        this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[0] : -1;
                    }
                }
            }
            else {
                if (this.pageable) {
                    this.dataview.updateview();
                    if (this.gotopage) {
                        this.gotopage(0);
                    }
                }
                this.rendergridcontent(false, false);
                this._raiseEvent(13, { filters: this.dataview.filters });
                return;
            }

            if (this.pageable) {
                this.dataview.updateview();
                if (this.gotopage) {
                    this.gotopage(0);
                    this.updatepagerdetails();
                }
            }
            this._updaterowsproperties();
            if (!this.groupable || (this.groupable && this.groups.length == 0)) {
                this._rowdetailscache = new Array();
                this.virtualsizeinfo = null;
                this._pagescache = new Array();
                this.rendergridcontent(true, true);
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._renderrows(this.virtualsizeinfo);
                if (this.showaggregates && this._updatecolumnsaggregates) {
                    this._updatecolumnsaggregates();
                }
            }
            else {
                this._rowdetailscache = new Array();
                this._render(true, true, false, false);
            }
            this._raiseEvent(13, { filters: this.dataview.filters });
        },

        getfilterinformation: function () {
            var filters = new Array();
            for (var i = 0; i < this.dataview.filters.length; i++) {
                var column = this.getcolumn(this.dataview.filters[i].datafield);
                filters[i] = { filter: this.dataview.filters[i].filter, filtercolumn: column.datafield, filtercolumntext: column.text };
            }
            return filters;
        },

        clearfilters: function (apply) {
            var me = this;
            if (this.showfilterrow) {
                this.clearfilterrow();
            }

            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    me.removefilter(this.displayfield);
                });
            }
            if (apply == true || apply != undefined) {
                this.applyfilters();
            }
        },

        _destroyfilterpanel: function () {
            var clearbutton = $($.find('#filterclearbutton' + this.element.id));
            var filterbutton = $($.find('#filterbutton' + this.element.id));
            var condition = $($.find('#filter1' + this.element.id));
            var filteroperator = $($.find('#filter2' + this.element.id));
            var condition2 = $($.find('#filter3' + this.element.id));
            var input1 = $($.find('.filtertext1' + this.element.id));
            var input2 = $($.find('.filtertext2' + this.element.id));
            if (input1.length > 0 && input2.length > 0) {
                input1.removeClass();
                input2.removeClass();
                input1.remove();
                input2.remove();
            }

            if (clearbutton.length > 0) {
                clearbutton.jqxButton('destroy');
                filterbutton.jqxButton('destroy');
                this.removeHandler(clearbutton, 'click');
                this.removeHandler(filterbutton, 'click');
            }

            if (condition.length > 0) {
                condition.jqxDropDownList('destroy');
            }
            if (filteroperator.length > 0) {
                filteroperator.jqxDropDownList('destroy');
            }
            if (condition2 > 0) {
                condition2.jqxDropDownList('destroy');
            }
        },

        _initfilterpanel: function (me, element, column, width) {
            if (me == null || me == undefined) me = this;
            element[0].innerHTML = "";
            var filterpanelcontainer = $("<div class='filter' style='margin-left: 7px;'></div>");

            element.append(filterpanelcontainer);
            var showwhere = $("<div class='filter' style='margin-top: 3px; margin-bottom: 3px;'></div>");
            showwhere.text(me.gridlocalization.filtershowrowstring);
            var condition = $("<div class='filter' id='filter1" + me.element.id + "'></div>");
            var operator = $("<div class='filter' id='filter2" + me.element.id + "' style='margin-bottom: 3px;'></div>");
            var condition2 = $("<div class='filter' id='filter3" + me.element.id + "'></div>");
            var type = me._getcolumntypebydatafield(column);

            if (!condition.jqxDropDownList) {
                alert('jqxdropdownlist is not loaded.');
                return;
            }

            var source = me._getfiltersbytype(type);

            var input = $("<div class='filter'><input class='filtertext1" + me.element.id + "' style='height: 20px; margin-top: 3px; margin-bottom: 3px;' type='text'></input></div>");
            input.find('input').addClass(this.toThemeProperty('jqx-input'));
            input.find('input').addClass(this.toThemeProperty('jqx-widget-content'));
            input.find('input').addClass(this.toThemeProperty('jqx-rc-all'));
            input.find('input').width(width - 15);
            var input2 = $("<div class='filter'><input class='filtertext2" + me.element.id + "' style='height: 20px; margin-top: 3px;' type='text'></input></div>");
            input2.find('input').addClass(this.toThemeProperty('jqx-input'));
            input2.find('input').addClass(this.toThemeProperty('jqx-widget-content'));
            input2.find('input').addClass(this.toThemeProperty('jqx-rc-all'));
            input2.find('input').width(width - 15);

            var applyinput = $("<div class='filter' style='height: 25px; margin-left: 20px; margin-top: 7px;'></div>");
            var filterbutton = $('<span tabIndex=0 id="filterbutton' + me.element.id + '" class="filterbutton" style="padding: 4px 12px; margin-left: 2px;">' + me.gridlocalization.filterstring + '</span>');
            applyinput.append(filterbutton);
            var filterclearbutton = $('<span tabIndex=0 id="filterclearbutton' + me.element.id + '" class="filterclearbutton" style="padding: 4px 12px; margin-left: 5px;">' + me.gridlocalization.filterclearstring + '</span>');
            applyinput.append(filterclearbutton);

            filterbutton.jqxButton({ height: 20, theme: me.theme });
            filterclearbutton.jqxButton({ height: 20, theme: me.theme });

            var selectionrenderer = function (selectionelement) {
                if (selectionelement) {
                    if (selectionelement.text().indexOf("case sensitive") != -1) {
                        var selectiontext = selectionelement.text();
                        selectiontext = selectiontext.replace("case sensitive", "match case");
                        selectionelement.text(selectiontext);
                    }
                    selectionelement.css('font-family', me.host.css('font-family'));
                    selectionelement.css('font-size', me.host.css('font-size'));

                    return selectionelement;
                }
                return "";
            }

            filterpanelcontainer.append(showwhere);
            filterpanelcontainer.append(condition);
            condition.jqxDropDownList({ enableBrowserBoundsDetection: false, selectedIndex: 2, width: width - 15, height: 20, dropDownHeight: 150, dropDownWidth: width - 15, selectionRenderer: selectionrenderer, source: source, theme: me.theme });
            filterpanelcontainer.append(input);
            var operators = new Array();
            operators[0] = me.gridlocalization.filterandconditionstring;
            operators[1] = me.gridlocalization.filterorconditionstring;
            operator.jqxDropDownList({ enableBrowserBoundsDetection: false, autoDropDownHeight: true, selectedIndex: 0, width: 60, height: 20, source: operators, selectionRenderer: selectionrenderer, theme: me.theme });
            filterpanelcontainer.append(operator);
            condition2.jqxDropDownList({ enableBrowserBoundsDetection: false, selectedIndex: 2, width: width - 15, height: 20, dropDownHeight: 150, dropDownWidth: width - 15, selectionRenderer: selectionrenderer, source: source, theme: me.theme });
            filterpanelcontainer.append(condition2);
            filterpanelcontainer.append(input2);
            filterpanelcontainer.append(applyinput);
            if (me.updatefilterpanel) {
                me.updatefilterpanel(condition, condition2, operator, input, input2, filterbutton, filterclearbutton, null, null, source);
            }
        }
    });

    $.jqx.filter = function () {
        this.operator = 'and';
        var and_operator = 0;
        var or_operator = 1;
        var stringcomparisonoperators = ['EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',
        'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',
        'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'];
        var numericcomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];
        var datecomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];
        var booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];

        var filters = new Array();
        var comparisonoperators = new Array();

        this.evaluate = function (value) {
            var result = true;
            for (var i = 0; i < filters.length; i++) {
                var currentResult = filters[i].evaluate(value);
                if (i == 0) {
                    result = currentResult;
                }
                else {
                    if (comparisonoperators[i] == or_operator || comparisonoperators[i] == "or")
                        result = result || currentResult;
                    else
                        result = result && currentResult;
                }
            }

            return result;
        }

        this.getfilterscount = function () {
            return filters.length;
        }

        this.setoperatorsbyfiltertype = function (type, array) {
            switch (type) {
                case "numericfilter":
                    numericcomparisonoperators = array;
                    break;
                case "stringfilter":
                    stringcomparisonoperators = array;
                    break;
                case "datefilter":
                    datecomparisonoperators = array;
                    break;
                case "booleanfilter":
                    booleancomparisonoperators = array;
                    break;
            }
        }

        this.getoperatorsbyfiltertype = function (type) {
            var array = new Array();
            switch (type) {
                case "numericfilter":
                    array = numericcomparisonoperators.slice(0);
                    break;
                case "stringfilter":
                    array = stringcomparisonoperators.slice(0);
                    break;
                case "datefilter":
                    array = datecomparisonoperators.slice(0);
                    break;
                case "booleanfilter":
                    array = booleancomparisonoperators.slice(0);
                    break;
            }
            return array;
        }

        var generatefilterkey = function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + "-" + S4() + "-" + S4());
        }

        this.createfilter = function (filtertype, filtervalue, filtercomparisonoperator, customfilter, formatstring, localization) {
            if (filtertype == null || filtertype == undefined)
                return null;

            switch (filtertype) {
                case 'numericfilter':
                    return new numericfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'stringfilter':
                    return new stringfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'datefilter':
                    return new datefilter(filtervalue, filtercomparisonoperator.toUpperCase(), formatstring, localization);
                case 'booleanfilter':
                    return new booleanfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'custom':
                    return new filter(filtervalue, filtercomparisonoperator.toUpperCase(), customfilter);
            }

            return null;
        }

        this.getfilters = function () {
            var filtersarray = new Array();
            for (var i = 0; i < filters.length; i++) {
                var filter = { value: filters[i].filtervalue, condition: filters[i].comparisonoperator, operator: comparisonoperators[i], type: filters[i].type };
                filtersarray[i] = filter;
            }
            return filtersarray;
        }

        this.addfilter = function (comparisonoperator, filter) {
            filters[filters.length] = filter;
            filter.key = generatefilterkey();
            comparisonoperators[comparisonoperators.length] = comparisonoperator;
        }

        this.removefilter = function (filter) {
            for (var i = 0; i < filters.length; i++) {
                if (filters[i].key == filter.key) {
                    filters.splice(i, 1);
                    comparisonoperators.splice(i, 1);
                    break;
                }
            }
        }

        this.getoperatorat = function (index) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            return comparisonoperators[index];
        }

        this.setoperatorat = function (index, comparisonoperator) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            comparisonoperators[comparisonoperator] = comparisonoperator;
        }

        this.getfilterat = function (index) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            return filters[index];
        }

        this.setfilterat = function (index, filter) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            filter.key = generatefilterkey();
            filters[index] = filter;
        }

        this.clear = function () {
            filters = new Array();
            comparisonoperators = new Array();
        }

        var stringfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'stringfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined) {
                    if (comparisonoperator == 'NULL')
                        return true;

                    return false;
                }

                var val = "";
                try {
                    val = value.toString();
                }
                catch (error) {
                    return true;
                }

                switch (comparisonoperator) {
                    case 'EQUAL':
                        return $.jqx.string.equalsIgnoreCase(val, filtervalue);
                    case 'EQUAL_CASE_SENSITIVE':
                        return $.jqx.string.equals(val, filtervalue);
                    case 'NOT_EQUAL':
                        return !$.jqx.string.equalsIgnoreCase(val, filtervalue);
                    case 'NOT_EQUAL_CASE_SENSITIVE':
                        return !$.jqx.string.equals(val, filtervalue);
                    case 'CONTAINS':
                        return $.jqx.string.containsIgnoreCase(val, filtervalue);
                    case 'CONTAINS_CASE_SENSITIVE':
                        return $.jqx.string.contains(val, filtervalue);
                    case 'DOES_NOT_CONTAIN':
                        return !$.jqx.string.containsIgnoreCase(val, filtervalue);
                    case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':
                        return !$.jqx.string.contains(val, filtervalue);
                    case 'EMPTY':
                        return val == '';
                    case 'NOT_EMPTY':
                        return val != '';
                    case 'NOT_NULL':
                        return val != null;
                    case 'STARTS_WITH':
                        return $.jqx.string.startsWithIgnoreCase(val, filtervalue);
                    case 'ENDS_WITH':
                        return $.jqx.string.endsWithIgnoreCase(val, filtervalue);
                    case 'ENDS_WITH_CASE_SENSITIVE':
                        return $.jqx.string.endsWith(val, filtervalue);
                    case 'STARTS_WITH_CASE_SENSITIVE':
                        return $.jqx.string.startsWith(val, filtervalue);
                    default:
                        return false;
                }
            }
        }

        var booleanfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'booleanfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined) {
                    if (comparisonoperator == 'NULL')
                        return true;

                    return false;
                }

                var val = value;

                switch (comparisonoperator) {
                    case 'EQUAL':
                        return val == filtervalue || val.toString() == filtervalue.toString();
                    case 'NOT_EQUAL':
                        return val != filtervalue && val.toString() != filtervalue.toString();
                    default:
                        return false;
                }
            }
        }

        var numericfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'numericfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined) {
                    if (comparisonoperator == 'NOT_NULL')
                        return false;

                    if (comparisonoperator == 'NULL')
                        return true;
                    else
                        return false;
                }
                else {
                    if (comparisonoperator == 'NULL')
                        return false;

                    if (comparisonoperator == 'NOT_NULL')
                        return true;
                }

                var val = value;

                try {
                    val = parseFloat(val);
                }
                catch (error) {
                    if (value.toString() != "")
                        return false;
                }

                switch (comparisonoperator) {
                    case 'EQUAL':
                        return val == filtervalue;
                    case 'NOT_EQUAL':
                        return val != filtervalue;
                    case 'GREATER_THAN':
                        return val > filtervalue;
                    case 'GREATER_THAN_OR_EQUAL':
                        return val >= filtervalue;
                    case 'LESS_THAN':
                        return val < filtervalue;
                    case 'LESS_THAN_OR_EQUAL':
                        return val <= filtervalue;
                    default:
                        return true;
                }
            }
        }

        var datefilter = function (filtervalue, comparisonoperator, formatstring, localization) {
            this.filtervalue = filtervalue;
            this.type = 'datefilter';

            if (formatstring != undefined && localization != undefined) {
                var parsedDate = $.jqx.dataFormat.parsedate(filtervalue, formatstring, localization);
                if (parsedDate != null) {
                    this.filterdate = parsedDate;
                }
                else {
                    var result = $.jqx.dataFormat.tryparsedate(filtervalue, localization);
                    if (result != null) this.filterdate = result;
                }

            }
            else {
                var tmpvalue = new Date(filtervalue);
                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    this.filterdate = $.jqx.dataFormat.tryparsedate(filtervalue);
                }
                else {
                    this.filterdate = tmpvalue;
                }
            }

            this.comparisonoperator = comparisonoperator;
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined) {
                    if (comparisonoperator == 'NOT_NULL')
                        return false;

                    if (comparisonoperator == 'NULL')
                        return true;
                    else
                        return false;
                }
                else {
                    if (comparisonoperator == 'NULL')
                        return false;

                    if (comparisonoperator == 'NOT_NULL')
                        return true;
                }

                var val = new Date();
                val.setFullYear(1900, 0, 1);
                val.setHours(12, 0, 0, 0);
                try {
                    var tmpvalue = new Date(value);

                    if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                        value = $.jqx.dataFormat.tryparsedate(value);
                    }
                    else {
                        value = tmpvalue;
                    }
                    val = value;
                }
                catch (error) {
                    if (value.toString() != "")
                        return false;
                }

                if (this.filterdate != null) {
                    filtervalue = this.filterdate;
                }
                else {
                    if (filtervalue.indexOf(':') != -1 || !isNaN(parseInt(filtervalue))) {
                        var tmpFilter = new Date(val);
                        tmpFilter.setHours(12, 0, 0, 0);
                        var timeStrings = filtervalue.split(':');
                        for (var i = 0; i < timeStrings.length; i++) {
                            if (i == 0) {
                                tmpFilter.setHours(timeStrings[i]);
                            }
                            if (i == 1) {
                                tmpFilter.setMinutes(timeStrings[i]);
                            }
                            if (i == 2) {
                                tmpFilter.setSeconds(timeStrings[i]);
                            }
                        }
                        filtervalue = tmpFilter;
                    }
                }

                if (val == null) val = "";
                switch (comparisonoperator) {
                    case 'EQUAL':
                        return val.toString() == filtervalue.toString();
                    case 'NOT_EQUAL':
                        return val.toString() != filtervalue.toString();
                    case 'GREATER_THAN':
                        return val > filtervalue;
                    case 'GREATER_THAN_OR_EQUAL':
                        return val >= filtervalue;
                    case 'LESS_THAN':
                        return val < filtervalue;
                    case 'LESS_THAN_OR_EQUAL':
                        return val <= filtervalue;
                    default:
                        return true;
                }
            }
        }

        var filter = function (filtervalue, comparisonoperator, customfilter) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.evaluate = function (value, comparisonoperator) {
                return customfilter(this.filtervalue, value, this.comparisonoperator);
            }
        }
    };
})(jQuery);


(function ($) {
    $.jqx.dataview.grouping = function () {
        this.loadgrouprecords = function (startvisibleindex, startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff) {
            var visualRows = startvisibleindex;
            var self = this;
            var groupHashCodes = new Array();
            for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                groupHashCodes[iGroupColumn] = self.generatekey();
            }
            var grouprecords = new Array();
            var grouprecordsindex = 0;
            var groupHashCodes = groupHashCodes;
            var hashRowGroups = new Array();

            var i = startindex;
            var currentRowIndex = startindex;
            var groupslength = self.groups.length;
            this.loadedrecords = new Array();

            this.bounditems = new Array();
            this.loadedrecords = new Array(); // all data records ready for rendering.
            this.loadedrootgroups = new Array(); // all groups ready for rendering
            this.loadedgroups = new Array(); // all groups ready for rendering
            this.loadedgroupsByKey = new Array(); // all groups ready for rendering
            this.sortedgroups = new Array();

            var hassortdata = this.sortdata != null;
            var data = hassortdata ? this.sortdata : this.records;

            for (var obj = startindex; obj < endindex; obj++) {
                var item = {};

                if (!hassortdata) {
                    item = $.extend({}, data[obj]);
                }
                else {
                    item = $.extend({}, data[obj].value);
                }

                id = item[self.uniqueId];


                if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                    diff[diff.length] = currentPageIndex;

                var itemKeysHierarchy = new Array();
                var keys = 0;
                for (var iGroupColumn = 0; iGroupColumn < groupslength; iGroupColumn++) {
                    var group = self.groups[iGroupColumn];
                    var value = item[group];

                    if (null == value)
                        continue;

                    itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                }

                if (itemKeysHierarchy.length != groupslength)
                    break;

                var parentItem = null;

                var lookupKey = "";
                var iLevel = -1;

                for (var q = 0; q < itemKeysHierarchy.length; q++) {
                    iLevel++;
                    var itemKey = itemKeysHierarchy[q].value;
                    var columnHash = itemKeysHierarchy[q].hash;
                    lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;

                    if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                        parentItem = hashRowGroups[lookupKey];
                        continue;
                    }

                    if (parentItem == null) {
                        parentItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), level: 0 };
                        grouprecords[grouprecordsindex++] = parentItem;
                        parentItem.uniqueid = self.generatekey();
                        self.loadedgroupsByKey[itemKey] = parentItem;
                    }
                    else {
                        var subItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), parentItem: parentItem, level: parentItem.level + 1 };
                        self.loadedgroupsByKey[parentItem.uniqueid + '_' + itemKey] = subItem;
                        subItem.uniqueid = self.generatekey();
                        parentItem.subGroups[parentItem.subGroups.length++] = subItem;
                        parentItem = subItem;
                    }

                    hashRowGroups[lookupKey] = parentItem;
                }

                if (parentItem != null) {
                    if (!item.uid) {
                        item.uid = this.getid(this.source.id, item, i);
                    }

                    if (!hassortdata) {
                        item.boundindex = i;
                        this.recordsbyid["id" + item.uid] = data[obj];
                    }
                    else {
                        item.boundindex = data[obj].index;
                        this.recordsbyid["id" + item.uid] = data[obj].value;
                    }

                    this.bounditems[item.boundindex] = item;
                    this.sortedgroups[i] = item;
                    item.uniqueid = self.generatekey();
                    item.parentItem = parentItem;
                    item.level = parentItem.level + 1;

                    parentItem.subItems[parentItem.subItems.length++] = item;
                }
                else {
                    if (!item.uid) {
                        item.uid = this.getid(this.source.id, item, i);
                    }

                    if (!hassortdata) {
                        item.boundindex = i;
                        this.recordsbyid["id" + item.uid] = data[obj];
                    }
                    else {
                        item.boundindex = data[obj].index;
                        this.recordsbyid["id" + item.uid] = data[obj].value;
                    }

                    this.sortedgroups[i] = item;
                    this.bounditems[item.boundindex] = item;
                    item.uniqueid = self.generatekey();
                }

                currentPageIndex++;

                i++;
                currentRowIndex++;
            };

            var loopitems = function (self, group, visualRows) {
                for (var m = 0; m < group.subItems.length; m++) {
                    group.subItems[m].visibleindex = startvisibleindex + visualRows;
                    self.rows[visualRows] = group.subItems[m];
                    self.loadedrecords[visualRows] = group.subItems[m];
                    visualRows++;
                }
                return visualRows
            }

            var loopGroups = function (self, group, visualRows) {
                var totals = function (group) {
                    if (self.aggregates == true) {
                        var olditem = group;

                        var item = {};
                        if (olditem != null) {
                            item.level = olditem.level;
                            item.visibleindex = startvisibleindex + visualRows;
                            item.uniqueid = self.generatekey();
                            self.rows[visualRows] = item;
                            self.loadedrecords[visualRows++] = item;
                            item.totalsrow = true;

                            if (group.subItems.length > 0) {
                                olditem = group.subItems[group.subItems.length - 1];
                                item.parentItem = olditem.parentItem;
                                if (item.parentItem.subItems) {
                                    item.parentItem.subItems[item.parentItem.subItems.length] = item;
                                }
                            }
                            else if (group.subGroups.length > 0) {
                                olditem = group.subGroups[group.subGroups.length - 1];
                                item.level = olditem.level;
                                item.parentItem = group;
                                group.subGroups[group.subGroups.length] = item;
                            }
                        }
                    }
                }
                for (subGroup in group.subGroups) {
                    var currentGroup = group.subGroups[subGroup];
                    if (currentGroup.subGroups) {
                        self.loadedgroups[self.loadedgroups.length] = currentGroup;
                        currentGroup.visibleindex = startvisibleindex + visualRows;
                        self.rows[visualRows] = currentGroup;
                        self.loadedrecords[visualRows] = currentGroup;
                        visualRows++;
                        if (currentGroup.subGroups.length > 0) {
                            visualRows = loopGroups(self, currentGroup, visualRows);
                        }
                        else if (currentGroup.subItems.length > 0) {
                            visualRows = loopitems(self, currentGroup, visualRows);
                        }
                        totals(currentGroup);
                    }
                }
                if (group.subItems.length > 0) {
                    visualRows = loopitems(self, group, visualRows);
                }
                totals(group);
                return visualRows;
            }

            var grouprecordslength = grouprecords.length;
            this.loadedgroups = new Array();
            this.rows = new Array();
            var visualRows = 0;

            for (var i = 0; i < grouprecordslength; i++) {
                var group = grouprecords[i];
                this.loadedrootgroups[i] = group;
                this.loadedgroups[this.loadedgroups.length] = group;
                group.visibleindex = startvisibleindex + visualRows;
                this.rows[visualRows] = group;
                this.loadedrecords[visualRows] = group;
                visualRows++;
                visualRows = loopGroups(this, group, visualRows);
            }

            return visualRows;
        }


        this._updategroupsinpage = function (self, filter, currentRowIndex, currentPageIndex, rl, start, end) {
            // create rows.
            var rows = new Array();

            var diff = [];
            if (this.groupable && this.groups.length > 0) {
                var visualrows = 0;
                var hashRowGroups = new Array();
                var groupHashCodes = new Array();
                for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                    groupHashCodes[iGroupColumn] = self.generatekey();
                }
                var i = 0;
                var grouprecords = new Array();
                var grouprecordsindex = 0;
                if (end > this.totalrecords) {
                    end = this.totalrecords;
                }

                for (var obj = start; obj < end; obj++) {
                    var item = $.extend({}, self.sortedgroups[obj]);
                    id = item[self.uniqueId];

                    if (!self.pagesize || (currentRowIndex >= self.pagesize * self.pagenum && currentRowIndex < self.pagesize * (self.pagenum + 1))) {
                        if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                            diff[diff.length] = currentPageIndex;

                        var itemKeysHierarchy = new Array();
                        var keys = 0;
                        for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                            var group = self.groups[iGroupColumn];
                            var value = item[group];

                            if (null == value)
                                continue;

                            itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                        }

                        if (itemKeysHierarchy.length != self.groups.length)
                            break;

                        var parentItem = null;

                        var lookupKey = "";
                        var iLevel = -1;

                        for (var q = 0; q < itemKeysHierarchy.length; q++) {
                            iLevel++;
                            var itemKey = itemKeysHierarchy[q].value;
                            var columnHash = itemKeysHierarchy[q].hash;
                            lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;

                            if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                                parentItem = hashRowGroups[lookupKey];
                                continue;
                            }

                            if (parentItem == null) {
                                parentItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), level: 0 };
                                grouprecords[grouprecordsindex++] = parentItem;
                                var initialgroup = self.loadedgroupsByKey[itemKey];
                                if (initialgroup != undefined) {
                                    parentItem.visibleindex = initialgroup.visibleindex;
                                    parentItem.uniqueid = initialgroup.uniqueid;
                                }
                            }
                            else {
                                var subItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), parentItem: parentItem, level: parentItem.level + 1 };
                                var initialgroup = self.loadedgroupsByKey[parentItem.uniqueid + '_' + itemKey];
                                subItem.visibleindex = initialgroup.visibleindex;
                                subItem.uniqueid = initialgroup.uniqueid;
                                parentItem.subGroups[parentItem.subGroups.length++] = subItem;
                                parentItem = subItem;
                            }

                            hashRowGroups[lookupKey] = parentItem;
                        }

                        if (parentItem != null) {
                            item.parentItem = parentItem;
                            item.level = parentItem.level + 1;
                            parentItem.subItems[parentItem.subItems.length++] = item;
                        }

                        currentPageIndex++;
                    }
                    i++;
                    currentRowIndex++;
                };

                var loopitems = function (self, group, visualrows) {
                    for (var m = 0; m < group.subItems.length; m++) {
                        rows[visualrows] = $.extend({}, group.subItems[m]);
                        visualrows++;
                    }
                    return visualrows;
                }

                var anysubitems = function (group) {
                    var hasitems = false;

                    for (subGroup in group.subGroups) {
                        var currentGroup = group.subGroups[subGroup];
                        if (currentGroup.subGroups) {
                            if (currentGroup.subGroups.length > 0) {
                                var result = anysubitems(currentGroup);
                                if (result) {
                                    hasitems = true;
                                    return true;
                                }
                            }
                            if (currentGroup.subItems.length > 0) {
                                hasitems = true;
                                return true;
                            }
                        }
                    }
                    if (group.subItems.length > 0) {
                        hasitems = true;
                        return true;
                    }
                    return hasitems;
                }

                var loopGroups = function (self, group, visualrows) {
                    for (subGroup in group.subGroups) {
                        var currentGroup = group.subGroups[subGroup];

                        if (currentGroup.subGroups) {
                            if (anysubitems(currentGroup)) {
                                rows[visualrows] = currentGroup;
                                visualrows++;
                                if (currentGroup.subGroups.length > 0) {
                                    visualrows = loopGroups(self, currentGroup, visualrows);
                                }
                                else if (currentGroup.subItems.length > 0) {
                                    visualrows = loopitems(self, currentGroup, visualrows);
                                }
                            }
                        }
                    }
                    if (group.subItems.length > 0) {
                        visualrows = loopitems(self, group, visualrows);
                    }
                    return visualrows;
                }

                var parentgroup = 0;
                for (var i = 0; i < grouprecords.length; i++) {
                    var group = grouprecords[i];

                    if (anysubitems(group)) {
                        rows[visualrows] = group;
                        visualrows++;
                        visualrows = loopGroups(this, group, visualrows);
                    }
                }
            }

            return rows;
        }
    }

    $.extend($.jqx._jqxGrid.prototype, {
        _initgroupsheader: function () {
            this.groupsheader.css('visibility', 'hidden');
            if (this._groupsheader()) {
                this.groupsheader.css('visibility', 'inherit');
                var me = this;
                var groupsheaderstring = this.gridlocalization.groupsheaderstring;
                this.groupsheaderdiv = this.groupsheaderdiv || $('<div style="width: 100%; position: relative;"></div>');
                this.groupsheaderdiv.height(this.groupsheaderheight);
                this.groupsheaderdiv.css('top', 0);
                this.groupsheader.append(this.groupsheaderdiv);
                this.groupheadersbounds = new Array();

                var groupslength = this.groups.length;

                // remove handlers and children.
                this.groupsheaderdiv.children().remove();
                this.groupsheaderdiv[0].innerHTML = '';

                var groups = new Array();
                if (groupslength > 0) {
                    $.each(this.groups, function (index) {
                        var groupcolumn = this;
                        var groupcolumninfo = me._getColumnText(this);
                        var text = groupcolumninfo.label;
                        var group = me._rendergroupcolumn(text, groupcolumn);
                        group.addClass(me.toThemeProperty('jqx-grid-group-column'));
                        me.groupsheaderdiv.append(group);
                        if (me.closeablegroups) {
                            var closebutton = $(group.find('.icon-close'));
                            me.addHandler(closebutton, 'click', function () {
                                me.removegroupat(index);
                                return false;
                            });
                        }
                        if (me.sortable) {
                            me.addHandler(group, 'click', function () {
                                var columnitem = me.getcolumn(groupcolumn);
                                if (columnitem != null) {
                                    me._togglesort(columnitem);
                                }
                                return false;
                            });
                        }
                        groups[groups.length] = group;
                        me._handlegroupstocolumnsdragdrop(this, group);
                        if (index < groupslength - 1) {
                            var height = group.height();
                            var line = $('<div style="float: left; position: relative;"></div>');
                            line.width(me.groupindentwidth / 3);
                            line.height(1);
                            line.css('top', height / 2);
                            line.addClass(me.toThemeProperty('jqx-grid-group-column-line'));
                            me.groupsheaderdiv.append(line);
                        }
                    });
                }
                else {
                    var emptygroupselement = $('<div style="position: relative;">' + groupsheaderstring + '</div>');
                    this.groupsheaderdiv.append(emptygroupselement);
                }

                this._groupheaders = groups;
                this._updategroupheadersbounds();
            }
        },

        _updategroupheadersbounds: function () {
            var me = this;
            var headerdivheight = this.groupsheaderdiv.children().outerHeight();
            var top = (this.groupsheader.height() - headerdivheight) / 2;
            this.groupsheaderdiv.css('top', top);
            this.groupsheaderdiv.css('left', top);
            $.each(this._groupheaders, function (index) {
                var groupoffset = this.offset();
                me.groupheadersbounds[index] = { left: groupoffset.left, top: groupoffset.top, width: this.outerWidth(), height: this.outerHeight(), index: index };
            });

        },

        // adds a group.
        addgroup: function (datafield) {
            if (datafield) {
                var self = this;
                if (self.groups !== self.dataview.groups) {
                    self.dataview.groups = self.groups;
                }
                self.groups[self.groups.length] = datafield;
                self.refreshgroups();
                this._raiseEvent(12, { type: "Add", index: self.groups[self.groups.length], groups: self.groups });
            }
        },

        // inserts a new group.
        insertgroup: function (index, datafield) {
            if (index != undefined && index != null && index >= 0 && index <= this.groups.length) {
                if (datafield) {
                    var self = this;
                    if (self.groups !== self.dataview.groups) {
                        self.dataview.groups = self.groups;
                    }
                    self.groups.splice(index, 0, datafield);
                    self.refreshgroups();
                    this._raiseEvent(12, { type: "Insert", index: index, groups: self.groups });
                }
            }
        },

        refreshgroups: function () {
            this._refreshdataview();
            this._render(true, true, true, false);
        },

        _insertaftergroup: function (groupfield, datafield) {
            var index = this._getGroupIndexByDataField(groupfield);
            this.insertgroup(index + 1, datafield);
        },

        _insertbeforegroup: function (groupfield, datafield) {
            var index = this._getGroupIndexByDataField(groupfield);
            this.insertgroup(index, datafield);
        },

        // removes a group by index.
        removegroupat: function (index) {
            if (index >= 0 && index != null && index != undefined) {
                var self = this;
                if (self.groups !== self.dataview.groups) {
                    self.dataview.groups = self.groups;
                }
                self.groups.splice(index, 1);
                self.refreshgroups();
                this._raiseEvent(12, { type: "Remove", index: index, groups: self.groups });
                return true;
            }
            return false;
        },

        cleargroups: function()
        {
            var self = this;
            self.groups = [];
            self.dataview.groups = self.groups;
            self.refreshgroups();
            this._raiseEvent(12, { type: "Clear", groups: self.groups });
            return true;
        },

        // removes a group by datafield
        removegroup: function (datafield) {
            if (datafield == null)
                return false;

            var index = this.groups.indexOf(datafield.toString());
            return this.removegroupat(index);
        },


        // gets the number of root groups.
        getrootgroupscount: function () {
            var count = this.dataview.loadedrootgroups.length;
            return count;
        },

        // collapses a group.
        collapsegroup: function (index) {
            return this._setrootgroupstate(index, false);
        },

        // expands a group.
        expandgroup: function (index) {
            return this._setrootgroupstate(index, true);
        },

        // collapses all groups.
        collapseallgroups: function (refresh) {
            this._setbatchgroupstate(false, refresh);
        },

        // expands all groups.
        expandallgroups: function (refresh) {
            this._setbatchgroupstate(true, refresh);
        },

        // gets a group by index.
        getgroup: function (index) {
            var group = this.dataview.loadedrootgroups[index];
            if (group == null)
                return null;

            var expanded = this.expandedgroups[group.uniqueid].expanded;
            var groupname = group.group;
            var level = group.level;

            var subgroups = new Array();
            this._getsubgroups(subgroups, group);
            var me = this;
            var obj = { group: groupname, level: level, expanded: expanded, subgroups: subgroups };
            if (group.subItems) {
                var items = new Array();
                $.each(group.subItems, function () {
                    var index = this.boundindex;
                    items[items.length] = me.getrowdata(index);
                });
                if (items.length > 0) {
                    obj.subrows = items;
                }
            }

            return obj;
        },

        getrootgroups: function () {
            var count = this.dataview.loadedrootgroups.length;
            var groups = new Array();
            for (var m = 0; m < count; m++) {
                groups[m] = this.getgroup(m);
            }
            return groups;
        },

        //[optimize]
        _getsubgroups: function (subgroups, group) {
            var me = this;
            for (obj in group.subGroups) {
                var subGroup = group.subGroups[obj];
                var expanded = me.expandedgroups[subGroup.uniqueid].expanded;
                var groupname = subGroup.group;
                var level = subGroup.level;
                subgroups[subgroups.length] = { group: groupname, level: level, expanded: expanded };
                if (subGroup.subItems) {
                    var items = new Array();
                    $.each(subGroup.subItems, function () {
                        var index = this.boundindex;
                        items[items.length] = me.getrowdata(index);
                    });
                    subgroups[subgroups.length - 1].subrows = items;
                }
                if (subGroup.subGroups) {
                    var childsubgroups = new Array();
                    me._getsubgroups(childsubgroups, subGroup);
                }
            }

            return subgroups;
        },

        _setbatchgroupstate: function (expanded, update) {
            var me = this;
            for (obj in this.dataview.loadedrootgroups) {
                me._setrootgroupstate(obj, expanded, false, true);
            }

            if (update == false) {
                me._requiresupdate = true;
                me._renderrows(me.virtualsizeinfo);
                return true;
            }

            this.rendergridcontent(true);
            return true;
        },

        _setrootgroupstate: function (index, expanded, refresh, applytosubgroups) {
            if (index == undefined || index == null || index < 0)
                return false;

            if (!this.groupable || this.groups.length == 0)
                return false;

            var update = refresh != undefined ? refresh : true;

            if (index >= 0 && index < this.dataview.loadedrootgroups.length) {
                var group = this.dataview.loadedrootgroups[index];
                return this._setgroupstate(group, expanded, update, applytosubgroups);
            }

            return false;
        },

        _togglegroupstate: function (group, update) {
            if (group == null || group == undefined)
                return false;

            var groupstate = this.expandedgroups[group.uniqueid];
            if (groupstate == undefined) {
                groupstate = false;
            }
            else {
                groupstate = groupstate.expanded;
            }
            groupstate = !groupstate;
            return this._setgroupstate(group, groupstate, update);
        },

        //[optimize]
        _setgroupstate: function (group, expanded, update, applytosubgroups) {
            if (group == null || group == undefined)
                return false;

            var isDirty = false;

            var groupstate = this.expandedgroups[group.uniqueid];
            if (groupstate == undefined) {
                groupstate = { expanded: false };
                isDirty = true;
            }

            if (groupstate.expanded != expanded) {
                isDirty = true;
            }

            if (isDirty) {
                this.expandedgroups[group.uniqueid] = { expanded: expanded, group: group };
                this._setsubgroupsvisibility(this, group, !expanded, applytosubgroups);
                if (update) {
                    var scrollBarVisibility = this.vScrollBar[0].style.visibility;
                    this.rendergridcontent(true, false);
                    if (scrollBarVisibility != this.vScrollBar[0].style.visibility) {
                        this._updatecolumnwidths();
                        this._updatecellwidths();
                        this._renderrows(this.virtualsizeinfo);
                    }
                }

                if (undefined == this.suspendgroupevents || this.suspendgroupevents == false) {
                    if (expanded) {
                        this._raiseEvent(4, { group: group.group, parentgroup: group.parentItem ? group.parentItem.group : null, level: group.level, visibleindex: group.visibleindex });
                    }
                    else {
                        this._raiseEvent(5, { group: group.group, parentgroup: group.parentItem ? group.parentItem.group : null, level: group.level, visibleindex: group.visibleindex });
                    }
                }

                return true;
            }

            return false;
        },

        _setgroupitemsvisibility: function (self, group, hidden) {
            for (var m = 0; m < group.subItems.length; m++) {
                self._setrowvisibility(group.subItems[m].visibleindex, hidden, false);
            }
        },

        //[optimize]
        _setsubgroupsvisibility: function (self, group, hidden, applytosubgroups) {
            if (group.parentItem != null) {
                if (this.hiddens[group.parentItem.visibleindex])
                    return;
            }
            else if (group.parentItem == null) {
                if (this.hiddens[group.visibleindex])
                    return;
            }

            for (subGroup in group.subGroups) {
                var currentGroup = group.subGroups[subGroup];

                if (!hidden) {
                    self._setrowvisibility(currentGroup.visibleindex, hidden, false);
                }

                var expanded = !hidden;

                if (!applytosubgroups) {
                    if (self.expandedgroups[currentGroup.uniqueid] == undefined) {
                        expanded = false;
                    }
                    else {
                        expanded = self.expandedgroups[currentGroup.uniqueid].expanded;
                    }
                }
                else {
                    this.expandedgroups[currentGroup.uniqueid] = { expanded: expanded, group: currentGroup };
                }

                if (currentGroup.subGroups) {
                    if (currentGroup.subGroups.length > 0) {
                        self._setsubgroupsvisibility(self, currentGroup, !expanded || hidden, applytosubgroups);
                    }
                    else if (currentGroup.subItems.length > 0) {
                        self._setgroupitemsvisibility(self, currentGroup, !expanded || hidden);
                    }
                }

                if (hidden) {
                    self._setrowvisibility(currentGroup.visibleindex, hidden, false);
                }
            }
            if (group.subItems && group.subItems.length > 0) {
                self._setgroupitemsvisibility(self, group, hidden);
            }
        },


        //[optimize]
        _handlecolumnsdragdrop: function () {
            var self = this;
            var dropindex = -1;
            var candrop = false;

            if (!self.groupable)
                return;

            var mousemove = 'mousemove.grouping' + this.element.id;
            var mousedown = 'mousedown.grouping' + this.element.id;
            var mouseup = 'mouseup.grouping' + this.element.id;

            var touchdevice = false;
            if (this.isTouchDevice()) {
                touchdevice = true;
                mousemove = 'touchmove.grouping' + this.element.id;
                mousedown = 'touchstart.grouping' + this.element.id;
                mouseup = 'touchend.grouping' + this.element.id;
            }

            this.removeHandler($(document), mousemove);
            this.addHandler($(document), mousemove, function (event) {
                if (self.dragcolumn != null) {
                    var left = parseInt(event.pageX);
                    var top = parseInt(event.pageY);
                    if (touchdevice) {
                        var touches = self.getTouches(event);
                        var touch = touches[0];
                        left = parseInt(touch.pageX);
                        top = parseInt(touch.pageY);
                    }
                    var hostoffset = self.host.offset();
                    var hostleft = parseInt(hostoffset.left);
                    var hosttop = parseInt(hostoffset.top);
                    if (self.dragmousedownoffset == undefined || self.dragmousedownoffset == null) {
                        self.dragmousedownoffset = { left: 0, top: 0 };
                    }

                    var leftposition = parseInt(left) - parseInt(self.dragmousedownoffset.left);
                    var topposition = parseInt(top) - parseInt(self.dragmousedownoffset.top);

                    self.dragcolumn.css({ left: leftposition + 'px', top: topposition + 'px' });
                    candrop = false;
                    if (left >= hostleft && left <= hostleft + self.host.width()) {
                        if (top >= hosttop && top <= hosttop + self.host.height()) {
                            candrop = true;
                        }
                    }
                    dropindex = -1;
                    if (candrop) {
                        self.dragcolumnicon.removeClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                        self.dragcolumnicon.addClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        var groupsheaderoffset = self.groupsheader.offset();
                        var groupsheaderbottom = groupsheaderoffset.top + self.groupsheader.height();
                        var indexingroups = self.groups.indexOf($.data(self.dragcolumn[0], 'datarecord').toString());
                        var candrag = (indexingroups == -1) || (self.groups.length > 1 && indexingroups > -1);

                        if (self.dropline != null) {
                            if (top >= groupsheaderoffset.top && top <= groupsheaderbottom) {
                                if (candrag) {
                                    dropindex = self._handlegroupdroplines(left);
                                }
                            }
                            else {
                                self.dropline.fadeOut('slow');
                            }
                        }
                    }
                    else {
                        if (self.dropline != null) {
                            self.dropline.fadeOut('slow');
                        }

                        self.dragcolumnicon.removeClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        self.dragcolumnicon.addClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                    }
                    if (touchdevice) {
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                    //   return false;
                }
            });

            this.removeHandler($(document), mousedown);
            this.addHandler($(document), mousedown, function (event) {
                $(document.body).addClass('jqx-disableselect');
            });
            this.removeHandler($(document), mouseup);
            this.addHandler($(document), mouseup, function (event) {
                $(document.body).removeClass('jqx-disableselect');
                var left = parseInt(event.pageX);
                var top = parseInt(event.pageY);
                if (touchdevice) {
                    var touches = self.getTouches(event);
                    var touch = touches[0];
                    left = parseInt(touch.pageX);
                    top = parseInt(touch.pageY);
                }
                var hostoffset = self.host.offset();
                var hostleft = parseInt(hostoffset.left);
                var hosttop = parseInt(hostoffset.top);
                var groupsheaderheight = self.groupsheader.height();
                if (self.showtoolbar) {
                    hosttop += self.toolbarheight;
                }

                self.dragstarted = false;
                self.dragmousedown = null;
                if (self.dragcolumn != null) {
                    var datafield = $.data(self.dragcolumn[0], 'datarecord');
                    self.dragcolumn.remove();
                    self.dragcolumn = null;

                    if (datafield != null) {
                        if (candrop) {
                            if (dropindex != -1) {
                                var index = dropindex.index;
                                var targetgroup = self.groups[index];

                                var indexInGroups = self._getGroupIndexByDataField(datafield);
                                if (indexInGroups != index) {
                                    if (indexInGroups != undefined && indexInGroups >= 0) {
                                        self.groups.splice(indexInGroups, 1);
                                    }

                                    if (dropindex.position == 'before') {
                                        self._insertbeforegroup(targetgroup, datafield);
                                    }
                                    else {
                                        self._insertaftergroup(targetgroup, datafield);
                                    }
                                }
                            }
                            else if (self.groups.length == 0) {
                                if (top > hosttop && top <= hosttop + groupsheaderheight) {
                                    self.addgroup(datafield);
                                }
                            }
                            else if (top > hosttop + groupsheaderheight) {
                                var indexInGroups = self._getGroupIndexByDataField(datafield);
                                self.removegroupat(indexInGroups);
                            }
                        }

                        if (self.dropline != null) {
                            self.dropline.remove();
                            self.dropline = null;
                        }
                    }
                    //  return false;
                }
            });
        },

        _getGroupIndexByDataField: function (datafield) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i] == datafield)
                    return i;
            }
            return -1;
        },

        _isColumnInGroups: function (column) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i] == column)
                    return true;
            }
            return false;
        },

        //[optimize]
        _handlegroupdroplines: function (left) {
            var self = this;
            var dropindex = -1;
            $.each(self.groupheadersbounds, function (index) {
                if (left <= this.left + this.width / 2) {
                    var groupleft = this.left - 3;
                    if (index > 0) {
                        groupleft = this.left - 1 - self.groupindentwidth / 6;
                    }

                    self.dropline.css('left', groupleft);
                    self.dropline.css('top', this.top);
                    self.dropline.height(this.height);
                    self.dropline.fadeIn('slow');
                    dropindex = { index: index, position: 'before' }
                    return false;
                }
                else if (left >= this.left + this.width / 2) {
                    self.dropline.css('left', 1 + this.left + this.width);
                    self.dropline.css('top', this.top);
                    self.dropline.height(this.height);
                    self.dropline.fadeIn('slow');
                    dropindex = { index: index, position: 'after' }
                }
            });

            return dropindex;
        },

        //[optimize]
        _handlegroupstocolumnsdragdrop: function (datafield, column) {
            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.dragstarted = false;
            this.dragcolumn = null;
            var me = this;
            var mousemove;

            var mousedownevent = 'mousedown';
            var mousemoveevent = 'mousemove';

            var touchdevice = false;
            if (this.isTouchDevice()) {
                touchdevice = true;
                mousedownevent = 'touchstart';
                mousemoveevent = 'touchmove';
            }
            else {
                this.addHandler(column, 'dragstart', function (event) {
                    return false;
                });
            }

            this.addHandler(column, mousedownevent, function (event) {
                var left = event.pageX;
                var top = event.pageY;

                me.dragmousedown = { left: left, top: top };
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    left = touch.pageX;
                    top = touch.pageY;
                    me.dragmousedown = { left: left, top: top };
                }

                var offsetposition = $(event.target).offset();
                me.dragmousedownoffset = { left: parseInt(left) - parseInt(offsetposition.left), top: parseInt(top - offsetposition.top) };
            });

            this.addHandler(column, mousemoveevent, function (event) {
                if (me.dragmousedown) {
                    mousemove = { left: event.pageX, top: event.pageY };
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        mousemove = { left: touch.pageX, top: touch.pageY };
                    }
                    if (!me.dragstarted && me.dragcolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createdragcolumn(column, mousemove, true);
                            $.data(me.dragcolumn[0], 'datarecord', datafield);
                        }
                    }
                }
            });
        },

        //[optimize]
        _createdragcolumn: function (column, position, hasdropline) {
            var me = this;
            var mousemove = position;

            me.dragcolumn = $('<div></div>');
            var columnclone = column.clone();
            me.dragcolumn.css('z-index', 999999);
            columnclone.css('border-width', '1px');
            columnclone.css('opacity', '0.4');
            var menubutton = $(columnclone.find('.' + me.toThemeProperty('jqx-grid-column-menubutton')));
            if (menubutton.length > 0) {
                menubutton.css('display', 'none');
            }
            var closebutton = $(columnclone.find('.icon-close'));
            if (closebutton.length > 0) {
                closebutton.css('display', 'none');
            }

            me.dragcolumnicon = $('<div style="z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;"></div>');
            me.dragcolumnicon.addClass(me.toThemeProperty('jqx-grid-drag-icon'));
            me.dragcolumn.css('float', 'left');
            me.dragcolumn.css('position', 'absolute');
            var hostoffset = me.host.offset();
            columnclone.width(column.width() + 16);
            me.dragcolumn.append(columnclone);
            me.dragcolumn.height(column.height());
            me.dragcolumn.width(columnclone.width());
            me.dragcolumn.append(me.dragcolumnicon);
            $(document.body).append(me.dragcolumn);

            columnclone.css('margin-left', 0);
            columnclone.css('left', 0);
            columnclone.css('top', 0);
            me.dragcolumn.css('left', mousemove.left + me.dragmousedown.left);
            me.dragcolumn.css('top', mousemove.top + me.dragmousedown.top);

            if (hasdropline != undefined && hasdropline) {
                me.dropline = $('<div style="display: none; position: absolute;"></div>');

                me.dropline.width(2);
                me.dropline.addClass(me.toThemeProperty('jqx-grid-group-drag-line'));
                $(document.body).append(me.dropline);
            }
        },

        // gets column's groupable.
        iscolumngroupable: function (datafield) {
            return this._getcolumnproperty(datafield, 'groupable');
        },

        //[optimize]
        _handlecolumnstogroupsdragdrop: function (record, column) {
            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.dragstarted = false;
            this.dragcolumn = null;

            var me = this;
            var mousemove;
            var touchdevice = false;
            if (this.isTouchDevice()) {
                touchdevice = true;
            }

            var mousedown = 'mousedown.drag';
            var mousemove = 'mousemove.drag';
            if (touchdevice) {
                mousedown = 'touchstart.drag';
                mousemove = 'touchmove.drag';
            }
            else {
                this.addHandler(column, 'dragstart', function (event) {
                    return false;
                });
            }

            this.addHandler(column, mousedown, function (event) {
                if (me._isColumnInGroups(record.displayfield)) {
                    if (column.css('cursor') != 'col-resize') {
                        return true;
                    }
                    else return true;
                }
                if (false == record.groupable) {
                    return true;
                }

                var pagex = event.pageX;
                var pagey = event.pageY;
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    pagex = touch.pageX;
                    pagey = touch.pageY;
                }

                me.dragmousedown = { left: pagex, top: pagey };

                var offsetposition = $(event.target).offset();
                me.dragmousedownoffset = { left: parseInt(pagex) - parseInt(offsetposition.left), top: parseInt(pagey - offsetposition.top) };
            });

            this.addHandler(column, mousemove, function (event) {
                if (me._isColumnInGroups(record.displayfield))
                    if (column.css('cursor') != 'col-resize') {
                        return true;
                    }
                    else return true;

                if (me.dragmousedown) {
                    var pagex = event.pageX;
                    var pagey = event.pageY;
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        pagex = touch.pageX;
                        pagey = touch.pageY;
                    }
                    mousemove = { left: pagex, top: pagey };
                    if (!me.dragstarted && me.dragcolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createdragcolumn(column, mousemove, true);
                            $.data(me.dragcolumn[0], 'datarecord', record.displayfield);
                        }
                    }
                }
            });
        },

        //[optimize]
        _rendergroupcolumn: function (text, groupcolumn) {
            var group = $('<div style="float: left; position: relative;"></div>');

            if (this.groupcolumnrenderer != null) {
                group[0].innerHTML = this.groupcolumnrenderer(text);
                group.addClass(this.toThemeProperty('jqx-grid-group-column'));
                group.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            }

            if (this.closeablegroups) {
                if (group[0].innerHTML == '') {
                    group[0].innerHTML = '<a style="float: left;" href="#">' + text + '</a>';
                }

                var closebutton = '<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('icon-close') + '"></div></div>';
                if ($.browser.msie && $.browser.version < 8) {
                    closebutton = '<div style="float: left; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('icon-close') + '"></div></div>';
                }
                group[0].innerHTML += closebutton;
            }
            else {
                if (group[0].innerHTML == '') {
                    group[0].innerHTML = '<a href="#">' + text + '</a>';
                }
            }

            if (this.sortable) {
                var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                if (this.closeablegroups) {
                    var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                    var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                }
                sortasc.css('display', 'none');
                sortdesc.css('display', 'none');
                if ($.browser.msie && $.browser.version < 8) {
                    sortasc.css('float', 'left');
                    sortdesc.css('float', 'left');
                }
                group.append(sortasc);
                group.append(sortdesc);
                $.data(document.body, "groupsortelements" + groupcolumn, { sortasc: sortasc, sortdesc: sortdesc });
            }

            group.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            group.addClass(this.toThemeProperty('jqx-grid-group-column'));
            return group;
        },

        _rendergroup: function (groupslength, tablerow, renderrow, columnstart, columnend, renderedrows, tablewidth) {
            var visualrow = tablerow;
            var tablecell = tablerow.cells[renderrow.level];
            var expanded = this._findgroupstate(renderrow.uniqueid);
            if (renderrow.bounddata.subGroups.length > 0 || renderrow.bounddata.subItems.length > 0) {
                if (expanded) {
                    tablecell.className += " " + this.toThemeProperty('jqx-grid-group-expand');
                }
                else {
                    tablecell.className += " " + this.toThemeProperty('jqx-grid-group-collapse');
                }
            }

            var text = this._getColumnText(this.groups[renderrow.level]).label;
            var indentwidth = this.groupindentwidth;
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + groupslength) * indentwidth : (groupslength) * indentwidth;
            var width = tablewidth - indent;
            var cellToRender = visualrow.cells[renderrow.level + 1];
            var m = 2;
            while (cellToRender != undefined && cellToRender.style.display == 'none' && m < 10) {
                cellToRender = visualrow.cells[renderrow.level + m];
                m++;
            }

            var $cellToRender = $(cellToRender);
            cellToRender.style.width = parseInt(width) + 'px';
            if (cellToRender.className.indexOf('jqx-grid-cell-filter') != -1) {
                $cellToRender.removeClass(this.toThemeProperty('jqx-grid-cell-filter'));
            }
            if (cellToRender.className.indexOf('jqx-grid-cell-sort') != -1) {
                $cellToRender.removeClass(this.toThemeProperty('jqx-grid-cell-sort'));
            }

            if (this.groupsrenderer != null) {
                var groupdata = { group: renderrow.group, level: renderrow.level, subGroups: renderrow.bounddata.subGroups, subItems: renderrow.bounddata.subItems, groupcolumn: this._getColumnText(this.groups[renderrow.level]).column };
                var html = this.groupsrenderer(text + ': ' + renderrow.group, renderrow.group, expanded, groupdata);
                if (html) {
                    cellToRender.innerHTML = html;
                }
                else {
                    var count = renderrow.bounddata.subItems.length > 0 ? renderrow.bounddata.subItems.length : renderrow.bounddata.subGroups.length;
                    cellToRender.innerHTML = '<div class="' + this.toThemeProperty('jqx-grid-groups-row') + '" style="position: absolute;"><span>' + text + ': </span>' + '<span class="' + this.toThemeProperty('jqx-grid-groups-row-details') + '">' + renderrow.group + ' (' + count + ')' + '</span></div>';
                }
            }
            else {
                var column = this._getcolumnbydatafield(this.groups[renderrow.level]);
                var value = renderrow.group;
                if (column.cellsformat) {
                    if ($.jqx.dataFormat) {
                        if ($.jqx.dataFormat.isDate(value)) {
                            value = $.jqx.dataFormat.formatdate(value, column.cellsformat, this.gridlocalization);
                        }
                        else if ($.jqx.dataFormat.isNumber(value)) {
                            value = $.jqx.dataFormat.formatnumber(value, column.cellsformat, this.gridlocalization);
                        }
                    }
                }
                var count = renderrow.bounddata.subItems.length > 0 ? renderrow.bounddata.subItems.length : renderrow.bounddata.subGroups.length;
                cellToRender.innerHTML = '<div class="' + this.toThemeProperty('jqx-grid-groups-row') + '" style="position: absolute;"><span>' + text + ': </span>' + '<span class="' + this.toThemeProperty('jqx-grid-groups-row-details') + '">' + value + ' (' + count + ')' + '</span></div>';
            }
        }
    });
})(jQuery);(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        _initpager: function () {
            var me = this;
            var pagergotopagestring = this.gridlocalization.pagergotopagestring;
            var pagerrangestring = this.gridlocalization.pagerrangestring;
            var pagershowrowsstring = this.gridlocalization.pagershowrowsstring;

            var top = (this.pagerheight - 17) / 2;

            this.pagerdiv = this.pagerdiv || $('<div style="width: 100%; height: 100%; position: relative;"></div>');
            if (!this.pageable) {
                this.pagerdiv.remove();
                this.vScrollBar.jqxScrollBar({ thumbSize: 0 });
                return;
            }

            if (!this.pagerrenderer) {
                this.pagerdiv.css('top', top);
                this.pagergotoinput = this.pagergotoinput || $('<div style="margin-right: 7px; width: 27px; height: 17px; float: right;"><input style="margin-top: 0px; text-align: right; width: 27px;" type="text"/></div>');
                this.pagergoto = this.pagergoto || $('<div style="float: right; margin-right: 7px;"></div>');
                this.pagerrightbutton = this.pagerrightbutton || $('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>');
                this.pagerleftbutton = this.pagerleftbutton || $('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>');
                this.pagerdetails = this.pagerdetails || $('<div style="margin-right: 7px; float: right;"></div>');
                this.pagershowrows = this.pagershowrows || $('<div style="margin-right: 7px; float: right;"></div>');
                if (this.pagershowrowscombo && this.pagershowrowscombo.jqxDropDownList) {
                    this.pagershowrowscombo.remove();
                    this.pagershowrowscombo = null;
                }
                this.pagershowrowscombo = this.pagershowrowscombo || $('<div id="gridpagerlist" style="margin-top: 0px; margin-right: 7px; float: right;"></div>');
                this.pagerdiv.children().remove();
                this.pagershowrowscombo[0].id = "gridpagerlist" + this.element.id;
                this.removeHandler(this.pagerrightbutton, 'mousedown');
                this.removeHandler(this.pagerrightbutton, 'mouseup');
                this.removeHandler(this.pagerrightbutton, 'click');
                this.removeHandler(this.pagerleftbutton, 'mousedown');
                this.removeHandler(this.pagerleftbutton, 'mouseup');
                this.removeHandler(this.pagerleftbutton, 'click');

                this.pagerleftbutton.attr('title', this.gridlocalization.pagerpreviousbuttonstring);
                this.pagerrightbutton.attr('title', this.gridlocalization.pagernextbuttonstring);

                this.pagerdiv.append(this.pagerrightbutton);
                this.pagerdiv.append(this.pagerleftbutton);
                this.pagerrightbutton.jqxButton({ cursor: 'pointer', theme: this.theme });
                this.pagerleftbutton.jqxButton({ cursor: 'pointer', theme: this.theme });

                this.pagerleftbutton.find('.icon-arrow-left').remove();
                this.pagerrightbutton.find('.icon-arrow-right').remove();

                var leftarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                leftarrow.addClass(this.toThemeProperty('icon-arrow-left'));
                this.pagerleftbutton.wrapInner(leftarrow);

                var rightarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                rightarrow.addClass(this.toThemeProperty('icon-arrow-right'));
                this.pagerrightbutton.wrapInner(rightarrow);

                this.pagerdiv.append(this.pagerdetails);
                this.pagerdiv.append(this.pagershowrowscombo);
                this.pagerdiv.append(this.pagershowrows);
                this.pagerdiv.append(this.pagergotoinput);
                this.pagerdiv.append(this.pagergoto);

                var source = this.pagesizeoptions;
                if (!this.pagershowrowscombo.jqxDropDownList) {
                    alert('jqxdropdownlist is not loaded.');
                    return;
                }

                this.pagershowrowscombo.jqxDropDownList({ source: source, enableBrowserBoundsDetection: true, keyboardSelection: false, autoDropDownHeight: true, width: 44, height: 16, theme: this.theme });
                var selectedindex = 0;
                for (var i = 0; i < source.length; i++) {
                    if (this.pagesize >= source[i]) {
                        selectedindex = i;
                    }
                }
                this.pagershowrows[0].innerHTML = pagershowrowsstring;
                this.pagergoto[0].innerHTML = pagergotopagestring;
                this.updatepagerdetails();
                this.pager.append(this.pagerdiv);
                this.pagershowrowscombo.jqxDropDownList({ selectedIndex: selectedindex });
                this.pagerpageinput = this.pagergotoinput.find('input');
                this.pagerpageinput.addClass(this.toThemeProperty('jqx-input'));
                this.pagerpageinput.addClass(this.toThemeProperty('jqx-widget-content'));

                var me = this;
                this.pagershowrowscombo.unbind('select');
                this.pagershowrowscombo.bind('select', function (event) {
                    if (event.args) {
                        if (me.editcell != null && me.endcelledit) {
                            me.endcelledit(me.editcell.row, me.editcell.column, true, false);
                        }

                        var index = event.args.index;
                        var recordindex = me.dataview.pagenum * me.dataview.pagesize;
                        var pagesize = source[index];
                        var oldpagesize = me.pagesize;
                        me.pagesize = parseInt(pagesize);
                        if (isNaN(me.pagesize)) {
                            me.pagesize = 10;
                        }
                        if (pagesize >= 100) {
                            me.pagershowrowscombo.jqxDropDownList({ width: 55 });
                        }
                        else {
                            me.pagershowrowscombo.jqxDropDownList({ width: 44 });
                        }

                        me.dataview.pagesize = me.pagesize;
                        var pagenum = Math.floor(recordindex / me.dataview.pagesize);
                        me.prerenderrequired = true;
                        me._requiresupdate = true;
                        me._raiseEvent(10, { pagenum: pagenum, oldpagesize: oldpagesize, pagesize: me.dataview.pagesize });
                        me.gotopage(pagenum);
                        if (me.autoheight && me._updatesizeonwindowresize) {
                            me._updatesize(true);
                            setTimeout(function () {
                                me._updatesize(true);
                            }, 500);
                        }
                    }
                });

                var input = this.pagergotoinput.find('input');
                input.addClass(this.toThemeProperty('jqx-grid-pager-input'));
                input.addClass(this.toThemeProperty('jqx-rc-all'));
                input.unbind('keydown');
                input.unbind('change');
                input.bind('keydown', function (event) {
                    if (event.keyCode >= 65 && event.keyCode <= 90)
                        return false;

                    if (event.keyCode == '13') {
                        var val = input.val();
                        val = parseInt(val);
                        if (!isNaN(val)) {
                            me.gotopage(val - 1);
                        }
                        return false;
                    }
                });
                input.bind('change', function () {
                    var val = input.val();
                    val = parseInt(val);
                    if (!isNaN(val)) {
                        me.gotopage(val - 1);
                    }
                });

                this.addHandler(this.pagerrightbutton, 'mouseenter', function () {
                    rightarrow.addClass(me.toThemeProperty('icon-arrow-right-hover'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseenter', function () {
                    leftarrow.addClass(me.toThemeProperty('icon-arrow-left-hover'));
                });

                this.addHandler(this.pagerrightbutton, 'mouseleave', function () {
                    rightarrow.removeClass(me.toThemeProperty('icon-arrow-right-hover'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseleave', function () {
                    leftarrow.removeClass(me.toThemeProperty('icon-arrow-left-hover'));
                });

                this.addHandler(this.pagerrightbutton, 'mousedown', function () {
                    rightarrow.addClass(me.toThemeProperty('icon-arrow-right-selected'));
                });

                this.addHandler(this.pagerrightbutton, 'mouseup', function () {
                    rightarrow.removeClass(me.toThemeProperty('icon-arrow-right-selected'));
                });

                this.addHandler(this.pagerleftbutton, 'mousedown', function () {
                    leftarrow.addClass(me.toThemeProperty('icon-arrow-left-selected'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseup', function () {
                    leftarrow.removeClass(me.toThemeProperty('icon-arrow-left-selected'));
                });

                this.addHandler(this.pagerrightbutton, 'click', function () {
                    if (!me.pagerrightbutton.jqxButton('disabled')) {
                        me.gotonextpage();
                    }
                });
                this.addHandler(this.pagerleftbutton, 'click', function () {
                    if (!me.pagerrightbutton.jqxButton('disabled')) {
                        me.gotoprevpage();
                    }
                });
            }
            else {
                this.pagerdiv.children().remove();
                var element = this.pagerrenderer();
                if (element != null) {
                    this.pagerdiv.append($(element));
                }
                this.pager.append(this.pagerdiv);
            }

            this.vScrollBar.jqxScrollBar({ thumbSize: this.host.height() / 5 });
            this.vScrollBar.jqxScrollBar('refresh');
            this._arrange();
        },

        _updatepagertheme: function () {
            if (this.pagershowrowscombo == null)
                return;

            this.pagershowrowscombo.jqxDropDownList({ theme: this.theme });
            this.pagerrightbutton.jqxButton({ theme: this.theme });
            this.pagerleftbutton.jqxButton({ theme: this.theme });

            this.pagerpageinput.removeClass();

            var input = this.pagergotoinput.find('input');
            input.removeClass();
            input.addClass(this.toThemeProperty('jqx-grid-pager-input'));
            input.addClass(this.toThemeProperty('jqx-rc-all'));
            this.pagerpageinput.addClass(this.toThemeProperty('jqx-input'));
            this.pagerpageinput.addClass(this.toThemeProperty('jqx-widget-content'));

            this.pagerleftbutton.find('.icon-arrow-left').remove();
            this.pagerrightbutton.find('.icon-arrow-right').remove();

            var leftarrow = $("<div style='width: 27px; height: 15px;'></div>");
            leftarrow.addClass(this.toThemeProperty('icon-arrow-left'));
            this.pagerleftbutton.wrapInner(leftarrow);

            var rightarrow = $("<div style='width: 27px; height: 15px;'></div>");
            rightarrow.addClass(this.toThemeProperty('icon-arrow-right'));
            this.pagerrightbutton.wrapInner(rightarrow);

            var removeHandlers = function (me, button) {
                me.removeHandler(button, 'mouseenter');
                me.removeHandler(button, 'mouseleave');
                me.removeHandler(button, 'mousedown');
                me.removeHandler(button, 'mouseup');
            }
            removeHandlers(this, this.pagerrightbutton);
            removeHandlers(this, this.pagerleftbutton);
            var me = this;
            this.addHandler(this.pagerrightbutton, 'mouseenter', function () {
                rightarrow.addClass(me.toThemeProperty('icon-arrow-right-hover'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseenter', function () {
                leftarrow.addClass(me.toThemeProperty('icon-arrow-left-hover'));
            });

            this.addHandler(this.pagerrightbutton, 'mouseleave', function () {
                rightarrow.removeClass(me.toThemeProperty('icon-arrow-right-hover'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseleave', function () {
                leftarrow.removeClass(me.toThemeProperty('icon-arrow-left-hover'));
            });

            this.addHandler(this.pagerrightbutton, 'mousedown', function () {
                rightarrow.addClass(me.toThemeProperty('icon-arrow-right-selected'));
            });

            this.addHandler(this.pagerrightbutton, 'mouseup', function () {
                rightarrow.removeClass(me.toThemeProperty('icon-arrow-right-selected'));
            });

            this.addHandler(this.pagerleftbutton, 'mousedown', function () {
                leftarrow.addClass(me.toThemeProperty('icon-arrow-left-selected'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseup', function () {
                leftarrow.removeClass(me.toThemeProperty('icon-arrow-left-selected'));
            });
        },

        gotopage: function (pagenum) {
            if (pagenum == null || pagenum == undefined)
                pagenum = 0;

            if (pagenum == -1)
                pagenum = 0;

            if (pagenum < 0)
                return;

            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }

            var pages = Math.ceil(totalrecords / this.pagesize);
            if (pagenum >= pages) {
                if (this.dataview.totalrecords == 0) {
                    this.dataview.pagenum = 0;
                    this.updatepagerdetails();
                }
                if (pagenum > 0) {
                    pagenum = pages - 1;
                }
            }

            if (this.dataview.pagenum != pagenum || this._requiresupdate) {
                if (this.pageable) {
                    if (this.source.pager) {
                        this.source.pager(pagenum, this.dataview.pagesize, this.dataview.pagenum);
                    }

                    this.dataview.pagenum = pagenum;

                    if (this.virtualmode) {
                        this.hiddens = new Array();
                        this.expandedgroups = new Array();
                        if (this.rendergridrows) {
                            var startboundindex = pagenum * this.dataview.pagesize;
                            var endboundindex = startboundindex + this.dataview.pagesize;
                            if (startboundindex != null && endboundindex != null) {
                                if (this.pagerrightbutton) {
                                    this.pagerrightbutton.jqxButton({ disabled: true });
                                    this.pagerleftbutton.jqxButton({ disabled: true });
                                    this.pagershowrowscombo.jqxDropDownList({ disabled: true });
                                }
                                this.updatebounddata('pagechanged');
                                this._raiseEvent(9, { pagenum: pagenum, pagesize: this.dataview.pagesize });
                                this.updatepagerdetails();
                                if (this.autosavestate) {
                                    if (this.savestate) this.savestate();
                                }
                                return;
                            }
                        }
                    }
                    else this.dataview.updateview();

                    this._loadrows();

                    this._updatepageviews();
                    this.tableheight = null;
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                    this._renderrows(this.virtualsizeinfo);
                    this.updatepagerdetails();
                    if (this.autoheight) {
                        var newheight = this.host.height() - this._gettableheight();
                        height = newheight + this._pageviews[0].height;
                        if (height != this.host.height()) {
                            this._arrange();
                            this._updatepageviews();
                            //               if (totalrecords == 0 && !this.virtualmode) this._renderrows(this.virtualsizeinfo);               
                        }
                    }

                    if (this.editcell != null && this.endcelledit) {
                        this.endcelledit(this.editcell.row, this.editcell.column, true, false);
                    }

                    this._raiseEvent(9, { pagenum: pagenum, pagesize: this.dataview.pagesize });
                    if (this.autosavestate) {
                        if (this.savestate) this.savestate();
                    }
                }
            }
        },

        // goes to a previous page.
        gotoprevpage: function () {
            if (this.dataview.pagenum > 0) {
                this.gotopage(this.dataview.pagenum - 1);
            }
            else {
                var totalrecords = this.dataview.totalrecords;
                if (this.summaryrows) {
                    totalrecords += this.summaryrows.length;
                }
                var pages = Math.ceil(totalrecords / this.pagesize);
                this.gotopage(pages - 1);
            }
        },

        // goes to a next page.
        gotonextpage: function () {
            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }
            var pages = Math.ceil(totalrecords / this.pagesize);
            if (this.dataview.pagenum < pages - 1) {
                this.gotopage(this.dataview.pagenum + 1);
            }
            else {
                this.gotopage(0);
            }
        },

        // updates a pager details.
        updatepagerdetails: function () {
            if (this.pagerdetails != null && this.pagerdetails.length > 0) {
                var currentrecord = this.dataview.pagenum * this.pagesize;
                var lastrecord = (this.dataview.pagenum + 1) * this.pagesize;
                if (lastrecord >= this.dataview.totalrecords) {
                    lastrecord = this.dataview.totalrecords;
                }
                var totalrecords = this.dataview.totalrecords;
                if (this.summaryrows) {
                    totalrecords += this.summaryrows.length;
                    if ((this.dataview.pagenum + 1) * this.pagesize > this.dataview.totalrecords)
                    { lastrecord = totalrecords; }
                }

                currentrecord++;
                var input = this.pagergotoinput.find('input');
                input.val(this.dataview.pagenum + 1);
                var pagescount = Math.round(totalrecords / this.dataview.pagesize);
                if (pagescount > 1) pagescount--;
                pagescount++;

                this.pagergotoinput.attr('title', '1 - ' + pagescount);
                if (lastrecord == 0 && lastrecord < currentrecord) {
                    currentrecord = 0;
                }

                this.pagerdetails[0].innerHTML = currentrecord + '-' + lastrecord + this.gridlocalization.pagerrangestring + totalrecords;

                if (currentrecord > lastrecord) {
                    this.gotoprevpage();
                }
            }
        },

        _updatepagedview: function (totalrows, virtualheight, currentheight) {
            var self = this;
            var rowslength = this.dataview.rows.length;
            for (var i = 0; i < rowslength; i++) {
                var index = this.dataview.rows[i].visibleindex;
                var rowinfo = { index: index, height: this.heights[index], hidden: this.hiddens[index], details: this.details[index] }
                if (this.heights[index] == undefined) {
                    this.heights[index] = this.rowsheight;
                    rowinfo.height = this.rowsheight;
                }
                if (this.hiddens[index] == undefined) {
                    this.hiddens[index] = false;
                    rowinfo.hidden = false;
                }
                if (this.details[index] == undefined) {
                    this.details[index] = null;
                }
                if (rowinfo.height != self.rowsheight) {
                    virtualheight -= self.rowsheight;
                    virtualheight += rowinfo.height;
                }

                if (rowinfo.hidden) {
                    virtualheight -= rowinfo.height;
                }
                else {
                    currentheight += rowinfo.height;
                    var detailsheight = 0;
                    if (this.rowdetails) {
                        if (rowinfo.details && rowinfo.details.rowdetails && !rowinfo.details.rowdetailshidden) {
                            detailsheight = rowinfo.details.rowdetailsheight;
                            currentheight += detailsheight;
                            virtualheight += detailsheight;
                        }
                    }
                }
            }
            this._pageviews[0] = { top: 0, height: currentheight };
            return virtualheight;
        }
    });
})(jQuery);(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        _handledblclick: function (event, self) {
            if (event.target == null) {
                return;
            }

            if (self.disabled) {
                return;
            }

            if ($(event.target).ischildof(this.columnsheader)) {
                return;
            }

            var rightclick;
            if (event.which) rightclick = (event.which == 3);
            else if (event.button) rightclick = (event.button == 2);

            if (rightclick) {
                return;
            }

            var middleclick;
            if (event.which) middleclick = (event.which == 2);
            else if (event.button) middleclick = (event.button == 1);

            if (middleclick) {
                return;
            }

            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;

            var hostoffset = this.host.offset();
            var x = event.pageX - hostoffset.left;
            var y = event.pageY - columnheaderheight - hostoffset.top - groupsheaderheight;
            var rowinfo = this._hittestrow(x, y);
            var row = rowinfo.row;
            var index = rowinfo.index;
            var targetclassname = event.target.className;
            var tablerow = this.table[0].rows[index];
            if (tablerow == null)
                return;

            self.mousecaptured = true;
            self.mousecaptureposition = { left: event.pageX, top: event.pageY - groupsheaderheight };

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var cellindex = 0;
            var groupslength = this.groupable ? this.groups.length : 0;

            for (var i = 0; i < tablerow.cells.length; i++) {
                var left = parseInt($(this.columnsrow[0].cells[i]).css('left')) - horizontalscrollvalue;
                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    break;
                }
            }

            if (row != null) {
                var column = this._getcolumnat(cellindex);
                if (!(targetclassname.indexOf('jqx-grid-group-expand') != -1 || targetclassname.indexOf('jqx-grid-group-collapse') != -1)) {
                    if (row.boundindex != -1) {
                        self.begincelledit(row.boundindex, column.datafield, column.defaulteditorvalue);
                    }
                }
            }
        },

        _handleeditkeydown: function (event, self) {
            var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;

            if (self.showfilterrow && self.filterable) {
                if (this.filterrow) {
                    if ($(event.target).ischildof(this.filterrow))
                        return true;
                }
            }

            if (self.pageable) {
                if ($(event.target).ischildof(this.pager)) {
                    return true;
                }
            }

            if (this.showtoolbar) {
                if ($(event.target).ischildof(this.toolbar)) {
                    return true;
                }
            }
            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar)) {
                    return true;
                }
            }

            if (this.editcell) {
                if (this.editcell.columntype == null || this.editcell.columntype == 'textbox') {
                    if (key >= 33 && key <= 40 && self.selectionmode == 'multiplecellsadvanced') {
                        var selection = self._selection(this.editcell.editor);
                        var strlength = this.editcell.editor.val().length;
                        if (selection.length > 0) {
                            self._cancelkeydown = true;
                        }

                        if (selection.start > 0 && key == 37) {
                            self._cancelkeydown = true;
                        }
                        if (selection.start < strlength && key == 39) {
                            self._cancelkeydown = true;
                        }
                    }
                }
                if (key == 32) {
                    if (self.editcell.columntype == 'checkbox') {
                        var checked = !self.getcellvalue(self.editcell.row, self.editcell.column);
                        self.setcellvalue(self.editcell.row, self.editcell.column, checked, true);
                        self._raiseEvent(18, { rowindex: self.editcell.row, datafield: self.editcell.column, oldvalue: !checked, value: checked, columntype: 'checkbox' });
                        return false;
                    }
                }
                if (key == 9) {
                    var rowindex = this.editcell.row;
                    var datafield = this.editcell.column;
                    var initialdatafield = datafield;
                    var columnindex = self._getcolumnindex(datafield);
                    var canedit = false;
                    var visibleindex = self.getrowvisibleindex(rowindex);

                    if (this.editcell.validated != false) {
                        if (event.shiftKey) {
                            var column = self._getprevvisiblecolumn(columnindex);
                            if (column) {
                                datafield = column.datafield;
                                canedit = true;
                                if (self.selectionmode.indexOf('cell') != -1) {
                                    self.selectprevcell(rowindex, initialdatafield);
                                    setTimeout(function () {
                                        self.ensurecellvisible(visibleindex, datafield);
                                    }, 10);
                                }
                            }
                        }
                        else {
                            var column = self._getnextvisiblecolumn(columnindex);
                            if (column) {
                                datafield = column.datafield;
                                canedit = true;
                                if (self.selectionmode.indexOf('cell') != -1) {
                                    self.selectnextcell(rowindex, initialdatafield);
                                    setTimeout(function () {
                                        self.ensurecellvisible(visibleindex, datafield);
                                    }, 10);
                                }
                            }
                        }

                        if (canedit) {
                            self.begincelledit(rowindex, datafield);
                            if (this.editcell != null && this.editcell.columntype == 'checkbox') {
                                this._renderrows(this.virtualsizeinfo);
                            }
                        }
                    }
                    return false;
                }
                else if (key == 13) {
                    this.endcelledit(this.editcell.row, this.editcell.column, false, true);
                    if (self.selectionmode == 'multiplecellsadvanced') {
                        var cell = self.getselectedcell();
                        if (cell != null) {
                            if (self.selectcell) {
                                if (cell.rowindex + 1 < self.dataview.totalrecords) {
                                    self.clearselection(false);
                                    self.selectcell(cell.rowindex + 1, cell.datafield);
                                    self.ensurecellvisible(cell.rowindex + 1, cell.datafield);
                                }
                            }
                        }
                    }
                    return false;
                }
                else if (key == 27) {
                    this.endcelledit(this.editcell.row, this.editcell.column, true, true);
                    return false;
                }
            }
            else {
                var startedit = false;
                if (key == 113) {
                    startedit = true;
                }
                if (!event.ctrlKey && !event.altKey) {
                    if (key >= 48 && key <= 57) {
                        this.editchar = String.fromCharCode(key);
                        startedit = true;
                    }
                    if (key >= 65 && key <= 90) {
                        this.editchar = String.fromCharCode(key);
                        if (!event.shiftKey) {
                            this.editchar = this.editchar.toLowerCase();
                        }
                        startedit = true;
                    }
                    else if (key >= 96 && key <= 105) {
                        this.editchar = key - 96;
                        this.editchar = this.editchar.toString();
                        startedit = true;
                    }
                }

                if (key == 13 || startedit) {
                    if (self.getselectedrowindex) {
                        var rowindex = self.getselectedrowindex();

                        switch (self.selectionmode) {
                            case 'singlerow':
                            case 'multiplerows':
                            case 'multiplerowsextended':
                                {
                                    if (rowindex >= 0) {
                                        var datafield = "";
                                        for (var m = 0; m < self.columns.records.length; m++) {
                                            var column = self.getcolumnat(m);
                                            if (column.editable) {
                                                datafield = column.datafield;
                                                break;
                                            }
                                        }

                                        self.begincelledit(rowindex, datafield);
                                    }
                                    break;
                                }
                            case 'singlecell':
                            case 'multiplecells':
                            case 'multiplecellsextended':
                                var cell = self.getselectedcell();
                                if (cell != null) {
                                    var column = self._getcolumnbydatafield(cell.datafield);
                                    if (column.columntype != 'checkbox') {
                                        self.begincelledit(cell.rowindex, cell.datafield);
                                    }
                                }
                                break;
                            case "multiplecellsadvanced":
                                var cell = self.getselectedcell();
                                if (cell != null) {
                                    if (key == 13) {
                                        if (self.selectcell) {
                                            if (cell.rowindex + 1 < self.dataview.totalrecords) {
                                                self.clearselection(false);
                                                self.selectcell(cell.rowindex + 1, cell.datafield);
                                                self.ensurecellvisible(cell.rowindex + 1, cell.datafield);
                                            }
                                        }
                                    }
                                    else {
                                        self.begincelledit(cell.rowindex, cell.datafield);
                                    }
                                }

                                break;
                        }
                        return false;
                    }
                }
                if (key == 46) {
                    var cells = self.getselectedcells();
                    if (self.selectionmode.indexOf('cell') == -1) {
                        if (self._getcellsforcopypaste) {
                            cells = self._getcellsforcopypaste();
                        }
                    }
                    if (cells != null && cells.length > 0) {
                        for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                            var cell = cells[cellIndex];
                            var column = self.getcolumn(cell.datafield);
                            var cellValue = self.getcellvalue(cell.rowindex, cell.datafield);
                            if (cellValue != "") {
                                self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: cellValue });
                                if (cellIndex == cells.length - 1) {
                                    self.setcellvalue(cell.rowindex, cell.datafield, "", true);
                                }
                                else self.setcellvalue(cell.rowindex, cell.datafield, "", false);
                                self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: cellValue, value: "" });
                            }
                        }
                        this.dataview.updateview();
                        this._renderrows(this.virtualsizeinfo);
                        return false;
                    }
                }
                if (key == 32) {
                    var cell = self.getselectedcell();
                    if (cell != null) {
                        var column = self.getcolumn(cell.datafield);
                        if (column.columntype == 'checkbox') {
                            var checked = !self.getcellvalue(cell.rowindex, cell.datafield);
                            self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: !checked, columntype: 'checkbox' });
                            self.setcellvalue(cell.rowindex, cell.datafield, checked, true);
                            self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: !checked, value: checked, columntype: 'checkbox' });
                            return false;
                        }
                    }
                }
            }

            return true;
        },

        // begins cell editing.
        begincelledit: function (row, datafield, defaultvalue) {
            var column = this.getcolumn(datafield);

            if (datafield == null)
                return;

            if (column.columntype == "number" || column.columntype == "button") {
                return;
            }

            if (this.editrow != undefined) return;

            if (this.editcell) {
                if (this.editcell.row == row && this.editcell.column == datafield) {
                    return true;
                }

                var validated = this.endcelledit(this.editcell.row, this.editcell.column, false, true);
                if (false == validated)
                    return;
            }

            var isembeddededitor = column.columntype == 'checkbox' || column.columntype == 'button';
            this.host.removeClass('jqx-disableselect');
            this.content.removeClass('jqx-disableselect');

            if (column.editable) {
                if (column.cellbeginedit) {
                    var cell = this.getcell(row, datafield);
                    var beginEdit = column.cellbeginedit(row, datafield, column.columntype, cell != null ? cell.value : null);
                    if (beginEdit == false)
                        return;
                }

                var visiblerowindex = this.getrowvisibleindex(row);
                this.editcell = this.getcell(row, datafield);
                this.editcell.visiblerowindex = visiblerowindex;
                if (!this.editcell.editing) {
                    if (!isembeddededitor) {
                        this.editcell.editing = true;
                    }
                    this.editcell.columntype = column.columntype;
                    this.editcell.defaultvalue = defaultvalue;
                    if (column.defaultvalue != undefined) {
                        this.editcell.defaultvalue = column.defaultvalue;
                    }
                    this.editcell.init = true;
                    // raise begin cell edit event.
                    if (column.columntype != "checkbox") {
                        this._raiseEvent(17, { rowindex: row, datafield: column.datafield, value: this.editcell.value, columntype: column.columntype });
                    }

                    if (!isembeddededitor) {
                        this._renderrows(this.virtualsizeinfo);
                    }
                    if (this.editcell) {
                        this.editcell.init = false;
                    }
                }
            }
            else {
                if (!this.editcell) {
                    return;
                }
                this.editcell.editor = null;
                this.editcell.editing = false;
                this._renderrows(this.virtualsizeinfo);
                this.editcell = null;
            }
        },

        endcelledit: function (row, datafield, cancelchanges, refresh) {
            var column = this.getcolumn(datafield);
            var me = this;

            if (me.editrow != undefined) return;

            var setfocus = function () {
                if (!me.isNestedGrid) {
                    me.element.focus();
                    me.content.focus();
                    setTimeout(function () {
                        me.element.focus();
                        me.content.focus();
                    }, 10);
                }
            }

            if (column.columntype == 'checkbox' || column.columntype == 'button') {
                this.editcell.editor = null;
                this.editcell.editing = false;
                this.editcell = null;
                return true;
            }

            var editorvalue = this._geteditorvalue(column);

            var cancelchangesfunc = function (me) {
                me._hidecelleditor();
                me.editcell.editor = null;
                me.editcell.editing = false;
                me.editcell = null;
                if (refresh || refresh == undefined) {
                    me._renderrows(me.virtualsizeinfo);
                }
                setfocus();
                if (!me.enablebrowserselection) {
                    me.host.addClass('jqx-disableselect');
                    me.content.addClass('jqx-disableselect');
                }
            }

            if (cancelchanges) {
                cancelchangesfunc(this);
                return false;
            }

            if (this.validationpopup) {
                this.validationpopup.hide();
                this.validationpopuparrow.hide();
            }

            if (column.cellvaluechanging) {
                var newcellvalue = column.cellvaluechanging(row, datafield, column.columntype, this.editcell.value, editorvalue);
                if (newcellvalue != undefined) {
                    editorvalue = newcellvalue;
                }
            }

            if (column.validation) {
                var cell = this.getcell(row, datafield);
                try
                {
                    var validationobj = column.validation(cell, editorvalue);
                    var validationmessage = this.gridlocalization.validationstring;
                    if (validationobj.message != undefined) {
                        validationmessage = validationobj.message;
                    }
                    var result = typeof validationobj == "boolean" ? validationobj : validationobj.result;

                    if (!result) {
                        if (validationobj.showmessage == undefined || validationobj.showmessage == true) {
                            this._showvalidationpopup(row, datafield, validationmessage);
                        }
                        this.editcell.validated = false;
                        return false;
                    }
                }
                catch (error) {
                    this._showvalidationpopup(row, datafield, this.gridlocalization.validationstring);
                    this.editcell.validated = false;
                    return false;
                }
            }

            if (column.displayfield != column.datafield) {
                var label = this.getcellvalue(this.editcell.row, column.displayfield);
                var value = this.editcell.value;
                oldvalue = { value: value, label: label };
            }
            else oldvalue = this.editcell.value;

            if (column.cellendedit) {
                var cellendeditresult = column.cellendedit(row, datafield, column.columntype, this.editcell.value, editorvalue);
                if (cellendeditresult == false) {
                    this._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: oldvalue, columntype: column.columntype });
                    cancelchangesfunc(this);
                    return false;
                }
            }

            this._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: editorvalue, columntype: column.columntype });

            this._hidecelleditor();
            if (this.editcell != undefined) {
                this.editcell.editor = null;
                this.editcell.editing = false;
            }
            this.editcell = null;
            this.setcellvalue(row, datafield, editorvalue, refresh);
            if (!this.enablebrowserselection) {
                this.host.addClass('jqx-disableselect');
                this.content.addClass('jqx-disableselect');
            }
            setfocus();

            // raise end cell edit event.
            return true;
        },

        beginrowedit: function (row) {
            if (!this.editcells) {
                this.editcells = new Array();
            }

            if (this.editcells.length > 0) {
                if (this.editcells[0].row == row) {
                    return;
                }

                var validated = this.endrowedit(this.editcells[0].row, false, true);
                if (false == validated)
                    return;
            }

            this.host.removeClass('jqx-disableselect');
            this.content.removeClass('jqx-disableselect');
            var me = this;
            this.editcells = new Array();
            $.each(this.columns.records, function () {
                if (me.editable) {
                    var cell = me.getcell(row, this.datafield);
                    cell.editing = true;
                    if (this.defaultvalue != undefined) {
                        cell.defaultvalue = column.defaultvalue;
                    }
                    cell.init = true;
                    me.editcells[this.datafield] = cell;
                }
            });
            me.editrow = row;
            me._renderrows(this.virtualsizeinfo);
            $.each(this.columns.records, function () {
                me.editcells[this.datafield].init = false;
            });
        },

        endrowedit: function (row) {
            if (this.editcell.editor == undefined) {
                return false;
            }

            // raise end cell edit event.
            return true;
        },

        _selection: function (textbox) {
            if ('selectionStart' in textbox[0]) {
                var e = textbox[0];
                var selectionLength = e.selectionEnd - e.selectionStart;
                return { start: e.selectionStart, end: e.selectionEnd, length: selectionLength, text: e.value };
            }
            else {
                var r = document.selection.createRange();
                if (r == null) {
                    return { start: 0, end: e.value.length, length: 0 }
                }

                var re = textbox[0].createTextRange();
                var rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);
                var selectionLength = r.text.length;

                return { start: rc.text.length, end: rc.text.length + r.text.length, length: selectionLength, text: r.text };
            }
        },

        _setSelection: function (start, end, textbox) {
            if ('selectionStart' in textbox[0]) {
                textbox[0].focus();
                textbox[0].setSelectionRange(start, end);
            }
            else {
                var range = textbox[0].createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        },

        // finds the index to select in the jqxDropDownList editor.
        findRecordIndex: function (value, datafield, records) {
            var records = records;

            if (value && datafield) {
                var length = records.length;

                // loop through all records.
                for (var urec = 0; urec < length; urec++) {
                    var datarow = records[urec];
                    var currentValue = datarow['label'];
                    if (value == currentValue)
                        return urec;
                }
            }

            return -1;
        },

        _destroyeditors: function () {
            var me = this;
            $.each(this.columns.records, function (i, value) {
                switch (this.columntype) {
                    case "dropdownlist":
                        var dropdownlist = me.editors["dropdownlist" + "_" + this.datafield];
                        if (dropdownlist) {
                            dropdownlist.jqxDropDownList('destroy');
                            me.editors["dropdownlist" + "_" + this.datafield] = null;
                        }
                        break;
                    case "combobox":
                        var combobox = me.editors["combobox" + "_" + this.datafield];
                        if (combobox) {
                            combobox.jqxComboBox('destroy');
                            me.editors["combobox" + "_" + this.datafield] = null;
                        }
                        break;
                    case "datetimeinput":
                        var datetimeinput = me.editors["datetimeinput" + "_" + this.datafield];
                        if (datetimeinput) {
                            datetimeinput.jqxDateTimeInput('destroy');
                            me.editors["datetimeinput" + "_" + this.datafield] = null;
                        }
                        break;
                    case "numberinput":
                        var numberinput = me.editors["numberinput" + "_" + this.datafield];
                        if (numberinput) {
                            numberinput.jqxNumberInput('destroy');
                            me.editors["numberinput" + "_" + this.datafield] = null;
                        }
                        break;
                }
            });
        },

        _showcelleditor: function (row, column, element, init) {
            if (this.editrow != undefined) {
                this.editcell = this.editcells[column.datafield];
            }

            if (element == undefined)
                return;

            if (this.editcell == null)
                return;

            if (column.columntype == 'checkbox' && column.editable) {
                return;
            }

            var datafield = column.datafield;
            var $element = $(element);
            var me = this;
            var editor = this.editcell.editor;
            var cellvalue = this.getcellvalue(row, datafield);
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);

            this.editcell.element = element;

            if (this.editcell.validated == false) {
                this._showvalidationpopup();
            }

            var focuseditor = function (editor) {
                if (!me.isNestedGrid) {
                    editor.focus();
                }

                if (me.gridcontent[0].scrollTop != 0) {
                    me.scrolltop(Math.abs(me.gridcontent[0].scrollTop));
                    me.gridcontent[0].scrollTop = 0;
                }

                if (me.gridcontent[0].scrollLeft != 0) {
                    me.scrollleft(Math.abs(me.gridcontent[0].scrollLeft));
                    me.gridcontent[0].scrollLeft = 0;
                }
            }

            switch (column.columntype) {
                case "dropdownlist":
                    if (this.host.jqxDropDownList) {
                        element.innerHTML = "";
                        var dropdownlisteditor = this.editors["dropdownlist" + "_" + column.datafield];
                        editor = dropdownlisteditor == undefined ? $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;' id='dropdownlisteditor'></div>") : dropdownlisteditor;
                        editor.css('top', $(element).parent().position().top);
                        editor.css('left', -left + parseInt($(element).position().left));
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        var displayfield = $.trim(column.displayfield).split(" ").join("");
                        if (dropdownlisteditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "dropdownlisteditor" + this.element.id + datafieldname;
                            var isdataadapter = this.source._source ? true : false;
                            var dataadapter = null;
                        
                            if (!isdataadapter) {
                                dataadapter = new $.jqx.dataAdapter(this.source,
                                {
                                    autoBind: false,
                                    uniqueDataFields: [displayfield],
                                    async: false
                                });
                            }
                            else {
                                var dataSource =
                                {
                                    localdata: this.source.records,
                                    datatype: this.source.datatype,
                                    async: false
                                }

                                dataadapter = new $.jqx.dataAdapter(dataSource,
                                {
                                    autoBind: false,
                                    async: false,
                                    uniqueDataFields: [displayfield]
                                });
                            }

                            var autoheight = true;
                            editor.jqxDropDownList({ keyboardSelection: false, source: dataadapter, autoDropDownHeight: autoheight, theme: this.theme, width: $element.width() - 2, height: $element.height() - 2, displayMember: displayfield, valueMember: datafield });
                            this.editors["dropdownlist" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxDropDownList({ width: $element.width() - 2 });
                        }

                        var dropdownitems = editor.jqxDropDownList('getItems');
                        if (dropdownitems.length < 8) {
                            editor.jqxDropDownList('autoDropDownHeight', true);
                        }
                        else {
                            editor.jqxDropDownList('autoDropDownHeight', false);
                        }
                        var cellvalue = this.getcellvalue(row, displayfield);
                        var selectedIndex = this.findRecordIndex(cellvalue, displayfield, dropdownitems);
                        if (init) {
                            if (cellvalue != "") {
                                editor.jqxDropDownList('selectIndex', selectedIndex, true);
                            }
                            else {
                                editor.jqxDropDownList('selectIndex', -1);
                            }
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.jqxDropDownList('selectIndex', this.editcell.defaultvalue, true);
                        }

                        setTimeout(function () {
                            focuseditor(editor.jqxDropDownList('comboStructure'));
                        }, 10);
                    }
                    break;
                case "combobox":
                    if (this.host.jqxComboBox) {
                        element.innerHTML = "";
                        var comboboxeditor = this.editors["combobox" + "_" + column.datafield];
                        editor = comboboxeditor == undefined ? $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;' id='comboboxeditor'></div>") : comboboxeditor;
                        editor.css('top', $(element).parent().position().top);
                        editor.css('left', -left + parseInt($(element).position().left));
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        var displayfield = $.trim(column.displayfield).split(" ").join("");
                        if (comboboxeditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "comboboxeditor" + this.element.id + datafieldname;
                            var isdataadapter = this.source._source ? true : false;
                            var dataadapter = null;
                            if (!isdataadapter) {
                                dataadapter = new $.jqx.dataAdapter(this.source,
                                {
                                    autoBind: false,
                                    uniqueDataFields: [displayfield],
                                    async: false
                                });
                            }
                            else {
                                var dataSource =
                                {
                                    localdata: this.source.records,
                                    datatype: this.source.datatype,
                                    async: false
                                }

                                dataadapter = new $.jqx.dataAdapter(dataSource,
                                {
                                    autoBind: false,
                                    async: false,
                                    uniqueDataFields: [displayfield]
                                });
                            }

                            var autoheight = true;
                            editor.jqxComboBox({ keyboardSelection: false, source: dataadapter, autoDropDownHeight: autoheight, theme: this.theme, width: $element.width() - 2, height: $element.height() - 2, displayMember: displayfield, valueMember: datafield });
                            this.editors["combobox" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxComboBox({ width: $element.width() - 2 });
                        }

                        var dropdownitems = editor.jqxComboBox('getItems');
                        if (dropdownitems.length < 8) {
                            editor.jqxComboBox('autoDropDownHeight', true);
                        }
                        else {
                            editor.jqxComboBox('autoDropDownHeight', false);
                        }

                        var cellvalue = this.getcellvalue(row, displayfield);
                        var selectedIndex = this.findRecordIndex(cellvalue, displayfield, dropdownitems);
                        if (init) {
                            if (cellvalue != "") {
                                editor.jqxComboBox('selectIndex', selectedIndex, true);
                                editor.jqxComboBox('val', cellvalue);
                            }
                            else {
                                editor.jqxComboBox('selectIndex', -1);
                                editor.jqxComboBox('val', cellvalue);
                            }
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.jqxComboBox('selectIndex', this.editcell.defaultvalue, true);
                        }

                        if (this.editchar && this.editchar.length > 0) {
                            editor.jqxComboBox('input').val(this.editchar);
                        }

                        setTimeout(function () {
                            focuseditor(editor.jqxComboBox('input'));
                            editor.jqxComboBox('_setSelection', 0, 0);
                            if (me.editchar) {
                                editor.jqxComboBox('_setSelection', 1, 1);
                                me.editchar = null;
                            }
                            else {
                                var val = editor.jqxComboBox('input').val();
                                editor.jqxComboBox('_setSelection', 0, val.length);
                            }                           
                        }, 10);
                    }
                    break;
                case "datetimeinput":
                    if (this.host.jqxDateTimeInput) {
                        element.innerHTML = "";
                        var dateeditor = this.editors["datetimeinput" + "_" + column.datafield];
                        editor = dateeditor == undefined ? $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;' id='datetimeeditor'></div>") : dateeditor;
                        editor.show();
                        editor.css('top', $(element).parent().position().top);
                        editor.css('left', -left + parseInt($(element).position().left));
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        if (dateeditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "datetimeeditor" + this.element.id + datafieldname;
                            editor.jqxDateTimeInput({ theme: this.theme, width: $element.width(), height: $element.height(), formatString: column.cellsformat });
                            this.editors["datetimeinput" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxDateTimeInput({ width: $element.width() - 2 });
                        }
                        if (init) {
                            if (cellvalue != "" && cellvalue != null) {
                                var date = new Date(cellvalue);
                                if (date == "Invalid Date") {
                                    if (this.source.getvaluebytype) {
                                        date = this.source.getvaluebytype(cellvalue, { name: column.datafield, type: 'date' });
                                    }
                                }

                                editor.jqxDateTimeInput('setDate', date);
                            }
                            else {
                                editor.jqxDateTimeInput('setDate', null);
                            }

                            if (this.editcell.defaultvalue != undefined) {
                                editor.jqxDateTimeInput('setDate', this.editcell.defaultvalue);
                            }
                        }
                        setTimeout(function () {
                            focuseditor(editor.jqxDateTimeInput('dateTimeInput'));
                        }, 10);
                    }
                    break;
                case "numberinput":
                    if (this.host.jqxNumberInput) {
                        element.innerHTML = "";
                        var numbereditor = this.editors["numberinput" + "_" + column.datafield];
                        editor = numbereditor == undefined ? $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;' id='numbereditor'></div>") : numbereditor;
                        editor.show();
                        editor.css('top', $(element).parent().position().top);
                        editor.css('left', -left + parseInt($(element).position().left));
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        if (numbereditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "numbereditor" + this.element.id + datafieldname;
                            var symbol = '';
                            var symbolPosition = 'left';
                            if (column.cellsformat) {
                                if (column.cellsformat.indexOf('c') != -1) {
                                    symbol = this.gridlocalization.currencysymbol;
                                }
                                else if (column.cellsformat.indexOf('p') != -1) {
                                    symbol = this.gridlocalization.percentsymbol;
                                    symbolPosition = 'right';
                                }
                            }
                            editor.jqxNumberInput({ inputMode: 'simple', theme: this.theme, width: $element.width() - 1, height: $element.height() - 1, spinButtons: true, symbol: symbol, symbolPosition: symbolPosition });
                            this.editors["numberinput" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxNumberInput({ width: $element.width() - 2 });
                        }
                        if (init) {
                            if (cellvalue != "" && cellvalue != null) {
                                var decimal = cellvalue;
                                editor.jqxNumberInput('setDecimal', decimal);
                            }
                            else {
                                editor.jqxNumberInput('setDecimal', 0);
                            }

                            if (this.editcell.defaultvalue != undefined) {
                                editor.jqxNumberInput('setDecimal', this.editcell.defaultvalue);
                            }

                            if (this.editchar && this.editchar.length > 0) {
                                var digit = parseInt(this.editchar);
                                if (!isNaN(digit)) {
                                    editor.jqxNumberInput('setDecimal', digit);
                                }
                            }

                            setTimeout(function () {
                                focuseditor(editor.jqxNumberInput('numberInput'));
                                editor.jqxNumberInput('_setSelectionStart', 0);
                                if (me.editchar) {
                                    if (column.cellsformat.length > 0) {
                                        editor.jqxNumberInput('_setSelectionStart', 2);
                                    }
                                    else {
                                        editor.jqxNumberInput('_setSelectionStart', 1);
                                    }
                                    me.editchar = null;
                                }
                                else {
                                    var spinbuttons = editor.jqxNumberInput('spinButtons');
                                    if (spinbuttons) {
                                        var val = editor.jqxNumberInput('numberInput').val();
                                        me._setSelection(editor.jqxNumberInput('numberInput')[0], val.length, val.length);
                                    }
                                    else {
                                        var val = editor.jqxNumberInput('numberInput').val();
                                        me._setSelection(editor.jqxNumberInput('numberInput')[0], 0, val.length);
                                    }
                                }
                            }, 10);
                        }
                    }
                    break;
                case "textbox":
                default:
                    element.innerHTML = "";
                    editor = this.editors["textboxeditor" + "_" + column.datafield] || $("<input 'type='textbox' id='textboxeditor'/>");
                    editor[0].id = "textboxeditor" + this.element.id + column.datafield;
                    editor.appendTo($element);

                    if (init) {
                        editor.addClass(this.toThemeProperty('jqx-input'));
                        editor.addClass(this.toThemeProperty('jqx-widget-content'));
                        if (this.editchar && this.editchar.length > 0) {
                            editor.val(this.editchar);
                        }
                        else {
                            editor.val(cellvalue);
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.val(this.editcell.defaultvalue);
                        }
                        editor.width($element.width());
                        editor.height($element.height());

                        if (column.createeditor) {
                            column.createeditor(row, cellvalue, editor);
                        }
                    }

                    this.editors["textboxeditor" + "_" + column.datafield] = editor;

                    if (init) {
                        setTimeout(function () {
                            focuseditor(editor);
                            if (me.editchar) {
                                me._setSelection(editor[0], 1, 1);
                                me.editchar = null;
                            }
                            else {
                                me._setSelection(editor[0], 0, editor.val().length);
                            }
                        }, 10);
                    }
                    break;
            }

            if (init) {
                if (column.initeditor) {
                    column.initeditor(row, cellvalue, editor);
                }
            }

            if (editor) {
                editor.css('display', 'block');
                this.editcell.editor = editor;
            }
        },

        _setSelection: function (textbox, start, end) {
            try {
                if ('selectionStart' in textbox) {
                    textbox.setSelectionRange(start, end);
                }
                else {
                    var range = textbox.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', start);
                    range.select();
                }
            }
            catch (error) {
                var err = error;
            }
        },

        _hideeditors: function () {
            if (this.editcells != null) {
                var me = this;
                for (var obj in this.editcells) {
                    me.editcell = me.editcells[obj];
                    me._hidecelleditor();
                }
            }
        },

        _hidecelleditor: function () {
            if (!this.editcell) {
                return;
            }

            if (this.editcell.columntype == 'checkbox') {
                return;
            }

            if (this.editcell.editor) {
                this.editcell.editor.hide();
                switch (this.editcell.columntype) {
                    case "dropdownlist":
                        this.editcell.editor.jqxDropDownList({ closeDelay: 0 });
                        this.editcell.editor.jqxDropDownList('hideListBox');
                        this.editcell.editor.jqxDropDownList({ closeDelay: 400 });
                        break;
                    case "combobox":
                        this.editcell.editor.jqxComboBox({ closeDelay: 0 });
                        this.editcell.editor.jqxComboBox('hideListBox');
                        this.editcell.editor.jqxComboBox({ closeDelay: 400 });
                        break;
                    case "datetimeinput":
                        var datetimeeiditor = this.editcell.editor;
                        if (datetimeeiditor.jqxDateTimeInput('isOpened')) {
                            datetimeeiditor.jqxDateTimeInput({ closeDelay: 0 });
                            datetimeeiditor.jqxDateTimeInput('hideCalendar');
                            datetimeeiditor.jqxDateTimeInput({ closeDelay: 400 });
                        }
                        break;
                }
            }

            if (this.validationpopup) {
                this.validationpopup.hide();
                this.validationpopuparrow.hide();
            }
            if (!this.isNestedGrid) {
                this.element.focus();
            }
        },

        _geteditorvalue: function (column) {
            var value = new String();
            if (this.editcell.editor) {
                switch (column.columntype) {
                    case "textbox":
                    default:
                        value = this.editcell.editor.val();
                        if (column.cellsformat != "") {
                            if (column.cellsformat.indexOf('p') != -1 || column.cellsformat.indexOf('c') != -1 || column.cellsformat.indexOf('n') != -1 || column.cellsformat.indexOf('f') != -1) {
                                value = parseFloat(value);
                            }
                        }
                        if (column.displayfield != column.datafield) {
                            value = { label: value, value: value };
                        }
                        break;
                    case "datetimeinput":
                        if (this.editcell.editor.jqxDateTimeInput) {
                            this.editcell.editor.jqxDateTimeInput({ isEditing: false });
                            value = this.editcell.editor.jqxDateTimeInput('getDate');
                            if (value == null) return "";
                            value = new Date(value.toString());
                            if (value == null) {
                                value == "";
                            }
                            if (column.displayfield != column.datafield) {
                                value = { label: value, value: value };
                            }
                        }
                        break;
                    case "dropdownlist":
                        if (this.editcell.editor.jqxDropDownList) {
                            var selectedIndex = this.editcell.editor.jqxDropDownList('selectedIndex');
                            var item = this.editcell.editor.jqxDropDownList('getItem', selectedIndex);
                            if (column.displayfield != column.datafield) {
                                if (item) {
                                    value = { label: item.label, value: item.value };
                                }
                                else value = "";
                            }
                            else {
                                if (item) value = item.label;
                                else value = "";
                            }

                            if (value == null) {
                                value = "";
                            }
                        }
                        break;
                    case "combobox":
                        if (this.editcell.editor.jqxComboBox) {
                            value = this.editcell.editor.jqxComboBox('val');
                            if (column.displayfield != column.datafield) {
                                var item = this.editcell.editor.jqxComboBox('getSelectedItem');
                                if (item != null)
                                {
                                    value = { label: value, value: item.value };
                                }
                            }
                            //var selectedIndex = this.editcell.editor.jqxComboBox('selectedIndex');
                            //var autoComplete = this.editcell.editor.jqxComboBox('autoComplete');
                            //var item = this.editcell.editor.jqxComboBox('getItem', selectedIndex);
                            //if (autoComplete) {
                            //     item = this.editcell.editor.jqxComboBox('val');
                            //}

                            //if (item) {
                            //    value = item.label;
                            //}
                            //else value = "";

                            if (value == null) {
                                value = "";
                            }
                        }
                        break;
                    case "numberinput":
                        if (this.editcell.editor.jqxNumberInput) {
                            var decimal = this.editcell.editor.jqxNumberInput('getDecimal');
                            value = new Number(decimal);
                            value = parseFloat(value);
                            if (isNaN(value)) {
                                value = 0;
                            }
                            if (column.displayfield != column.datafield) {
                                value = { label: value, value: value };
                            }
                        }
                        break;
                }
            }
            return value;
        },

        hidevalidationpopups: function () {
            if (this.popups) {
                $.each(this.popups, function () {
                    this.validation.remove();
                    this.validationrow.remove();
                });
                this.popups = new Array();
            }
            if (this.validationpopup) {
                this.validationpopuparrow.hide();
                this.validationpopup.hide();
            }
        },

        showvalidationpopup: function (row, datafield, message) {
            if (message == undefined) {
                var message = this.gridlocalization.validationstring;
            }

            var validationpopup = $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>");
            var validationpopuparrow = $("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>");
            validationpopup.html(message);
            validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
            validationpopup.addClass(this.toThemeProperty('jqx-grid-validation'));
            validationpopup.addClass(this.toThemeProperty('jqx-rc-all'));
            validationpopup.prependTo(this.table);
            validationpopuparrow.prependTo(this.table);

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            var element = this.getcolumn(datafield).uielement;
            var rowElement = $(this.hittestinfo[row].visualrow);
            validationpopup.css('top', parseInt(rowElement.position().top) + 30 + 'px');

            var topposition = parseInt(validationpopup.css('top'));

            validationpopuparrow.css('top', topposition - 12);
            validationpopuparrow.removeClass();
            validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));

            if (topposition > this._gettableheight()) {
                validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                topposition = parseInt($(element).parent().position().top) - 30;
                validationpopup.css('top', topposition + 'px');
                validationpopuparrow.css('top', topposition + validationpopup.outerHeight() - 9);
            }
            var leftposition = -left + parseInt($(element).position().left);

            validationpopuparrow.css('left', leftposition + 30);

            var width = validationpopup.width();
            if (width + leftposition > this.host.width() - 20) {
                var offset = width + leftposition - this.host.width() + 40;
                leftposition -= offset;
            }

            validationpopup.css('left', leftposition);
            validationpopup.show();
            validationpopuparrow.show();
            if (!this.popups) {
                this.popups = new Array();
            }
            this.popups[this.popups.length] = { validation: validationpopup, validationrow: validationpopuparrow };
        },

        _showvalidationpopup: function (row, datafield, message) {
            var editor = this.editcell.editor;
            if (!editor)
                return;

            if (!this.validationpopup) {
                var validationpopup = $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>");
                var validationpopuparrow = $("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>");
                validationpopup.html(message);
                validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                validationpopup.addClass(this.toThemeProperty('jqx-grid-validation'));
                validationpopup.addClass(this.toThemeProperty('jqx-rc-all'));
                validationpopup.prependTo(this.table);
                validationpopuparrow.prependTo(this.table);
                this.validationpopup = validationpopup;
                this.validationpopuparrow = validationpopuparrow;
            }
            else {
                this.validationpopup.html(message);
            }

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);

            this.validationpopup.css('top', parseInt($(this.editcell.element).parent().position().top) + (this.rowsheight + 5) + 'px');

            var topposition = parseInt(this.validationpopup.css('top'));

            this.validationpopuparrow.css('top', topposition - 12);
            this.validationpopuparrow.removeClass();
            this.validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));

            if (topposition > this._gettableheight()) {
                this.validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                this.validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                topposition = parseInt($(this.editcell.element).parent().position().top) - this.rowsheight - 5;
                this.validationpopup.css('top', topposition + 'px');
                this.validationpopuparrow.css('top', topposition + this.validationpopup.outerHeight() - 9);
            }
            var leftposition = -left + parseInt($(this.editcell.element).position().left);

            this.validationpopuparrow.css('left', leftposition + 30);

            var width = this.validationpopup.width();
            if (width + leftposition > this.host.width() - 20) {
                var offset = width + leftposition - this.host.width() + 40;
                leftposition -= offset;
            }

            this.validationpopup.css('left', leftposition);
            this.validationpopup.show();
            this.validationpopuparrow.show();
        }
    });
})(jQuery);


(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        _calculateaggregate: function (column, aggregates, formatData, records) {
            var aggregate = column.aggregates;
            if (!aggregate) aggregate = aggregates;

            if (aggregate) {
                var formatstrings = new Array();
                for (var i = 0; i < aggregate.length; i++) {
                    if (aggregate[i] == 'count') {
                        continue;
                    }
                    formatstrings[formatstrings.length] = column.cellsformat;
                }

                if (this.source && this.source.getAggregatedData) {
                    if (records == undefined) records = this.source.records;
                    if (this.virtualmode) {
                        var records = new Array();
                        $.each(this.source._source.records, function () {
                            records.push(this);
                        });
                    }

                    if (formatData == undefined || formatData == true) {
                        var summaryData = this.source.getAggregatedData
                ([{ name: column.datafield, aggregates: aggregate, formatStrings: formatstrings }], this.gridlocalization, records);
                        return summaryData;
                    }
                    else {
                        var summaryData = this.source.getAggregatedData
                ([{ name: column.datafield, aggregates: aggregate }], this.gridlocalization, records);
                        return summaryData;
                    }
                }
            }
            return null;
        },

        getcolumnaggregateddata: function (datafield, aggregates, formatdata, records) {
            var column = this.getcolumn(datafield);
            var format = (formatdata == undefined || formatdata == false) ? false : formatdata;
            if (aggregates == null) return "";

            var summaryData = this._calculateaggregate(column, aggregates, format, records)[datafield];
            return summaryData;
        },

        refreshaggregates: function () {
            this._updatecolumnsaggregates();
        },

        renderaggregates: function () {
            this._updateaggregates();
        },

        _updatecolumnaggregates: function (column, aggregates, columnelement) {
            var me = this;
            if (!aggregates) {
                columnelement.children().remove();
                columnelement.html('');
                if (column.aggregatesrenderer) {
                    var renderstring = column.aggregatesrenderer(column, columnelement);
                    columnelement.html(renderstring);
                }
                return;
            }

            columnelement.children().remove();
            columnelement.html('');
            if (column.aggregatesrenderer) {
                if (aggregates) {
                    var renderstring = column.aggregatesrenderer(aggregates[column.datafield], column, columnelement, this.getcolumnaggregateddata(column.datafield, aggregates[column.datafield]));
                    columnelement.html(renderstring);
                }
            }
            else {
                $.each(aggregates, function () {
                    var aggregate = this;
                    for (obj in aggregate) {
                        var field = $('<div style="position: relative; margin: 4px; overflow: hidden;"></div>');
                        var name = obj;
                        name = me._getaggregatename(name);
                        field.html(name + ':' + aggregate[obj]);
                        columnelement.append(field);
                    }
                });
            }
        },

        _getaggregatetype: function (obj) {
            switch (obj) {
                case 'min':
                case 'max':
                case 'count':
                case 'avg':
                case 'product':
                case 'var':
                case 'varp':
                case 'stdev':
                case 'stdevp':
                case 'sum':
                    return obj;
            }
            var name = obj;
            for (var myObj in obj) {
                name = myObj;
                break;
            }
            return name;
        },

        _getaggregatename: function (obj) {
            var name = obj;
            switch (obj) {
                case 'min':
                    name = 'Min';
                    break;
                case 'max':
                    name = 'Max';
                    break;
                case 'count':
                    name = 'Count';
                    break;
                case 'avg':
                    name = 'Avg';
                    break;
                case 'product':
                    name = 'Product';
                    break;
                case 'var':
                    name = 'Var';
                    break;
                case 'stdevp':
                    name = 'StDevP';
                    break;
                case 'stdev':
                    name = 'StDev';
                    break;
                case 'varp':
                    name = 'VarP';
                case 'sum':
                    name = 'Sum';
                    break;
            }
            if (obj === name && typeof(name) != 'string') {
                for (var myObj in obj) {
                    name = myObj;
                    break;
                }
            }
            return name;
        },

        _updatecolumnsaggregates: function () {
            var rows = this.getrows();
            var columnslength = this.columns.records.length;
            if (undefined != this.statusbar[0].cells) {
                for (var j = 0; j < columnslength; j++) {
                    var tablecolumn = $(this.statusbar[0].cells[j]);
                    var columnrecord = this.columns.records[j];
                    var summaryData = this._calculateaggregate(columnrecord, null, true, rows);
                    this._updatecolumnaggregates(columnrecord, summaryData, tablecolumn);
                }
            }
        },

        _updateaggregates: function () {
            var tablerow = $('<div style="position: relative;" id="row0' + this.element.id + '"></div>');
            var left = 0;
            var columnslength = this.columns.records.length;
            var cellclass = this.toThemeProperty('jqx-grid-cell');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            //var cellclass = this.toThemeProperty('jqx-widget-header');
            var zindex = columnslength + 10;
            var cells = new Array();
            this.statusbar[0].cells = cells;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var summaryData = this._calculateaggregate(columnrecord);
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;

                var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + cellclass + '"></div>');
                tablerow.append(tablecolumn);
                tablecolumn.css('left', left);
                tablecolumn.css('z-index', zindex--);
                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                cells[cells.length] = tablecolumn[0];
                this._updatecolumnaggregates(columnrecord, summaryData, tablecolumn);
            }

            if ($.browser.msie && $.browser.version < 8) {
                tablerow.css('z-index', zindex--);
            }

            tablerow.width(parseInt(left) + 2);
            tablerow.height(this.statusbarheight);
            this.statusbar.children().remove();
            this.statusbar.append(tablerow);
            this.statusbar.removeClass(this.toThemeProperty('jqx-widget-header'));
            this.statusbar.addClass(cellclass);
            this.statusbar.css('border-bottom-color', 'transparent');
            this.statusbar.css('border-top-width', '1px');
        }
    });
})(jQuery);


/*****************************************************************************************************************
 *
 *  Dependencies (only if the plugin 
 *  must be integrated with the jQWidgets framework, otherwise it can work independently):
 *      1) jquery.js
 *      2) jqxcore.js
 *      3) jqxdata.js
 *
 *  This file defines few objects used for exportation of arrays (meeting common format) to strings (and files)
 *  with structure same as different file formats (CSV, TSV, XLS, XML, HTML).
 *
 *  The base module which is responsible for the exportation is $.jqx.dataAdapter.ArrayExporter. This module is
 *  coupled with the array format. ArrayExporter can be extended with different modules used for convertion.
 *  Here is a sample, how the module can be extended with custom exporter:
 *
 *      $.jqx.dataAdapter.ArrayExporter.extend('custom-format', new CustomExporter());
 *
 *  The first parameter of the extend method is the format name and the second one is the exportation module.
 *  All exportation modules must implement the DataExportModuleBase interface for working properly.
 *  The exportation modules are not coupled with the array format.
 *
 *  Array meeting required format can be exported to the "custom-format", defined above, using:
 *
 *      var exporter = $.jqx.dataAdapter.ArrayExporter(data, dataFields, styles);
 *      exporter.exportTo('custom-format');
 *
 *  For saving the file using server side PHP can be used the following method:
 *
 *      exporter.exportToFile('format', 'filename');
 *
 *  For saving the file using only JavaScript:
 *
 *      exporter.exportToLocalFile('format', 'filename');
 *
 *****************************************************************************************************************/

(function ($) {
    var ArrayExporter = (function () {

        var exportModules = {},
            data, dataFields, styles, exporter, stylesArray;

        function exportData(exporter) {
            exporter.beginFile();
            exportHeader(exporter);
            exportContent(exporter);
            exporter.endFile();
            return exporter.getFile();
        }

        function exportHeader(exporter) {
            var exportHeaders = true;
            $.each(dataFields, function () {
                if (this.hidden) {
                    exportHeaders = false;
                    return false;
                }
            });

            exporter.beginHeader(exportHeaders);
            for (var cellContent in dataFields) {
                var style = getHeaderStyle(cellContent, dataFields[cellContent]);
                exporter.appendHeaderCell(dataFields[cellContent], cellContent, style, exportHeaders);
            }
            exporter.endHeader(exportHeaders);
        }

        function exportContent(exporter) {
            exporter.beginBody();
            for (var i = 0; i < data.length; i += 1) {
                exportRow(exporter, data[i], i);
            }
            exporter.endBody();
        }

        function exportRow(exporter, data, rowId) {
            var style;
            exporter.beginRow();
            for (var column in dataFields) {
                style = getRowCellStyle(rowId, column);
                if (data.hasOwnProperty(column)) {
                    exporter.appendBodyCell(data[column], dataFields[column], style);
                }
                else {
                    exporter.appendBodyCell("", dataFields[column], style);
                }
            }
            exporter.endRow();
        }

        function getHeaderStyle(columnName, dataField) {
            if (dataField.style) {
                return styles[dataField.style];
            }

            var rowStyles = getStylesArray();
            if (rowStyles.length > 0) {
                return rowStyles[0].style;
            }
            return null;
        }

        function getStylesArray() {
            if (!stylesArray) {
                stylesArray = new Array();
                $.each(styles, function (index, value) {
                    stylesArray[stylesArray.length] = { name: index, style: value };
                });
            }

            return stylesArray;
        }

        function getRowCellStyle(rowId, column) {
            if (dataFields[column]) {
                if (dataFields[column].cellStyle) {
                    var dataField = dataFields[column];
                    if (dataFields[column].cellAltStyle) {
                        var styleId = rowId % 2;
                        if (styleId == 0)
                            return styles[dataField.cellStyle];
                        return styles[dataField.cellAltStyle];
                    }
                    return styles[dataField.cellStyle];
                }
                else {
                    var rowStyles = getStylesArray();
                    if (rowStyles.length > 0) {
                        var styleId = rowId % (rowStyles.length - 1);
                        var style = rowStyles[styleId + 1].style;
                        return style;
                    }
                }
            }
            return null;
        }

        function createHiddenInput(value, name, form) {
            var input = document.createElement('input');
            input.name = name;
            input.value = value;
            input.type = 'hidden';
            form.appendChild(input);
            return input;
        }


        function createHiddenTextArea(value, name, form) {
            var textArea = document.createElement('textarea');
            textArea.name = name;
            textArea.value = value;
            //      textArea.type = 'hidden';
            form.appendChild(textArea);
            return textArea;
        }

        function createForm(filename, format, content, exportServer) {
            var form = document.createElement('form');
            createHiddenInput(filename, 'filename', form);
            createHiddenInput(format, 'format', form);
            createHiddenTextArea(content, 'content', form);
            if (exportServer == undefined || exportServer == '')
                exportServer = 'http://www.jqwidgets.com/export_server/save-file.php';

            form.action = exportServer;
            form.method = 'post';
            document.body.appendChild(form);
            return form;
        }

        exporter = function (inputData, inputDataFields, inputStyles, exportServer) {
            if (!(this instanceof ArrayExporter)) {
                return new ArrayExporter(inputData, inputDataFields, inputStyles);
            }
            data = inputData;
            dataFields = inputDataFields;
            styles = inputStyles;

            this.exportTo = function (format) {
                format = format.toString().toLowerCase();
                var module = exportModules[format];
                if (typeof module === 'undefined') {
                    throw 'You can\'t export to ' + format + ' format.';
                }
                return exportData(module, data, dataFields, styles);
            };

            this.exportToFile = function (format, filename, exportServer) {
                var content = this.exportTo(format),
                    form = createForm(filename, format, content, exportServer);
                form.submit();
                document.body.removeChild(form);
            };

            this.exportToLocalFile = function (format, filename) {
                var content = this.exportTo(format);
                document.location.href = 'data:application/octet-stream;filename=' + filename + ',' + encodeURIComponent(content);
            };

        };

        exporter.extend = function (exportFormat, exporter) {
            if (exporter instanceof $.jqx.dataAdapter.DataExportModuleBase) {
                exportModules[exportFormat] = exporter;
            } else {
                throw 'The module ' + exportFormat + ' is not instance of DataExportModuleBase.';
            }
        };

        return exporter;

    }());

    $.jqx.dataAdapter.ArrayExporter = ArrayExporter;

})(jQuery);


(function ($) {

    //Defines common interface for all modules used for exportation
    var DataExportModuleBase = function () {

        this.formatData = function (data, type, formatString) {
            if (type === 'date') {
                var tmpdate = "";
                if (typeof data === 'string') {
                    tmpdate = $.jqx.dataFormat.tryparsedate(data);
                    data = tmpdate;
                }
                if (data === "" || data == null) return "";
                tmpdate = $.jqx.dataFormat.formatdate(data, formatString);
                if (tmpdate.toString() == "NaN" || tmpdate == null) return "";
                data = tmpdate;
            } else if (type === 'number') {
                if (data === "" || data == null) return "";

                if (!isNaN(new Number(data))) {
                    var tmpdata = $.jqx.dataFormat.formatnumber(data, formatString);
                    if (tmpdata.toString() == "NaN") return "";
                    else data = tmpdata;
                }
            } else {
                data = data;
            }
            if (data == null) return "";
            return data;
        };

        this.getFormat = function (dataOptions) {
            var formatString = dataOptions ? dataOptions['formatString'] : "";
            var dataType = 'string';
            dataType = dataOptions ? dataOptions['type'] : 'string';

            if (dataType == 'number') {
                if (!formatString) formatString = 'n2';
            }
            if (dataType == 'date') {
                if (!formatString) formatString = 'd';
            }
            return { type: dataType, formatString: formatString };
        };

        this.beginFile = function () {
            throw 'Not implemented!';
        };

        this.beginHeader = function () {
            throw 'Not implemented!';
        };

        this.appendHeaderCell = function () {
            throw 'Not implemented!';
        };

        this.endHeader = function () {
            throw 'Not implemented!';
        };

        this.beginBody = function () {
            throw 'Not implemented!';
        };

        this.beginRow = function () {
            throw 'Not implemented!';
        };

        this.appendBodyCell = function () {
            throw 'Not implemented!';
        };

        this.endRow = function () {
            throw 'Not implemented!';
        };

        this.endBody = function () {
            throw 'Not implemented!';
        };

        this.endFile = function () {
            throw 'Not implemented!';
        };

        this.getFile = function () {
            throw 'Not implemented!';
        };
    }

    $.jqx.dataAdapter.DataExportModuleBase = DataExportModuleBase;

})(jQuery);

//Extending the exporter with TSV and CSV exporters
(function ($) {

    //Value exporter. This object is common prototype for TSV and CVS.
    var SvExporter = function (inValueSeparator) {

        var file, valueSeparator, hasHeader;
        var rowIndex = 0;
        var me = this;

        this.beginFile = function () {
            file = '';
        };

        this.beginHeader = function () {
        };

        this.appendHeaderCell = function (data, fieldName, style, exportHeader) {
            hasHeader = exportHeader;
            if (exportHeader) {
                appendCell(data.text);
            }
        };

        this.endHeader = function () {
            this.endRow();
        };

        this.beginBody = function () {
            rowIndex = 0;
        };

        this.beginRow = function () {
            if ((rowIndex > 0) || (rowIndex == 0 && hasHeader)) {
                file += '\n';
            }
            rowIndex++;
        };

        this.appendBodyCell = function (data, dataType) {
            appendCell(data, dataType);
        };

        this.endRow = function () {
            file = file.substring(0, file.length - 1);
        };

        this.endBody = function () {
        };

        this.endFile = function () {
        };

        this.getFile = function () {
            return file;
        };

        function prepareData(data, dataOptions) {
            if (dataOptions) {
                var format = me.getFormat(dataOptions);
                data = me.formatData(data, format.type, format.formatString);
            }
            if (data.toString().indexOf(valueSeparator) >= 0) {
                data = '"' + data + '"';
            }
            return data;
        };

        function appendCell(data, dataOptions) {
            data = prepareData(data, dataOptions);
            file += data + inValueSeparator;
        };

    };

    SvExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();

    var CsvExporter = function () { };
    CsvExporter.prototype = new SvExporter(',');

    var TsvExporter = function () { };
    TsvExporter.prototype = new SvExporter('\t');

    $.jqx.dataAdapter.ArrayExporter.extend('csv', new CsvExporter());
    $.jqx.dataAdapter.ArrayExporter.extend('tsv', new TsvExporter());

})(jQuery);

//Extending the exporter with HTML exporter
(function ($) {

    var HtmlExporter = function () {
        var isPDF = false;
        var file;
        var hasHeader;
        var rowIndex = 0;

        this.setPDF = function () {
            isPDF = true;
        };

        this.beginFile = function () {
            if (isPDF) {
                file = '<table style="empty-cells: show;" cellspacing="0" cellpadding="2">';
            }
            else {
                file = '<html>\n\t<head>\n\t\t<title></title>\n' +
					   '\t\t<meta http-equiv=Content-type content=\"text/html; charset=UTF-8\">\n\t</head>\n\t<body>\n' +
					   '\t\t<table style="empty-cells: show;" cellspacing="0" cellpadding="2">';
            }
        };

        this.beginHeader = function () {
            if (isPDF) {
                file += '\n\t<thead><tr>';
            }
            else {
                file += '\n\t\t\t<thead>';
            }
        };

        this.appendHeaderCell = function (data, fieldName, style, exportHeader) {
            hasHeader = exportHeader;
            if (!exportHeader) return;

            if (isPDF) {
                file += '\n\t\t\t\t<th style="' + buildStyle(style) + '">' + data.text + '</th>';
            }
            else {
                if (data.width) {
                    file += '\n\t\t\t\t<th style="width: ' + data.width + 'px; ' + buildStyle(style) + '">' + data.text + '</th>';
                }
                else {
                    file += '\n\t\t\t\t<th style="' + buildStyle(style) + '">' + data.text + '</th>';
                }
            }
        };

        this.endHeader = function () {
            if (isPDF) {
                file += '\n\t</tr></thead>';
            }
            else {
                file += '\n\t\t\t</thead>';
            }
        };

        this.beginBody = function () {
            if (isPDF) {
                file += '\n\t<tbody>';
            }
            else {
                file += '\n\t\t\t<tbody>';
            }
            rowIndex = 0;
        };

        this.beginRow = function () {
            if (isPDF) {
                file += '\n\t<tr>';
            }
            else {
                file += '\n\t\t\t\t<tr>';
            }
            rowIndex++;
        };

        this.appendBodyCell = function (data, dataOptions, style) {
            var format = this.getFormat(dataOptions);
            if (data === "") data = "&nbsp;";
            if (isPDF) {
                if (rowIndex == 1 && !hasHeader) {
                    file += '\n\t\t\t\t\t<td style="' + buildStyle(style) + ' border-top-width: 1px;">' + this.formatData(data, format.type, format.formatString) + '</td>';
                }
                else {
                    file += '\n\t\t\t\t\t<td style="' + buildStyle(style) + '">' + this.formatData(data, format.type, format.formatString) + '</td>';
                }    
            }
            else {
                if (rowIndex == 1 && !hasHeader) {
                    file += '\n\t\t\t\t\t<td style="' + buildStyle(style) + ' border-top-width: 1px;">' + this.formatData(data, format.type, format.formatString) + '</td>';
                }
                else {
                    file += '\n\t\t\t\t\t<td style="' + buildStyle(style) + '">' + this.formatData(data, format.type, format.formatString) + '</td>';
                }
            }
        };

        this.endRow = function () {
            if (isPDF) {
                file += '\n\t</tr>';
            }
            else {
                file += '\n\t\t\t\t</tr>';
            }
        };

        this.endBody = function () {
            if (isPDF) {
                file += '\n\t</tbody>';
            }
            else {
                file += '\n\t\t\t</tbody>';
            }
        };

        this.endFile = function () {
            if (isPDF) {
                file += '\n</table>';
            }
            else {
                file += '\n\t\t</table>\n\t</body>\n</html>\n';
            }
        };

        this.getFile = function () {
            return file;
        };

        function buildStyle(styles) {
            var result = '';
            for (var style in styles) {
                if (styles.hasOwnProperty(style)) {
                    if (isPDF && style == 'font-size') {
                        styles[style] = '100%';
                    }
                    result += style + ':' + styles[style] + ';';
                }
            }
            return result;
        }
    }

    HtmlExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();

    var TableExporter = function () { };
    TableExporter.prototype = new HtmlExporter();

    var PDFExporter = function () { };
    PDFExporter.prototype = new HtmlExporter();
    var exporter = new PDFExporter();
    exporter.setPDF();

    $.jqx.dataAdapter.ArrayExporter.extend('html', new TableExporter());
    $.jqx.dataAdapter.ArrayExporter.extend('pdf', exporter);

})(jQuery);

//Exporting to XLS format (MS Office Excel 2003)
(function ($) {

    var ExcelExporter = function () {

        var header, content, headerFields, headerStyles, existingStyles, styleCounter,
            styleBuilder = {

                style: '',

                stylesMap: {
                    'font': {
                        'color': 'Color',
                        'font-family': 'FontName',
                        'font-style': 'Italic',
                        'font-weight': 'Bold'
                    },
                    'interior': {
                        'background-color': 'Color',
                        'background': 'Color'
                    },
                    'alignment': {
                        'left': 'Left',
                        'center': 'Center',
                        'right': 'Right'
                    }
                },

                startStyle: function (styleName) {
                    this.style += '\n\t\t<ss:Style ss:ID="' + styleName + '" ss:Name="' + styleName + '">';
                },

                buildAlignment: function (styles) {
                    if (styles['text-align']) {
                        var alignment = this.stylesMap['alignment'][styles['text-align']];
                        var style = '\n\t\t\t<ss:Alignment ss:Vertical="Bottom" ss:Horizontal="' + alignment + '"/>';
                        this.style += style;
                    }
                },

                buildBorder: function (styles) {
                    if (styles['border-color']) {
                        var border = '\n\t\t\t<ss:Borders>';
                        var bottomBorder = '\n\t\t\t\t<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1" ss:Color="' + styles['border-color'] + '"/>';
                        var leftBorder = '\n\t\t\t\t<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1" ss:Color="' + styles['border-color'] + '"/>';
                        var rightBorder = '\n\t\t\t\t<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1" ss:Color="' + styles['border-color'] + '"/>';
                        var topBorder = '\n\t\t\t\t<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1" ss:Color="' + styles['border-color'] + '"/>';

                        border += bottomBorder;
                        border += leftBorder;
                        border += rightBorder;
                        border += topBorder;
                        border += '\n\t\t\t</ss:Borders>';
                        this.style += border;
                    }
                },

                buildFont: function (styles) {
                    var map = this.stylesMap['font'],
                        font = '\n\t\t\t<ss:Font ';
                    for (var prop in map) {
                        if (typeof styles[prop] !== 'undefined') {
                            if (prop === 'font-style' && styles[prop].toString().toLowerCase() === 'italic') {
                                font += 'ss:Italic="1" ';
                            } else if (prop === 'font-weight' && styles[prop].toString().toLowerCase() === 'bold') {
                                font += 'ss:Bold="1" ';
                            } else if (prop === 'color') {
                                font += 'ss:' + map[prop] + '="' + styles[prop] + '" ';
                            }
                        }
                    }
                    font += '/>';
                    this.style += font;
                },

                buildInterior: function (styles) {
                    var map = this.stylesMap['interior'],
                        interior = '\n\t\t\t<ss:Interior ';
                    var hasInterior = false;
                    for (var prop in map) {
                        if (typeof styles[prop] !== 'undefined') {
                            interior += 'ss:' + map[prop] + '="' + styles[prop] + '" ';
                            hasInterior = true;
                        }
                    }
                    if (hasInterior)
                        interior += 'ss:Pattern="Solid"';

                    interior += '/>';
                    this.style += interior;
                },

                buildFormat: function (styles) {
                    if (styles['dataType'] == 'number') {
                        var formatString = styles['formatString'];
                        if (formatString == "" || formatString.indexOf('n') != -1) {
                            this.style += '\n\t\t\t<ss:NumberFormat ss:Format="#,##0.00_);[Red]\(#,##0.00\)"/>';
                        }
                        else if (formatString.indexOf('p') != -1) {
                            this.style += '\n\t\t\t<ss:NumberFormat ss:Format="Percent"/>';
                        }
                        else if (formatString.indexOf('c') != -1) {
                            this.style += '\n\t\t\t<ss:NumberFormat ss:Format="Currency"/>';
                        }
                    }
                    else if (styles['dataType'] == 'date') {
                        this.style += '\n\t\t\t<ss:NumberFormat ss:Format="Short Date"/>';
                    }
                },

                closeStyle: function () {
                    this.style += '\n\t\t</ss:Style>';
                },

                toString: function () {
                    var temp = this.style;
                    this.style = '';
                    return temp;
                }
            };

        this.beginFile = function () {
            existingStyles = {};
            styleCounter = 0;
            header = '<?xml version="1.0"?>' +
                            '\n\t<?mso-application progid="Excel.Sheet"?> ' +
                            '\n\t<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" ' +
                            '\n\txmlns:o="urn:schemas-microsoft-com:office:office" ' +
                            '\n\txmlns:x="urn:schemas-microsoft-com:office:excel" ' +
                            '\n\txmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" ' +
                            '\n\txmlns:html="http://www.w3.org/TR/REC-html40"> ' +
                            '\n\t<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"> ' +
                            '\n\t<Version>12.00</Version> ' +
                            '\n\t</DocumentProperties> ' +
                            '\n\t<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel"> ' +
                            '\n\t<WindowHeight>8130</WindowHeight> ' +
                            '\n\t<WindowWidth>15135</WindowWidth> ' +
                            '\n\t<WindowTopX>120</WindowTopX> ' +
                            '\n\t<WindowTopY>45</WindowTopY> ' +
                            '\n\t<ProtectStructure>False</ProtectStructure> ' +
                            '\n\t<ProtectWindows>False</ProtectWindows> ' +
                            '\n\t</ExcelWorkbook> ' +
                        '\n\t<ss:Styles>';
        };

        this.beginHeader = function () {
            content = '\n\t<ss:Worksheet ss:Name="Sheet1">\n\t\t<ss:Table>';
            headerFields = [];
            headerStyles = [];
        };

        this.appendHeaderCell = function (data, fieldName, style) {
            var width = data.width != undefined ? data.width : data.text.length * 10;
            content += '\n\t\t\t<ss:Column ss:Width="' + width + '"/>';
            headerFields.push(data);
            headerStyles.push(style);
        };

        this.endHeader = function (exportHeader) {
            if (exportHeader) {
                this.beginRow();
                for (var i = 0; i < headerFields.length; i += 1) {
                    appendCell.call(this, headerFields[i]['text'], null, headerStyles[i]);
                }
                this.endRow();
            }
        };

        this.beginBody = function () {
        };

        this.beginRow = function () {
            content += '\n\t\t\t<ss:Row>';
        };

        this.appendBodyCell = function (data, dataType, style) {
            appendCell.call(this, data, dataType, style);
        };

        this.endRow = function () {
            content += '\n\t\t\t</ss:Row>';
        };

        this.endBody = function () {
            content += '\n\t\t</ss:Table>';
        };

        this.endFile = function () {
            content += '\n\t</ss:Worksheet>\n</ss:Workbook>';
            header += '\n\t</ss:Styles>';
        };

        this.getFile = function () {
            return header + content;
        };

        function appendCell(data, dataOptions, style) {
            var columnType = "String";
            var format = this.getFormat(dataOptions);
            data = this.formatData(data, format.type, format.formatString);

            var styleId = getStyleId(style);
            content += '\n\t\t\t\t<ss:Cell ss:StyleID="' + styleId + '"><ss:Data ss:Type="' + columnType + '">' + data + '</ss:Data></ss:Cell>';
        }

        function generateStyleId() {
            styleCounter += 1;
            return 'xls-style-' + styleCounter;
        }

        function findStyle(style) {
            for (var s in existingStyles) {
                if (isSubset(style, existingStyles[s]) && isSubset(existingStyles[s], style)) {
                    return s;
                }
            }
            return undefined;
        }

        function isSubset(first, second) {
            var subset = true;
            for (var p in first) {
                if (first[p] !== second[p]) {
                    subset = false;
                }
            }
            return subset;
        }

        function appendStyle(id, style) {
            styleBuilder.startStyle(id);
            styleBuilder.buildAlignment(style);
            styleBuilder.buildBorder(style);
            styleBuilder.buildFont(style);
            styleBuilder.buildInterior(style);
            styleBuilder.buildFormat(style);
            styleBuilder.closeStyle();
            header += styleBuilder.toString();
        }

        function getStyleId(style) {
            if (!style) {
                return '';
            }
            var id = findStyle(style);
            if (typeof id === 'undefined') {
                id = generateStyleId();
                existingStyles[id] = style;
                appendStyle(id, style);
            }
            return id;
        }
    }

    ExcelExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();
    $.jqx.dataAdapter.ArrayExporter.extend('xls', new ExcelExporter());
})(jQuery);

//Exporting to XML
(function ($) {

    var XmlExporter = function () {

        var file, headerFields, index;

        this.beginFile = function () {
            file = '<?xml version="1.0" encoding="UTF-8" ?>';
            file += '\n<table>';
        }

        this.beginHeader = function () {
            headerFields = [];
        }

        this.appendHeaderCell = function (data, fieldName) {
            headerFields.push(fieldName);
        }

        this.endHeader = function () {
        }

        this.beginBody = function (data, dataType) {
        }

        this.beginRow = function () {
            file += '\n\t<row>';
            index = 0;
        }

        this.appendBodyCell = function (data, dataOptions) {
            var format = this.getFormat(dataOptions);
            data = this.formatData(data, format.type, format.formatString);

            file += '\n\t\t<' + headerFields[index] + '>' + data + '</' + headerFields[index] + '>';
            index++;
        }

        this.endRow = function () {
            file += '\n\t</row>';
            index = 0;
        }

        this.endBody = function () {
        }

        this.endFile = function () {
            file += '\n</table>';
        }

        this.getFile = function () {
            return file;
        }
    }

    XmlExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();
    $.jqx.dataAdapter.ArrayExporter.extend('xml', new XmlExporter());
})(jQuery);


//Exporting to JSON
(function ($) {

    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        meta = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };

    function quote(string) {
        return '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"';
    }

    function formatNumber(n) {
        return n < 10 ? '0' + n : n;
    }

    function stringifyDate(value) {
        var date;
        if (isFinite(value.valueOf())) {
            date = value.getUTCFullYear() + '-' + formatNumber(value.getUTCMonth() + 1) + '-' +
            formatNumber(value.getUTCDate()) + 'T' + formatNumber(value.getUTCHours()) + ':' +
            formatNumber(value.getUTCMinutes()) + ':' + formatNumber(value.getUTCSeconds()) + 'Z"';
        } else {
            date = 'null';
        }
        return date;
    }

    function stringifyArray(value) {
        var len = value.length,
            partial = [],
            i;
        for (i = 0; i < len; i++) {
            partial.push(str(i, value) || 'null');
        }

        return '[' + partial.join(',') + ']';
    }

    function stringifyObject(value) {
        var partial = [],
            i, v;
        for (i in value) {
            if (Object.prototype.hasOwnProperty.call(value, i)) {
                v = str(i, value);
                if (v) {
                    partial.push(quote(i) + ':' + v);
                }
            }
        }
        return '{' + partial.join(',') + '}';
    }

    function stringifyReference(value) {
        switch (Object.prototype.toString.call(value)) {
            case '[object Date]':
                return stringifyDate(value);
            case '[object Array]':
                return stringifyArray(value);
        }
        return stringifyObject(value);
    }

    function stringifyPrimitive(value, type) {
        switch (type) {
            case 'string':
                return quote(value);
            case 'number':
                return isFinite(value) ? value : 'null';
            case 'boolean':
                return value;
        }
        return 'null';
    }

    function str(key, holder) {
        var value = holder[key], type = typeof value;

        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
            type = typeof value;
        }
        if (/(number|string|boolean)/.test(type) || (!value && type === 'object')) {
            return stringifyPrimitive(value, type);
        } else {
            return stringifyReference(value);
        }
    }

    function stringify(value) {
        if (window.JSON && typeof window.JSON.stringify === 'function') {
            return window.JSON.stringify(value);
        }

        return str("", { "": value });
    }

    var JsonExporter = function () {

        var file,
            content,
            currentCell;

        this.beginFile = function () {
            content = [];
        }

        this.beginHeader = function () {
        }

        this.appendHeaderCell = function (data) {
        }

        this.endHeader = function () {
        }

        this.beginBody = function (data, dataType) {
        }

        this.beginRow = function () {
            currentCell = {};
        }

        this.appendBodyCell = function (data, dataType) {
            currentCell[dataType['text']] = data;
        }

        this.endRow = function () {
            content.push(currentCell);
        }

        this.endBody = function () {
        }

        this.endFile = function () {
            file = stringify(content);
        }

        this.getFile = function () {
            return file;
        }
    }

    JsonExporter.prototype = new $.jqx.dataAdapter.DataExportModuleBase();
    $.jqx.dataAdapter.ArrayExporter.extend('json', new JsonExporter());

})(jQuery);

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        exportdata: function (datatype, filename, exportHeader, rows, exportServer) {
            if (!$.jqx.dataAdapter.ArrayExporter) {
                throw 'jqxdata.export.js is not loaded.';
            }

            if (exportHeader == undefined) {
                exportHeader = true;
            }

            var me = this;

            if (rows == undefined) {
                var rows = this.getrows();
                if (rows.length == 0) {
                    throw 'No data to export.';
                }
            }

            var dataFields = {};
            var styles = {};
            var alignments = [];
            var $cell = this.host.find('.jqx-grid-cell:first');
            var $cellalt = this.host.find('.jqx-grid-cell-alt:first');
            $cell.removeClass(this.toThemeProperty('jqx-grid-cell-selected'));
            $cell.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            $cellalt.removeClass(this.toThemeProperty('jqx-grid-cell-selected'));
            $cellalt.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            $cell.removeClass(this.toThemeProperty('jqx-grid-cell-hover'));
            $cell.removeClass(this.toThemeProperty('jqx-fill-state-hover'));
            $cellalt.removeClass(this.toThemeProperty('jqx-grid-cell-hover'));
            $cellalt.removeClass(this.toThemeProperty('jqx-fill-state-hover'));

            var styleName = 'cell';
            var styleIndex = 1;
            var columnStyleName = 'column';
            var columnStyleIndex = 1;
            var aggregates = [];

            $.each(this.columns.records, function (index) {
                var $cell = $(me.table[0].rows[0].cells[index]);
                if (me.table[0].rows.length > 1) {
                    var $cellalt = $(me.table[0].rows[1].cells[index]);
                }
                var removeClassFunc = function (cell) {
                    cell.removeClass(me.toThemeProperty('jqx-grid-cell-selected'));
                    cell.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    cell.removeClass(me.toThemeProperty('jqx-grid-cell-hover'));
                    cell.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                }
                removeClassFunc($cell);
                if ($cellalt) {
                    removeClassFunc($cellalt);
                }

                if (this.datafield == null) return true;

                if (me.showaggregates) {
                    if (me.getcolumnaggregateddata) {
                        aggregates.push(me.getcolumnaggregateddata(this.datafield, this.aggregates, true));
                    }
                }

                var type = me._getexportcolumntype(this);
                if (this.exportable && !this.hidden) {
                    dataFields[this.datafield] = {};
                    dataFields[this.datafield].text = this.text;
                    dataFields[this.datafield].width = parseInt(this.width);
                    if (isNaN(dataFields[this.datafield].width)) dataFields[this.datafield].width = 60;
                    dataFields[this.datafield].formatString = this.cellsformat;
                    dataFields[this.datafield].type = type;
                    dataFields[this.datafield].cellsAlign = this.cellsalign;
                    dataFields[this.datafield].hidden = !exportHeader;
                }

                styleName = 'cell' + styleIndex;

                var $element = $(this.element);
                if (this.element == undefined) $element = $(this.uielement);

                columnStyleName = 'column' + columnStyleIndex;
                if (datatype == 'html' || datatype == 'xls' || datatype == 'pdf') {
                    var buildStyle = function (styleName, $element, isColumn, altStyle, meColumn, me, index) {
                        styles[styleName] = {};
                        styles[styleName]['font-size'] = $element.css('font-size');
                        styles[styleName]['font-weight'] = $element.css('font-weight');
                        styles[styleName]['font-style'] = $element.css('font-style');
                        styles[styleName]['background-color'] = me._getexportcolor($element.css('background-color'));
                        styles[styleName]['color'] = me._getexportcolor($element.css('color'));
                        styles[styleName]['border-color'] = me._getexportcolor($element.css('border-top-color'));
                        if (isColumn) {
                            styles[styleName]['text-align'] = meColumn.align;
                        }
                        else {
                            styles[styleName]['text-align'] = meColumn.cellsalign;
                            styles[styleName]['formatString'] = meColumn.cellsformat;
                            styles[styleName]['dataType'] = type;
                        }

                        if (datatype == 'html' || datatype == 'pdf') {
                            styles[styleName]['border-top-width'] = $element.css('border-top-width');
                            styles[styleName]['border-left-width'] = $element.css('border-left-width');
                            styles[styleName]['border-right-width'] = $element.css('border-right-width');
                            styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');
                            styles[styleName]['border-top-style'] = $element.css('border-top-style');
                            styles[styleName]['border-left-style'] = $element.css('border-left-style');
                            styles[styleName]['border-right-style'] = $element.css('border-right-style');
                            styles[styleName]['border-bottom-style'] = $element.css('border-bottom-style');
                            if (isColumn) {
                                if (index == 0) {
                                    styles[styleName]['border-left-width'] = $element.css('border-right-width');
                                }
                                styles[styleName]['border-top-width'] = $element.css('border-right-width');
                                styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');
                            }
                            else {
                                if (index == 0) {
                                    styles[styleName]['border-left-width'] = $element.css('border-right-width');
                                }
                            }
                            styles[styleName]['height'] = $element.css('height');
                        }

                        if (meColumn.exportable && !meColumn.hidden) {
                            if (isColumn) {
                                dataFields[meColumn.datafield].style = styleName;
                            }
                            else if (!altStyle) {
                                dataFields[meColumn.datafield].cellStyle = styleName;
                            }
                            else dataFields[meColumn.datafield].cellAltStyle = styleName;
                        }
                    }
                    buildStyle(columnStyleName, $element, true, false, this, me, index);
                    columnStyleIndex++;
                    buildStyle(styleName, $cell, false, false, this, me, index);

                    if (me.altrows) {
                        styleName = 'cellalt' + styleIndex;
                        buildStyle(styleName, $cellalt, false, true, this, me, index);
                    }

                    styleIndex++;
                }
            });

            if (this.showaggregates) {
                var aggregatedrows = [];
                if (aggregates.length > 0) {
                    $.each(this.columns.records, function (index) {
                        if (this.aggregates) {
                            for (var i = 0; i < this.aggregates.length; i++) {
                                if (!aggregatedrows[i]) aggregatedrows[i] = {};
                                if (aggregatedrows[i]) {
                                    var aggregatename = me._getaggregatename(this.aggregates[i]);
                                    var aggregatetype = me._getaggregatetype(this.aggregates[i]);
                                    var aggregate = aggregates[index];
                                    aggregatedrows[i][this.datafield] = aggregatename + ": " + aggregate[aggregatetype];
                                }
                            }
                        }
                    });
                    $.each(this.columns.records, function (index) {
                        for (var i = 0; i < aggregatedrows.length; i++) {
                            if (aggregatedrows[i][this.datafield] == undefined) {
                                aggregatedrows[i][this.datafield] = "";
                            }
                        }
                    });
                }
                $.each(aggregatedrows, function () {
                    rows.push(this);
                });
            }

            var exporter = $.jqx.dataAdapter.ArrayExporter(rows, dataFields, styles);
            if (filename == undefined) {
                // update ui
                this._renderrows(this.virtualsizeinfo);
                return exporter.exportTo(datatype);
            }
            else {
                exporter.exportToFile(datatype, filename, exportServer);
            }
            // update ui
            if (this.showaggregates) {
                $.each(aggregatedrows, function () {
                    rows.pop(this);
                });
            }
            this._renderrows(this.virtualsizeinfo);
        },

        _getexportcolor: function (value) {
            var color = value;
            if (value == 'transparent') color = "#FFFFFF";
            if (!color || !color.toString()) {
                color = "#FFFFFF";
            }

            if (color.toString().indexOf('rgb') != -1) {
                var rgb = color.split(',');
                var r = parseInt(rgb[0].substring(4));
                var g = parseInt(rgb[1]);
                var b = parseInt(rgb[2].substring(1, 4));
                var rgbObj = { r: r, g: g, b: b };
                var hex = this._rgbToHex(rgbObj);
                return "#" + hex;
            }
            else if (color.toString().indexOf('#') != -1) {
                if (color.toString().length == 4) {
                    var colorPart = color.toString().substring(1, 4);
                    color += colorPart;
                }
            }

            return color;
        },

        _rgbToHex: function (rgb) {
            return this._intToHex(rgb.r) + this._intToHex(rgb.g) + this._intToHex(rgb.b);
        },

        _intToHex: function (dec) {
            var result = (parseInt(dec).toString(16));
            if (result.length == 1)
                result = ("0" + result);
            return result.toUpperCase();
        },

        _getexportcolumntype: function (column) {
            var me = this;
            var type = 'string';
            var datafields = me.source.datafields || ((me.source._source) ? me.source._source.datafields : null);

            if (datafields) {
                var foundType = "";
                $.each(datafields, function () {
                    if (this.name == column.datafield) {
                        if (this.type) {
                            foundType = this.type;
                        }
                        return false;
                    }
                });
                if (foundType)
                    return foundType;
            }

            if (column != null) {
                if (this.dataview.cachedrecords == undefined) {
                    return type;
                }

                var cell = null;

                if (!this.virtualmode) {
                    if (this.dataview.cachedrecords.length == 0)
                        return type;

                    cell = this.dataview.cachedrecords[0][column.datafield];
                    if (cell != null && cell.toString() == "") {
                        return "string";
                    }
                }
                else {
                    $.each(this.dataview.cachedrecords, function () {
                        cell = this[column.datafield];
                        return false;
                    });
                }

                if (cell != null) {
                    if (column.cellsformat.indexOf('c') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('n') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('p') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('d') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('y') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('M') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('m') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('t') != -1) {
                        return 'date';
                    }

                    if (typeof cell == 'boolean') {
                        type = 'boolean';
                    }
                    else if ($.jqx.dataFormat.isNumber(cell)) {
                        type = 'number';
                    }
                    else {
                        var tmpvalue = new Date(cell);
                        if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                            if ($.jqx.dataFormat) {
                                tmpvalue = $.jqx.dataFormat.tryparsedate(cell);
                                if (tmpvalue != null) {
                                    return 'date';
                                }
                                else {
                                    type = 'string';
                                }
                            }
                            else type = 'string';
                        }
                        else {
                            type = 'date';
                        }
                    }
                }
            }
            return type;
        }

    });
})(jQuery);


(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        savestate: function (state) {
            var state = this.getstate();

            if (window.localStorage) {
                window.localStorage["jqxGrid" + this.element.id] = this._stringify(state);
            }
            this._savedstate = state;
            return state;
        },

        loadstate: function (gridstate) {
            var state = "";
            if (gridstate != undefined && gridstate.width != undefined) {
                state = gridstate;
            }
            else if (window.localStorage) {
                var state = $.parseJSON(window.localStorage["jqxGrid" + this.element.id]);
            }
            else if (this._savedstate) {
                var state = this._savedstate;
            }
            if (state != null) {
                var data = state;
                this.width = data.width;
                this.height = data.height;
                if (this.pageable) {
                    if (data.pagesize != undefined) {
                        this.pagesize = data.pagesize;
                    }
                    if (data.pagenum != undefined) {
                        this.dataview.pagenum = data.pagenum;
                    }
                    if (data.pagesizeoptions != undefined) {
                        this.pagesizeoptions = data.pagesizeoptions;
                    }
                }
                if (this.sortable) {
                    if (data.sortdirection) {
                        if (data.sortdirection.ascending || data.sortdirection.descending) {
                            this.dataview.sortfield = data.sortcolumn;
                            var direction = data.sortdirection.ascending ? 'asc' : 'desc';
                            this.dataview.sortfielddirection = direction;
                            this.source.sortcolumn = data.sortcolumn;
                            this.source.sortdirection = direction;
                            if (!this.autoloadstate) {
                                this.sortby(data.sortcolumn, direction);
                            }
                        }
                    }
                    else if (this.dataview.sortfield != null && (this.dataview.sortfielddirection == 'asc' || this.dataview.sortfielddirection == 'desc')) {
                        this.sortby(this.dataview.sortfield, null);
                    }
                }
                if (this.groupable) {
                    this.dataview.groups = data.groups;
                    this.groups = data.groups;
                }

                if (this.virtualsizeinfo) {
                    this._loadselectionandcolumnwidths(data);
                }
            }
        },

        _loadselectionandcolumnwidths: function (gridstate) {
            var state = "";

            if (gridstate != undefined && gridstate.width != undefined) {
                state = gridstate;
            }
            else if (window.localStorage) {
                var state = $.parseJSON(window.localStorage["jqxGrid" + this.element.id]);
            }
            else if (this._savedstate) {
                var state = this._savedstate;
            }
            if (state != null) {
                var data = state;
                var me = this;
                var requiresRender = false;
                var columnstomove = [];
                columnstomove.length = 0;
                var columnstomoveindexes = [];
                $.each(this.columns.records, function (index) {
                    var savedColumn = data.columns[this.datafield];
                    if (savedColumn != undefined) {
                        if (this.text != savedColumn.text) {
                            requiresRender = true;
                        }
                        if (this.hidden != savedColumn.hidden) {
                            requiresRender = true;
                        }

                        this.width = savedColumn.width;
                        this.hidden = savedColumn.hidden;
                        this.pinned = savedColumn.pinned;
                        this.groupable = savedColumn.groupable;
                        this.resizable = savedColumn.resizable;
                        this.draggable = savedColumn.draggable;
                        this.text = savedColumn.text;
                        this.align = savedColumn.align;
                        this.cellsalign = savedColumn.cellsalign;
                        if (index != savedColumn.index) {
                            columnstomove[this.datafield] = savedColumn.index;
                            columnstomove.length++;
                        }
                    }
                });

                if (columnstomove.length > 0) {
                    if (this.setcolumnindex) {
                        $.each(this.columns.records, function (index) {
                            var index = columnstomove[this.datafield];
                            me.setcolumnindex(this.datafield, index, false);
                        });
                    }
                    this.prerenderrequired = true;
                    this.rendergridcontent(true);
   
                    if (this._updatefilterrowui && this.filterable && this.showfilterrow) {
                        this._updatefilterrowui();
                    }
                    this._renderrows(this.virtualsizeinfo);
                }

                if (this.filterable) {
                    if (this.clearfilters) {
                        this.clearfilters(false);
                    }
                    for (var i = 0; i < data.filters.filterscount; i++) {
                        var condition = data.filters['filtercondition' + i];
                        var datafield = data.filters['filterdatafield' + i];
                        var column = this.getcolumn(datafield);
                        if (column) {
                            var value = data.filters['filtervalue' + i];
                            var operator = data.filters['filteroperator' + i];
                            var filtergroup = new $.jqx.filter();
                            var filtertype = data.filters['filtertype' + i];
                            var filter = filtergroup.createfilter(filtertype, value, condition);
                            filtergroup.addfilter(operator, filter);

                            if (this.showfilterrow) {
                                var widget = column._filterwidget;
                                var tablecolumn = column._filterwidget.parent();
                                if (widget != null) {
                                    switch (column.filtertype) {
                                        case 'number':
                                            tablecolumn.find('input').val(value);
                                            break;
                                        case 'date':
                                            if (this.host.jqxDateTimeInput) {
                                                var value2 = data.filters['filtervalue' + (i + 1)];
                                                var filtertype = data.filters['filtertype' + i];
                                                var filter = filtergroup.createfilter(filtertype, value2, "LESS_THAN_OR_EQUAL");
                                                filtergroup.addfilter(operator, filter);

                                                $(tablecolumn.children()[0]).jqxDateTimeInput('setRange', new Date(value), new Date(value2));
                                                i++;
                                            }
                                            else widget.val(value);
                                            break;
                                        case 'textbox':
                                        case 'default':
                                            widget.val(value);
                                            me["_oldWriteText" + widget[0].id] = value;
                                            break;
                                        case 'list':
                                            if (this.host.jqxDropDownList) {
                                                var items = $(tablecolumn.children()[0]).jqxDropDownList('getItems');
                                                var index = -1;
                                                $.each(items, function (i) {
                                                    if (this.value == value) {
                                                        index = i;
                                                        return false;
                                                    }
                                                });

                                                $(tablecolumn.children()[0]).jqxDropDownList('selectIndex', index);
                                            }
                                            else widget.val(value);
                                            break;
                                        case 'checkedlist':
                                            if (this.host.jqxDropDownList) {
                                                $(tablecolumn.children()[0]).jqxDropDownList('checkAll');
                                            }
                                            else widget.val(value);
                                            break;
                                        case 'bool':
                                        case 'boolean':
                                            if (!this.host.jqxCheckBox) {
                                                widget.val(value);
                                            }
                                            else $(tablecolumn.children()[0]).jqxCheckBox({ checked: value });
                                            break;
                                    }
                                }
                            }
                            this.addfilter(datafield, filtergroup);
                        }
                    }
                    if (data.filters.filterscount > 0) {
                        this.applyfilters();
                    }

                    if (this.pageable) {
                        if (this.gotopage) {
                            this.dataview.pagenum = -1;
                            this.gotopage(data.pagenum);
                        }
                    }
                }

                if (data.selectedrowindexes && data.selectedrowindexes.length > 0) {
                    this.selectedrowindexes = data.selectedrowindexes;
                    this.selectedrowindex = data.selectedrowindex;
                }
                if (data.selectedcells) {
                    if (this._applycellselection) {
                        $.each(data.selectedcells, function () {
                            me._applycellselection(this.rowindex, this.datafield, true, false);
                        });
                    }
                }

                if (this.groupable) {
                    this._refreshdataview();
                    this.render();
                    return;
                }

                if (requiresRender) {
                    this.prerenderrequired = true;
                    this.rendergridcontent(true);
                    if (this.updating()) {
                        return false;
                    }
                }
                else {
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                }

                this._renderrows(this.virtualsizeinfo);
            }
        },

        getstate: function () {
            var datainfo = this.getdatainformation();
            var data = {};
            data.width = this.width;
            data.height = this.height;
            data.pagenum = datainfo.paginginformation.pagenum;
            data.pagesize = datainfo.paginginformation.pagesize;
            data.pagesizeoptions = this.pagesizeoptions;
            data.sortcolumn = datainfo.sortinformation.sortcolumn;
            data.sortdirection = datainfo.sortinformation.sortdirection;
            if (this.selectionmode != null) {
                if (this.getselectedcells) {
                    if (this.selectionmode.toString().indexOf('cell') != -1) {
                        var selectedcells = this.getselectedcells();
                        var cells = new Array();
                        $.each(selectedcells, function () {
                            cells.push({ datafield: this.datafield, rowindex: this.rowindex });
                        });
                        data.selectedcells = cells;
                    }
                    else {
                        var selectedrowindexes = this.getselectedrowindexes();
                        data.selectedrowindexes = selectedrowindexes;
                        data.selectedrowindex = this.selectedrowindex;
                    }
                }
            }
            var postdata = {};
            var filterslength = 0;
            if (this.dataview.filters) {
                for (var x = 0; x < this.dataview.filters.length; x++) {
                    var filterdatafield = this.dataview.filters[x].datafield;
                    var filter = this.dataview.filters[x].filter;
                    var filters = filter.getfilters();
                    postdata[filterdatafield + "operator"] = filter.operator;
                    for (var m = 0; m < filters.length; m++) {
                        filters[m].datafield = filterdatafield;
                        postdata["filtervalue" + filterslength] = filters[m].value;
                        postdata["filtercondition" + filterslength] = filters[m].condition;
                        postdata["filteroperator" + filterslength] = filters[m].operator;
                        postdata["filterdatafield" + filterslength] = filterdatafield;
                        postdata["filtertype" + filterslength] = filters[m].type;

                        filterslength++;
                    }
                }
            }
            postdata.filterscount = filterslength;
            data.filters = postdata;
            data.groups = this.groups;
            //if (this.groupable && this.groups.length > 0) {
            //    var me = this;
            //    var groupstates = [];
            //    $.each(this.dataview.loadedgroups, function () {
            //        var groupstate = me._findgroupstate(this.uniqueid);
            //        groupstates[this.group] = groupstate;
            //    });
            //    data.groupstates = groupstates;
            //}

            data.columns = {};
            $.each(this.columns.records, function (index, value) {
                var columndata = {};
                columndata.width = this.width;
                columndata.hidden = this.hidden;
                columndata.pinned = this.pinned;
                columndata.groupable = this.groupable;
                columndata.resizable = this.resizable;
                columndata.draggable = this.draggable;
                columndata.text = this.text;
                columndata.align = this.align;
                columndata.cellsalign = this.cellsalign;
                columndata.index = index;
                data.columns[this.datafield] = columndata;
            });

            return data;
        },

        _stringify: function (value) {
            if (window.JSON && typeof window.JSON.stringify === 'function') {
                var me = this;
                var json = "";
                try {
                    json = window.JSON.stringify(value);
                }
                catch (error) {
                    return me._str("", { "": value })
                }
                return json;
            }

            var json = this._str("", { "": value })
            return json;
        },

        _quote: function (string) {
            var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            meta = {
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            };

            return '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"';
        },


        _stringifyArray: function (value) {
            var len = value.length,
                partial = [],
                i;
            for (var i = 0; i < len; i++) {
                partial.push(this._str(i, value) || 'null');
            }

            return '[' + partial.join(',') + ']';
        },

        _stringifyObject: function (value) {
            var partial = [],
                i, v;
            var me = this;
            for (i in value) {
                if (Object.prototype.hasOwnProperty.call(value, i)) {
                    v = me._str(i, value);
                    if (v) {
                        partial.push(me._quote(i) + ':' + v);
                    }
                }
            }
            return '{' + partial.join(',') + '}';
        },

        _stringifyReference: function (value) {
            switch (Object.prototype.toString.call(value)) {
                case '[object Array]':
                    return this._stringifyArray(value);
            }
            return this._stringifyObject(value);
        },

        _stringifyPrimitive: function (value, type) {
            switch (type) {
                case 'string':
                    return this._quote(value);
                case 'number':
                    return isFinite(value) ? value : 'null';
                case 'boolean':
                    return value;
            }
            return 'null';
        },

        _str: function (key, holder) {
            var value = holder[key], type = typeof value;

            if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
                value = value.toJSON(key);
                type = typeof value;
            }
            if (/(number|string|boolean)/.test(type) || (!value && type === 'object')) {
                return this._stringifyPrimitive(value, type);
            } else {
                return this._stringifyReference(value);
            }
        }
    });
})(jQuery);
(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {

        getcolumnindex: function(datafield)
        {
            var column = this.getcolumn(datafield);
            var columnindex = this.columns.records.indexOf(column);
            return columnindex;
        },

        setcolumnindex: function (datafield, index, refresh) {
            var column = this.getcolumn(datafield);
            if (column.pinned) return;
            if (column.hidden) return;

            var columnindex = this.columns.records.indexOf(column);
            this.columns.records.splice(columnindex, 1);
            this.columns.records.splice(index, 0, column);

            var left = 0;
            var zindex = this.headerZIndex;
            this.columnsrow.children().detach();

            var cellclass = this.toThemeProperty('jqx-grid-cell');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            if (this.filterrow) {
                $(this.filterrow.children()[0]).children().detach();
                this.filterrow[0].cells = [];
            }

            var self = this;
            var tablerow = null;
            if (self.filterrow != undefined) {
                var tablerow = $(self.filterrow.children()[0]);
            }

            this.columnsrow[0].cells = [];
            var hasHiddenColumns = false;
            $.each(this.columns.records, function (i, value) {
                var column = this.uielement;
                self.columnsrow.append(column);
                column.css('z-index', zindex--);
                var desiredwidth = this.width;
                column.css('left', left);
                self.columnsrow[0].cells[self.columnsrow[0].cells.length] = column[0];

                if (self.filterrow) {
                    var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + cellclass + '"></div>');
                    tablerow.append(tablecolumn);
                    tablecolumn.css('left', left);
                    tablecolumn.css('z-index', zindex + 1);
                    tablecolumn.width(this.width);
                    tablecolumn[0].left = left;
                    tablecolumn.append(this._filterwidget);
                    self.filterrow[0].cells[self.filterrow[0].cells.length] = tablecolumn[0];
                }
                if (this.hidden) {
                    hasHiddenColumns = true;
                }
                if (!(this.hidden && this.hideable)) {
                    left += desiredwidth;
                }
            });

            var column = this._columns[columnindex];
            this._columns.splice(columnindex, 1);
            this._columns.splice(index, 0, column);

            this._raiseEvent(24, { columntext: column.text, datafield: column.datafield, oldindex: columnindex, newindex: index });
            if (refresh == false) return;

            if (hasHiddenColumns) {
                this.prerenderrequired = true;
                this.rendergridcontent(true);
            }
            else {
                this._updatecolumnwidths();
                this._updatecellwidths();
            }
            if (this._updatefilterrowui && this.filterable && this.showfilterrow) {
                this._updatefilterrowui();
            }
            this._renderrows(this.virtualsizeinfo);
        },

        _pinnedColumnsLength: function () {
            var pinned = 0;
            $.each(this.columns.records, function () {
                if (this.pinned) pinned++;
            });
            return pinned;
        },

        _handlecolumnsreorder: function () {
            var self = this;
            var dropindex = -1;
            var candrop = false;

            if (!self.columnsreorder)
                return;

            var mousemove = 'mousemove.reorder' + this.element.id;
            var mousedown = 'mousedown.reorder' + this.element.id;
            var mouseup = 'mouseup.reorder' + this.element.id;

            var touchdevice = false;
            if (this.isTouchDevice()) {
                touchdevice = true;
                mousemove = 'touchmove.reorder' + this.element.id;
                mousedown = 'touchstart.reorder' + this.element.id;
                mouseup = 'touchend.reorder' + this.element.id;
            }

            this.removeHandler($(document), mousemove);
            this.addHandler($(document), mousemove, function (event) {
                if (self.reordercolumn != null) {
                    var left = parseInt(event.pageX);
                    var top = parseInt(event.pageY);
                    if (touchdevice) {
                        var touches = self.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            left = parseInt(touch.pageX);
                            top = parseInt(touch.pageY);
                        }
                    }
                    var hostoffset = self.host.offset();
                    var hostleft = parseInt(hostoffset.left);
                    var hosttop = parseInt(hostoffset.top);
                    if (self.dragmousedownoffset == undefined || self.dragmousedownoffset == null) {
                        self.dragmousedownoffset = { left: 0, top: 0 };
                    }

                    var leftposition = parseInt(left) - parseInt(self.dragmousedownoffset.left);
                    var topposition = parseInt(top) - parseInt(self.dragmousedownoffset.top);

                    self.reordercolumn.css({ left: leftposition + 'px', top: topposition + 'px' });
                    candrop = false;
                    if (left >= hostleft && left <= hostleft + self.host.width()) {
                        if (top >= hosttop && top <= hosttop + self.host.height()) {
                            candrop = true;
                        }
                    }

                    dropindex = -1;
                    if (candrop) {
                        self.reordercolumnicon.removeClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                        self.reordercolumnicon.addClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        var groupsheaderoffset = self.columnsheader.offset();
                        var groupsheaderbottom = groupsheaderoffset.top + self.columnsheader.height();

                        if (self.columnsdropline != null) {
                            if (top >= groupsheaderoffset.top && top <= groupsheaderbottom) {
                                dropindex = self._handlereordercolumnsdroplines(left);
                            }
                            else {
                                self.columnsdropline.fadeOut('slow');
                            }
                        }
                    }
                    else {
                        if (self.columnsdropline != null) {
                            self.columnsdropline.fadeOut('slow');
                        }

                        self.reordercolumnicon.removeClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        self.reordercolumnicon.addClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                    }
                    if (touchdevice) {
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                }
            });

            this.columnsbounds = new Array();

            this.removeHandler($(document), mousedown);
            this.addHandler($(document), mousedown, function (event) {
                $(document.body).addClass('jqx-disableselect');
                self.columnsbounds = new Array();
                var left = self.host.offset().left;
                var top = self.host.offset().top;
                if (self.showtoolbar) top += self.toolbarheight;
                if (self.groupable) top += self.groupsheaderheight;
                var columnIndex = 0;
                $.each(self.columns.records, function (index) {
                    if (this.hidden) {
                        self.columnsbounds[self.columnsbounds.length] = { top: top, column: this, left: left, width: 0, height: 2 + self.rowsheight };
                        return true;
                    }

                    if (columnIndex == 0) {
                        left += parseInt(this.uielement[0].style.marginLeft);
                        if (isNaN(left)) {
                            left = parseInt(self.host.offset().left) - self.hScrollInstance.value;
                        }
                    }
                    columnIndex++;
                    self.columnsbounds[self.columnsbounds.length] = { top: top, column: this, left: left, width: this.width, height: 2 + self.columnsheight };
                    left += this.width;
                });
            });
            this.removeHandler($(document), mouseup);
            this.addHandler($(document), mouseup, function (event) {
                $(document.body).removeClass('jqx-disableselect');
                var left = parseInt(event.pageX);
                var top = parseInt(event.pageY);
                if (touchdevice) {
                    var touches = self.getTouches(event);
                    var touch = touches[0];
                    left = parseInt(touch.pageX);
                    top = parseInt(touch.pageY);
                }
                var hostoffset = self.host.offset();
                var hostleft = parseInt(hostoffset.left);
                var hosttop = parseInt(hostoffset.top);
                var groupsheaderheight = self.groupsheader.height();
                if (self.showtoolbar) {
                    hosttop += self.toolbarheight;
                }

                self.columndragstarted = false;
                self.dragmousedown = null;
                if (self.reordercolumn != null) {
                    var datafield = $.data(self.reordercolumn[0], 'reorderrecord');
                    var oldindex = self.columns.records.indexOf(self.getcolumn(datafield));
                    self.reordercolumn.remove();
                    self.reordercolumn = null;
                    var minIndex = self.groups.length;
                 //   minIndex += self.rowdetails ? 1 : 0;
                    minIndex += self._pinnedColumnsLength();

                    if (datafield != null) {
                        if (candrop) {
                            if (dropindex != -1) {
                                var index = dropindex.index;
                                if (index >= minIndex) {
                                    var targetcolumn = self.columns.records[index];
                                    if (targetcolumn != undefined) {
                                        var columnindex = self.columns.records.indexOf(self.getcolumn(targetcolumn.datafield));
                                        if (targetcolumn.datafield == null) {
                                            var columnindex = self.columns.records.indexOf(self.getcolumnbytext(targetcolumn.text));
                                        }

                                        if (oldindex < columnindex) {
                                            if (dropindex.position == 'before') {
                                                self.setcolumnindex(datafield, columnindex - 1);
                                            }
                                            else {
                                                self.setcolumnindex(datafield, columnindex);
                                            }
                                        }
                                        else if (oldindex > columnindex) {
                                            self.setcolumnindex(datafield, columnindex);
                                        }
                                    }
                                }
                            }
                        }

                        if (self.columnsdropline != null) {
                            self.columnsdropline.remove();
                            self.columnsdropline = null;
                        }
                    }
                }
            });
        },

        getcolumnbytext: function (text) {
            var column = null;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    if (this.text == text) {
                        column = this;
                        return false;
                    }
                });
            }
            return column;
        },

        _handlereordercolumnsdroplines: function (left) {
            var self = this;
            var dropindex = -1;
            var minIndex = self.groups.length;
//            minIndex += self.rowdetails ? 1 : 0;
            minIndex += self._pinnedColumnsLength();

            var hostleft = parseInt(self.host.offset().left);
            var hostright = hostleft + self.host.width();

            $.each(self.columnsbounds, function (index) {
                if (index >= minIndex) {
                    if (this.width == 0) return true;

                    if (left <= this.left + this.width / 2) {
                        if (left > hostright) {
                            self.columnsdropline.fadeOut();
                            return false;
                        }
                        self.columnsdropline.css('left', parseInt(this.left) + 'px');
                        self.columnsdropline.css('top', parseInt(this.top) + 'px');
                        self.columnsdropline.height(this.height);
                        self.columnsdropline.fadeIn('slow');
                        dropindex = { index: index, position: 'before' }
                        return false;
                    }
                    else if (left >= this.left + this.width / 2) {
                        if (this.left + this.width > hostright) {
                            self.columnsdropline.fadeOut();
                            return false;
                        }

                        self.columnsdropline.css('left', 1 + this.left + this.width);
                        self.columnsdropline.css('top', this.top);
                        self.columnsdropline.height(this.height);
                        self.columnsdropline.fadeIn('slow');
                        dropindex = { index: index, position: 'after' }
                    }
                }
            });

            return dropindex;
        },

        _createreordercolumn: function (column, position, hascolumnsdropline) {
            var me = this;
            var mousemove = position;

            if (me.reordercolumn) me.reordercolumn.remove();
            if (me.columnsdropline) me.columnsdropline.remove();
            me.reordercolumn = $('<div></div>');
            var columnclone = column.clone();
            me.reordercolumn.css('z-index', 999999);
            columnclone.css('border-width', '1px');
            columnclone.css('opacity', '0.4');
            var menubutton = $(columnclone.find('.' + me.toThemeProperty('jqx-grid-column-menubutton')));
            if (menubutton.length > 0) {
                menubutton.css('display', 'none');
            }
            var closebutton = $(columnclone.find('.icon-close'));
            if (closebutton.length > 0) {
                closebutton.css('display', 'none');
            }

            me.reordercolumnicon = $('<div style="z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;"></div>');
            me.reordercolumnicon.addClass(me.toThemeProperty('jqx-grid-drag-icon'));
            me.reordercolumn.css('float', 'left');
            me.reordercolumn.css('position', 'absolute');
            var hostoffset = me.host.offset();
            columnclone.width(column.width() + 16);
            me.reordercolumn.append(columnclone);
            me.reordercolumn.height(column.height());
            me.reordercolumn.width(columnclone.width());
            me.reordercolumn.append(me.reordercolumnicon);
            $(document.body).append(me.reordercolumn);

            columnclone.css('margin-left', 0);
            columnclone.css('left', 0);
            columnclone.css('top', 0);
            me.reordercolumn.css('left', mousemove.left + me.dragmousedown.left);
            me.reordercolumn.css('top', mousemove.top + me.dragmousedown.top);

            if (hascolumnsdropline != undefined && hascolumnsdropline) {
                me.columnsdropline = $('<div style="z-index: 9999; display: none; position: absolute;"></div>');

                me.columnsdropline.width(2);
                me.columnsdropline.addClass(me.toThemeProperty('jqx-grid-group-drag-line'));
                $(document.body).append(me.columnsdropline);
            }
        },

        _handlecolumnsdragreorder: function (record, column) {
            if (this.reordercolumn) this.reordercolumn.remove();
            if (this.columnsdropline) this.columnsdropline.remove();

            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.columndragstarted = false;
            this.reordercolumn = null;

            var me = this;
            var mousemove;
            var touchdevice = false;
            if (this.isTouchDevice()) {
                touchdevice = true;
            }

            var mousedown = 'mousedown.drag';
            var mousemove = 'mousemove.drag';
            if (touchdevice) {
                mousedown = 'touchstart.drag';
                mousemove = 'touchmove.drag';
            }
            else {
                this.addHandler(column, 'dragstart', function (event) {
                    return false;
                });
            }
            this.addHandler(column, mousedown, function (event) {
                if (false == record.draggable) {
                    return true;
                }

                var pagex = event.pageX;
                var pagey = event.pageY;
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    pagex = touch.pageX;
                    pagey = touch.pageY;
                }

                me.dragmousedown = { left: pagex, top: pagey };

                var offsetposition = $(event.target).offset();
                me.dragmousedownoffset = { left: parseInt(pagex) - parseInt(offsetposition.left), top: parseInt(pagey - offsetposition.top) };
                return true;
            });

            this.addHandler(column, mousemove, function (event) {
                if (!record.draggable) return true;
                if (undefined == record.datafield) return true;
                if (record.pinned) return true;

                if (me.dragmousedown) {
                    var pagex = event.pageX;
                    var pagey = event.pageY;
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            pagex = touch.pageX;
                            pagey = touch.pageY;
                        }
                    }
                    mousemove = { left: pagex, top: pagey };
                    if (!me.columndragstarted && me.reordercolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createreordercolumn(column, mousemove, true);
                            $.data(me.reordercolumn[0], 'reorderrecord', record.datafield);
                        }
                    }
                }
            });
        }
    });
})(jQuery);(function ($) {

    $.jqx.jqxWidget('jqxListMenu', '', {});

    var listItemsCounter = 0,
        listsCounter = 0;

    $.extend($.jqx._jqxListMenu.prototype, {

        defineInstance: function () {
            this.filterCallback = function (text, searchValue) {
                var result = $.jqx.string.containsIgnoreCase($.trim(text), searchValue);
                return result;
            };
            this.placeHolder = 'Filter list items...';
            this.showFilter = false;
            this.showHeader = true;
            this.showBackButton = true;
            this.showNavigationArrows = true;
            this.alwaysShowNavigationArrows = false;
            this.backLabel = 'Back';
            this.width = '100%';
            this.height = 'auto';
            this.animationType = 'slide';
            this.animationDuration = 250;
            this.headerAnimationDuration = 0;
            this.autoSeparators = false;
            this.readOnly = false;
            this.roundedCorners = true;
            this.disabled = false;
            this.enableScrolling = true;
            this.touchMode = false;
            //private data members
            this._childrenMap = {};
            this._parentMap = {};
            this._lock = false;
            this._backButton = null;
            this._currentPage = null;
            this._header = null;
            this._oldHost;
        },

        destroy: function () {
            this.host.remove();
        },

        createInstance: function () {
            this.host.attr('data-role', 'listmenu');
        },

        refresh: function (init) {
            this._render();
            this._removeClasses();
            this._addClasses();
            this._currentPage = this._currentPage || this.host.children('.jqx-listmenu').first();
            this._changeHeader(this._currentPage);
            this._removeEventHandlers();
            this._addEventHandlers();
        },

        _render: function () {
            this._renderHost();
            this._renderAutoSeparators();
            this._renderSublists();
            this._renderFilterBar();
            this._renderHeader();
            this.host.css({
                width: this.width,
                height: this.height
            });
            if (this.disabled)
                this.disable();
            if (this.enableScrolling && this.host.jqxPanel && this.panel) {
                this.panel.jqxPanel('_arrange');
            }
        },

        _renderHost: function () {
            if (!this.host.is('div')) {
                this._oldHost = this.host;
                this.host.wrap('<div/>');
                this.host = this.host.parent();
                this.element = this.host[0];
                if (this.host.jqxPanel && this.enableScrolling) {
                    this.host.wrap('<div/>');
                    this.panel = this.host.parent();
                    this.panel[0].id = 'panel' + this.element.id;
                    this.panel.jqxPanel({ sizeMode: 'overflowy', autoUpdate: true, width: this.width, height: this.height, touchMode: this.touchMode });
                    this.host.css({ width: '100%' });
                    this.host.css({ height: 'auto' });
                    this.host.css('border', 'none');
                }
            }
            this.element.style.overflow = 'hidden';
            if ($.browser.msie && $.browser.version < 8) {
                this.element.style.position = 'relative';
            }
        },

        _renderAutoSeparators: function (list) {
            var autoSeparators = this.host.find('.jqx-listmenu-auto-separator'),
                lists = this.host.find('[data-role="listmenu"]'),
                list, i;
            autoSeparators.remove();
            for (i = 0; i < lists.length; i += 1) {
                list = $(lists[i]);
                if (list.data('auto-separators') || this.autoSeparators) {
                    this._renderListAutoSeparators(list);
                }
            }
        },

        _renderSublists: function () {
            var stack = [(this.host.find('.jqx-listmenu').first()[0] || this.host.find('ul,ol').first()[0])],
                lis, li, list, lisCount, childList;
            this._refreshList(stack[0]);
            while (stack.length) {
                list = stack.pop();
                lis = this._getChildrenByTagName(list, 'li', 'LI');
                lisCount = lis.length;
                for (var i = 0; i < lisCount; i += 1) {
                    li = lis[i];
                    childList = this._getChildList(li);
                    this._refreshLi(li, i, lisCount);
                    if (childList) {
                        stack.push(childList);
                        this._refreshList(childList, li, true);
                    }
                }
            }
        },

        _refreshList: function (list, parent, sublist) {
            list = $(list);
            if (list.data('role') === 'listmenu') {
                if (!list.is('.jqx-listmenu')) {
                    this._renderList(list);
                    this._handleListId(list);
                    this._addListClasses(list);
                }
                if (parent) {
                    this._expandHierarchy(list[0], parent);
                }
                if (sublist) {
                    this._handleSublist(list[0]);
                }
            }
        },

        _renderList: function (list) {
            list = $(list);
            if (!list.is('.jqx-listmenu')) {
                list.detach();
                list.appendTo(this.host);
            }
        },

        _handleListId: function (list) {
            if (!list[0].id) {
                list[0].id = 'jqx-listmenu-' + listsCounter;
                listsCounter += 1;
            }
        },

        _renderListAutoSeparators: function (list) {
            var lis = list.children('li'),
                firstLetter, li;
            var separator = {};
            for (var i = 0; i < lis.length; i += 1) {
                li = $(lis[i]);
                if (!li.data('role')) {
                    if ($.trim(li.text())[0] !== firstLetter) {
                        firstLetter = $.trim(li.text())[0];
                        var element = $('<li data-role="separator" class="' +
                            this.toThemeProperty('jqx-listmenu-auto-separator') +
                            '">' + firstLetter + '</li>');
                        element.insertBefore(li);

                        element[0].items = new Array();
                        separator = element[0];
                    }
                    if (separator.items) {
                        separator.items[separator.items.length] = li[0];
                    }
                }
            }
        },

        _addListClasses: function (list) {
            list.addClass('jqx-listmenu');
        },

        _expandHierarchy: function (child, parent) {
            if (parent && child) {
                var pId = parent.id,
                    cId = child.id;
                this._childrenMap[pId] = cId;
                this._parentMap[cId] = pId;
            }
        },

        _handleSublist: function (list) {
            if (!this._currentPage || list !== this._currentPage[0]) {
                list.style.display = 'none';
            } else {
                list.style.display = 'block';
            }
        },

        _getChildrenByTagName: function (el, lcName, ucName) {
            var results = [],
                dict = {};
            dict[lcName] = dict[ucName] = true;
            el = el.firstChild;
            while (el) {
                if (dict[el.nodeName]) {
                    results.push(el);
                }
                el = el.nextSibling;
            }
            return results;
        },

        _renderFilterBar: function () {
            if (!this._filterBar) {
                this._filterBar = $('<div/>');
                this._filterInput = $('<input type="text" />');
                this._filterBar.append(this._filterInput);
                this.host.prepend(this._filterBar);
            }
            var IE7 = false;
            if ($.browser.msie && $.browser.version < 8) {
                IE7 = true;
            }

            if (!IE7) {
                this._filterInput.attr('placeholder', this.placeHolder);
            }

            if (!this.showFilter) {
                this._filterBar.css('display', 'none');
            } else {
                this._filterBar.css('display', 'block');
            }
        },

        _renderHeader: function () {
            if (!this._header) {
                this._header = $('<div/>');
                this.host.prepend(this._header);
                this._renderHeaderLabel();
            }
            this._renderBackButton();
            if (!this.showHeader) {
                this._header.css('display', 'none');
            } else {
                this._header.css('display', 'block');
            }
        },

        _renderHeaderLabel: function () {
            this._headerLabel = $('<span/>');
            this._headerLabel.addClass(this.toThemeProperty('jqx-listmenu-header-label'));
            this._header.append(this._headerLabel);
        },

        _renderBackButton: function () {
            if (!this._backButton) {
                this._backButton = $('<input type="button" value="' + this.backLabel + '"/>');
                this._header.prepend(this._backButton);
                this._backButton.jqxButton({ theme: this.theme });
            }
            if (!this.showBackButton) {
                this._backButton.css('display', 'none');
            } else {
                this._backButton.css('display', 'inline-block');
            }
        },

        _removeEventHandlers: function () {
            this.removeHandler(this._backButton, 'click');
            this.removeHandler(this._filterInput, 'keyup');
            this.removeHandler(this._filterInput, 'change');
        },

        _addEventHandlers: function () {
            var self = this;
            this.addHandler(this._backButton, 'click', function () {
                self.back();
            });
            this.addHandler(this._filterInput, 'keyup change', function () {
                self._filter($(this).val());
            });
        },

        _getChildList: function (li) {
            if (!li) return;
            var id = this._childrenMap[li.id],
                list;
            if (li.className.indexOf('jqx-listmenu-item') >= 0 && id) {
                return document.getElementById(id);
            }
            var childUl = this._getChildrenByTagName(li, 'ul', 'UL')[0],
            childOl = this._getChildrenByTagName(li, 'ol', 'OL')[0];
            list = childUl || childOl;
            return list;
        },

        _refreshLi: function (li, current, count) {
            if (li.parentNode && li.parentNode.getAttribute('data-role') === 'listmenu') {
                if (li.id == '') {
                    var i = 2;
                }
                this._handleLiId(li);
                this._renderLi(li);
                this._removeLiEventHandlers(li);
                this._addLiEventHandlers(li);
                this._addLiClasses(li, current, count);
            }
        },

        _handleLiId: function (li) {
            if (!li.id) {
                li.id = 'jqx-listmenu-item-' + listItemsCounter;
                listItemsCounter += 1;
            }
        },

        _renderLi: function (li) {
            if ((/(separator|header)/).test($(li).data('role')) ||
                $(li).children('.jqx-listmenu-arrow-right').length > 0) {
                return;
            }

            $(li).wrapInner('<span class="' + this.toThemeProperty('jqx-listmenu-item-label') + '"></span>');

            if (this.showNavigationArrows || this.alwaysShowNavigationArrows) {
                var arrow = $('<span/>');
                var nestedUL = $(li).find('ul');
                var nestedOL = $(li).find('ol');
                if (this.alwaysShowNavigationArrows || (((nestedUL.length > 0) && (/(listmenu)/).test(nestedUL.data('role'))) || ((nestedOL.length > 0) && (/(listmenu)/).test(nestedOL.data('role'))))) {
                    arrow.addClass(this.toThemeProperty('jqx-listmenu-arrow-right'));
                    arrow.addClass(this.toThemeProperty('icon-arrow-right'));
                    arrow.appendTo(li);
                }
            }
        },

        _removeLiEventHandlers: function (li) {
            var isTouchDevice = this.isTouchDevice();
            var mouseDownEvent = (!isTouchDevice ? 'mousedown' : 'touchstart') + '.listmenu';
            var mouseUpEvent = (!isTouchDevice ? 'mouseup' : 'touchend') + '.listmenu';

            this.removeHandler($(li), mouseDownEvent);
            this.removeHandler($(document), mouseUpEvent + '.' + li.id);
        },

        isTouchDevice: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
            }

            return isTouchDevice;
        },

        _addLiEventHandlers: function (li) {
            li = $(li);
            var self = this,
                pressed = this.toThemeProperty('jqx-listmenu-arrow-right-pressed'),
                arrow = li.children('.jqx-listmenu-arrow-right');
            var isTouchDevice = self.isTouchDevice();
            var mouseDownEvent = (!isTouchDevice ? 'mousedown' : 'touchstart') + '.listmenu';
            var mouseUpEvent = (!isTouchDevice ? 'mouseup' : 'touchend') + '.listmenu';
            var downLi = null;
            if (!(/(separator|readonly)/).test(li.data('role')) && !this.readOnly) {
                this.addHandler(li, 'dragstart', function () {
                    return false;
                });

                this.addHandler(li, mouseDownEvent, function (event) {
                    if (!self.disabled) {
                        downLi = event.target;
                        if (li.find('div[data-role="content"]').length == 0) {
                            li.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                            arrow.addClass(pressed);
                        }
                    }
                });
                this.addHandler(li, mouseUpEvent, function (event) {
                    if (!self.disabled) {
                        if (downLi == event.target || !isTouchDevice) {
                            self.next(li);
                        }
                    }
                });
                this.addHandler($(document), mouseUpEvent + '.' + li[0].id, function () {
                    if (!self.disabled) {
                        li.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        arrow.removeClass(pressed);
                    }
                });
            }
        },

        _addLiClasses: function (li, current, count) {
            li = $(li);
            if (li.data('role') === 'separator') {
                this._handleSeparatorStyle(li);
            } else if (li.data('role') === 'header') {
                this._handleHeaderStyle(li);
            } else {
                if (this.readOnly || li.data('role') === 'readonly') {
                    li.addClass(this.toThemeProperty('jqx-listmenu-item-readonly'));
                } else {
                    li.removeClass(this.toThemeProperty('jqx-listmenu-item-readonly'));
                }
                this._handleItemStyle(li);
            }
            if (current === 0 && !this.showHeader && !this.showFilter) {
                li.addClass(this.toThemeProperty('jqx-rc-t'));
            }
            if (current === count - 1) {
                li.addClass(this.toThemeProperty('jqx-rc-b'));
            }
        },

        _handleSeparatorStyle: function (li) {
            li.addClass(this.toThemeProperty('jqx-listmenu-separator'));
            li.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            li[0].style.listStyle = 'none';
        },

        _handleHeaderStyle: function (li) {
            li.css('display', 'none');
        },

        _handleItemStyle: function (li) {
            li.addClass(this.toThemeProperty('jqx-listmenu-item'));
            li.addClass(this.toThemeProperty('jqx-fill-state-normal'));
        },

        back: function () {
            var c = this._currentPage,
                parent;
            if (c) {
                parent = this._parentMap[c[0].id];
            }
            this._changePage(c, $('#' + parent).parent(), this.animationDuration, true);
        },

        next: function (li) {
            var id = li.attr('id'),
                childId = this._childrenMap[id],
                child = $('#' + childId),
                parent = $('#' + id).parent(); 6

            this._changePage(parent, child, this.animationDuration);
        },

        changePage: function (newPage) {
            if (typeof newPage === 'string') {
                newPage = $(newPage);
            }
            if (!newPage[0] || (newPage.attr('data-role') !== 'listmenu') || newPage.parents().index(this.host) < 0) {
                throw new Error('Invalid newPage. The chosen newPage is not listmenu or it\'s not part of the selected jqxListMenu hierarchy.');
            }
            if (this._currentPage[0] == newPage[0]) return;
            this._changePage(this._currentPage, newPage, this.animationDuration);
        },

        _changePage: function (oldPage, newPage, duration, back) {
            if (!this._lock) {
                var changeMethod = '_' + this.animationType + 'Change' + (back ? 'Back' : '');
                if (newPage[0]) {
                    if (this.showFilter) {
                        if (newPage.find('div[data-role="content"]').length > 0) {
                            $.each(newPage.find('li'), function () {
                                if ($(this).data('role') === 'separator') {
                                    $(this).hide();
                                }
                            });
                            this._filterBar.css('display', 'none');
                        }
                        else {
                            this._filterBar.css('display', 'block');
                        }
                    }

                    this._lock = true;
                    this[changeMethod](oldPage, newPage, this.animationDuration, function () {
                        this._lock = false;
                        this._changeHeader(newPage);
                        this._currentPage = newPage;
                    });
                }
            }
        },

        _changeHeader: function (page) {
            var header = $(page).find('li[data-role="header"]').first();
            if (header[0]) {
                var self = this;
                this._headerLabel.fadeOut(this.headerAnimationDuration / 2, function () {
                    self._headerLabel.html(header.html());
                    self._headerLabel.fadeIn(self.headerAnimationDuration / 2);
                });
            }
        },

        _slideChange: function (oldPage, newPage, duration, callback) {
            var self = this;
            if (this.enableScrolling && this.panel != null) {
                this.panel.jqxPanel('scrollTo', 0, 0);
            }
            this._initSlide(oldPage, newPage);
            oldPage.animate({ 'margin-left': -oldPage.width() - parseInt(oldPage.css('margin-right'), 10) || 0 }, duration, 'easeInOutSine');
            newPage.animate({ 'margin-left': 0 }, duration, 'easeInOutSine', function () {
                self._slideEnd(oldPage, newPage);
                callback.call(self, $(this));
            });
        },

        _initSlide: function (oldPage, newPage) {
            //     this.host.height(Math.max(oldPage.outerHeight(true), newPage.outerHeight(true)) + this._filterBar.outerHeight(true) + this._header.outerHeight(true));
            oldPage.width(oldPage.width());
            newPage.css({
                marginTop: -(oldPage.outerHeight(true)),
                marginLeft: oldPage.width() + (parseInt(oldPage.css('margin-right'), 10) || 0),
                display: 'block',
                height: 'auto',
                width: oldPage.width()
            });
        },

        _slideEnd: function (oldPage, newPage) {
            this.host.css('height', 'auto');
            oldPage.css({
                display: 'none',
                width: 'auto',
                height: 'auto',
                marginTop: 0,
                marginLeft: 0
            });
            newPage.css({
                marginTop: 0,
                marginLeft: 0,
                height: 'auto',
                width: 'auto',
                display: 'block'
            });
        },

        _slideChangeBack: function (oldPage, newPage, duration, callback) {
            var self = this;
            this._initSlideBack(oldPage, newPage);
            oldPage.animate({ 'margin-left': oldPage.width() + parseInt(oldPage.css('margin-right'), 10) || 0 }, duration);
            newPage.animate({ 'margin-left': 0 }, duration, function () {
                self._slideEnd(oldPage, newPage);
                callback.call(self, $(this));
            });
        },

        _initSlideBack: function (oldPage, newPage) {
            //     this.host.height(Math.max(oldPage.outerHeight(true), newPage.outerHeight(true)) + this._filterBar.outerHeight(true) + this._header.outerHeight(true));
            oldPage.css({
                marginTop: -(newPage.outerHeight(true)),
                width: oldPage.width()
            });
            newPage.css({
                width: oldPage.width(),
                marginLeft: -oldPage.width() - parseInt(oldPage.css('margin-right'), 10) || 0,
                display: 'block',
                height: 'auto'
            });
        },

        _fadeChangeBack: function (oldPage, newPage, duration, callback) {
            this._fadeChange(oldPage, newPage, duration, callback);
        },

        _fadeChange: function (oldPage, newPage, duration, callback) {
            var self = this;
            oldPage.fadeOut(duration / 2, function () {
                newPage.fadeIn(duration / 2, function () {
                    callback.call(self, $(this));
                });
            });
        },

        _removeClasses: function () {
            this._filterBar.removeClass(this.toThemeProperty('jqx-listmenu-filter'));
            this._filterBar.removeClass(this.toThemeProperty('jqx-widget-header'));
            this._filterInput.removeClass(this.toThemeProperty('jqx-listmenu-filter-input'));
            this._filterInput.removeClass(this.toThemeProperty('jqx-input'));
            this._header.removeClass(this.toThemeProperty('jqx-listmenu-header'));
            this._header.removeClass(this.toThemeProperty('jqx-widget-header'));
            this._header.removeClass(this.toThemeProperty('jqx-rc-t'));
            if (this.roundedCorners) {
                this.host.removeClass(this.toThemeProperty('jqx-rc-all'));
            }
            this.host.removeClass(this.toThemeProperty('jqx-widget'));
            this.host.removeClass(this.toThemeProperty('jqx-listmenu-widget'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-normal'));
            this.host.removeClass(this.toThemeProperty('jqx-reset'));
            if (this.host.find('div[data-role="content"]').length > 0) {
                this.host.find('div[data-role="content"]').removeClass(this.toThemeProperty('jqx-widget-content'));
            }
        },

        _addClasses: function () {
            if (this.roundedCorners) {
                this.host.addClass(this.toThemeProperty('jqx-rc-all'));
            }
            this.host.addClass('jqx-widget');
            this.host.addClass('jqx-listmenu-widget');
            this.host.addClass('jqx-fill-state-normal');
            this.host.addClass('jqx-reset');
            this._filterBar.addClass(this.toThemeProperty('jqx-listmenu-filter'));
            this._filterBar.addClass(this.toThemeProperty('jqx-widget-header'));
            this._filterInput.addClass(this.toThemeProperty('jqx-listmenu-filter-input'));
            this._filterInput.addClass(this.toThemeProperty('jqx-input'));
            this._header.addClass(this.toThemeProperty('jqx-listmenu-header'));
            this._header.addClass(this.toThemeProperty('jqx-widget-header'));
            this._header.addClass(this.toThemeProperty('jqx-rc-t'));
            if (this.host.find('div[data-role="content"]').length > 0) {
                this.host.find('div[data-role="content"]').addClass(this.toThemeProperty('jqx-widget-content'));
            }
        },

        _raiseEvent: function () {

        },

        _filter: function (searchValue) {
            var els = this.host.find('.jqx-listmenu-item');
            for (var i = 0; i < els.length; i += 1) {
                var value = $.trim($(els[i]).text());
                if (!this.filterCallback(value, searchValue)) {
                    els[i].style.display = 'none';
                } else {
                    els[i].style.display = 'block';
                }
            }
            var els = this.host.find('.jqx-listmenu-separator');
            for (var i = 0; i < els.length; i += 1) {
                var hasVisibleItems = false;
                $.each(els[i].items, function () {
                    if ($(this).css('display') != 'none') {
                        hasVisibleItems = true;
                        return false;
                    }
                });
                if (!hasVisibleItems) {
                    els[i].style.display = 'none';
                }
                else {
                    els[i].style.display = 'block';
                }
            }
        },

        disable: function () {
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.disabled = true;
        },

        enable: function () {
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.disabled = false;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key == 'disabled') {
                if (value)
                    object.disable();
                else object.enable();
            }

            if (key === 'backLabel') {
                object._backButton.html(value);
                return;
            } else if (key === 'placeHolder') {
                object._filterInput.attr('placeholder', value);
            } else if ((/(showFilter|showHeader|showBackButton|width|height|autoSeparators|readOnly)/).test(key)) {
                object._render();
                return;
            }
        }
    });

} (jQuery));﻿try
{
    (function ($, ko) {
        ko.jqwidgets = ko.jqwidgets || {};

        ko.jqwidgets.knockout = function (settings) {
            var me = this;
            var binding = {},
            name = settings.name;
     
            binding.init = function (element, valueAccessor, allBindingAccessor, viewModel) {
                var unwrappedValue = ko.utils.unwrapObservable(valueAccessor());
                var modelOptions = ko.toJS(unwrappedValue);
            
                if (settings['reset']) {
                    settings['reset']();
                }
                if ($.data(element)[name] == undefined) {
                    var options = [];
                    $(element)[name]();
                    widget = $.data(element)[name].instance;
                    $.each(settings, function (name, value) {
                        if (widget.hasOwnProperty(name) && modelOptions.hasOwnProperty(name)) {
                            if (!widget["koupdating"]) {
                                widget["koupdatingFromObservable"] = true;
                                if (ko.toJSON(modelOptions[name]) != ko.toJSON(widget[name])) {
                                    settings.setProperty(widget, name, widget[name], modelOptions[name]);
                                }
                                options[name] = name;
                                widget["koupdatingFromObservable"] = false;
                            }
                        }
                    });
                    var widgetSettings = {};
                    $.each(modelOptions, function(name, value)
                    {
                        if (options[name] == undefined) {
                            widgetSettings[name] = modelOptions[name];
                        }
                    });
                    widget.host[name](widgetSettings);
                }
                widget = $.data(element)[name].instance;
                widget["koupdatingFromObservable"] = false;
                widget["koupdating"] = false;

                if (settings.events) {
                    $.each(settings.events, function () {
                        var eventName = this;
                        $(element).bind(eventName + '.' + element.id, function (event) {
                            widget = $.data(element)[name].instance;
                            if (!widget["koupdatingFromObservable"]) {
                                widget["koupdating"] = true;
                                var val = valueAccessor();
                                var property = settings.getProperty(widget, event, eventName, unwrappedValue);
                                if (property != undefined) {
                                    if (val.hasOwnProperty(property.name) && $.isFunction(val[property.name])) {
                                        val[property.name](property.value);
                                    }
                                    else if (val[property.name]) {
                                        valueAccessor(property.value);
                                    }
                                }
                                widget["koupdating"] = false;
                            }
                        });
                    });
                }
            };

            binding.update = function (element, valueAccessor, allBindingAccessor, viewModel, bindingContext) {
                var unwrappedValue = ko.utils.unwrapObservable(valueAccessor());
                var modelOptions = ko.toJS(unwrappedValue);
                widget = $.data(element)[name].instance;
                if (widget["koupdating"])
                    return;

                $.each(settings, function (name, value) {
                    if (widget.hasOwnProperty(name) && modelOptions.hasOwnProperty(name)) {
                        if (!widget["koupdating"]){
                            widget["koupdatingFromObservable"] = true;
                            if (ko.toJSON(modelOptions[name]) != ko.toJSON(widget[name])) {
                                settings.setProperty(widget, name, widget[name], modelOptions[name]);
                            }
                            widget["koupdatingFromObservable"] = false;
                        }
                    }
                });
            };

            ko.bindingHandlers[settings.name] = binding;
        };

        // jqxGauge
        var jqxGauge = new ko.jqwidgets.knockout({
            name: "jqxGauge",
            disabled: false,
            min: 0,
            max: 220,
            value: 0,
            reset: function()
            {
                this.value = 0;
                this.max = 220;
                this.min = 0;
                this.disabled = false;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxGauge({ disabled: newValue });
                }
                if (key == 'min') {
                    object.host.jqxGauge({ min: newValue });
                }
                if (key == 'max') {
                    object.host.jqxGauge({ max: newValue });
                }
                if (key == 'value') {
                    object.host.jqxGauge({ value: newValue });
                }
            }
        });

        // jqxLinearGauge
        var jqxLinearGauge = new ko.jqwidgets.knockout({
            name: "jqxLinearGauge",
            disabled: false,
            min: 0,
            max: 220,
            value: 0,
            reset: function () {
                this.value = 0;
                this.max = 220;
                this.min = 0;
                this.disabled = false;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxLinearGauge({ disabled: newValue });
                }
                if (key == 'min') {
                    object.host.jqxLinearGauge({ min: newValue });
                }
                if (key == 'max') {
                    object.host.jqxLinearGauge({ max: newValue });
                }
                if (key == 'value') {
                    object.host.jqxLinearGauge({ value: newValue });
                }
            }
        });

        // jqxSlider
        var jqxSlider = new ko.jqwidgets.knockout({
            name: "jqxSlider",
            disabled: false,
            min: 0,
            max: 10,
            value: 0,
            reset: function () {
                this.value = 0;
                this.max = 10;
                this.min = 0;
                this.disabled = false;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    return { name: "value", value: event.args.value };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxSlider({ disabled: newValue });
                }
                if (key == 'min') {
                    object.host.jqxSlider({ min: parseFloat(newValue) });
                }
                if (key == 'max') {
                    object.host.jqxSlider({ max: parseFloat(newValue) });
                }
                if (key == 'value') {
                    object.host.jqxSlider({ value: parseFloat(newValue) });
                }
            }
        });

        // jqxScrollBar
        var jqxScrollBar = new ko.jqwidgets.knockout({
            name: "jqxScrollBar",
            disabled: false,
            min: 0,
            max: 10,
            value: 0,
            reset: function () {
                this.value = 0;
                this.max = 10;
                this.min = 0;
                this.disabled = false;
            },
            events: ['valuechanged'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: parseInt(event.currentValue) };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxScrollBar({ disabled: newValue });
                }
                if (key == 'min') {
                    object.host.jqxScrollBar({ min: parseFloat(newValue) });
                }
                if (key == 'max') {
                    object.host.jqxScrollBar({ max: parseFloat(newValue) });
                }
                if (key == 'value') {
                    object.host.jqxScrollBar({ value: parseFloat(newValue) });
                }
            }
        });

        // jqxProgressBar
        var jqxProgressBar = new ko.jqwidgets.knockout({
            name: "jqxProgressBar",
            disabled: false,
            value: 0,
            reset: function () {
                this.value = 0;
                this.disabled = false;
            },
            events: ['valuechanged'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: parseInt(event.currentValue) };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxProgressBar({ disabled: newValue });
                }
                if (key == 'value') {
                    object.host.jqxProgressBar({ value: parseFloat(newValue) });
                }
            }
        });
        // jqxButton
        var jqxButton = new ko.jqwidgets.knockout({
            name: "jqxButton",
            disabled: false,
            reset: function () {
                this.disabled = false;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxButton({ disabled: newValue });
                }
            }
        });

        // jqxCheckBox
        var jqxCheckBox = new ko.jqwidgets.knockout({
            name: "jqxCheckBox",
            checked: false,
            disabled: false,
            reset: function () {
                this.checked = false;
                this.disabled = false;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    return { name: "checked", value: event.args.checked };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxCheckBox({ disabled: newValue });
                }
                if (key == 'checked') {
                    if (value != newValue) {
                        object.host.jqxCheckBox({ checked: newValue });
                    }
                }
            }
        });

        // jqxRadioButton
        var jqxRadioButton = new ko.jqwidgets.knockout({
            name: "jqxRadioButton",
            checked: false,
            disabled: false,
            reset: function () {
                this.checked = false;
                this.disabled = false;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    return { name: "checked", value: event.args.checked };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'disabled') {
                    object.host.jqxRadioButton({ disabled: newValue });
                }
                if (key == 'checked') {
                    if (value != newValue) {
                        object.host.jqxRadioButton({ checked: newValue });
                    }
                }
            }
        });

        // jqxDateTimeInput
        var jqxDateTimeInput = new ko.jqwidgets.knockout({
            name: "jqxDateTimeInput",
            value: null,
            disabled: false,
            reset: function () {
                this.value = null;
                this.disabled = false;
            },
            events: ['valuechanged'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: event.args.date };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'value') {
                    object.setDate(newValue);
                }
                if (key == 'disabled') {
                    object.host.jqxDateTimeInput({ disabled: newValue });
                }
            }
        });

        // jqxCalendar
        var jqxCalendar = new ko.jqwidgets.knockout({
            name: "jqxCalendar",
            value: null,
            disabled: false,
            reset: function () {
                this.value = null;
                this.disabled = false;
            },
            events: ['valuechanged'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: event.args.date };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'value') {
                    object.setDate(newValue);
                }
                if (key == 'disabled') {
                    object.host.jqxCalendar({ disabled: newValue });
                }
            }
        });

        // jqxNumberInput
        var jqxNumberInput = new ko.jqwidgets.knockout({
            name: "jqxNumberInput",
            value: null,
            events: ['valuechanged'],
            disabled: false,
            reset: function () {
                this.value = null;
                this.disabled = false;
            },
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: object.val() };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'value') {
                    object.host.jqxNumberInput('val', newValue);
                }
                if (key == 'disabled') {
                    object.host.jqxNumberInput({ disabled: newValue });
                }
            }
        });

        // jqxMaskedInput
        var jqxMaskedInput = new ko.jqwidgets.knockout({
            name: "jqxMaskedInput",
            value: null,
            events: ['valuechanged'],
            disabled: false,
            reset: function () {
                this.value = null;
                this.disabled = false;
            },
            getProperty: function (object, event, eventName) {
                if (eventName == 'valuechanged') {
                    return { name: "value", value: object.val() };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'value') {
                    object.host.jqxMaskedInput('val', newValue);
                }
                if (key == 'disabled') {
                    object.host.jqxMaskedInput({ disabled: newValue });
                }
            }
        });

        // jqxListBox
        var jqxListBox = new ko.jqwidgets.knockout({
            name: "jqxListBox",
            source: null,
            disabled: false,
            selectedIndex: -1,
            reset: function () {
                this.disabled = false;
                this.selectedIndex = -1;
                this.source = null;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    this.selectedIndex = object.selectedIndex;
                    return { name: 'selectedIndex', value: object.selectedIndex };
                }

            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    object.source = newValue;
                    object.refresh();
                }
                if (key == 'disabled') {
                    object.disabled = newValue;
                    object._renderItems();
                }
                if (key == 'selectedIndex') {
                    var disabled = object.disabled;
                    object.disabled = false;
                    object.selectIndex(newValue);
                    object.disabled = disabled;
                    if (disabled) object._renderItems();
                }
            }
        });
        //jqxDropDownList
        var jqxDropDownList = new ko.jqwidgets.knockout({
            name: "jqxDropDownList",
            source: null,
            disabled: false,
            selectedIndex: -1,
            reset: function () {
                this.disabled = false;
                this.selectedIndex = -1;
                this.source = null;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    this.selectedIndex = object.selectedIndex;
                    return { name: 'selectedIndex', value: object.selectedIndex };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    if (this.source != newValue) {
                        this.source = newValue;
                        object.host.jqxDropDownList({ source: newValue });
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxDropDownList({ disabled: newValue });
                    }
                }
                if (key == 'selectedIndex') {
                    if (newValue != this.selectedIndex) {
                        this.selectedIndex = newValue;
                        object.host.jqxDropDownList({ selectedIndex: newValue });
                    }
                }
            }
        });

        //jqxComboBox
        var jqxComboBox = new ko.jqwidgets.knockout({
            name: "jqxComboBox",
            source: null,
            disabled: false,
            selectedIndex: -1,
            reset: function () {
                this.disabled = false;
                this.selectedIndex = -1;
                this.source = null;
            },
            events: ['change'],
            getProperty: function (object, event, eventName) {
                if (eventName == 'change') {
                    this.selectedIndex = object.selectedIndex;
                    return { name: 'selectedIndex', value: object.selectedIndex };
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    if (this.source != newValue) {
                        this.source = newValue;
                        object.host.jqxComboBox({ source: newValue });
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxComboBox({ disabled: newValue });
                    }
                }
                if (key == 'selectedIndex') {
                    if (newValue != this.selectedIndex) {
                        this.selectedIndex = newValue;
                        object.host.jqxComboBox({ selectedIndex: newValue });
                    }
                }
            }
        });

        //jqxTree
        var jqxTree = new ko.jqwidgets.knockout({
            name: "jqxTree",
            source: null,
            disabled: false,
            reset: function () {
                this.disabled = false;
                this.source = null;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    if (this.source != newValue) {
                        this.source = newValue;
                        object.host.jqxTree({ source: newValue });
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxTree({ disabled: newValue });
                    }
                }
            }
        });


        //jqxMenu
        var jqxMenu = new ko.jqwidgets.knockout({
            name: "jqxMenu",
            source: null,
            disabled: false,
            reset: function () {
                this.disabled = false;
                this.source = null;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    if (this.source != newValue) {
                        this.source = newValue;
                        object.host.jqxMenu({ source: newValue });
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxMenu({ disabled: newValue });
                    }
                }
            }
        });

        //jqxChart
        var jqxChart = new ko.jqwidgets.knockout({
            name: "jqxChart",
            source: null,
            disabled: false,
            reset: function () {
                this.disabled = false;
                this.source = null;
            },
            getProperty: function (object, event, eventName) {
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'source') {
                    if (newValue != this.source) {
                        this.source = newValue;
                        var animations = object.host.jqxChart('enableAnimations');
                        object.host.jqxChart({ enableAnimations: false });
                        object.host.jqxChart({ source: newValue });
                        setTimeout(function () {
                            object.host.jqxChart({ enableAnimations: animations });
                        }, 1000);
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxChart({ disabled: newValue });
                    }
                }
            }
        });

        //jqxGrid
        var jqxGrid = new ko.jqwidgets.knockout({
            name: "jqxGrid",
            source: null,
            disabled: false,
            selectedRowIndex: -1,
            reset: function () {
                this.disabled = false;
                this.source = null;
                this.selectedRowIndex = -1;
            },
            events: ['cellvaluechanged', 'cellselect', 'rowselect'],
            getProperty: function (object, event, eventName, modelOptions) {
                if (eventName == 'cellvaluechanged') {
                    var rowId = object.host.jqxGrid("getrowid", event.args.rowindex);
                    var rowdata = object.host.jqxGrid("getrowdata", rowId);
                    var source = modelOptions['source'];
                    if (source != undefined) {
                        source.replace(source()[rowId], rowdata);
                        return { name: 'source', value: ko.toJS(source) };
                    }
                }
            },
            setProperty: function (object, key, value, newValue) {
                if (key == 'selectedRowIndex') {
                    object.host.jqxGrid('selectrow', newValue);
                }
                if (key == 'source') {
                    if (this.source == null || newValue == null) {
                        if (this.source != newValue) {
                            this.source = newValue;
                            var source = {
                                localdata: newValue,
                                datatype: 'local'
                            }

                            var dataAdapter = new $.jqx.dataAdapter(source);
                            object.host.jqxGrid({ source: dataAdapter });
                        }
                    }
                    else {
                        var source = {
                            localdata: newValue,
                            datatype: 'local'
                        }

                        var dataAdapter = new $.jqx.dataAdapter(source);
                        dataAdapter.dataBind();
                 
                        if (!value.records || !dataAdapter.records) return;

                        
                        var itemsLength = Math.max(value.records.length, dataAdapter.records.length);
                        var changedRecords = Math.abs(value.records.length - dataAdapter.records.length);
                        if (changedRecords > 1) {
                            object.host.jqxGrid("beginupdate");
                        }

                        for (var i = 0; i < itemsLength; i++) {
                            var record = dataAdapter.records[i];
                            if (record == undefined) {
                                var rowId = object.host.jqxGrid("getrowid", i);
                                object.host.jqxGrid("deleterow", rowId);
                            }
                            else {
                                var update = value.records[i] != undefined;
                                if (update) {                           
                                    if (ko.toJSON(record) != ko.toJSON(value.records[i])) {
                                        if (value.records[i].uid != undefined) {
                                            record.uid = value.records[i].uid;
                                            if (ko.toJSON(record) == ko.toJSON(value.records[i])) {
                                                continue;
                                            }
                                        }

                                        var rowId = object.host.jqxGrid("getrowid", i);
                                        object.host.jqxGrid("updaterow", rowId, record);
                                    }
                                }
                                else {
                                    object.host.jqxGrid("addrow", null, record);
                                }
                            }
                        }
                        if (changedRecords > 1) {
                            object.host.jqxGrid("endupdate");
                        }
                    }
                }
                if (key == 'disabled') {
                    if (newValue != this.disabled) {
                        this.disabled = newValue;
                        object.host.jqxGrid({ disabled: newValue });
                    }
                }
            }
        });
    } (jQuery, ko));
}
catch(error){

}(function ($) {

    var instanceCounter = 0;

    $.jqx.jqxWidget('jqxScrollView', '', {});

    $.extend($.jqx._jqxScrollView.prototype, {

        defineInstance: function () {
            this.width = 320;
            this.height = 320;
            this.buttonsOffset = [0, 0];
            this.moveThreshold = 0.5;
            this.currentPage = 0;
            this.animationDuration = 300;
            this.showButtons = true;
            this.bounceEnabled = true;
            this.slideShow = false;
            this.slideDuration = 3000;
            this.disabled = false;
            this._mouseDown = false;
            this._movePermited = false;
            this._startX = -1;
            this._startOffset = -1;
            this._lastOffset = -1;
            this._events = ['pageChanged'];
            this._eventsMap = {
                'mousemove': 'touchmove',
                'mouseup': 'touchend',
                'mousedown': 'touchstart'
            };
        },

        createInstance: function () {
            instanceCounter += 1;
            this._instanceId = instanceCounter;
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
        },

        //Widget handling (rendering, attaching events, layout)
        refresh: function () {
            this._render();
            this._performLayout();
            if (this.moveThreshold.toString().indexOf('%') >= 0) {
                this.moveThreshold = parseInt(this.moveThreshold, 10) / 100;
            }
            this._refreshPages();
            this._refreshButtons();
            this._removeEventListeners();
            this._addEventListeners();
            this._changePage(this.currentPage, false, 0);
            if (this.slideShow) {
                var me = this;
                this.slideShowTimer = setInterval(function () {
                    if (me.currentPage >= me._pages.length - 1) {
                        me._changePage(0, true, me.animationDuration);
                    }
                    else {
                        me._changePage(me.currentPage + 1, true, me.animationDuration);
                    }
                }, this.slideDuration);
            }
            else {
                if (this.slideShowTimer != undefined) {
                    clearInterval(this.slideShowTimer);
                }
            }
        },

        destroy: function () {
            this.host.remove();
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                return this._eventsMap[event];
            }
            return event;
        },

        _eventNamespace: function () {
            return '.scrollview' + this._instanceId;
        },

        _removeEventListeners: function () {
            this.removeHandler(this._innerWrapper);
            this.removeHandler(this.host, this._getEvent('mousemove') + this._eventNamespace());
            this.removeHandler($(document), this._getEvent('mouseup') + this._eventNamespace());
        },

        _getCoordinate: function (event, property) {
            if (this._isTouchDevice) {
                return event.originalEvent.touches[0][property];
            }
            return event[property];
        },

        _draggedRight: function () {
            if (this.currentPage > 0) {
                var page = this.currentPage - 1,
                    currentPage = $(this._pages[page]),
                    pageRight = currentPage.offset().left + currentPage.outerWidth(),
                    diff = pageRight - this.host.offset().left;
                if (diff >= (this.host.width() * this.moveThreshold)) {
                    this.changePage(page);
                    return true;
                }
            }
            return false;
        },

        _draggedLeft: function () {
            if (this.currentPage + 1 < this._pages.length) {
                var page = this.currentPage + 1,
                    currentPage = $(this._pages[page]),
                    diff = this.host.width() - (currentPage.offset().left - this.host.offset().left);
                if (diff >= (this.host.width() * this.moveThreshold)) {
                    this.changePage(page);
                    return true;
                }
            }
            return false;
        },

        _dropTarget: function () {
            var changed;
            if (this._movedLeft) {
                changed = this._draggedLeft();
            } else {
                changed = this._draggedRight();
            }
            if (!changed) {
                this.changePage(this.currentPage, false);
            }
        },

        _scrollEnabled: function (e) {
            if (!this._mouseDown) {
                return false;
            }
            if (!this._movePermited) {
                if (this._isTouchDevice || Math.abs(this._getCoordinate(e, 'pageX') - this._startX) >= 5) {
                    this._movePermited = true;
                }
            }
            return this._movePermited;
        },

        _setMoveDirection: function (offset) {
            if (this._lastOffset > offset) {
                this._movedLeft = true;
            } else {
                this._movedLeft = false;
            }
        },

        _getBounceOffset: function (offset) {
            var minOffset = -(this._innerWrapper.width() - this.host.width());
            if (offset > 0) {
                offset = 0;
            } else if (offset < minOffset) {
                offset = minOffset;
            }
            return offset;
        },

        _addEventListeners: function () {
            var self = this;
            this.addHandler(this._innerWrapper, this._getEvent('mousedown') + this._eventNamespace(), function (e) {
                self._mouseDown = true;
                self._startX = self._getCoordinate(e, 'pageX');
                self._startOffset = self._lastOffset = parseInt(self._innerWrapper.css('margin-left'), 10);
            });
            this.addHandler(this.host, 'dragstart', function () {
                return false;
            });
            this.addHandler(this.host, this._getEvent('mousemove') + this._eventNamespace(), function (e) {
                if (self._scrollEnabled(e)) {
                    var offset = self._startOffset + self._getCoordinate(e, 'pageX') - self._startX;
                    if (!self.bounceEnabled) {
                        offset = self._getBounceOffset(offset);
                    }
                    self._innerWrapper.css('margin-left', offset);
                    self._setMoveDirection(offset);
                    self._lastOffset = offset;
                    e.preventDefault();
                    return false;
                }
                return true;
            });
            this.addHandler($(document), this._getEvent('mouseup') + this._eventNamespace(), function (e) {
                if (self._movePermited) {
                    self._dropTarget();
                }
                self._movePermited = false;
                self._mouseDown = false;
            });
            
            try
            {
                if (document.referrer != "" || window.frameElement) {
                    if (window.top != null) {
                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }
                    }

                    if (parentLocation.indexOf(document.location.host) != -1) {
                        var eventHandle = function (event) {
                            if (self._movePermited) {
                                self._dropTarget();
                            }
                            self._movePermited = false;
                            self._mouseDown = false;
                        };

                        if (window.top.document.addEventListener) {
                            window.top.document.addEventListener('mouseup', eventHandle, false);

                        } else if (window.top.document.attachEvent) {
                            window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                        }
                    }                      
                }
            }
            catch (error) {
            }
        },

        _render: function () {
            this.host.addClass(this.toThemeProperty('jqx-scrollview'));
            this.host.css({
                overflow: 'hidden',
                position: 'relative'
            });
        },

        _performLayout: function () {
            this.host.css({
                width: this.width,
                height: this.height
            });
        },
        //end of the general purpose widget handling

        //Pages handling
        _renderPages: function () {
            if (!this._innerWrapper) {
                this._innerWrapper = $('<div/>');
                this.host.wrapInner(this._innerWrapper);
                this._innerWrapper = this.host.children().first();
            }
            this._innerWrapper.addClass(this.toThemeProperty('jqx-scrollview-inner-wrapper'));
            this._innerWrapper.height(this.host.height());
        },

        _refreshPage: function (page) {
            page.addClass(this.toThemeProperty('jqx-scrollview-page'));
            this._performPageLayout(page);
        },

        _refreshPages: function () {
            var self = this,
                childrenSize = 0;
            this._renderPages();
            this._pages = this._innerWrapper.children();
            this._pages.each(function () {
                self._refreshPage($(this));
                childrenSize += $(this).outerWidth(true);
            });
            this._innerWrapper.width(childrenSize);
        },

        _performPageLayout: function (page) {
            page.css('float', 'left');
            page.width(this.host.width());
            page.height(this.host.height());
        },
        //end of the pages handling

        //Buttons handling
        _refreshButtons: function () {
            this._renderButtons();
            this._removeButtonsEventListeners();
            this._addButtonsEventListeners();
            this._performButtonsLayout();
        },

        //Taking care for memory leaks
        _removeButtonsEventListeners: function () {
            var self = this;
            this._buttonsContainer.children().each(function () {
                self.removeHandler($(this));
            });
        },

        _addButtonsEventListeners: function () {
            var self = this;
            this._buttonsContainer.children().each(function (idx) {
                self.addHandler($(this), 'click', function () {
                    self.changePage(idx);
                });
            });
        },

        _performButtonsLayout: function () {
            var middle = (this.host.width() - this._buttonsContainer.width()) / 2;
            this._buttonsContainer.css({
                position: 'absolute',
                left: middle + parseInt(this.buttonsOffset[0], 10),
                top: this.host.height() - 2 * this._buttonsContainer.outerHeight() +
                 parseInt(this.buttonsOffset[1], 10)
            });
        },

        _renderButtons: function () {
            if (this._buttonsContainer) {
                this._buttonsContainer.remove();
            }
            var page, button;
            this._buttons = [];
            this._buttonsContainer = $('<span/>');
            for (var i = 0; i < this._pages.length; i += 1) {
                button = $('<span class="' + this.toThemeProperty('jqx-scrollview-button') + ' ' +
                            this.toThemeProperty('jqx-fill-state-normal') + '"></span>');
                this._buttonsContainer.append(button);
                this._buttons[i] = button;
            }
            this._buttonsContainer.appendTo(this.host);
        },
        //end of the buttons handling

        _raiseEvent: function (idx, data) {
            var ev = new $.Event(this._events[idx]);
            ev.args = data;
            return this.host.trigger(ev);
        },

        _swapButtons: function (old, newButton) {
            this._buttons[old].removeClass(this.toThemeProperty('jqx-scrollview-button-selected'));
            this._buttons[old].removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this._buttons[newButton].addClass(this.toThemeProperty('jqx-scrollview-button-selected'));
            this._buttons[newButton].addClass(this.toThemeProperty('jqx-fill-state-pressed'));
        },

        _changePage: function (index, raiseEvent, duration) {
            if (this.disabled) return;

            var page = $(this._pages[index]),
                margin = (this.host.width() - page.width()) / 2,
                relativeOffset = page.offset().left - this._innerWrapper.offset().left - margin,
                oldPage = this.currentPage,
                self = this;
            if (typeof duration === 'undefined') {
                duration = this.animationDuration;
            }
            this._innerWrapper.stop();
            this._swapButtons(this.currentPage, index);
            this.currentPage = index;
            this._innerWrapper.animate({ marginLeft: -relativeOffset }, duration, function () {
                if (raiseEvent) {
                    self._raiseEvent(0, { currentPage: index, oldPage: oldPage });
                }
            });
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key === 'currentPage') {
                object.currentPage = oldvalue;
                object.changePage(value);
            } else if ((/(buttonsOffset|width|height)/).test(key)) {
                object.refresh();
            } else if (key === 'showButtons') {
                if (!value) {
                    object._buttonsContainer.css('display', 'none');
                } else {
                    object._buttonsContainer.css('display', 'block');
                }
                return;
            }
            else if (key == 'slideShow') {
                object.refresh();
            }
        },

        //Public methods
        changePage: function (index) {
            if (index >= this._pages.length || index < 0) {
                throw new Error('Invalid index!');
            }
            this._changePage(index, true);
        },

        forward: function () {
            if (this.currentPage + 1 < this._pages.length) {
                this.changePage(this.currentPage + 1);
            }
        },

        back: function () {
            if (this.currentPage - 1 >= 0) {
                this.changePage(this.currentPage - 1);
            }
        }
        //end of the public methods
    });
} (jQuery));(function ($) {

    var instanceCounter = 0;

    $.jqx.jqxWidget('jqxTouch', '', {});

    $.extend($.jqx._jqxTouch.prototype, {

        defineInstance: function () {
            //Defines the minimum swipe distance required by the plugin.
            this.swipeMin = 50;
            //Defines the maximum swipe distance. After it is passed the propagation of the event will be restored, therefore the scrolling will be available.
            this.swipeMax = 500;
            //The swipe delay. After it is passed swipe event won't be fired.
            this.swipeDelay = 1000;
            //The taphold delay. If this delay is passed then taphold event will be fired.
            this.tapHoldDelay = 750;
            //If this vertical distance is passed the swipe event (swapleft/swapright) won't be fired.
            this.swipeMaxVerticalDisance = 100;
            //If the horizontal distance is passed the swipe event (swipetop/swipebottom) won't be fired.
            this.swipeMaxHorizontalDisance = 100;
            //Indicates whether the orientationchange event is enabled.
            this.orientationChangeEnabled = true;

            //private data members
            this._eventsMap = {
                'mousedown': 'touchstart',
                'mouseup': 'touchend',
                'mousemove': 'touchmove'
            };
            this._swipeLocked = false;
            this._rotationInterval = 200;
            this._events = ['tap', 'taphold', 'swipe', 'swipeleft', 'swiperight', 'swipetop', 'swipebottom', 'orientationchange'];
            this._instanceId = -1;
        },

        createInstance: function () {
            instanceCounter += 1;
            this._instanceId = instanceCounter;
            this._isTouchDevice = $.jqx.mobile.isTouchDevice();
            this._defineRotateHandler();
        },

        refresh: function () {
            this._removeEventListeners();
            this._addEventListeners();
        },

        _defineRotateHandler: function () {
            var self = this;
            if (!this._rotateHandler) {
                this._rotateHandler = function () {
                    self._checkOrientation();
                }
            }
        },

        _getEvent: function (event) {
            if (this._isTouchDevice) {
                event = this._eventsMap[event];
            }
            return event + this._getEventNamespace();
        },

        _getEventNamespace: function () {
            return '.swipe' + this._instanceId;
        },

        _removeEventListeners: function () {
            clearInterval(this._rotateInterval);
            this.removeHandler($(document), this._getEvent('mouseup'));
            this.removeHandler(this.host, this._getEvent('mousedown'));
            this.removeHandler(this.host, this._getEvent('mousemove'));
            if (window.removeEventListener) {
                window.removeEventListener('resize', this._rotateHandler);
                window.removeEventListener('orientationchange', this._rotateHandler);
            }
        },

        _addEventListeners: function () {
            var self = this;
            this.addHandler(this.host, this._getEvent('mouseup'), function (e) {
                self._resetSwipe();
                self._resetTap();
            });
            this.addHandler(this.host, this._getEvent('mousedown'), function (e) {
                self._initSwipe(e);
                self._initTap(e);
            });
            this.addHandler(this.host, this._getEvent('mousemove'), function (e) {
                self._maxSwipeVerticalDistance = Math.max(self._maxSwipeVerticalDistance, Math.abs(self._startY - self._getCoordinates(e).y));
                self._maxSwipeHorizontalDistance = Math.max(self._maxSwipeHorizontalDistance, Math.abs(self._startX - self._getCoordinates(e).x));
                self._mouseMoved = true;
                return self._handleSwipeEvents(e);
            });
            this._rotationListeners();
        },

        _handleSwipeEvents: function (e) {
            var eventResult = true;
            if (this._mouseDown && !this._tapHoldFired) {
                eventResult = this._handleVerticalSwipeEvents(e);
                eventResult = this._handleHorizontalSwipeEvents(e);
            }
            this._lastPosition = this._getCoordinates(e);
            return eventResult;
        },

        _handleVerticalSwipeEvents: function (e) {
            var current, diff;
            current = this._getCoordinates(e).y;
            diff = current - this._startY;
            if (this._maxSwipeHorizontalDistance < this.swipeMaxHorizontalDisance) {
                return this._swiped(e, diff, 2);
            }
            return true;
        },

        _handleHorizontalSwipeEvents: function (e) {
            var current, diff;
            current = this._getCoordinates(e).x;
            diff = current - this._startX;
            if (this._maxSwipeVerticalDistance < this.swipeMaxVerticalDisance) {
                return this._swiped(e, diff);
            }
            return true;
        },

        _swiped: function (e, diff, direction) {
            direction = direction || 0;
            if (Math.abs(diff) >= this.swipeMin && !this._swipeEvent && !this._swipeLocked) {
                this._swipeEvent = this._getSwipeEvent(diff, direction)
            }
            //if (Math.abs(diff) <= this.swipeMax) {
             //   e.stopImmediatePropagation();
           //     return false;
           // }
            return true;
        },

        _getSwipeEvent: function (diff, direction) {
            var event;
            if (diff < 0) {
                event = { eventId: 3 + direction, data: { target: this.host }};
            } else {
                event = { eventId: 4 + direction, data: { target: this.host }};
            }
            return event;
        },

        _resetSwipe: function () {
            if (this._swipeEvent && !this._swipeLocked) {
                this._raiseEvent(2, this._swipeEvent.data);
                this._raiseEvent(this._swipeEvent.eventId, this._swipeEvent.data);
            }
            clearTimeout(this._swipeTimeout);
            this._mouseDown = false;
        },

        _resetTap: function () {
            clearTimeout(this._tapHoldTimeout);
            if (!this._tapHoldFired && !this._mouseMoved) {
                this._raiseEvent(0, { target: this.host });
            }
        },

        _initTap: function (e) {
            var self = this;
            this._mouseMoved = false;
            this._tapHoldFired = false;
            this._tapHoldTimeout = setTimeout(function () {
                if (!self._mouseMoved) {
                    self._raiseEvent(1, { target: this.host });
                    self._tapHoldFired = true;
                }
            }, this.tapHoldDelay);
        },

        _initSwipe: function (e) {
            var self = this;
            this._mouseDown = true;
            this._maxSwipeVerticalDistance = 0;
            this._maxSwipeHorizontalDistance = 0;
            this._startX = this._getCoordinates(e).x;
            this._startY = this._getCoordinates(e).y;
            this._swipeLocked = false;
            this._swipeEvent = null;
            this._swipeTimeout = setTimeout(function () {
                self._swipeLocked = true;
            }, this.swipeDelay);
        },

        _rotationListeners: function () {
            var self = this;
            this._previousOrientation = window.orientation;
            this._previousWidth = screen.width;
            if (this.orientationChangeEnabled) {
                if (window.addEventListener) {
                    window.addEventListener('resize', this._rotateHandler, false);
                    window.addEventListener('orientationchange', this._rotateHandler, false);
                }
                this._rotateInterval = setInterval(function () {
                    self._checkOrientation();
                }, this._rotationInterval);
            }
        },

        _checkOrientation: function () {
            var orientation = 'vertical';
            if (window.orientation !== this._previousOrientation || this._previousWidth !== screen.width) {
                if (window.orientation === 90 || screen.width > screen.height) {
                    orientation = 'horizontal';
                }
                this._raiseEvent(7, { orientation: orientation });
            }
            this._previousOrientation = window.orientation;
            this._previousWidth = screen.width;
        },

        _raiseEvent: function (eId, args) {
            var event = $.Event(this._events[eId]);
            event.args = args;
            return this.host.trigger(event);
        },

        _getCoordinates: function (e) {
            var c = { x: e.pageX, y: e.pageY };
            if (this._isTouchDevice) {
                c.x = e.originalEvent.touches[0].pageX;
                c.y = e.originalEvent.touches[0].pageY;
            }
            return c;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (key === 'orientationChangeEnabled') {
                this.refresh();
            } else {
                return;
            }
        },

        //Public mathods
        isTouchDevice: function () {
            return this._isTouchDevice;
        }

    });

} (jQuery));